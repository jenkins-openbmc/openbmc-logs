<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170809 11:01:07.822">
<suite id="s1" name="Tests" source="/tmp/fspcibld/10020/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:08.451">Dictionary does not contain key 'host'.</msg>
<status starttime="20170809 11:01:08.451" endtime="20170809 11:01:08.451" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:08.451">${has_host} = False</msg>
<status starttime="20170809 11:01:08.451" endtime="20170809 11:01:08.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170809 11:01:08.452" endtime="20170809 11:01:08.453" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:08.452" endtime="20170809 11:01:08.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:08.454">${port_num} = 22</msg>
<status starttime="20170809 11:01:08.454" endtime="20170809 11:01:08.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:08.454">${SSH_PORT} = 22</msg>
<status starttime="20170809 11:01:08.454" endtime="20170809 11:01:08.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:08.455">${https_num} = 443</msg>
<status starttime="20170809 11:01:08.455" endtime="20170809 11:01:08.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:08.456">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170809 11:01:08.455" endtime="20170809 11:01:08.456" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:08.453" endtime="20170809 11:01:08.456" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:08.453" endtime="20170809 11:01:08.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:08.457">Dictionary does not contain key 'port'.</msg>
<status starttime="20170809 11:01:08.457" endtime="20170809 11:01:08.457" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:08.457">${has_port} = False</msg>
<status starttime="20170809 11:01:08.456" endtime="20170809 11:01:08.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170809 11:01:08.458" endtime="20170809 11:01:08.459" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170809 11:01:08.459" endtime="20170809 11:01:08.459" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:08.458" endtime="20170809 11:01:08.459" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:08.457" endtime="20170809 11:01:08.459" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:08.461">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 11:01:10.207">Read output: root@witherspoon:~#</msg>
<status starttime="20170809 11:01:08.460" endtime="20170809 11:01:10.208" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:08.450" endtime="20170809 11:01:10.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:10.209">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170809 11:01:10.287">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 11:01:10.287">${output} = VERSION_ID="v1.99.8-201-ga13956a"</msg>
<msg level="INFO" timestamp="20170809 11:01:10.287">${stderr} = </msg>
<status starttime="20170809 11:01:10.209" endtime="20170809 11:01:10.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:10.288">Length is 0</msg>
<status starttime="20170809 11:01:10.288" endtime="20170809 11:01:10.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:10.288">VERSION_ID="v1.99.8-201-ga13956a"</msg>
<status starttime="20170809 11:01:10.288" endtime="20170809 11:01:10.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:10.209" endtime="20170809 11:01:10.289" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:10.208" endtime="20170809 11:01:10.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:10.290">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170809 11:01:10.409">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170809 11:01:10.409">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170809 11:01:10.409">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170809 11:01:10.290" endtime="20170809 11:01:10.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:10.410">Length is 81</msg>
<msg level="FAIL" timestamp="20170809 11:01:10.410">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170809 11:01:10.410" endtime="20170809 11:01:10.410" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:10.289" endtime="20170809 11:01:10.410" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:10.289" endtime="20170809 11:01:10.410" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:10.289" endtime="20170809 11:01:10.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:10.849">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:01:10.850">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 11:01:11.585">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170809 11:01:11.585">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 11:01:11.662">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 11:01:11.673">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 11:01:11.673">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 11:01:11.673">${rc} = 0</msg>
<status starttime="20170809 11:01:10.412" endtime="20170809 11:01:11.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:11.673">Length is 0</msg>
<status starttime="20170809 11:01:11.673" endtime="20170809 11:01:11.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:11.674">Length is 11</msg>
<status starttime="20170809 11:01:11.674" endtime="20170809 11:01:11.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:11.674">${bmc_model} = Witherspoon</msg>
<status starttime="20170809 11:01:10.411" endtime="20170809 11:01:11.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:11.675">BMC Model=Witherspoon</msg>
<status starttime="20170809 11:01:11.674" endtime="20170809 11:01:11.675" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:10.411" endtime="20170809 11:01:11.675" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:10.411" endtime="20170809 11:01:11.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:11.677">Dictionary does not contain key 'host'.</msg>
<status starttime="20170809 11:01:11.677" endtime="20170809 11:01:11.677" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:11.677">${has_host} = False</msg>
<status starttime="20170809 11:01:11.676" endtime="20170809 11:01:11.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170809 11:01:11.678" endtime="20170809 11:01:11.678" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.677" endtime="20170809 11:01:11.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:11.680">${port_num} = 22</msg>
<status starttime="20170809 11:01:11.680" endtime="20170809 11:01:11.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:11.681">${SSH_PORT} = 22</msg>
<status starttime="20170809 11:01:11.680" endtime="20170809 11:01:11.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:11.681">${https_num} = 443</msg>
<status starttime="20170809 11:01:11.681" endtime="20170809 11:01:11.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:11.682">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170809 11:01:11.682" endtime="20170809 11:01:11.682" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.679" endtime="20170809 11:01:11.682" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.679" endtime="20170809 11:01:11.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:11.683">Dictionary does not contain key 'port'.</msg>
<status starttime="20170809 11:01:11.683" endtime="20170809 11:01:11.683" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:11.683">${has_port} = False</msg>
<status starttime="20170809 11:01:11.682" endtime="20170809 11:01:11.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170809 11:01:11.685" endtime="20170809 11:01:11.685" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170809 11:01:11.685" endtime="20170809 11:01:11.685" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.684" endtime="20170809 11:01:11.686" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.684" endtime="20170809 11:01:11.686" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:11.686">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 11:01:13.339">Read output: root@witherspoon:~#</msg>
<status starttime="20170809 11:01:11.686" endtime="20170809 11:01:13.339" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.676" endtime="20170809 11:01:13.339" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.340">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170809 11:01:13.417">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 11:01:13.417">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170809 11:01:13.417">${stderr} = </msg>
<status starttime="20170809 11:01:13.340" endtime="20170809 11:01:13.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.418">Length is 0</msg>
<status starttime="20170809 11:01:13.417" endtime="20170809 11:01:13.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:13.418">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170809 11:01:13.339" endtime="20170809 11:01:13.418" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170809 11:01:13.418" endtime="20170809 11:01:13.418" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.675" endtime="20170809 11:01:13.419" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:11.675" endtime="20170809 11:01:13.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170809 11:01:13.419" endtime="20170809 11:01:13.419" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:08.449" endtime="20170809 11:01:13.419" status="PASS"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/10020/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/10020/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.502">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:13.502" endtime="20170809 11:01:13.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:13.503" endtime="20170809 11:01:13.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.504">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:13.504" endtime="20170809 11:01:13.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:13.504" endtime="20170809 11:01:13.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.734">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:13.506" endtime="20170809 11:01:13.735" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:13.735">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:13.735">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:13.505" endtime="20170809 11:01:13.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.735">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:13.735" endtime="20170809 11:01:13.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:13.736" endtime="20170809 11:01:13.736" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.501" endtime="20170809 11:01:13.736" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.501" endtime="20170809 11:01:13.736" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.501" endtime="20170809 11:01:13.737" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.742">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:13.741" endtime="20170809 11:01:13.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:13.742" endtime="20170809 11:01:13.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.743">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:13.743" endtime="20170809 11:01:13.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.744">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:13.744" endtime="20170809 11:01:13.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.949">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:13.745" endtime="20170809 11:01:13.949" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:13.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:13.949">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:13.744" endtime="20170809 11:01:13.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.950">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:13.950" endtime="20170809 11:01:13.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:13.950" endtime="20170809 11:01:13.951" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.741" endtime="20170809 11:01:13.951" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.740" endtime="20170809 11:01:13.951" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.739" endtime="20170809 11:01:13.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.952">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:01:13.951" endtime="20170809 11:01:13.952" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:13.954">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:13.953" endtime="20170809 11:01:13.954" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:13.955">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:13.955" endtime="20170809 11:01:13.955" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.954" endtime="20170809 11:01:13.955" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.953" endtime="20170809 11:01:13.955" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.952" endtime="20170809 11:01:13.955" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.043">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:14.043">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:13.956" endtime="20170809 11:01:14.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.045">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:14.044" endtime="20170809 11:01:14.045" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:14.046">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:14.046" endtime="20170809 11:01:14.046" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.045" endtime="20170809 11:01:14.046" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.044" endtime="20170809 11:01:14.046" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.043" endtime="20170809 11:01:14.046" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:14.047">Delete All Sessions</msg>
<status starttime="20170809 11:01:14.046" endtime="20170809 11:01:14.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.047">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:13.739" endtime="20170809 11:01:14.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:14.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:14.047" endtime="20170809 11:01:14.048" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.048">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:14.048">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:14.048">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:14.048" endtime="20170809 11:01:14.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.049">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170809 11:01:13.738" endtime="20170809 11:01:14.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.049">${host_state} = Off</msg>
<status starttime="20170809 11:01:13.738" endtime="20170809 11:01:14.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:14.050">Off != Quiesced</msg>
<status starttime="20170809 11:01:14.050" endtime="20170809 11:01:14.050" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.050">${status} = False</msg>
<status starttime="20170809 11:01:14.049" endtime="20170809 11:01:14.050" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.051">${status} = False</msg>
<status starttime="20170809 11:01:13.737" endtime="20170809 11:01:14.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170809 11:01:14.051" endtime="20170809 11:01:14.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170809 11:01:14.051" endtime="20170809 11:01:14.052" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.063">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170809 11:01:14.052" endtime="20170809 11:01:14.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.072">${FFDC_DIR_PATH} = </msg>
<status starttime="20170809 11:01:14.064" endtime="20170809 11:01:14.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.074">${cur_time} = 2017-08-09 11:01:14:074157</msg>
<status starttime="20170809 11:01:14.074" endtime="20170809 11:01:14.074" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.075">${cur_time} = 20170809110114074157</msg>
<status starttime="20170809 11:01:14.075" endtime="20170809 11:01:14.075" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.074" endtime="20170809 11:01:14.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.079">${FFDC_TIME} = 20170809110114074157</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.080">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170809 11:01:14.080" endtime="20170809 11:01:14.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.081">${suite_name} = 20170809110114074157_TestsSecurityTestSsl</msg>
<status starttime="20170809 11:01:14.081" endtime="20170809 11:01:14.081" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.082">${test_name} = TestSSLConnection</msg>
<status starttime="20170809 11:01:14.081" endtime="20170809 11:01:14.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.082">${test_name} = 20170809110114074157_TestSSLConnection</msg>
<status starttime="20170809 11:01:14.082" endtime="20170809 11:01:14.082" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.080" endtime="20170809 11:01:14.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.083">${FFDC_DIR_PATH} = /tmp/fspcibld/10020/obmc-robot/logs/20170809110114074157_TestsSecurityTestSsl/20170809110114074157_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170809 11:01:14.087">${FFDC_PREFIX} = 20170809110114074157_</msg>
<status starttime="20170809 11:01:14.073" endtime="20170809 11:01:14.087" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.073" endtime="20170809 11:01:14.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170809 11:01:14.088" endtime="20170809 11:01:14.088" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:01:14.089">Created directory '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs"&gt;/tmp/fspcibld/10020/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170809 11:01:14.088" endtime="20170809 11:01:14.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:14.090">File '/tmp/fspcibld/10020/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170809 11:01:14.089" endtime="20170809 11:01:14.090" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.090">${exist} = False</msg>
<status starttime="20170809 11:01:14.089" endtime="20170809 11:01:14.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:01:14.091">Created file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:01:14.091" endtime="20170809 11:01:14.091" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.090" endtime="20170809 11:01:14.091" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170809 11:01:14.092" endtime="20170809 11:01:14.092" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.093">${cur_time} = 2017-08-09 11:01:14:092689</msg>
<status starttime="20170809 11:01:14.093" endtime="20170809 11:01:14.093" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.093">${cur_time} = 20170809110114092689</msg>
<status starttime="20170809 11:01:14.093" endtime="20170809 11:01:14.093" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.094">${cur_time} = 20170809110114092689</msg>
<status starttime="20170809 11:01:14.092" endtime="20170809 11:01:14.094" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:01:14.094">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:01:14.094" endtime="20170809 11:01:14.095" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.052" endtime="20170809 11:01:14.095" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:13.737" endtime="20170809 11:01:14.095" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170809 11:01:13.500" endtime="20170809 11:01:14.095" status="PASS" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:14.096">Delete All Sessions</msg>
<status starttime="20170809 11:01:14.096" endtime="20170809 11:01:14.096" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170809 11:01:13.422" endtime="20170809 11:01:14.096" status="PASS"></status>
</suite>
<status starttime="20170809 11:01:13.419" endtime="20170809 11:01:14.099" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/10020/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.139">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:01:14.139" endtime="20170809 11:01:14.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.140">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:01:14.139" endtime="20170809 11:01:14.140" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.141">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:01:14.138" endtime="20170809 11:01:14.141" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.142">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:01:14.142" endtime="20170809 11:01:14.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.143">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:01:14.142" endtime="20170809 11:01:14.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.143">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:01:14.141" endtime="20170809 11:01:14.143" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.144">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 11:01:14.144" endtime="20170809 11:01:14.144" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:01:14.144" endtime="20170809 11:01:14.145" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.151">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 11:01:14.154">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 11:01:14.154">${output} = /tmp/fspcibld/10020/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 11:01:14.145" endtime="20170809 11:01:14.154" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 11:01:14.156" endtime="20170809 11:01:14.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 11:01:14.157" endtime="20170809 11:01:14.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.158">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 11:01:14.158" endtime="20170809 11:01:14.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.158">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 11:01:14.143" endtime="20170809 11:01:14.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.159">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170809 11:01:14.159" endtime="20170809 11:01:14.159" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:01:14.159" endtime="20170809 11:01:14.160" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.165">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 11:01:14.185">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 11:01:14.185">${os_con_pid} = </msg>
<status starttime="20170809 11:01:14.160" endtime="20170809 11:01:14.185" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170809 11:01:14.197" endtime="20170809 11:01:14.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.200">${cmd_buf} = kill -9 </msg>
<status starttime="20170809 11:01:14.200" endtime="20170809 11:01:14.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:01:14.202" endtime="20170809 11:01:14.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.204">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 11:01:14.204">${output} = None</msg>
<status starttime="20170809 11:01:14.204" endtime="20170809 11:01:14.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 11:01:14.205" endtime="20170809 11:01:14.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:14.231">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status starttime="20170809 11:01:14.208" endtime="20170809 11:01:14.232" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:14.207" endtime="20170809 11:01:14.232" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.206" endtime="20170809 11:01:14.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.232">${output} = </msg>
<status starttime="20170809 11:01:14.232" endtime="20170809 11:01:14.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.233">${loc_quiet} = 1</msg>
<status starttime="20170809 11:01:14.233" endtime="20170809 11:01:14.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170809 11:01:14.234" endtime="20170809 11:01:14.292" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.292">${rc} = 1</msg>
<msg level="INFO" timestamp="20170809 11:01:14.292">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170809 11:01:14.233" endtime="20170809 11:01:14.292" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.293">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170809 11:01:14.141" endtime="20170809 11:01:14.293" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:01:14.295">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170809 11:01:14.294" endtime="20170809 11:01:14.295" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.296">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 11:01:14.296" endtime="20170809 11:01:14.296" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:01:14.296" endtime="20170809 11:01:14.297" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.304">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 11:01:14.307">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 11:01:14.307">${output} = /tmp/fspcibld/10020/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 11:01:14.297" endtime="20170809 11:01:14.307" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 11:01:14.309" endtime="20170809 11:01:14.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 11:01:14.311" endtime="20170809 11:01:14.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.312">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 11:01:14.311" endtime="20170809 11:01:14.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:14.312">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 11:01:14.295" endtime="20170809 11:01:14.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.313">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170809 11:01:14.313" endtime="20170809 11:01:14.313" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:01:14.313" endtime="20170809 11:01:14.314" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.318">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170809 11:01:14.320">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 11:01:14.320">${output} = </msg>
<status starttime="20170809 11:01:14.314" endtime="20170809 11:01:14.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170809 11:01:14.323" endtime="20170809 11:01:14.324" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.138" endtime="20170809 11:01:14.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:14.325">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.327">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170809 11:01:14.326" endtime="20170809 11:01:14.327" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.328">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170809 11:01:14.328" endtime="20170809 11:01:14.328" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:14.333">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:14.333" endtime="20170809 11:01:14.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:14.336" endtime="20170809 11:01:14.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.337">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:14.337" endtime="20170809 11:01:14.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:14.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:14.338" endtime="20170809 11:01:14.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:15.002">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:14.339" endtime="20170809 11:01:15.002" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:15.002">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:15.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:14.338" endtime="20170809 11:01:15.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:15.003">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:15.003" endtime="20170809 11:01:15.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:15.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:15.003" endtime="20170809 11:01:15.004" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.332" endtime="20170809 11:01:15.004" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.331" endtime="20170809 11:01:15.004" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.329" endtime="20170809 11:01:15.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.005">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170809 11:01:15.004" endtime="20170809 11:01:15.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:15.005" endtime="20170809 11:01:15.005" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170809 11:01:15.006" endtime="20170809 11:01:15.006" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.007">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170809 11:01:15.007" endtime="20170809 11:01:15.007" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:15.008">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170809 11:01:15.008" endtime="20170809 11:01:15.008" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.008" endtime="20170809 11:01:15.009" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.006" endtime="20170809 11:01:15.009" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.544">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 11:01:15.544">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:15.009" endtime="20170809 11:01:15.544" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.545">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:15.545" endtime="20170809 11:01:15.545" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:15.546">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:15.546" endtime="20170809 11:01:15.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.545" endtime="20170809 11:01:15.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.544" endtime="20170809 11:01:15.547" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:15.547">Delete All Sessions</msg>
<status starttime="20170809 11:01:15.547" endtime="20170809 11:01:15.547" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:15.547">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:14.328" endtime="20170809 11:01:15.547" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:15.548">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:15.548" endtime="20170809 11:01:15.548" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.549">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:15.549">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:15.549">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:15.548" endtime="20170809 11:01:15.549" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.327" endtime="20170809 11:01:15.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170809 11:01:15.549" endtime="20170809 11:01:15.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:15.554">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:15.554" endtime="20170809 11:01:15.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.555">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:15.555" endtime="20170809 11:01:15.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.556">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:15.556" endtime="20170809 11:01:15.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:15.557">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:15.556" endtime="20170809 11:01:15.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:16.627">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:15.558" endtime="20170809 11:01:16.627" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:16.627">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:16.627">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:15.557" endtime="20170809 11:01:16.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:16.628">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:16.627" endtime="20170809 11:01:16.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:16.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:16.628" endtime="20170809 11:01:16.628" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.553" endtime="20170809 11:01:16.629" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.553" endtime="20170809 11:01:16.629" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.552" endtime="20170809 11:01:16.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:16.629">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:01:16.629" endtime="20170809 11:01:16.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:16.632">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:16.631" endtime="20170809 11:01:16.632" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:16.632">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:16.632" endtime="20170809 11:01:16.633" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:16.632" endtime="20170809 11:01:16.633" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:16.630" endtime="20170809 11:01:16.633" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:16.630" endtime="20170809 11:01:16.633" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.034">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:21.034">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:16.633" endtime="20170809 11:01:21.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.036">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:21.035" endtime="20170809 11:01:21.036" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.037">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:21.037" endtime="20170809 11:01:21.037" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.036" endtime="20170809 11:01:21.037" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.035" endtime="20170809 11:01:21.037" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.035" endtime="20170809 11:01:21.037" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:21.038">Delete All Sessions</msg>
<status starttime="20170809 11:01:21.038" endtime="20170809 11:01:21.038" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:21.038">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:15.552" endtime="20170809 11:01:21.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:21.038" endtime="20170809 11:01:21.039" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.039">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:21.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:21.039">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:21.039" endtime="20170809 11:01:21.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:21.040">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 11:01:15.551" endtime="20170809 11:01:21.040" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:21.040">${power_state} = Off</msg>
<status starttime="20170809 11:01:15.551" endtime="20170809 11:01:21.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:01:21.041" endtime="20170809 11:01:21.041" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.551" endtime="20170809 11:01:21.041" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.045">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:21.045" endtime="20170809 11:01:21.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:21.046" endtime="20170809 11:01:21.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.047">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:21.046" endtime="20170809 11:01:21.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:21.047" endtime="20170809 11:01:21.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.410">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:21.048" endtime="20170809 11:01:21.410" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:21.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:21.410">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:21.048" endtime="20170809 11:01:21.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:21.410" endtime="20170809 11:01:21.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:21.411" endtime="20170809 11:01:21.412" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.044" endtime="20170809 11:01:21.412" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.044" endtime="20170809 11:01:21.412" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.043" endtime="20170809 11:01:21.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.412">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:01:21.412" endtime="20170809 11:01:21.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.415">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:21.414" endtime="20170809 11:01:21.415" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.415">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:21.415" endtime="20170809 11:01:21.416" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.415" endtime="20170809 11:01:21.416" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.413" endtime="20170809 11:01:21.416" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.413" endtime="20170809 11:01:21.416" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.782">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:21.783">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:21.416" endtime="20170809 11:01:21.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.784">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:21.784" endtime="20170809 11:01:21.785" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.786">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:21.785" endtime="20170809 11:01:21.786" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.785" endtime="20170809 11:01:21.786" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.783" endtime="20170809 11:01:21.786" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.783" endtime="20170809 11:01:21.786" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:21.787">Delete All Sessions</msg>
<status starttime="20170809 11:01:21.786" endtime="20170809 11:01:21.787" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:21.787">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:21.042" endtime="20170809 11:01:21.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:21.787" endtime="20170809 11:01:21.788" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.788">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:21.788">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:21.788">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:21.788" endtime="20170809 11:01:21.788" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:21.788">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170809 11:01:21.042" endtime="20170809 11:01:21.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:21.789">${host_state} = Off</msg>
<status starttime="20170809 11:01:21.041" endtime="20170809 11:01:21.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:01:21.789" endtime="20170809 11:01:21.789" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.550" endtime="20170809 11:01:21.789" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:15.550" endtime="20170809 11:01:21.790" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:14.326" endtime="20170809 11:01:21.790" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.791">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170809 11:01:21.790" endtime="20170809 11:01:21.791" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.792">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170809 11:01:21.792" endtime="20170809 11:01:21.792" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:21.794">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:21.794" endtime="20170809 11:01:21.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:21.795" endtime="20170809 11:01:21.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.796">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:21.796" endtime="20170809 11:01:21.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:21.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:21.796" endtime="20170809 11:01:21.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:22.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:21.797" endtime="20170809 11:01:22.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:22.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:22.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:21.797" endtime="20170809 11:01:22.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:22.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:22.350" endtime="20170809 11:01:22.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:22.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:22.350" endtime="20170809 11:01:22.351" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.794" endtime="20170809 11:01:22.351" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.793" endtime="20170809 11:01:22.351" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.793" endtime="20170809 11:01:22.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:22.352">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170809 11:01:22.351" endtime="20170809 11:01:22.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:22.352">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:22.352" endtime="20170809 11:01:22.352" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170809 11:01:22.353" endtime="20170809 11:01:22.353" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:22.355">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20170809 11:01:22.354" endtime="20170809 11:01:22.355" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:22.356">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170809 11:01:22.356" endtime="20170809 11:01:22.356" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:22.355" endtime="20170809 11:01:22.356" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:22.353" endtime="20170809 11:01:22.356" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:23.144">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 11:01:23.144">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:22.356" endtime="20170809 11:01:23.144" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:23.146">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:23.145" endtime="20170809 11:01:23.146" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:23.147">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:23.147" endtime="20170809 11:01:23.147" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:23.146" endtime="20170809 11:01:23.147" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:23.144" endtime="20170809 11:01:23.148" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:23.148">Delete All Sessions</msg>
<status starttime="20170809 11:01:23.148" endtime="20170809 11:01:23.148" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:23.148">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:21.792" endtime="20170809 11:01:23.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:23.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:23.149" endtime="20170809 11:01:23.149" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:23.150">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:23.150">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:23.150">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:23.149" endtime="20170809 11:01:23.150" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:21.791" endtime="20170809 11:01:23.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170809 11:01:23.150" endtime="20170809 11:01:23.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:23.156">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:23.155" endtime="20170809 11:01:23.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:23.156">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:23.156" endtime="20170809 11:01:23.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:23.157">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:23.157" endtime="20170809 11:01:23.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:23.158">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:23.157" endtime="20170809 11:01:23.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:24.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:23.158" endtime="20170809 11:01:24.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:24.711">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:24.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:23.158" endtime="20170809 11:01:24.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:24.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:24.711" endtime="20170809 11:01:24.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:24.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:24.712" endtime="20170809 11:01:24.712" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:23.154" endtime="20170809 11:01:24.712" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:23.154" endtime="20170809 11:01:24.712" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:23.153" endtime="20170809 11:01:24.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:24.713">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:01:24.713" endtime="20170809 11:01:24.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:24.715">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:24.715" endtime="20170809 11:01:24.715" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:24.716">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:24.716" endtime="20170809 11:01:24.716" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:24.716" endtime="20170809 11:01:24.717" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:24.714" endtime="20170809 11:01:24.717" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:24.713" endtime="20170809 11:01:24.717" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:28.131">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:28.132">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:24.717" endtime="20170809 11:01:28.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:28.134">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:28.133" endtime="20170809 11:01:28.134" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:28.135">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:28.134" endtime="20170809 11:01:28.135" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:28.134" endtime="20170809 11:01:28.135" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:28.133" endtime="20170809 11:01:28.135" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:28.132" endtime="20170809 11:01:28.135" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:28.135">Delete All Sessions</msg>
<status starttime="20170809 11:01:28.135" endtime="20170809 11:01:28.135" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:28.136">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:23.153" endtime="20170809 11:01:28.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:28.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:28.136" endtime="20170809 11:01:28.136" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:28.137">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:28.137">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:28.137">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:28.137" endtime="20170809 11:01:28.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:28.137">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 11:01:23.152" endtime="20170809 11:01:28.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:28.138">${power_state} = Off</msg>
<status starttime="20170809 11:01:23.152" endtime="20170809 11:01:28.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:28.138">On != Off</msg>
<status starttime="20170809 11:01:28.138" endtime="20170809 11:01:28.138" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:23.151" endtime="20170809 11:01:28.139" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:23.151" endtime="20170809 11:01:28.139" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:38.144">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:38.144" endtime="20170809 11:01:38.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:38.145">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:38.145" endtime="20170809 11:01:38.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:38.146">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:38.145" endtime="20170809 11:01:38.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:38.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:38.146" endtime="20170809 11:01:38.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:39.577">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:38.147" endtime="20170809 11:01:39.577" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:39.577">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:39.577">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:38.147" endtime="20170809 11:01:39.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:39.578">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:39.578" endtime="20170809 11:01:39.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:39.579">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:39.578" endtime="20170809 11:01:39.579" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:38.143" endtime="20170809 11:01:39.579" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:38.143" endtime="20170809 11:01:39.579" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:38.142" endtime="20170809 11:01:39.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.580">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:01:39.579" endtime="20170809 11:01:39.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.582">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:39.581" endtime="20170809 11:01:39.582" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:39.583">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:39.583" endtime="20170809 11:01:39.583" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.582" endtime="20170809 11:01:39.583" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.580" endtime="20170809 11:01:39.583" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.580" endtime="20170809 11:01:39.583" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.982">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:39.982">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:39.584" endtime="20170809 11:01:39.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.984">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:39.984" endtime="20170809 11:01:39.984" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:39.985">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:39.985" endtime="20170809 11:01:39.985" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.984" endtime="20170809 11:01:39.985" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.983" endtime="20170809 11:01:39.986" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.983" endtime="20170809 11:01:39.986" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:39.986">Delete All Sessions</msg>
<status starttime="20170809 11:01:39.986" endtime="20170809 11:01:39.986" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:39.986">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:38.142" endtime="20170809 11:01:39.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:39.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:39.987" endtime="20170809 11:01:39.987" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.988">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:39.988">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:39.988">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:39.987" endtime="20170809 11:01:39.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:39.988">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:01:38.141" endtime="20170809 11:01:39.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:39.988">${power_state} = On</msg>
<status starttime="20170809 11:01:38.141" endtime="20170809 11:01:39.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:01:39.989" endtime="20170809 11:01:39.989" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:38.140" endtime="20170809 11:01:39.989" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:39.993">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:39.992" endtime="20170809 11:01:39.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.993">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:39.993" endtime="20170809 11:01:39.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.994">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:39.994" endtime="20170809 11:01:39.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:39.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:39.994" endtime="20170809 11:01:39.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:40.428">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:39.995" endtime="20170809 11:01:40.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:40.428">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:40.428">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:39.995" endtime="20170809 11:01:40.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:40.429">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:40.429" endtime="20170809 11:01:40.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:40.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:40.429" endtime="20170809 11:01:40.430" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.992" endtime="20170809 11:01:40.430" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.991" endtime="20170809 11:01:40.430" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:39.991" endtime="20170809 11:01:40.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:40.431">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:01:40.430" endtime="20170809 11:01:40.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:40.433">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:40.432" endtime="20170809 11:01:40.433" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:40.434">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:40.434" endtime="20170809 11:01:40.434" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:40.433" endtime="20170809 11:01:40.434" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:40.432" endtime="20170809 11:01:40.434" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:40.431" endtime="20170809 11:01:40.434" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:41.285">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:41.285">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:40.435" endtime="20170809 11:01:41.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:41.287">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:41.286" endtime="20170809 11:01:41.287" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:41.288">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:41.288" endtime="20170809 11:01:41.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:41.287" endtime="20170809 11:01:41.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:41.286" endtime="20170809 11:01:41.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:41.285" endtime="20170809 11:01:41.288" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:41.289">Delete All Sessions</msg>
<status starttime="20170809 11:01:41.288" endtime="20170809 11:01:41.289" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:41.289">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:39.990" endtime="20170809 11:01:41.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:41.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:41.289" endtime="20170809 11:01:41.290" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:41.290">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:41.290">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:41.290">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:41.290" endtime="20170809 11:01:41.290" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:41.291">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170809 11:01:39.990" endtime="20170809 11:01:41.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:41.291">${host_state} = Off</msg>
<status starttime="20170809 11:01:39.989" endtime="20170809 11:01:41.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:41.292">Running != Off</msg>
<status starttime="20170809 11:01:41.291" endtime="20170809 11:01:41.292" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:38.139" endtime="20170809 11:01:41.292" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.297">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:51.297" endtime="20170809 11:01:51.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.298">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:51.298" endtime="20170809 11:01:51.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.299">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:51.299" endtime="20170809 11:01:51.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.300">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:51.299" endtime="20170809 11:01:51.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.869">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:51.300" endtime="20170809 11:01:51.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:51.869">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:51.869">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:51.300" endtime="20170809 11:01:51.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.870">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:51.869" endtime="20170809 11:01:51.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:51.870" endtime="20170809 11:01:51.871" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.297" endtime="20170809 11:01:51.871" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.296" endtime="20170809 11:01:51.871" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.295" endtime="20170809 11:01:51.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.871">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:01:51.871" endtime="20170809 11:01:51.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.874">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:51.873" endtime="20170809 11:01:51.874" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.874">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:51.874" endtime="20170809 11:01:51.875" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.874" endtime="20170809 11:01:51.875" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.872" endtime="20170809 11:01:51.875" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.872" endtime="20170809 11:01:51.875" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:51.962">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:51.875" endtime="20170809 11:01:51.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:51.963" endtime="20170809 11:01:51.964" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.968">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:51.968" endtime="20170809 11:01:51.968" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.964" endtime="20170809 11:01:51.969" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.963" endtime="20170809 11:01:51.969" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.962" endtime="20170809 11:01:51.969" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:51.969">Delete All Sessions</msg>
<status starttime="20170809 11:01:51.969" endtime="20170809 11:01:51.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:51.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:51.294" endtime="20170809 11:01:51.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:51.970" endtime="20170809 11:01:51.970" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.971">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:51.971">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:51.971">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:51.970" endtime="20170809 11:01:51.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:51.971">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:01:51.294" endtime="20170809 11:01:51.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:51.972">${power_state} = On</msg>
<status starttime="20170809 11:01:51.293" endtime="20170809 11:01:51.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:01:51.972" endtime="20170809 11:01:51.973" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.293" endtime="20170809 11:01:51.973" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:51.978">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:51.977" endtime="20170809 11:01:51.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:51.978" endtime="20170809 11:01:51.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.979">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:51.979" endtime="20170809 11:01:51.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:51.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:51.980" endtime="20170809 11:01:51.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:52.511">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:51.983" endtime="20170809 11:01:52.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:52.511">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:52.511">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:51.982" endtime="20170809 11:01:52.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:52.512">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:52.512" endtime="20170809 11:01:52.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:52.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:52.512" endtime="20170809 11:01:52.513" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.976" endtime="20170809 11:01:52.513" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.976" endtime="20170809 11:01:52.513" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:51.975" endtime="20170809 11:01:52.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.514">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:01:52.513" endtime="20170809 11:01:52.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.516">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:52.515" endtime="20170809 11:01:52.516" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:52.517">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:01:52.517" endtime="20170809 11:01:52.517" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.516" endtime="20170809 11:01:52.517" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.514" endtime="20170809 11:01:52.518" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.514" endtime="20170809 11:01:52.518" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.712">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:52.712">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:52.518" endtime="20170809 11:01:52.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.714">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:52.714" endtime="20170809 11:01:52.714" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:52.715">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:52.715" endtime="20170809 11:01:52.715" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.714" endtime="20170809 11:01:52.715" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.713" endtime="20170809 11:01:52.715" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.713" endtime="20170809 11:01:52.715" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:52.716">Delete All Sessions</msg>
<status starttime="20170809 11:01:52.716" endtime="20170809 11:01:52.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:52.716">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:51.974" endtime="20170809 11:01:52.716" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:52.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:52.716" endtime="20170809 11:01:52.717" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.717">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:52.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:52.717">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:52.717" endtime="20170809 11:01:52.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:52.718">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:01:51.973" endtime="20170809 11:01:52.718" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:52.718">${host_state} = Running</msg>
<status starttime="20170809 11:01:51.973" endtime="20170809 11:01:52.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:01:52.719" endtime="20170809 11:01:52.719" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:52.723">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:01:52.723" endtime="20170809 11:01:52.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:01:52.724" endtime="20170809 11:01:52.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.725">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:01:52.725" endtime="20170809 11:01:52.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:52.726">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:01:52.725" endtime="20170809 11:01:52.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:53.119">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:01:52.726" endtime="20170809 11:01:53.120" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:53.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:01:53.120">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:52.726" endtime="20170809 11:01:53.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:53.121">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:53.120" endtime="20170809 11:01:53.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:53.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:53.121" endtime="20170809 11:01:53.122" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.722" endtime="20170809 11:01:53.122" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.722" endtime="20170809 11:01:53.122" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:52.722" endtime="20170809 11:01:53.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:53.123">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:01:53.123" endtime="20170809 11:01:53.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:53.126">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:01:53.125" endtime="20170809 11:01:53.126" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:53.128">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:01:53.127" endtime="20170809 11:01:53.128" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:53.126" endtime="20170809 11:01:53.128" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:53.124" endtime="20170809 11:01:53.128" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:53.124" endtime="20170809 11:01:53.128" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:53.341">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:01:53.341">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:53.128" endtime="20170809 11:01:53.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:53.343">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:53.343" endtime="20170809 11:01:53.343" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:53.344">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:01:53.344" endtime="20170809 11:01:53.344" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:53.343" endtime="20170809 11:01:53.344" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:53.342" endtime="20170809 11:01:53.344" status="PASS"></status>
</kw>
<status starttime="20170809 11:01:53.342" endtime="20170809 11:01:53.344" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:01:53.345">Delete All Sessions</msg>
<status starttime="20170809 11:01:53.345" endtime="20170809 11:01:53.345" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:53.345">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:01:52.721" endtime="20170809 11:01:53.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:01:53.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:01:53.345" endtime="20170809 11:01:53.346" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:01:53.346">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:01:53.346">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:01:53.346">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:01:53.346" endtime="20170809 11:01:53.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:53.347">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:01:52.720" endtime="20170809 11:01:53.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:01:53.347">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:01:52.720" endtime="20170809 11:01:53.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:01:53.348">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:01:53.347" endtime="20170809 11:01:53.348" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:52.719" endtime="20170809 11:01:53.348" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:51.292" endtime="20170809 11:01:53.348" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.354">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:03.353" endtime="20170809 11:02:03.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.355">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:03.354" endtime="20170809 11:02:03.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.355">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:03.355" endtime="20170809 11:02:03.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.356">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:03.356" endtime="20170809 11:02:03.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.534">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:03.357" endtime="20170809 11:02:03.534" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.534">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:03.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:03.356" endtime="20170809 11:02:03.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.535">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:03.535" endtime="20170809 11:02:03.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:03.536" endtime="20170809 11:02:03.536" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.353" endtime="20170809 11:02:03.536" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.352" endtime="20170809 11:02:03.536" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.351" endtime="20170809 11:02:03.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.537">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:02:03.537" endtime="20170809 11:02:03.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.539">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:03.538" endtime="20170809 11:02:03.539" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.540">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:03.540" endtime="20170809 11:02:03.540" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.539" endtime="20170809 11:02:03.540" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.538" endtime="20170809 11:02:03.540" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.537" endtime="20170809 11:02:03.540" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.603">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:03.603">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:03.540" endtime="20170809 11:02:03.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.605">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:03.604" endtime="20170809 11:02:03.605" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.606">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:03.606" endtime="20170809 11:02:03.606" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.605" endtime="20170809 11:02:03.606" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.604" endtime="20170809 11:02:03.606" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.603" endtime="20170809 11:02:03.607" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:03.607">Delete All Sessions</msg>
<status starttime="20170809 11:02:03.607" endtime="20170809 11:02:03.607" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:03.351" endtime="20170809 11:02:03.607" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:03.607" endtime="20170809 11:02:03.608" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.608">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:03.608">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:03.609">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:03.608" endtime="20170809 11:02:03.609" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.609">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:02:03.350" endtime="20170809 11:02:03.609" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.609">${power_state} = On</msg>
<status starttime="20170809 11:02:03.350" endtime="20170809 11:02:03.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:02:03.610" endtime="20170809 11:02:03.610" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.349" endtime="20170809 11:02:03.610" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.613">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:03.613" endtime="20170809 11:02:03.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:03.614" endtime="20170809 11:02:03.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.615">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:03.615" endtime="20170809 11:02:03.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:03.615" endtime="20170809 11:02:03.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.896">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:03.616" endtime="20170809 11:02:03.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:03.897">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:03.616" endtime="20170809 11:02:03.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.897">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:03.897" endtime="20170809 11:02:03.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:03.898" endtime="20170809 11:02:03.898" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.613" endtime="20170809 11:02:03.898" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.612" endtime="20170809 11:02:03.898" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.612" endtime="20170809 11:02:03.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.899">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:02:03.898" endtime="20170809 11:02:03.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.901">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:03.900" endtime="20170809 11:02:03.901" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.903">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:03.902" endtime="20170809 11:02:03.903" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.902" endtime="20170809 11:02:03.903" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.900" endtime="20170809 11:02:03.903" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.899" endtime="20170809 11:02:03.903" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.992">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:03.992">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:03.904" endtime="20170809 11:02:03.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.994">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:03.994" endtime="20170809 11:02:03.994" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.995">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:03.995" endtime="20170809 11:02:03.995" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.994" endtime="20170809 11:02:03.995" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.993" endtime="20170809 11:02:03.995" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:03.993" endtime="20170809 11:02:03.995" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:03.996">Delete All Sessions</msg>
<status starttime="20170809 11:02:03.996" endtime="20170809 11:02:03.996" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.996">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:03.611" endtime="20170809 11:02:03.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:03.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:03.996" endtime="20170809 11:02:03.997" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:03.997">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:03.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:03.997">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:03.997" endtime="20170809 11:02:03.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.998">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:02:03.610" endtime="20170809 11:02:03.998" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:03.998">${host_state} = Running</msg>
<status starttime="20170809 11:02:03.610" endtime="20170809 11:02:03.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:02:03.998" endtime="20170809 11:02:03.999" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:04.003">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:04.002" endtime="20170809 11:02:04.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.004">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:04.003" endtime="20170809 11:02:04.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.005">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:04.004" endtime="20170809 11:02:04.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:04.005" endtime="20170809 11:02:04.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:04.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:04.006" endtime="20170809 11:02:04.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:04.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:04.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:04.006" endtime="20170809 11:02:04.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:04.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:04.227" endtime="20170809 11:02:04.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:04.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:04.228" endtime="20170809 11:02:04.228" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.002" endtime="20170809 11:02:04.228" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.001" endtime="20170809 11:02:04.228" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.001" endtime="20170809 11:02:04.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.229">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:02:04.229" endtime="20170809 11:02:04.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.231">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:04.230" endtime="20170809 11:02:04.231" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:04.232">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:04.232" endtime="20170809 11:02:04.232" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.231" endtime="20170809 11:02:04.232" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.230" endtime="20170809 11:02:04.232" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.229" endtime="20170809 11:02:04.232" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.301">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:04.301">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:04.233" endtime="20170809 11:02:04.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.303">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:04.303" endtime="20170809 11:02:04.303" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:04.304">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:04.304" endtime="20170809 11:02:04.304" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.303" endtime="20170809 11:02:04.304" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.302" endtime="20170809 11:02:04.304" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:04.302" endtime="20170809 11:02:04.304" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:04.305">Delete All Sessions</msg>
<status starttime="20170809 11:02:04.305" endtime="20170809 11:02:04.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:04.305">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:04.000" endtime="20170809 11:02:04.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:04.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:04.305" endtime="20170809 11:02:04.306" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:04.306">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:04.306">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:04.307">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:04.306" endtime="20170809 11:02:04.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:04.307">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:03.999" endtime="20170809 11:02:04.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:04.307">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:03.999" endtime="20170809 11:02:04.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:02:04.308">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:02:04.308" endtime="20170809 11:02:04.308" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:03.999" endtime="20170809 11:02:04.309" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:03.349" endtime="20170809 11:02:04.309" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.314">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:14.314" endtime="20170809 11:02:14.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:14.315" endtime="20170809 11:02:14.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.316">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:14.316" endtime="20170809 11:02:14.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:14.316" endtime="20170809 11:02:14.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.608">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:14.317" endtime="20170809 11:02:14.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.608">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:14.608">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:14.317" endtime="20170809 11:02:14.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.609">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:14.609" endtime="20170809 11:02:14.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:14.609" endtime="20170809 11:02:14.610" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.313" endtime="20170809 11:02:14.610" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.313" endtime="20170809 11:02:14.610" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.312" endtime="20170809 11:02:14.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.611">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:02:14.610" endtime="20170809 11:02:14.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.613">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:14.612" endtime="20170809 11:02:14.613" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.614">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:14.614" endtime="20170809 11:02:14.614" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.613" endtime="20170809 11:02:14.614" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.612" endtime="20170809 11:02:14.614" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.611" endtime="20170809 11:02:14.615" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.695">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:14.695">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:14.615" endtime="20170809 11:02:14.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.697">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:14.696" endtime="20170809 11:02:14.697" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.698">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:14.698" endtime="20170809 11:02:14.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.697" endtime="20170809 11:02:14.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.696" endtime="20170809 11:02:14.699" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.696" endtime="20170809 11:02:14.699" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:14.699">Delete All Sessions</msg>
<status starttime="20170809 11:02:14.699" endtime="20170809 11:02:14.699" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.699">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:14.311" endtime="20170809 11:02:14.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:14.700" endtime="20170809 11:02:14.700" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.700">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:14.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:14.701">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:14.700" endtime="20170809 11:02:14.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.701">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:02:14.311" endtime="20170809 11:02:14.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.701">${power_state} = On</msg>
<status starttime="20170809 11:02:14.310" endtime="20170809 11:02:14.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:02:14.702" endtime="20170809 11:02:14.702" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.310" endtime="20170809 11:02:14.702" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.706">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:14.705" endtime="20170809 11:02:14.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.707">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:14.706" endtime="20170809 11:02:14.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.707">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:14.707" endtime="20170809 11:02:14.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.708">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:14.708" endtime="20170809 11:02:14.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.885">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:14.709" endtime="20170809 11:02:14.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.885">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:14.885">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:14.708" endtime="20170809 11:02:14.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.886">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:14.885" endtime="20170809 11:02:14.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:14.886" endtime="20170809 11:02:14.887" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.705" endtime="20170809 11:02:14.887" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.704" endtime="20170809 11:02:14.887" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.704" endtime="20170809 11:02:14.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.887">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:02:14.887" endtime="20170809 11:02:14.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.890">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:14.889" endtime="20170809 11:02:14.890" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.891">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:14.891" endtime="20170809 11:02:14.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.890" endtime="20170809 11:02:14.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.888" endtime="20170809 11:02:14.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.888" endtime="20170809 11:02:14.891" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.991">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:14.991">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:14.891" endtime="20170809 11:02:14.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.993">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:14.992" endtime="20170809 11:02:14.993" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.994">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:14.994" endtime="20170809 11:02:14.994" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.993" endtime="20170809 11:02:14.994" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.992" endtime="20170809 11:02:14.994" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:14.992" endtime="20170809 11:02:14.994" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:14.995">Delete All Sessions</msg>
<status starttime="20170809 11:02:14.995" endtime="20170809 11:02:14.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:14.703" endtime="20170809 11:02:14.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:14.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:14.995" endtime="20170809 11:02:14.996" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:14.996">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:14.996">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:14.996">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:14.996" endtime="20170809 11:02:14.996" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.997">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:02:14.703" endtime="20170809 11:02:14.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:14.997">${host_state} = Running</msg>
<status starttime="20170809 11:02:14.702" endtime="20170809 11:02:14.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:02:14.997" endtime="20170809 11:02:14.998" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:15.002">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:15.001" endtime="20170809 11:02:15.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.003">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:15.002" endtime="20170809 11:02:15.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.003">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:15.003" endtime="20170809 11:02:15.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.004">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:15.004" endtime="20170809 11:02:15.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:15.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:15.005" endtime="20170809 11:02:15.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:15.191">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:15.191">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:15.004" endtime="20170809 11:02:15.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:15.192">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:15.191" endtime="20170809 11:02:15.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:15.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:15.192" endtime="20170809 11:02:15.192" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.001" endtime="20170809 11:02:15.192" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.000" endtime="20170809 11:02:15.193" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.000" endtime="20170809 11:02:15.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.193">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:02:15.193" endtime="20170809 11:02:15.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.195">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:15.195" endtime="20170809 11:02:15.196" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:15.196">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:15.196" endtime="20170809 11:02:15.197" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.196" endtime="20170809 11:02:15.197" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.194" endtime="20170809 11:02:15.197" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.194" endtime="20170809 11:02:15.197" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.263">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:15.263">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:15.197" endtime="20170809 11:02:15.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.265">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:15.265" endtime="20170809 11:02:15.265" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:15.266">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:15.266" endtime="20170809 11:02:15.266" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.265" endtime="20170809 11:02:15.266" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.264" endtime="20170809 11:02:15.266" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:15.264" endtime="20170809 11:02:15.267" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:15.267">Delete All Sessions</msg>
<status starttime="20170809 11:02:15.267" endtime="20170809 11:02:15.267" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:15.267">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:14.999" endtime="20170809 11:02:15.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:15.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:15.268" endtime="20170809 11:02:15.268" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:15.268">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:15.268">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:15.269">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:15.268" endtime="20170809 11:02:15.269" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:15.269">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:14.998" endtime="20170809 11:02:15.269" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:15.269">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:14.998" endtime="20170809 11:02:15.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:02:15.270">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:02:15.269" endtime="20170809 11:02:15.270" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:14.998" endtime="20170809 11:02:15.270" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:14.309" endtime="20170809 11:02:15.270" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.276">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:25.276" endtime="20170809 11:02:25.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.277">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:25.277" endtime="20170809 11:02:25.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.278">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:25.277" endtime="20170809 11:02:25.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.278">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:25.278" endtime="20170809 11:02:25.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.455">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:25.279" endtime="20170809 11:02:25.455" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.455">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:25.455">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.279" endtime="20170809 11:02:25.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.456">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:25.456" endtime="20170809 11:02:25.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:25.456" endtime="20170809 11:02:25.457" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.275" endtime="20170809 11:02:25.457" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.275" endtime="20170809 11:02:25.457" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.273" endtime="20170809 11:02:25.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.457">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:02:25.457" endtime="20170809 11:02:25.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.460">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:25.459" endtime="20170809 11:02:25.460" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.460">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:25.460" endtime="20170809 11:02:25.461" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.460" endtime="20170809 11:02:25.461" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.458" endtime="20170809 11:02:25.461" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.458" endtime="20170809 11:02:25.461" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.522">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:25.522">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.461" endtime="20170809 11:02:25.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.527">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:25.524" endtime="20170809 11:02:25.527" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.528">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:25.528" endtime="20170809 11:02:25.528" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.527" endtime="20170809 11:02:25.528" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.523" endtime="20170809 11:02:25.528" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.523" endtime="20170809 11:02:25.528" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:25.529">Delete All Sessions</msg>
<status starttime="20170809 11:02:25.529" endtime="20170809 11:02:25.529" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.529">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.273" endtime="20170809 11:02:25.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:25.529" endtime="20170809 11:02:25.530" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.530">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:25.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:25.530">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:25.530" endtime="20170809 11:02:25.530" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.531">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:02:25.272" endtime="20170809 11:02:25.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.531">${power_state} = On</msg>
<status starttime="20170809 11:02:25.272" endtime="20170809 11:02:25.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:02:25.531" endtime="20170809 11:02:25.532" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.271" endtime="20170809 11:02:25.532" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.536">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:25.535" endtime="20170809 11:02:25.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:25.536" endtime="20170809 11:02:25.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.537">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:25.537" endtime="20170809 11:02:25.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:25.538" endtime="20170809 11:02:25.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.746">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:25.540" endtime="20170809 11:02:25.746" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.746">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:25.746">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.539" endtime="20170809 11:02:25.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:25.746" endtime="20170809 11:02:25.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:25.747" endtime="20170809 11:02:25.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.535" endtime="20170809 11:02:25.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.534" endtime="20170809 11:02:25.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.534" endtime="20170809 11:02:25.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.748">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:02:25.748" endtime="20170809 11:02:25.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.777">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:25.750" endtime="20170809 11:02:25.777" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.779">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:25.778" endtime="20170809 11:02:25.779" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.778" endtime="20170809 11:02:25.779" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.749" endtime="20170809 11:02:25.779" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.749" endtime="20170809 11:02:25.779" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.903">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:25.903">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.780" endtime="20170809 11:02:25.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.905">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:25.904" endtime="20170809 11:02:25.905" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.906">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:25.906" endtime="20170809 11:02:25.906" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.905" endtime="20170809 11:02:25.906" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.904" endtime="20170809 11:02:25.906" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.904" endtime="20170809 11:02:25.906" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:25.907">Delete All Sessions</msg>
<status starttime="20170809 11:02:25.906" endtime="20170809 11:02:25.907" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.907">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.533" endtime="20170809 11:02:25.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:25.907" endtime="20170809 11:02:25.908" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.908">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:25.908">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:25.908">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:25.908" endtime="20170809 11:02:25.908" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.909">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:02:25.532" endtime="20170809 11:02:25.909" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:25.909">${host_state} = Running</msg>
<status starttime="20170809 11:02:25.532" endtime="20170809 11:02:25.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:02:25.909" endtime="20170809 11:02:25.909" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:25.913">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:25.913" endtime="20170809 11:02:25.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.914">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:25.914" endtime="20170809 11:02:25.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.915">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:25.915" endtime="20170809 11:02:25.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:25.916">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:25.915" endtime="20170809 11:02:25.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:26.132">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:25.916" endtime="20170809 11:02:26.132" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:26.132">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:26.132">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.916" endtime="20170809 11:02:26.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:26.133">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:26.133" endtime="20170809 11:02:26.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:26.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:26.133" endtime="20170809 11:02:26.134" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.912" endtime="20170809 11:02:26.134" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.912" endtime="20170809 11:02:26.134" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:25.912" endtime="20170809 11:02:26.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:26.135">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:02:26.134" endtime="20170809 11:02:26.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:26.137">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:26.136" endtime="20170809 11:02:26.137" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:26.138">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:26.137" endtime="20170809 11:02:26.138" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:26.137" endtime="20170809 11:02:26.138" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:26.135" endtime="20170809 11:02:26.138" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:26.135" endtime="20170809 11:02:26.138" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:26.253">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:26.254">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:26.138" endtime="20170809 11:02:26.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:26.255">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:26.255" endtime="20170809 11:02:26.255" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:26.256">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:26.256" endtime="20170809 11:02:26.256" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:26.256" endtime="20170809 11:02:26.257" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:26.254" endtime="20170809 11:02:26.257" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:26.254" endtime="20170809 11:02:26.257" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:26.257">Delete All Sessions</msg>
<status starttime="20170809 11:02:26.257" endtime="20170809 11:02:26.257" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:26.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:25.911" endtime="20170809 11:02:26.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:26.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:26.258" endtime="20170809 11:02:26.258" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:26.259">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:26.259">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:26.259">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:26.258" endtime="20170809 11:02:26.259" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:26.259">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:25.910" endtime="20170809 11:02:26.259" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:26.259">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:25.910" endtime="20170809 11:02:26.259" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:02:26.260">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:02:26.260" endtime="20170809 11:02:26.260" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:25.910" endtime="20170809 11:02:26.260" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:25.271" endtime="20170809 11:02:26.260" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.267">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:36.266" endtime="20170809 11:02:36.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.267">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:36.267" endtime="20170809 11:02:36.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.268">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:36.268" endtime="20170809 11:02:36.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.269">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:36.268" endtime="20170809 11:02:36.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.446">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:36.269" endtime="20170809 11:02:36.447" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.447">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:36.447">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.269" endtime="20170809 11:02:36.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.447">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:36.447" endtime="20170809 11:02:36.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:36.448" endtime="20170809 11:02:36.448" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.266" endtime="20170809 11:02:36.448" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.265" endtime="20170809 11:02:36.448" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.265" endtime="20170809 11:02:36.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.449">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:02:36.449" endtime="20170809 11:02:36.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.452">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:36.451" endtime="20170809 11:02:36.452" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.453">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:36.452" endtime="20170809 11:02:36.453" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.452" endtime="20170809 11:02:36.453" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.450" endtime="20170809 11:02:36.453" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.449" endtime="20170809 11:02:36.453" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:36.517">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.454" endtime="20170809 11:02:36.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.519">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:36.518" endtime="20170809 11:02:36.519" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.520">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:36.520" endtime="20170809 11:02:36.520" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.519" endtime="20170809 11:02:36.520" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.518" endtime="20170809 11:02:36.520" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.517" endtime="20170809 11:02:36.520" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:36.521">Delete All Sessions</msg>
<status starttime="20170809 11:02:36.521" endtime="20170809 11:02:36.521" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.264" endtime="20170809 11:02:36.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:36.521" endtime="20170809 11:02:36.522" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.522">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:36.522">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:36.522">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:36.522" endtime="20170809 11:02:36.522" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.523">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:02:36.263" endtime="20170809 11:02:36.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.523">${power_state} = On</msg>
<status starttime="20170809 11:02:36.262" endtime="20170809 11:02:36.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:02:36.523" endtime="20170809 11:02:36.524" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.262" endtime="20170809 11:02:36.524" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.527">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:36.527" endtime="20170809 11:02:36.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.528">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:36.528" endtime="20170809 11:02:36.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.529">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:36.528" endtime="20170809 11:02:36.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.529">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:36.529" endtime="20170809 11:02:36.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.726">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:36.530" endtime="20170809 11:02:36.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.726">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:36.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.530" endtime="20170809 11:02:36.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.727">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:36.727" endtime="20170809 11:02:36.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:36.727" endtime="20170809 11:02:36.728" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.526" endtime="20170809 11:02:36.728" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.526" endtime="20170809 11:02:36.728" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.525" endtime="20170809 11:02:36.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.729">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:02:36.728" endtime="20170809 11:02:36.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.731">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:36.730" endtime="20170809 11:02:36.731" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.732">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:36.731" endtime="20170809 11:02:36.732" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.731" endtime="20170809 11:02:36.732" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.729" endtime="20170809 11:02:36.732" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.729" endtime="20170809 11:02:36.732" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.848">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:36.848">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.732" endtime="20170809 11:02:36.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.850">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:36.849" endtime="20170809 11:02:36.850" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.851">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:36.850" endtime="20170809 11:02:36.851" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.850" endtime="20170809 11:02:36.851" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.849" endtime="20170809 11:02:36.851" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.848" endtime="20170809 11:02:36.851" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:36.851">Delete All Sessions</msg>
<status starttime="20170809 11:02:36.851" endtime="20170809 11:02:36.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.525" endtime="20170809 11:02:36.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:36.852" endtime="20170809 11:02:36.853" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.853">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:36.853">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:36.853">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:36.853" endtime="20170809 11:02:36.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.854">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:02:36.524" endtime="20170809 11:02:36.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:36.854">${host_state} = Running</msg>
<status starttime="20170809 11:02:36.524" endtime="20170809 11:02:36.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:02:36.854" endtime="20170809 11:02:36.854" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:36.860">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:36.860" endtime="20170809 11:02:36.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.861">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:36.861" endtime="20170809 11:02:36.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.863">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:36.862" endtime="20170809 11:02:36.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:36.864">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:36.863" endtime="20170809 11:02:36.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:37.147">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:36.865" endtime="20170809 11:02:37.147" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:37.147">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:37.147">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.864" endtime="20170809 11:02:37.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:37.148">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:37.147" endtime="20170809 11:02:37.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:37.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:37.148" endtime="20170809 11:02:37.149" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.858" endtime="20170809 11:02:37.149" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.858" endtime="20170809 11:02:37.149" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:36.857" endtime="20170809 11:02:37.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:37.149">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:02:37.149" endtime="20170809 11:02:37.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:37.151">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:37.151" endtime="20170809 11:02:37.152" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:37.152">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:37.152" endtime="20170809 11:02:37.153" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:37.152" endtime="20170809 11:02:37.153" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:37.150" endtime="20170809 11:02:37.153" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:37.150" endtime="20170809 11:02:37.153" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:37.220">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:37.221">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:37.153" endtime="20170809 11:02:37.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:37.223">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:37.222" endtime="20170809 11:02:37.223" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:37.224">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:37.224" endtime="20170809 11:02:37.224" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:37.223" endtime="20170809 11:02:37.224" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:37.222" endtime="20170809 11:02:37.224" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:37.221" endtime="20170809 11:02:37.224" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:37.225">Delete All Sessions</msg>
<status starttime="20170809 11:02:37.224" endtime="20170809 11:02:37.225" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:37.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:36.856" endtime="20170809 11:02:37.225" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:37.226">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:37.225" endtime="20170809 11:02:37.226" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:37.226">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:37.226">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:37.226">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:37.226" endtime="20170809 11:02:37.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:37.227">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:36.855" endtime="20170809 11:02:37.227" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:37.227">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:36.855" endtime="20170809 11:02:37.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:02:37.228">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:02:37.227" endtime="20170809 11:02:37.228" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:36.855" endtime="20170809 11:02:37.228" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:36.261" endtime="20170809 11:02:37.228" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.233">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:47.233" endtime="20170809 11:02:47.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:47.234" endtime="20170809 11:02:47.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.235">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:47.234" endtime="20170809 11:02:47.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:47.235" endtime="20170809 11:02:47.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:47.236" endtime="20170809 11:02:47.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.429">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:47.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.236" endtime="20170809 11:02:47.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.430">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:47.429" endtime="20170809 11:02:47.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:47.430" endtime="20170809 11:02:47.430" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.232" endtime="20170809 11:02:47.431" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.232" endtime="20170809 11:02:47.431" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.231" endtime="20170809 11:02:47.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.431">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:02:47.431" endtime="20170809 11:02:47.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.433">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:47.433" endtime="20170809 11:02:47.434" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.434">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:47.434" endtime="20170809 11:02:47.435" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.434" endtime="20170809 11:02:47.435" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.432" endtime="20170809 11:02:47.435" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.432" endtime="20170809 11:02:47.435" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.498">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:47.498">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.435" endtime="20170809 11:02:47.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.500">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:47.500" endtime="20170809 11:02:47.500" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.501">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:47.501" endtime="20170809 11:02:47.501" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.500" endtime="20170809 11:02:47.501" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.499" endtime="20170809 11:02:47.501" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.499" endtime="20170809 11:02:47.501" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:47.502">Delete All Sessions</msg>
<status starttime="20170809 11:02:47.502" endtime="20170809 11:02:47.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.502">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.230" endtime="20170809 11:02:47.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:47.502" endtime="20170809 11:02:47.503" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.503">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:47.503">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:47.503">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:47.503" endtime="20170809 11:02:47.503" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.504">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:02:47.230" endtime="20170809 11:02:47.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.504">${power_state} = On</msg>
<status starttime="20170809 11:02:47.229" endtime="20170809 11:02:47.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:02:47.504" endtime="20170809 11:02:47.505" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.229" endtime="20170809 11:02:47.505" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.509">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:47.509" endtime="20170809 11:02:47.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.511">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:47.510" endtime="20170809 11:02:47.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.512">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:47.511" endtime="20170809 11:02:47.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.512">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:47.512" endtime="20170809 11:02:47.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.725">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:47.513" endtime="20170809 11:02:47.725" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:47.725">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.513" endtime="20170809 11:02:47.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:47.725" endtime="20170809 11:02:47.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:47.726" endtime="20170809 11:02:47.727" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.508" endtime="20170809 11:02:47.727" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.507" endtime="20170809 11:02:47.727" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.507" endtime="20170809 11:02:47.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.728">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:02:47.727" endtime="20170809 11:02:47.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.730">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:47.729" endtime="20170809 11:02:47.730" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.731">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:47.730" endtime="20170809 11:02:47.731" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.730" endtime="20170809 11:02:47.731" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.728" endtime="20170809 11:02:47.731" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.728" endtime="20170809 11:02:47.731" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.853">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:47.853">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.731" endtime="20170809 11:02:47.853" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.855">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:47.854" endtime="20170809 11:02:47.855" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.855">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:47.855" endtime="20170809 11:02:47.856" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.855" endtime="20170809 11:02:47.856" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.854" endtime="20170809 11:02:47.856" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.853" endtime="20170809 11:02:47.856" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:47.856">Delete All Sessions</msg>
<status starttime="20170809 11:02:47.856" endtime="20170809 11:02:47.856" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.506" endtime="20170809 11:02:47.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:47.857" endtime="20170809 11:02:47.857" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.858">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:47.858">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:47.858">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:47.858" endtime="20170809 11:02:47.858" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.858">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:02:47.505" endtime="20170809 11:02:47.858" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:47.859">${host_state} = Running</msg>
<status starttime="20170809 11:02:47.505" endtime="20170809 11:02:47.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:02:47.859" endtime="20170809 11:02:47.859" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:47.866">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:47.866" endtime="20170809 11:02:47.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:47.867" endtime="20170809 11:02:47.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.868">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:47.868" endtime="20170809 11:02:47.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:47.869">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:47.868" endtime="20170809 11:02:47.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:48.122">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:47.869" endtime="20170809 11:02:48.122" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:48.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:48.123">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.869" endtime="20170809 11:02:48.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:48.123">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:48.123" endtime="20170809 11:02:48.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:48.124">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:48.124" endtime="20170809 11:02:48.124" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.866" endtime="20170809 11:02:48.124" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.865" endtime="20170809 11:02:48.124" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:47.865" endtime="20170809 11:02:48.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:48.125">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:02:48.125" endtime="20170809 11:02:48.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:48.128">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:48.127" endtime="20170809 11:02:48.128" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:48.129">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:48.129" endtime="20170809 11:02:48.129" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:48.128" endtime="20170809 11:02:48.129" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:48.126" endtime="20170809 11:02:48.129" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:48.125" endtime="20170809 11:02:48.129" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:48.196">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:48.196">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:48.129" endtime="20170809 11:02:48.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:48.198">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:48.198" endtime="20170809 11:02:48.198" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:48.199">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:48.199" endtime="20170809 11:02:48.199" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:48.198" endtime="20170809 11:02:48.199" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:48.197" endtime="20170809 11:02:48.199" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:48.197" endtime="20170809 11:02:48.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:48.200">Delete All Sessions</msg>
<status starttime="20170809 11:02:48.200" endtime="20170809 11:02:48.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:48.200">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:47.861" endtime="20170809 11:02:48.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:48.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:48.201" endtime="20170809 11:02:48.201" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:48.202">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:48.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:48.202">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:48.201" endtime="20170809 11:02:48.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:48.202">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:47.860" endtime="20170809 11:02:48.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:48.202">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:47.860" endtime="20170809 11:02:48.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:02:48.203">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:02:48.203" endtime="20170809 11:02:48.203" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:47.859" endtime="20170809 11:02:48.203" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:47.228" endtime="20170809 11:02:48.203" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.208">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:58.208" endtime="20170809 11:02:58.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:58.209" endtime="20170809 11:02:58.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.210">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:58.210" endtime="20170809 11:02:58.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:58.210" endtime="20170809 11:02:58.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.405">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:58.212" endtime="20170809 11:02:58.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:58.406">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.211" endtime="20170809 11:02:58.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.406">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:58.406" endtime="20170809 11:02:58.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:58.407" endtime="20170809 11:02:58.407" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.207" endtime="20170809 11:02:58.407" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.207" endtime="20170809 11:02:58.407" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.206" endtime="20170809 11:02:58.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.408">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:02:58.408" endtime="20170809 11:02:58.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.410">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:58.410" endtime="20170809 11:02:58.410" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.411">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:58.411" endtime="20170809 11:02:58.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.410" endtime="20170809 11:02:58.412" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.409" endtime="20170809 11:02:58.412" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.408" endtime="20170809 11:02:58.412" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.474">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:58.474">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.412" endtime="20170809 11:02:58.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.476">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:58.476" endtime="20170809 11:02:58.476" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.477">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:58.477" endtime="20170809 11:02:58.477" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.476" endtime="20170809 11:02:58.477" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.475" endtime="20170809 11:02:58.477" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.475" endtime="20170809 11:02:58.478" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:58.478">Delete All Sessions</msg>
<status starttime="20170809 11:02:58.478" endtime="20170809 11:02:58.478" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.206" endtime="20170809 11:02:58.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:58.478" endtime="20170809 11:02:58.479" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.479">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:58.479">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:58.480">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:58.479" endtime="20170809 11:02:58.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.480">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:02:58.205" endtime="20170809 11:02:58.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.480">${power_state} = On</msg>
<status starttime="20170809 11:02:58.205" endtime="20170809 11:02:58.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:02:58.480" endtime="20170809 11:02:58.481" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.204" endtime="20170809 11:02:58.481" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.488">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:58.487" endtime="20170809 11:02:58.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:58.488" endtime="20170809 11:02:58.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.489">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:58.489" endtime="20170809 11:02:58.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.490">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:58.490" endtime="20170809 11:02:58.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.753">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:58.491" endtime="20170809 11:02:58.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.754">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:58.754">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.490" endtime="20170809 11:02:58.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.754">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:58.754" endtime="20170809 11:02:58.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:58.755" endtime="20170809 11:02:58.755" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.487" endtime="20170809 11:02:58.755" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.483" endtime="20170809 11:02:58.755" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.483" endtime="20170809 11:02:58.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.756">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:02:58.756" endtime="20170809 11:02:58.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.758">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:58.758" endtime="20170809 11:02:58.758" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.759">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:02:58.759" endtime="20170809 11:02:58.759" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.758" endtime="20170809 11:02:58.759" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.757" endtime="20170809 11:02:58.759" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.756" endtime="20170809 11:02:58.760" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.863">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:58.863">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.760" endtime="20170809 11:02:58.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.865">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:58.864" endtime="20170809 11:02:58.865" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.866">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:58.866" endtime="20170809 11:02:58.866" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.865" endtime="20170809 11:02:58.866" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.864" endtime="20170809 11:02:58.866" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.863" endtime="20170809 11:02:58.866" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:58.867">Delete All Sessions</msg>
<status starttime="20170809 11:02:58.867" endtime="20170809 11:02:58.867" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.482" endtime="20170809 11:02:58.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:58.867" endtime="20170809 11:02:58.868" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.868">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:58.868">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:58.868">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:58.868" endtime="20170809 11:02:58.868" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.869">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:02:58.481" endtime="20170809 11:02:58.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:58.869">${host_state} = Running</msg>
<status starttime="20170809 11:02:58.481" endtime="20170809 11:02:58.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:02:58.869" endtime="20170809 11:02:58.870" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:58.874">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:02:58.874" endtime="20170809 11:02:58.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:02:58.874" endtime="20170809 11:02:58.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.875">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:02:58.875" endtime="20170809 11:02:58.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:58.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:02:58.876" endtime="20170809 11:02:58.876" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:59.053">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:02:58.877" endtime="20170809 11:02:59.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:59.054">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:02:59.054">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.876" endtime="20170809 11:02:59.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:59.054">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:59.054" endtime="20170809 11:02:59.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:59.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:59.055" endtime="20170809 11:02:59.055" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.873" endtime="20170809 11:02:59.056" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.873" endtime="20170809 11:02:59.056" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:58.872" endtime="20170809 11:02:59.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:59.056">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:02:59.056" endtime="20170809 11:02:59.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:59.058">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:59.058" endtime="20170809 11:02:59.058" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:59.059">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:02:59.059" endtime="20170809 11:02:59.059" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:59.059" endtime="20170809 11:02:59.059" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:59.057" endtime="20170809 11:02:59.060" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:59.057" endtime="20170809 11:02:59.060" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:59.154">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:02:59.154">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:59.060" endtime="20170809 11:02:59.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:59.156">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:59.155" endtime="20170809 11:02:59.156" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:59.157">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:02:59.156" endtime="20170809 11:02:59.157" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:59.156" endtime="20170809 11:02:59.157" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:59.155" endtime="20170809 11:02:59.157" status="PASS"></status>
</kw>
<status starttime="20170809 11:02:59.154" endtime="20170809 11:02:59.157" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:02:59.157">Delete All Sessions</msg>
<status starttime="20170809 11:02:59.157" endtime="20170809 11:02:59.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:59.158">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:02:58.871" endtime="20170809 11:02:59.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:02:59.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:02:59.158" endtime="20170809 11:02:59.158" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:02:59.159">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:02:59.159">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:02:59.159">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:02:59.159" endtime="20170809 11:02:59.159" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:59.159">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:58.870" endtime="20170809 11:02:59.159" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:02:59.160">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:02:58.870" endtime="20170809 11:02:59.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:02:59.160">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:02:59.160" endtime="20170809 11:02:59.160" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:58.870" endtime="20170809 11:02:59.160" status="FAIL"></status>
</kw>
<status starttime="20170809 11:02:58.204" endtime="20170809 11:02:59.161" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.166">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:09.166" endtime="20170809 11:03:09.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.167">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:09.167" endtime="20170809 11:03:09.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.167">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:09.167" endtime="20170809 11:03:09.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:09.168" endtime="20170809 11:03:09.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:09.169" endtime="20170809 11:03:09.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.358">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:09.358">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.168" endtime="20170809 11:03:09.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.359">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:09.359" endtime="20170809 11:03:09.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:09.359" endtime="20170809 11:03:09.360" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.165" endtime="20170809 11:03:09.360" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.164" endtime="20170809 11:03:09.360" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.164" endtime="20170809 11:03:09.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.361">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:03:09.360" endtime="20170809 11:03:09.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.363">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:09.362" endtime="20170809 11:03:09.363" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.364">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:09.364" endtime="20170809 11:03:09.364" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.363" endtime="20170809 11:03:09.364" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.362" endtime="20170809 11:03:09.364" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.361" endtime="20170809 11:03:09.364" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.474">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:09.474">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.365" endtime="20170809 11:03:09.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.476">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:09.476" endtime="20170809 11:03:09.476" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.477">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:09.477" endtime="20170809 11:03:09.478" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.476" endtime="20170809 11:03:09.478" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.475" endtime="20170809 11:03:09.478" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.475" endtime="20170809 11:03:09.478" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:09.478">Delete All Sessions</msg>
<status starttime="20170809 11:03:09.478" endtime="20170809 11:03:09.478" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.163" endtime="20170809 11:03:09.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:09.479" endtime="20170809 11:03:09.479" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.480">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:09.480">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:09.480">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:09.479" endtime="20170809 11:03:09.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.480">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:03:09.162" endtime="20170809 11:03:09.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.481">${power_state} = On</msg>
<status starttime="20170809 11:03:09.162" endtime="20170809 11:03:09.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:03:09.481" endtime="20170809 11:03:09.481" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.162" endtime="20170809 11:03:09.481" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.486">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:09.485" endtime="20170809 11:03:09.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.487">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:09.486" endtime="20170809 11:03:09.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.487">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:09.487" endtime="20170809 11:03:09.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.488">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:09.488" endtime="20170809 11:03:09.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.764">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:09.489" endtime="20170809 11:03:09.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.764">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:09.764">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.488" endtime="20170809 11:03:09.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.765">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:09.764" endtime="20170809 11:03:09.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:09.765" endtime="20170809 11:03:09.765" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.485" endtime="20170809 11:03:09.766" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.484" endtime="20170809 11:03:09.766" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.484" endtime="20170809 11:03:09.766" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.766">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:03:09.766" endtime="20170809 11:03:09.766" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.769">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:09.768" endtime="20170809 11:03:09.769" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.770">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:09.770" endtime="20170809 11:03:09.770" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.769" endtime="20170809 11:03:09.770" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.767" endtime="20170809 11:03:09.770" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.767" endtime="20170809 11:03:09.770" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.859">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:09.859">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.770" endtime="20170809 11:03:09.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.860">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:09.860" endtime="20170809 11:03:09.860" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.861">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:09.861" endtime="20170809 11:03:09.861" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.861" endtime="20170809 11:03:09.862" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.859" endtime="20170809 11:03:09.862" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.859" endtime="20170809 11:03:09.862" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:09.862">Delete All Sessions</msg>
<status starttime="20170809 11:03:09.862" endtime="20170809 11:03:09.862" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.862">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.483" endtime="20170809 11:03:09.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:09.863" endtime="20170809 11:03:09.863" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.864">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:09.864">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:09.864">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:09.863" endtime="20170809 11:03:09.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.864">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:03:09.482" endtime="20170809 11:03:09.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:09.864">${host_state} = Running</msg>
<status starttime="20170809 11:03:09.481" endtime="20170809 11:03:09.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:03:09.865" endtime="20170809 11:03:09.865" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:09.869">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:09.868" endtime="20170809 11:03:09.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:09.869" endtime="20170809 11:03:09.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.870">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:09.870" endtime="20170809 11:03:09.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:09.871">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:09.871" endtime="20170809 11:03:09.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:10.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:09.872" endtime="20170809 11:03:10.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:10.063">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:10.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.871" endtime="20170809 11:03:10.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:10.064">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:10.063" endtime="20170809 11:03:10.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:10.064">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:10.064" endtime="20170809 11:03:10.064" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.868" endtime="20170809 11:03:10.065" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.868" endtime="20170809 11:03:10.065" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:09.867" endtime="20170809 11:03:10.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:10.065">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:03:10.065" endtime="20170809 11:03:10.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:10.067">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:10.067" endtime="20170809 11:03:10.067" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:10.068">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:10.068" endtime="20170809 11:03:10.068" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:10.068" endtime="20170809 11:03:10.069" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:10.066" endtime="20170809 11:03:10.069" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:10.066" endtime="20170809 11:03:10.069" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:10.135">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:10.135">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:10.069" endtime="20170809 11:03:10.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:10.137">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:10.136" endtime="20170809 11:03:10.137" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:10.138">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:10.138" endtime="20170809 11:03:10.138" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:10.137" endtime="20170809 11:03:10.138" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:10.136" endtime="20170809 11:03:10.138" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:10.135" endtime="20170809 11:03:10.138" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:10.139">Delete All Sessions</msg>
<status starttime="20170809 11:03:10.138" endtime="20170809 11:03:10.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:10.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:09.866" endtime="20170809 11:03:10.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:10.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:10.139" endtime="20170809 11:03:10.140" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:10.140">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:10.140">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:10.141">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:10.140" endtime="20170809 11:03:10.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:10.141">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:09.866" endtime="20170809 11:03:10.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:10.141">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:09.865" endtime="20170809 11:03:10.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:03:10.142">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:03:10.141" endtime="20170809 11:03:10.142" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:09.865" endtime="20170809 11:03:10.142" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:09.161" endtime="20170809 11:03:10.142" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.147">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:20.147" endtime="20170809 11:03:20.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.148">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:20.148" endtime="20170809 11:03:20.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.149">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:20.149" endtime="20170809 11:03:20.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.150">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:20.149" endtime="20170809 11:03:20.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:20.150" endtime="20170809 11:03:20.424" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.424">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:20.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.150" endtime="20170809 11:03:20.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.425">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:20.425" endtime="20170809 11:03:20.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:20.425" endtime="20170809 11:03:20.426" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.147" endtime="20170809 11:03:20.426" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.146" endtime="20170809 11:03:20.426" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.145" endtime="20170809 11:03:20.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.427">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:03:20.426" endtime="20170809 11:03:20.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.429">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:20.428" endtime="20170809 11:03:20.429" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.430">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:20.430" endtime="20170809 11:03:20.430" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.429" endtime="20170809 11:03:20.430" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.427" endtime="20170809 11:03:20.430" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.427" endtime="20170809 11:03:20.430" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.522">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:20.522">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.430" endtime="20170809 11:03:20.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.525">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:20.524" endtime="20170809 11:03:20.525" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.526">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:20.526" endtime="20170809 11:03:20.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.525" endtime="20170809 11:03:20.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.523" endtime="20170809 11:03:20.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.522" endtime="20170809 11:03:20.526" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:20.527">Delete All Sessions</msg>
<status starttime="20170809 11:03:20.527" endtime="20170809 11:03:20.527" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.144" endtime="20170809 11:03:20.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:20.527" endtime="20170809 11:03:20.528" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.528">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:20.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:20.528">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:20.528" endtime="20170809 11:03:20.529" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.529">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:03:20.144" endtime="20170809 11:03:20.529" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.529">${power_state} = On</msg>
<status starttime="20170809 11:03:20.144" endtime="20170809 11:03:20.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:03:20.529" endtime="20170809 11:03:20.530" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.143" endtime="20170809 11:03:20.530" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.533">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:20.533" endtime="20170809 11:03:20.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.534">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:20.534" endtime="20170809 11:03:20.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.535">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:20.534" endtime="20170809 11:03:20.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.536">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:20.535" endtime="20170809 11:03:20.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.717">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:20.536" endtime="20170809 11:03:20.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.717">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:20.717">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.536" endtime="20170809 11:03:20.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.718">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:20.718" endtime="20170809 11:03:20.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:20.718" endtime="20170809 11:03:20.719" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.532" endtime="20170809 11:03:20.719" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.532" endtime="20170809 11:03:20.719" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.531" endtime="20170809 11:03:20.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.720">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:03:20.719" endtime="20170809 11:03:20.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.722">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:20.721" endtime="20170809 11:03:20.722" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.723">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:20.723" endtime="20170809 11:03:20.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.722" endtime="20170809 11:03:20.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.720" endtime="20170809 11:03:20.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.720" endtime="20170809 11:03:20.724" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.812">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:20.812">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.724" endtime="20170809 11:03:20.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.814">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:20.814" endtime="20170809 11:03:20.814" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.815">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:20.815" endtime="20170809 11:03:20.815" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.814" endtime="20170809 11:03:20.815" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.813" endtime="20170809 11:03:20.815" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.813" endtime="20170809 11:03:20.816" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:20.816">Delete All Sessions</msg>
<status starttime="20170809 11:03:20.816" endtime="20170809 11:03:20.816" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.816">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.531" endtime="20170809 11:03:20.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:20.817" endtime="20170809 11:03:20.817" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.818">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:20.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:20.818">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:20.817" endtime="20170809 11:03:20.818" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.818">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:03:20.530" endtime="20170809 11:03:20.818" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:20.818">${host_state} = Running</msg>
<status starttime="20170809 11:03:20.530" endtime="20170809 11:03:20.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:03:20.819" endtime="20170809 11:03:20.819" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:20.823">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:20.822" endtime="20170809 11:03:20.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.824">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:20.823" endtime="20170809 11:03:20.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.824">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:20.824" endtime="20170809 11:03:20.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:20.825">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:20.825" endtime="20170809 11:03:20.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:21.056">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:20.826" endtime="20170809 11:03:21.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:21.056">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:21.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.825" endtime="20170809 11:03:21.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:21.057">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:21.057" endtime="20170809 11:03:21.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:21.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:21.058" endtime="20170809 11:03:21.058" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.822" endtime="20170809 11:03:21.058" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.822" endtime="20170809 11:03:21.058" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:20.821" endtime="20170809 11:03:21.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:21.059">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:03:21.058" endtime="20170809 11:03:21.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:21.061">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:21.060" endtime="20170809 11:03:21.061" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:21.062">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:21.062" endtime="20170809 11:03:21.062" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:21.061" endtime="20170809 11:03:21.062" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:21.060" endtime="20170809 11:03:21.062" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:21.059" endtime="20170809 11:03:21.062" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:21.129">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:21.129">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:21.063" endtime="20170809 11:03:21.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:21.131">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:21.130" endtime="20170809 11:03:21.131" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:21.132">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:21.131" endtime="20170809 11:03:21.132" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:21.131" endtime="20170809 11:03:21.132" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:21.130" endtime="20170809 11:03:21.132" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:21.129" endtime="20170809 11:03:21.132" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:21.132">Delete All Sessions</msg>
<status starttime="20170809 11:03:21.132" endtime="20170809 11:03:21.132" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:21.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:20.820" endtime="20170809 11:03:21.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:21.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:21.133" endtime="20170809 11:03:21.133" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:21.134">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:21.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:21.134">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:21.134" endtime="20170809 11:03:21.134" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:21.134">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:20.820" endtime="20170809 11:03:21.134" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:21.135">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:20.819" endtime="20170809 11:03:21.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:03:21.135">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:03:21.135" endtime="20170809 11:03:21.135" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:20.819" endtime="20170809 11:03:21.136" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:20.143" endtime="20170809 11:03:21.136" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.141">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:31.141" endtime="20170809 11:03:31.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:31.142" endtime="20170809 11:03:31.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.143">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:31.142" endtime="20170809 11:03:31.143" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.143">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:31.143" endtime="20170809 11:03:31.143" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.430">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:31.144" endtime="20170809 11:03:31.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.430">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:31.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.144" endtime="20170809 11:03:31.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.431">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:31.431" endtime="20170809 11:03:31.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:31.431" endtime="20170809 11:03:31.432" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.140" endtime="20170809 11:03:31.432" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.139" endtime="20170809 11:03:31.432" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.139" endtime="20170809 11:03:31.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.433">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:03:31.432" endtime="20170809 11:03:31.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.435">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:31.434" endtime="20170809 11:03:31.435" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.436">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:31.436" endtime="20170809 11:03:31.436" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.435" endtime="20170809 11:03:31.436" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.434" endtime="20170809 11:03:31.436" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.433" endtime="20170809 11:03:31.436" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:31.517">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.436" endtime="20170809 11:03:31.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.522">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:31.518" endtime="20170809 11:03:31.522" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.523">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:31.523" endtime="20170809 11:03:31.523" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.522" endtime="20170809 11:03:31.523" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.518" endtime="20170809 11:03:31.523" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.518" endtime="20170809 11:03:31.523" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:31.524">Delete All Sessions</msg>
<status starttime="20170809 11:03:31.524" endtime="20170809 11:03:31.524" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.138" endtime="20170809 11:03:31.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.525">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:31.524" endtime="20170809 11:03:31.525" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.525">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:31.525">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:31.526">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:31.525" endtime="20170809 11:03:31.526" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.526">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:03:31.137" endtime="20170809 11:03:31.526" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.526">${power_state} = On</msg>
<status starttime="20170809 11:03:31.137" endtime="20170809 11:03:31.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:03:31.526" endtime="20170809 11:03:31.527" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.137" endtime="20170809 11:03:31.527" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:31.530" endtime="20170809 11:03:31.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:31.531" endtime="20170809 11:03:31.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.532">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:31.532" endtime="20170809 11:03:31.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:31.532" endtime="20170809 11:03:31.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:31.534" endtime="20170809 11:03:31.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.744">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:31.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.533" endtime="20170809 11:03:31.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.745">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:31.745" endtime="20170809 11:03:31.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:31.745" endtime="20170809 11:03:31.746" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.530" endtime="20170809 11:03:31.746" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.529" endtime="20170809 11:03:31.746" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.528" endtime="20170809 11:03:31.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.747">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:03:31.747" endtime="20170809 11:03:31.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.749">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:31.748" endtime="20170809 11:03:31.749" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.750">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:31.750" endtime="20170809 11:03:31.750" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.750" endtime="20170809 11:03:31.750" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.748" endtime="20170809 11:03:31.751" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.747" endtime="20170809 11:03:31.751" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.839">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:31.839">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.751" endtime="20170809 11:03:31.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.841">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:31.840" endtime="20170809 11:03:31.841" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.842">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:31.841" endtime="20170809 11:03:31.842" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.841" endtime="20170809 11:03:31.842" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.840" endtime="20170809 11:03:31.842" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.839" endtime="20170809 11:03:31.842" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:31.843">Delete All Sessions</msg>
<status starttime="20170809 11:03:31.843" endtime="20170809 11:03:31.843" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.843">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.528" endtime="20170809 11:03:31.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:31.844" endtime="20170809 11:03:31.844" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.845">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:31.845">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:31.845">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:31.845" endtime="20170809 11:03:31.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.846">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:03:31.527" endtime="20170809 11:03:31.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:31.846">${host_state} = Running</msg>
<status starttime="20170809 11:03:31.527" endtime="20170809 11:03:31.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:03:31.847" endtime="20170809 11:03:31.847" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:31.852">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:31.852" endtime="20170809 11:03:31.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.853">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:31.852" endtime="20170809 11:03:31.853" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.853">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:31.853" endtime="20170809 11:03:31.853" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:31.854">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:31.854" endtime="20170809 11:03:31.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:32.032">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:31.855" endtime="20170809 11:03:32.032" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:32.032">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:32.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.854" endtime="20170809 11:03:32.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:32.033">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:32.033" endtime="20170809 11:03:32.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:32.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:32.033" endtime="20170809 11:03:32.034" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.851" endtime="20170809 11:03:32.034" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.851" endtime="20170809 11:03:32.034" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:31.850" endtime="20170809 11:03:32.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:32.035">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:03:32.034" endtime="20170809 11:03:32.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:32.037">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:32.036" endtime="20170809 11:03:32.037" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:32.038">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:32.037" endtime="20170809 11:03:32.038" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:32.037" endtime="20170809 11:03:32.038" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:32.035" endtime="20170809 11:03:32.038" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:32.035" endtime="20170809 11:03:32.038" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:32.106">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:32.106">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:32.038" endtime="20170809 11:03:32.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:32.108">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:32.107" endtime="20170809 11:03:32.108" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:32.109">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:32.108" endtime="20170809 11:03:32.109" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:32.108" endtime="20170809 11:03:32.109" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:32.107" endtime="20170809 11:03:32.109" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:32.106" endtime="20170809 11:03:32.109" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:32.109">Delete All Sessions</msg>
<status starttime="20170809 11:03:32.109" endtime="20170809 11:03:32.109" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:32.110">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:31.849" endtime="20170809 11:03:32.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:32.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:32.110" endtime="20170809 11:03:32.110" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:32.111">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:32.111">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:32.111">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:32.111" endtime="20170809 11:03:32.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:32.111">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:31.848" endtime="20170809 11:03:32.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:32.112">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:31.848" endtime="20170809 11:03:32.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:03:32.112">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:03:32.112" endtime="20170809 11:03:32.112" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:31.847" endtime="20170809 11:03:32.112" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:31.136" endtime="20170809 11:03:32.113" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.118">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:42.118" endtime="20170809 11:03:42.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:42.119" endtime="20170809 11:03:42.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.120">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:42.119" endtime="20170809 11:03:42.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.120">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:42.120" endtime="20170809 11:03:42.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.362">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:42.121" endtime="20170809 11:03:42.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.362">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:42.362">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.121" endtime="20170809 11:03:42.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.363">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.363" endtime="20170809 11:03:42.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.364" endtime="20170809 11:03:42.364" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.117" endtime="20170809 11:03:42.364" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.116" endtime="20170809 11:03:42.364" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.116" endtime="20170809 11:03:42.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.365">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:03:42.365" endtime="20170809 11:03:42.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.369">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:42.368" endtime="20170809 11:03:42.369" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.370">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:42.370" endtime="20170809 11:03:42.370" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.369" endtime="20170809 11:03:42.370" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.367" endtime="20170809 11:03:42.370" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.366" endtime="20170809 11:03:42.370" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.433">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:42.433">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.371" endtime="20170809 11:03:42.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.436">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:42.435" endtime="20170809 11:03:42.436" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.436">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:42.436" endtime="20170809 11:03:42.437" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.436" endtime="20170809 11:03:42.437" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.434" endtime="20170809 11:03:42.437" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.434" endtime="20170809 11:03:42.437" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:42.437">Delete All Sessions</msg>
<status starttime="20170809 11:03:42.437" endtime="20170809 11:03:42.437" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.115" endtime="20170809 11:03:42.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.438" endtime="20170809 11:03:42.438" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.439">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:42.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:42.439">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:42.438" endtime="20170809 11:03:42.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.439">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:03:42.114" endtime="20170809 11:03:42.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.440">${power_state} = On</msg>
<status starttime="20170809 11:03:42.114" endtime="20170809 11:03:42.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:03:42.440" endtime="20170809 11:03:42.440" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.114" endtime="20170809 11:03:42.440" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.444">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:42.443" endtime="20170809 11:03:42.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.445">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:42.444" endtime="20170809 11:03:42.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.445">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:42.445" endtime="20170809 11:03:42.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:42.446" endtime="20170809 11:03:42.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.625">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:42.447" endtime="20170809 11:03:42.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.625">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:42.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.446" endtime="20170809 11:03:42.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.626">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.626" endtime="20170809 11:03:42.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.626" endtime="20170809 11:03:42.627" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.443" endtime="20170809 11:03:42.627" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.442" endtime="20170809 11:03:42.627" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.442" endtime="20170809 11:03:42.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.628">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:03:42.627" endtime="20170809 11:03:42.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.630">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:42.629" endtime="20170809 11:03:42.630" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.631">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:42.631" endtime="20170809 11:03:42.631" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.630" endtime="20170809 11:03:42.631" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.628" endtime="20170809 11:03:42.631" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.628" endtime="20170809 11:03:42.631" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.748">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:42.748">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.632" endtime="20170809 11:03:42.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.750">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:42.749" endtime="20170809 11:03:42.750" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.751">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:42.750" endtime="20170809 11:03:42.751" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.750" endtime="20170809 11:03:42.751" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.749" endtime="20170809 11:03:42.751" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.748" endtime="20170809 11:03:42.751" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:42.751">Delete All Sessions</msg>
<status starttime="20170809 11:03:42.751" endtime="20170809 11:03:42.752" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.752">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.441" endtime="20170809 11:03:42.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.752" endtime="20170809 11:03:42.752" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.753">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:42.753">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:42.753">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:42.753" endtime="20170809 11:03:42.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.754">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:03:42.441" endtime="20170809 11:03:42.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.754">${host_state} = Running</msg>
<status starttime="20170809 11:03:42.440" endtime="20170809 11:03:42.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:03:42.754" endtime="20170809 11:03:42.754" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.758">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:42.758" endtime="20170809 11:03:42.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.759">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:42.759" endtime="20170809 11:03:42.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.760">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:42.759" endtime="20170809 11:03:42.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.760">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:42.760" endtime="20170809 11:03:42.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:42.761" endtime="20170809 11:03:42.945" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:42.945">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:42.945">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.761" endtime="20170809 11:03:42.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.945">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.945" endtime="20170809 11:03:42.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.946">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:42.946" endtime="20170809 11:03:42.946" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.757" endtime="20170809 11:03:42.946" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.757" endtime="20170809 11:03:42.946" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.756" endtime="20170809 11:03:42.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.947">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:03:42.947" endtime="20170809 11:03:42.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:42.949">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:42.949" endtime="20170809 11:03:42.949" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:42.950">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:42.950" endtime="20170809 11:03:42.950" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.949" endtime="20170809 11:03:42.950" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.948" endtime="20170809 11:03:42.950" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:42.947" endtime="20170809 11:03:42.951" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:43.049">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:43.049">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.951" endtime="20170809 11:03:43.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:43.051">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:43.050" endtime="20170809 11:03:43.051" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:43.052">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:43.051" endtime="20170809 11:03:43.052" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:43.051" endtime="20170809 11:03:43.052" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:43.050" endtime="20170809 11:03:43.052" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:43.049" endtime="20170809 11:03:43.052" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:43.052">Delete All Sessions</msg>
<status starttime="20170809 11:03:43.052" endtime="20170809 11:03:43.052" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:43.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:42.756" endtime="20170809 11:03:43.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:43.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:43.053" endtime="20170809 11:03:43.053" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:43.054">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:43.054">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:43.054">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:43.054" endtime="20170809 11:03:43.054" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:43.054">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:42.755" endtime="20170809 11:03:43.054" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:43.055">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:42.755" endtime="20170809 11:03:43.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:03:43.055">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:03:43.055" endtime="20170809 11:03:43.055" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:42.755" endtime="20170809 11:03:43.056" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:42.113" endtime="20170809 11:03:43.056" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:53.061">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:53.061" endtime="20170809 11:03:53.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:53.062">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:53.062" endtime="20170809 11:03:53.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:53.062">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:53.062" endtime="20170809 11:03:53.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:53.063">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:53.063" endtime="20170809 11:03:53.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:53.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:53.064" endtime="20170809 11:03:53.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:53.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:53.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:53.063" endtime="20170809 11:03:53.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:53.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:53.367" endtime="20170809 11:03:53.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:53.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:53.368" endtime="20170809 11:03:53.369" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:53.060" endtime="20170809 11:03:53.369" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:53.059" endtime="20170809 11:03:53.369" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:53.059" endtime="20170809 11:03:53.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:53.369">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:03:53.369" endtime="20170809 11:03:53.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:53.372">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:53.372" endtime="20170809 11:03:53.372" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:53.373">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:53.373" endtime="20170809 11:03:53.374" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:53.373" endtime="20170809 11:03:53.374" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:53.370" endtime="20170809 11:03:53.374" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:53.370" endtime="20170809 11:03:53.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.007">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:54.008">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:53.374" endtime="20170809 11:03:54.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.010">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:54.009" endtime="20170809 11:03:54.010" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:54.011">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:54.010" endtime="20170809 11:03:54.011" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.010" endtime="20170809 11:03:54.011" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.008" endtime="20170809 11:03:54.011" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.008" endtime="20170809 11:03:54.011" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:54.011">Delete All Sessions</msg>
<status starttime="20170809 11:03:54.011" endtime="20170809 11:03:54.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:54.012">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:53.058" endtime="20170809 11:03:54.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:54.012">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:54.012" endtime="20170809 11:03:54.012" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.013">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:54.013">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:54.013">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:54.013" endtime="20170809 11:03:54.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:54.014">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:03:53.057" endtime="20170809 11:03:54.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:54.014">${power_state} = On</msg>
<status starttime="20170809 11:03:53.057" endtime="20170809 11:03:54.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:03:54.014" endtime="20170809 11:03:54.014" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:53.057" endtime="20170809 11:03:54.015" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:54.018">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:54.018" endtime="20170809 11:03:54.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.019">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:54.019" endtime="20170809 11:03:54.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.019">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:54.019" endtime="20170809 11:03:54.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.020">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:54.020" endtime="20170809 11:03:54.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:54.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:54.021" endtime="20170809 11:03:54.550" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:54.550">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:54.550">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:54.021" endtime="20170809 11:03:54.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:54.551">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:54.550" endtime="20170809 11:03:54.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:54.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:54.551" endtime="20170809 11:03:54.551" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.017" endtime="20170809 11:03:54.552" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.017" endtime="20170809 11:03:54.552" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.016" endtime="20170809 11:03:54.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.552">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:03:54.552" endtime="20170809 11:03:54.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:54.555">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:54.554" endtime="20170809 11:03:54.555" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:54.556">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:03:54.556" endtime="20170809 11:03:54.556" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.555" endtime="20170809 11:03:54.556" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.553" endtime="20170809 11:03:54.556" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:54.553" endtime="20170809 11:03:54.556" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.120">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:56.120">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:54.556" endtime="20170809 11:03:56.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.122">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:56.121" endtime="20170809 11:03:56.122" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:56.123">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:56.123" endtime="20170809 11:03:56.123" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.122" endtime="20170809 11:03:56.123" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.121" endtime="20170809 11:03:56.123" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.120" endtime="20170809 11:03:56.123" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:56.124">Delete All Sessions</msg>
<status starttime="20170809 11:03:56.124" endtime="20170809 11:03:56.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:56.124">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:54.016" endtime="20170809 11:03:56.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:56.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:56.124" endtime="20170809 11:03:56.125" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.125">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:56.125">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:56.125">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:56.125" endtime="20170809 11:03:56.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:56.126">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:03:54.015" endtime="20170809 11:03:56.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:56.126">${host_state} = Running</msg>
<status starttime="20170809 11:03:54.015" endtime="20170809 11:03:56.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:03:56.126" endtime="20170809 11:03:56.127" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:56.130">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:03:56.130" endtime="20170809 11:03:56.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.131">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:03:56.131" endtime="20170809 11:03:56.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.132">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:03:56.132" endtime="20170809 11:03:56.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.133">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:03:56.132" endtime="20170809 11:03:56.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:56.317">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:03:56.133" endtime="20170809 11:03:56.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:56.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:03:56.317">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:56.133" endtime="20170809 11:03:56.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:56.318">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:56.318" endtime="20170809 11:03:56.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:56.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:56.318" endtime="20170809 11:03:56.319" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.130" endtime="20170809 11:03:56.319" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.129" endtime="20170809 11:03:56.319" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.129" endtime="20170809 11:03:56.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.320">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:03:56.319" endtime="20170809 11:03:56.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:56.322">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:56.321" endtime="20170809 11:03:56.322" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:56.323">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:03:56.322" endtime="20170809 11:03:56.323" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.322" endtime="20170809 11:03:56.323" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.320" endtime="20170809 11:03:56.323" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:56.320" endtime="20170809 11:03:56.323" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:59.727">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:03:59.727">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:56.323" endtime="20170809 11:03:59.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:59.729">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:59.729" endtime="20170809 11:03:59.729" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:59.730">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:03:59.730" endtime="20170809 11:03:59.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:59.729" endtime="20170809 11:03:59.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:59.728" endtime="20170809 11:03:59.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:03:59.728" endtime="20170809 11:03:59.731" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:03:59.731">Delete All Sessions</msg>
<status starttime="20170809 11:03:59.731" endtime="20170809 11:03:59.731" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:59.731">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:03:56.128" endtime="20170809 11:03:59.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:03:59.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:03:59.731" endtime="20170809 11:03:59.732" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:03:59.732">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:03:59.732">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:03:59.733">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:03:59.732" endtime="20170809 11:03:59.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:59.733">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:56.127" endtime="20170809 11:03:59.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:03:59.733">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:03:56.127" endtime="20170809 11:03:59.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:03:59.734">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:03:59.733" endtime="20170809 11:03:59.734" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:56.127" endtime="20170809 11:03:59.734" status="FAIL"></status>
</kw>
<status starttime="20170809 11:03:53.056" endtime="20170809 11:03:59.734" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:09.739">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:09.739" endtime="20170809 11:04:09.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:09.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:09.740" endtime="20170809 11:04:09.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:09.741">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:09.741" endtime="20170809 11:04:09.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:09.742">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:09.741" endtime="20170809 11:04:09.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:11.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:09.742" endtime="20170809 11:04:11.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:11.084">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:11.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:09.742" endtime="20170809 11:04:11.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:11.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:11.085" endtime="20170809 11:04:11.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:11.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:11.085" endtime="20170809 11:04:11.086" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:09.739" endtime="20170809 11:04:11.086" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:09.738" endtime="20170809 11:04:11.086" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:09.737" endtime="20170809 11:04:11.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:11.087">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:04:11.086" endtime="20170809 11:04:11.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:11.089">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:11.088" endtime="20170809 11:04:11.089" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:11.090">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:11.089" endtime="20170809 11:04:11.090" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:11.089" endtime="20170809 11:04:11.090" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:11.087" endtime="20170809 11:04:11.090" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:11.087" endtime="20170809 11:04:11.090" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:17.697">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:17.697">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:11.090" endtime="20170809 11:04:17.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:17.703">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:17.702" endtime="20170809 11:04:17.703" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:17.704">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:17.704" endtime="20170809 11:04:17.705" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:17.703" endtime="20170809 11:04:17.705" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:17.698" endtime="20170809 11:04:17.705" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:17.697" endtime="20170809 11:04:17.705" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:17.705">Delete All Sessions</msg>
<status starttime="20170809 11:04:17.705" endtime="20170809 11:04:17.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:17.706">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:09.736" endtime="20170809 11:04:17.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:17.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:17.706" endtime="20170809 11:04:17.706" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:17.710">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:17.710">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:17.710">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:17.707" endtime="20170809 11:04:17.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:17.710">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 11:04:09.736" endtime="20170809 11:04:17.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:17.711">${power_state} = Off</msg>
<status starttime="20170809 11:04:09.735" endtime="20170809 11:04:17.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:04:17.711">On != Off</msg>
<status starttime="20170809 11:04:17.711" endtime="20170809 11:04:17.711" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:09.735" endtime="20170809 11:04:17.712" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:09.735" endtime="20170809 11:04:17.712" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:27.717">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:27.716" endtime="20170809 11:04:27.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:27.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:27.717" endtime="20170809 11:04:27.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:27.718">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:27.718" endtime="20170809 11:04:27.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:27.719">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:27.719" endtime="20170809 11:04:27.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:28.400">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:27.720" endtime="20170809 11:04:28.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:28.401">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:28.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:27.719" endtime="20170809 11:04:28.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:28.401">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:28.401" endtime="20170809 11:04:28.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:28.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:28.402" endtime="20170809 11:04:28.402" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:27.716" endtime="20170809 11:04:28.402" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:27.715" endtime="20170809 11:04:28.402" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:27.715" endtime="20170809 11:04:28.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:28.403">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:04:28.403" endtime="20170809 11:04:28.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:28.405">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:28.405" endtime="20170809 11:04:28.405" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:28.406">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:28.406" endtime="20170809 11:04:28.406" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:28.405" endtime="20170809 11:04:28.406" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:28.404" endtime="20170809 11:04:28.407" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:28.403" endtime="20170809 11:04:28.407" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:28.996">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:28.996">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:28.407" endtime="20170809 11:04:28.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:28.998">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:28.997" endtime="20170809 11:04:28.998" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:28.999">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:28.998" endtime="20170809 11:04:28.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:28.998" endtime="20170809 11:04:28.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:28.997" endtime="20170809 11:04:28.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:28.996" endtime="20170809 11:04:28.999" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:28.999">Delete All Sessions</msg>
<status starttime="20170809 11:04:28.999" endtime="20170809 11:04:28.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:29.000">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:27.714" endtime="20170809 11:04:29.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:29.000" endtime="20170809 11:04:29.000" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.001">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:29.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:29.001">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:29.001" endtime="20170809 11:04:29.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:29.001">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:04:27.714" endtime="20170809 11:04:29.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:29.002">${power_state} = On</msg>
<status starttime="20170809 11:04:27.713" endtime="20170809 11:04:29.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:04:29.002" endtime="20170809 11:04:29.002" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:27.713" endtime="20170809 11:04:29.002" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.006">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:29.006" endtime="20170809 11:04:29.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:29.007" endtime="20170809 11:04:29.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.008">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:29.008" endtime="20170809 11:04:29.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.009">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:29.008" endtime="20170809 11:04:29.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.388">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:29.009" endtime="20170809 11:04:29.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:29.388">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:29.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:29.009" endtime="20170809 11:04:29.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.389">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:29.388" endtime="20170809 11:04:29.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:29.389" endtime="20170809 11:04:29.390" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.005" endtime="20170809 11:04:29.390" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.005" endtime="20170809 11:04:29.390" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.004" endtime="20170809 11:04:29.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.391">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:04:29.390" endtime="20170809 11:04:29.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.393">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:29.392" endtime="20170809 11:04:29.393" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.394">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:29.393" endtime="20170809 11:04:29.394" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.393" endtime="20170809 11:04:29.394" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.391" endtime="20170809 11:04:29.394" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.391" endtime="20170809 11:04:29.394" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.888">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:29.888">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:29.394" endtime="20170809 11:04:29.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.890">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:29.890" endtime="20170809 11:04:29.890" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.891">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:29.891" endtime="20170809 11:04:29.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.890" endtime="20170809 11:04:29.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.889" endtime="20170809 11:04:29.892" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.889" endtime="20170809 11:04:29.892" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:29.892">Delete All Sessions</msg>
<status starttime="20170809 11:04:29.892" endtime="20170809 11:04:29.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:29.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:29.003" endtime="20170809 11:04:29.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:29.893" endtime="20170809 11:04:29.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.894">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:29.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:29.894">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:29.893" endtime="20170809 11:04:29.894" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:29.894">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:04:29.003" endtime="20170809 11:04:29.894" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:29.894">${host_state} = Running</msg>
<status starttime="20170809 11:04:29.003" endtime="20170809 11:04:29.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:04:29.895" endtime="20170809 11:04:29.895" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:29.899">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:29.899" endtime="20170809 11:04:29.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.900">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:29.900" endtime="20170809 11:04:29.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.901">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:29.900" endtime="20170809 11:04:29.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:29.901">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:29.901" endtime="20170809 11:04:29.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:30.308">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:29.902" endtime="20170809 11:04:30.308" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:30.308">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:30.308">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:29.902" endtime="20170809 11:04:30.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:30.309">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:30.309" endtime="20170809 11:04:30.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:30.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:30.310" endtime="20170809 11:04:30.310" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.898" endtime="20170809 11:04:30.310" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.898" endtime="20170809 11:04:30.310" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:29.897" endtime="20170809 11:04:30.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:30.311">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:04:30.311" endtime="20170809 11:04:30.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:30.313">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:04:30.312" endtime="20170809 11:04:30.313" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:30.314">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:04:30.314" endtime="20170809 11:04:30.314" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:30.313" endtime="20170809 11:04:30.314" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:30.312" endtime="20170809 11:04:30.314" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:30.311" endtime="20170809 11:04:30.314" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:30.769">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:30.769">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:30.315" endtime="20170809 11:04:30.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:30.771">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:30.770" endtime="20170809 11:04:30.771" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:30.772">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:30.772" endtime="20170809 11:04:30.772" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:30.771" endtime="20170809 11:04:30.772" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:30.770" endtime="20170809 11:04:30.772" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:30.769" endtime="20170809 11:04:30.772" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:30.773">Delete All Sessions</msg>
<status starttime="20170809 11:04:30.772" endtime="20170809 11:04:30.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:30.773">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:29.896" endtime="20170809 11:04:30.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:30.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:30.773" endtime="20170809 11:04:30.774" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:30.774">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:30.774">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:30.774">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:30.774" endtime="20170809 11:04:30.774" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:30.775">${state} = Off</msg>
<status starttime="20170809 11:04:29.896" endtime="20170809 11:04:30.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:30.775">${boot_progress} = Off</msg>
<status starttime="20170809 11:04:29.895" endtime="20170809 11:04:30.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:04:30.775">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 11:04:30.775" endtime="20170809 11:04:30.776" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:29.895" endtime="20170809 11:04:30.776" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:27.712" endtime="20170809 11:04:30.776" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:40.781">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:40.781" endtime="20170809 11:04:40.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:40.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:40.782" endtime="20170809 11:04:40.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:40.783">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:40.782" endtime="20170809 11:04:40.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:40.783">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:40.783" endtime="20170809 11:04:40.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:40.994">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:40.784" endtime="20170809 11:04:40.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:40.994">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:40.994">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:40.783" endtime="20170809 11:04:40.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:40.995">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:40.994" endtime="20170809 11:04:40.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:40.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:40.995" endtime="20170809 11:04:40.995" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:40.780" endtime="20170809 11:04:40.995" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:40.780" endtime="20170809 11:04:40.996" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:40.779" endtime="20170809 11:04:40.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:40.996">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:04:40.996" endtime="20170809 11:04:40.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:40.998">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:40.998" endtime="20170809 11:04:40.998" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:40.999">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:40.999" endtime="20170809 11:04:40.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:40.998" endtime="20170809 11:04:40.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:40.997" endtime="20170809 11:04:41.000" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:40.997" endtime="20170809 11:04:41.000" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.107">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:41.107">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:41.000" endtime="20170809 11:04:41.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.109">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:41.108" endtime="20170809 11:04:41.109" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.110">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:41.110" endtime="20170809 11:04:41.110" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.109" endtime="20170809 11:04:41.110" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.108" endtime="20170809 11:04:41.110" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.107" endtime="20170809 11:04:41.111" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:41.111">Delete All Sessions</msg>
<status starttime="20170809 11:04:41.111" endtime="20170809 11:04:41.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:40.778" endtime="20170809 11:04:41.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:41.112" endtime="20170809 11:04:41.112" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.112">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:41.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:41.113">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:41.112" endtime="20170809 11:04:41.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.113">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:04:40.778" endtime="20170809 11:04:41.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.113">${power_state} = On</msg>
<status starttime="20170809 11:04:40.777" endtime="20170809 11:04:41.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:04:41.114" endtime="20170809 11:04:41.114" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:40.777" endtime="20170809 11:04:41.114" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.117">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:41.117" endtime="20170809 11:04:41.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:41.118" endtime="20170809 11:04:41.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.119">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:41.119" endtime="20170809 11:04:41.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.120">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:41.120" endtime="20170809 11:04:41.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.392">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:41.121" endtime="20170809 11:04:41.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.392">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:41.392">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:41.120" endtime="20170809 11:04:41.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.392">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:41.392" endtime="20170809 11:04:41.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:41.393" endtime="20170809 11:04:41.393" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.117" endtime="20170809 11:04:41.393" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.116" endtime="20170809 11:04:41.393" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.116" endtime="20170809 11:04:41.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.394">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:04:41.394" endtime="20170809 11:04:41.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.396">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:41.396" endtime="20170809 11:04:41.396" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.397">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:41.397" endtime="20170809 11:04:41.397" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.396" endtime="20170809 11:04:41.397" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.395" endtime="20170809 11:04:41.397" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.394" endtime="20170809 11:04:41.397" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.493">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:41.493">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:41.398" endtime="20170809 11:04:41.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.495">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:41.495" endtime="20170809 11:04:41.495" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.496">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:41.496" endtime="20170809 11:04:41.496" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.495" endtime="20170809 11:04:41.496" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.494" endtime="20170809 11:04:41.496" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.494" endtime="20170809 11:04:41.496" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:41.497">Delete All Sessions</msg>
<status starttime="20170809 11:04:41.497" endtime="20170809 11:04:41.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:41.115" endtime="20170809 11:04:41.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:41.497" endtime="20170809 11:04:41.498" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.498">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:41.498">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:41.498">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:41.498" endtime="20170809 11:04:41.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.499">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:04:41.114" endtime="20170809 11:04:41.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.499">${host_state} = Running</msg>
<status starttime="20170809 11:04:41.114" endtime="20170809 11:04:41.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:04:41.499" endtime="20170809 11:04:41.500" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.504">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:41.503" endtime="20170809 11:04:41.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.505">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:41.504" endtime="20170809 11:04:41.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.505">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:41.505" endtime="20170809 11:04:41.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.506">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:41.506" endtime="20170809 11:04:41.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.732">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:41.507" endtime="20170809 11:04:41.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.732">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:41.732">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:41.506" endtime="20170809 11:04:41.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.733">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:41.733" endtime="20170809 11:04:41.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.734">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:41.733" endtime="20170809 11:04:41.734" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.503" endtime="20170809 11:04:41.734" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.503" endtime="20170809 11:04:41.734" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.502" endtime="20170809 11:04:41.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.735">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:04:41.734" endtime="20170809 11:04:41.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.737">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:04:41.736" endtime="20170809 11:04:41.737" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.738">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:04:41.737" endtime="20170809 11:04:41.738" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.737" endtime="20170809 11:04:41.738" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.735" endtime="20170809 11:04:41.738" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.735" endtime="20170809 11:04:41.738" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.811">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:41.811">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:41.738" endtime="20170809 11:04:41.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.813">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:41.813" endtime="20170809 11:04:41.813" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.814">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:41.814" endtime="20170809 11:04:41.814" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.813" endtime="20170809 11:04:41.814" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.812" endtime="20170809 11:04:41.814" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:41.812" endtime="20170809 11:04:41.814" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:41.815">Delete All Sessions</msg>
<status starttime="20170809 11:04:41.815" endtime="20170809 11:04:41.815" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:41.501" endtime="20170809 11:04:41.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:41.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:41.815" endtime="20170809 11:04:41.816" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:41.816">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:41.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:41.816">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:41.816" endtime="20170809 11:04:41.816" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.817">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:04:41.501" endtime="20170809 11:04:41.817" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:41.817">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:04:41.500" endtime="20170809 11:04:41.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:04:41.818">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:04:41.817" endtime="20170809 11:04:41.818" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:41.500" endtime="20170809 11:04:41.818" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:40.776" endtime="20170809 11:04:41.818" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:51.823">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:51.823" endtime="20170809 11:04:51.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:51.824">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:51.823" endtime="20170809 11:04:51.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:51.824">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:51.824" endtime="20170809 11:04:51.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:51.825">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:51.825" endtime="20170809 11:04:51.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:51.826" endtime="20170809 11:04:52.030" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.030">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:52.031">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:51.825" endtime="20170809 11:04:52.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.031" endtime="20170809 11:04:52.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.031" endtime="20170809 11:04:52.032" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:51.822" endtime="20170809 11:04:52.032" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:51.822" endtime="20170809 11:04:52.032" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:51.821" endtime="20170809 11:04:52.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.033">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:04:52.032" endtime="20170809 11:04:52.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.035">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:52.034" endtime="20170809 11:04:52.035" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.036">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:52.035" endtime="20170809 11:04:52.036" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.035" endtime="20170809 11:04:52.036" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.033" endtime="20170809 11:04:52.036" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.033" endtime="20170809 11:04:52.036" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.100">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:52.101">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:52.036" endtime="20170809 11:04:52.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.102">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:52.102" endtime="20170809 11:04:52.102" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.103">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:52.103" endtime="20170809 11:04:52.103" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.102" endtime="20170809 11:04:52.103" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.101" endtime="20170809 11:04:52.104" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.101" endtime="20170809 11:04:52.104" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:52.104">Delete All Sessions</msg>
<status starttime="20170809 11:04:52.104" endtime="20170809 11:04:52.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:51.820" endtime="20170809 11:04:52.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.105">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.105" endtime="20170809 11:04:52.105" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.106">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:52.106">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:52.106">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:52.105" endtime="20170809 11:04:52.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.106">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:04:51.820" endtime="20170809 11:04:52.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.106">${power_state} = On</msg>
<status starttime="20170809 11:04:51.819" endtime="20170809 11:04:52.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:04:52.107" endtime="20170809 11:04:52.107" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:51.819" endtime="20170809 11:04:52.107" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.115">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:52.115" endtime="20170809 11:04:52.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:52.116" endtime="20170809 11:04:52.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.117">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:52.117" endtime="20170809 11:04:52.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.118">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:52.118" endtime="20170809 11:04:52.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.308">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:52.119" endtime="20170809 11:04:52.308" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.308">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:52.308">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:52.118" endtime="20170809 11:04:52.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.315">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.308" endtime="20170809 11:04:52.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.315" endtime="20170809 11:04:52.316" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.114" endtime="20170809 11:04:52.316" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.114" endtime="20170809 11:04:52.316" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.113" endtime="20170809 11:04:52.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.316">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:04:52.316" endtime="20170809 11:04:52.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.319">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:52.318" endtime="20170809 11:04:52.319" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.320">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:04:52.320" endtime="20170809 11:04:52.320" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.319" endtime="20170809 11:04:52.320" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.317" endtime="20170809 11:04:52.320" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.317" endtime="20170809 11:04:52.320" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.434">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:52.434">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:52.321" endtime="20170809 11:04:52.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.436">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:52.435" endtime="20170809 11:04:52.436" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.437">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:52.437" endtime="20170809 11:04:52.437" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.436" endtime="20170809 11:04:52.437" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.435" endtime="20170809 11:04:52.437" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.434" endtime="20170809 11:04:52.437" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:52.438">Delete All Sessions</msg>
<status starttime="20170809 11:04:52.437" endtime="20170809 11:04:52.438" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:52.113" endtime="20170809 11:04:52.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.438" endtime="20170809 11:04:52.439" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.439">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:52.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:52.439">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:52.439" endtime="20170809 11:04:52.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.440">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:04:52.108" endtime="20170809 11:04:52.440" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.440">${host_state} = Running</msg>
<status starttime="20170809 11:04:52.107" endtime="20170809 11:04:52.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:04:52.441" endtime="20170809 11:04:52.441" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.445">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:04:52.445" endtime="20170809 11:04:52.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.446">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:04:52.446" endtime="20170809 11:04:52.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.446">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:04:52.446" endtime="20170809 11:04:52.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.447">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:04:52.447" endtime="20170809 11:04:52.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.697">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:04:52.448" endtime="20170809 11:04:52.697" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.697">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:04:52.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:52.447" endtime="20170809 11:04:52.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.697">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.697" endtime="20170809 11:04:52.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.698" endtime="20170809 11:04:52.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.444" endtime="20170809 11:04:52.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.444" endtime="20170809 11:04:52.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.443" endtime="20170809 11:04:52.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.699">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:04:52.699" endtime="20170809 11:04:52.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.701">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:04:52.700" endtime="20170809 11:04:52.701" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.707">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:04:52.707" endtime="20170809 11:04:52.707" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.701" endtime="20170809 11:04:52.708" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.700" endtime="20170809 11:04:52.708" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.699" endtime="20170809 11:04:52.708" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.802">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:04:52.802">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:52.708" endtime="20170809 11:04:52.802" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.804">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:52.804" endtime="20170809 11:04:52.804" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.805">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:04:52.805" endtime="20170809 11:04:52.805" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.804" endtime="20170809 11:04:52.805" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.803" endtime="20170809 11:04:52.805" status="PASS"></status>
</kw>
<status starttime="20170809 11:04:52.802" endtime="20170809 11:04:52.805" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:04:52.806">Delete All Sessions</msg>
<status starttime="20170809 11:04:52.806" endtime="20170809 11:04:52.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.806">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:04:52.442" endtime="20170809 11:04:52.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:04:52.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:04:52.806" endtime="20170809 11:04:52.807" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:04:52.807">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:04:52.807">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:04:52.808">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:04:52.807" endtime="20170809 11:04:52.808" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.808">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:04:52.442" endtime="20170809 11:04:52.808" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:04:52.808">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:04:52.441" endtime="20170809 11:04:52.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:04:52.814">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:04:52.808" endtime="20170809 11:04:52.814" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:52.441" endtime="20170809 11:04:52.814" status="FAIL"></status>
</kw>
<status starttime="20170809 11:04:51.818" endtime="20170809 11:04:52.814" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:02.819">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:02.819" endtime="20170809 11:05:02.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:02.820">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:02.820" endtime="20170809 11:05:02.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:02.821">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:02.821" endtime="20170809 11:05:02.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:02.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:02.821" endtime="20170809 11:05:02.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.022">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:02.822" endtime="20170809 11:05:03.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.022">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:03.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:02.822" endtime="20170809 11:05:03.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.022" endtime="20170809 11:05:03.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.023" endtime="20170809 11:05:03.023" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:02.819" endtime="20170809 11:05:03.023" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:02.818" endtime="20170809 11:05:03.023" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:02.817" endtime="20170809 11:05:03.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.024">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:05:03.024" endtime="20170809 11:05:03.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.026">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:03.026" endtime="20170809 11:05:03.026" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.027">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:03.027" endtime="20170809 11:05:03.027" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.027" endtime="20170809 11:05:03.028" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.025" endtime="20170809 11:05:03.028" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.025" endtime="20170809 11:05:03.028" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.090">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:03.090">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:03.028" endtime="20170809 11:05:03.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.092">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:03.092" endtime="20170809 11:05:03.092" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.093">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:03.093" endtime="20170809 11:05:03.093" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.092" endtime="20170809 11:05:03.093" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.091" endtime="20170809 11:05:03.093" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.091" endtime="20170809 11:05:03.093" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:03.094">Delete All Sessions</msg>
<status starttime="20170809 11:05:03.094" endtime="20170809 11:05:03.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.094">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:02.817" endtime="20170809 11:05:03.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.094" endtime="20170809 11:05:03.095" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.095">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:03.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:03.096">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:03.095" endtime="20170809 11:05:03.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.096">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:05:02.816" endtime="20170809 11:05:03.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.096">${power_state} = On</msg>
<status starttime="20170809 11:05:02.816" endtime="20170809 11:05:03.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:05:03.096" endtime="20170809 11:05:03.097" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:02.815" endtime="20170809 11:05:03.097" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.101">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:03.100" endtime="20170809 11:05:03.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:03.101" endtime="20170809 11:05:03.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.102">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:03.102" endtime="20170809 11:05:03.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:03.103" endtime="20170809 11:05:03.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:03.104" endtime="20170809 11:05:03.365" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.365">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:03.365">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:03.103" endtime="20170809 11:05:03.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.366">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.365" endtime="20170809 11:05:03.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.366" endtime="20170809 11:05:03.367" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.100" endtime="20170809 11:05:03.367" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.099" endtime="20170809 11:05:03.367" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.099" endtime="20170809 11:05:03.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.367">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:05:03.367" endtime="20170809 11:05:03.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.370">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:03.369" endtime="20170809 11:05:03.370" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.370">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:03.370" endtime="20170809 11:05:03.371" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.370" endtime="20170809 11:05:03.371" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.368" endtime="20170809 11:05:03.371" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.368" endtime="20170809 11:05:03.371" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.481">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:03.481">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:03.371" endtime="20170809 11:05:03.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:03.482" endtime="20170809 11:05:03.483" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.484">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:03.484" endtime="20170809 11:05:03.484" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.483" endtime="20170809 11:05:03.484" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.482" endtime="20170809 11:05:03.484" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.482" endtime="20170809 11:05:03.484" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:03.485">Delete All Sessions</msg>
<status starttime="20170809 11:05:03.485" endtime="20170809 11:05:03.485" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.485">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:03.098" endtime="20170809 11:05:03.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.485" endtime="20170809 11:05:03.486" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.486">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:03.486">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:03.487">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:03.486" endtime="20170809 11:05:03.487" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.487">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:05:03.097" endtime="20170809 11:05:03.487" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.487">${host_state} = Running</msg>
<status starttime="20170809 11:05:03.097" endtime="20170809 11:05:03.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:05:03.487" endtime="20170809 11:05:03.488" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.492">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:03.492" endtime="20170809 11:05:03.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:03.492" endtime="20170809 11:05:03.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.493">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:03.493" endtime="20170809 11:05:03.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:03.494" endtime="20170809 11:05:03.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.682">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:03.495" endtime="20170809 11:05:03.682" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.683">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:03.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:03.494" endtime="20170809 11:05:03.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.683">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.683" endtime="20170809 11:05:03.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.684" endtime="20170809 11:05:03.684" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.491" endtime="20170809 11:05:03.684" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.491" endtime="20170809 11:05:03.684" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.490" endtime="20170809 11:05:03.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.685">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:05:03.685" endtime="20170809 11:05:03.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.688">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:03.687" endtime="20170809 11:05:03.688" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.689">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:03.689" endtime="20170809 11:05:03.689" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.688" endtime="20170809 11:05:03.689" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.686" endtime="20170809 11:05:03.689" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.685" endtime="20170809 11:05:03.689" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.757">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:03.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:03.690" endtime="20170809 11:05:03.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.758">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:03.758" endtime="20170809 11:05:03.758" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.759">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:03.759" endtime="20170809 11:05:03.759" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.759" endtime="20170809 11:05:03.760" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.757" endtime="20170809 11:05:03.760" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:03.757" endtime="20170809 11:05:03.760" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:03.760">Delete All Sessions</msg>
<status starttime="20170809 11:05:03.760" endtime="20170809 11:05:03.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:03.489" endtime="20170809 11:05:03.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:03.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:03.761" endtime="20170809 11:05:03.761" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:03.762">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:03.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:03.762">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:03.761" endtime="20170809 11:05:03.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.762">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:03.489" endtime="20170809 11:05:03.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:03.762">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:03.488" endtime="20170809 11:05:03.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:05:03.763">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:05:03.763" endtime="20170809 11:05:03.763" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:03.488" endtime="20170809 11:05:03.763" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:02.815" endtime="20170809 11:05:03.763" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:13.769">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:13.768" endtime="20170809 11:05:13.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:13.769">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:13.769" endtime="20170809 11:05:13.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:13.770">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:13.770" endtime="20170809 11:05:13.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:13.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:13.770" endtime="20170809 11:05:13.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:13.771" endtime="20170809 11:05:14.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:14.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:13.771" endtime="20170809 11:05:14.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.140" endtime="20170809 11:05:14.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.141" endtime="20170809 11:05:14.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:13.768" endtime="20170809 11:05:14.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:13.767" endtime="20170809 11:05:14.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:13.767" endtime="20170809 11:05:14.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.142">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:05:14.142" endtime="20170809 11:05:14.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.144">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:14.144" endtime="20170809 11:05:14.144" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.145">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:14.145" endtime="20170809 11:05:14.145" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.145" endtime="20170809 11:05:14.146" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.143" endtime="20170809 11:05:14.146" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.142" endtime="20170809 11:05:14.146" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.313">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:14.314">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:14.146" endtime="20170809 11:05:14.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.316">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:14.315" endtime="20170809 11:05:14.316" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.316">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:14.316" endtime="20170809 11:05:14.317" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.316" endtime="20170809 11:05:14.317" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.314" endtime="20170809 11:05:14.317" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.314" endtime="20170809 11:05:14.317" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:14.317">Delete All Sessions</msg>
<status starttime="20170809 11:05:14.317" endtime="20170809 11:05:14.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:13.766" endtime="20170809 11:05:14.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.318" endtime="20170809 11:05:14.318" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:14.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:14.319">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:14.318" endtime="20170809 11:05:14.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.319">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:05:13.765" endtime="20170809 11:05:14.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.320">${power_state} = On</msg>
<status starttime="20170809 11:05:13.765" endtime="20170809 11:05:14.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:05:14.320" endtime="20170809 11:05:14.320" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:13.764" endtime="20170809 11:05:14.320" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.324">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:14.323" endtime="20170809 11:05:14.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:14.325" endtime="20170809 11:05:14.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.326">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:14.325" endtime="20170809 11:05:14.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:14.326" endtime="20170809 11:05:14.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.520">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:14.327" endtime="20170809 11:05:14.520" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.520">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:14.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:14.327" endtime="20170809 11:05:14.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.521">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.520" endtime="20170809 11:05:14.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.521" endtime="20170809 11:05:14.521" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.323" endtime="20170809 11:05:14.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.322" endtime="20170809 11:05:14.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.322" endtime="20170809 11:05:14.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.522">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:05:14.522" endtime="20170809 11:05:14.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.524">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:14.524" endtime="20170809 11:05:14.524" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.525">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:14.525" endtime="20170809 11:05:14.525" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.525" endtime="20170809 11:05:14.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.523" endtime="20170809 11:05:14.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.523" endtime="20170809 11:05:14.526" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.627">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:14.627">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:14.526" endtime="20170809 11:05:14.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.629">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:14.628" endtime="20170809 11:05:14.629" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.630">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:14.629" endtime="20170809 11:05:14.630" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.629" endtime="20170809 11:05:14.630" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.628" endtime="20170809 11:05:14.630" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.627" endtime="20170809 11:05:14.630" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:14.630">Delete All Sessions</msg>
<status starttime="20170809 11:05:14.630" endtime="20170809 11:05:14.630" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.631">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:14.321" endtime="20170809 11:05:14.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.631" endtime="20170809 11:05:14.631" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.632">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:14.632">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:14.632">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:14.632" endtime="20170809 11:05:14.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.632">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:05:14.321" endtime="20170809 11:05:14.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.633">${host_state} = Running</msg>
<status starttime="20170809 11:05:14.320" endtime="20170809 11:05:14.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:05:14.633" endtime="20170809 11:05:14.633" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.638">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:14.637" endtime="20170809 11:05:14.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.638">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:14.638" endtime="20170809 11:05:14.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.639">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:14.639" endtime="20170809 11:05:14.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:14.639" endtime="20170809 11:05:14.640" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:14.640" endtime="20170809 11:05:14.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.831">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:14.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:14.640" endtime="20170809 11:05:14.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.831">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.831" endtime="20170809 11:05:14.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.832" endtime="20170809 11:05:14.832" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.637" endtime="20170809 11:05:14.832" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.636" endtime="20170809 11:05:14.832" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.636" endtime="20170809 11:05:14.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.833">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:05:14.833" endtime="20170809 11:05:14.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.835">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:14.834" endtime="20170809 11:05:14.835" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.836">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:14.836" endtime="20170809 11:05:14.836" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.835" endtime="20170809 11:05:14.837" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.834" endtime="20170809 11:05:14.837" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.833" endtime="20170809 11:05:14.837" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.939">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:14.940">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:14.837" endtime="20170809 11:05:14.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.941">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:14.941" endtime="20170809 11:05:14.941" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.942">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:14.942" endtime="20170809 11:05:14.942" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.942" endtime="20170809 11:05:14.943" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.940" endtime="20170809 11:05:14.943" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:14.940" endtime="20170809 11:05:14.943" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:14.943">Delete All Sessions</msg>
<status starttime="20170809 11:05:14.943" endtime="20170809 11:05:14.943" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.943">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:14.635" endtime="20170809 11:05:14.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:14.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:14.944" endtime="20170809 11:05:14.944" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:14.945">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:14.945">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:14.945">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:14.945" endtime="20170809 11:05:14.945" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.945">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:14.634" endtime="20170809 11:05:14.945" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:14.946">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:14.634" endtime="20170809 11:05:14.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:05:14.946">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:05:14.946" endtime="20170809 11:05:14.946" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:14.633" endtime="20170809 11:05:14.947" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:13.764" endtime="20170809 11:05:14.947" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:24.952">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:24.951" endtime="20170809 11:05:24.952" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:24.953">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:24.952" endtime="20170809 11:05:24.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:24.953">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:24.953" endtime="20170809 11:05:24.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:24.954">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:24.954" endtime="20170809 11:05:24.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:24.955" endtime="20170809 11:05:25.149" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.149">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:25.149">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:24.954" endtime="20170809 11:05:25.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.150">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.150" endtime="20170809 11:05:25.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.150" endtime="20170809 11:05:25.151" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:24.951" endtime="20170809 11:05:25.151" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:24.950" endtime="20170809 11:05:25.151" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:24.950" endtime="20170809 11:05:25.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.152">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:05:25.151" endtime="20170809 11:05:25.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.154">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:25.153" endtime="20170809 11:05:25.154" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.155">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:25.155" endtime="20170809 11:05:25.155" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.154" endtime="20170809 11:05:25.155" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.153" endtime="20170809 11:05:25.155" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.152" endtime="20170809 11:05:25.155" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:25.235">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:25.156" endtime="20170809 11:05:25.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:25.236" endtime="20170809 11:05:25.237" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.238">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:25.238" endtime="20170809 11:05:25.238" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.237" endtime="20170809 11:05:25.238" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.236" endtime="20170809 11:05:25.238" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.235" endtime="20170809 11:05:25.238" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:25.239">Delete All Sessions</msg>
<status starttime="20170809 11:05:25.238" endtime="20170809 11:05:25.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.239">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:24.949" endtime="20170809 11:05:25.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.239" endtime="20170809 11:05:25.240" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.240">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:25.240">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:25.240">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:25.240" endtime="20170809 11:05:25.240" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.241">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:05:24.948" endtime="20170809 11:05:25.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.241">${power_state} = On</msg>
<status starttime="20170809 11:05:24.948" endtime="20170809 11:05:25.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:05:25.241" endtime="20170809 11:05:25.242" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:24.948" endtime="20170809 11:05:25.242" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.246">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:25.245" endtime="20170809 11:05:25.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.247">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:25.246" endtime="20170809 11:05:25.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.247">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:25.247" endtime="20170809 11:05:25.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.248">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:25.248" endtime="20170809 11:05:25.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.520">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:25.249" endtime="20170809 11:05:25.520" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.520">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:25.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:25.248" endtime="20170809 11:05:25.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.521">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.521" endtime="20170809 11:05:25.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.521" endtime="20170809 11:05:25.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.244" endtime="20170809 11:05:25.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.244" endtime="20170809 11:05:25.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.243" endtime="20170809 11:05:25.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.523">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:05:25.522" endtime="20170809 11:05:25.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.525">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:25.524" endtime="20170809 11:05:25.525" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.526">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:25.526" endtime="20170809 11:05:25.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.525" endtime="20170809 11:05:25.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.523" endtime="20170809 11:05:25.526" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.523" endtime="20170809 11:05:25.526" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.714">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:25.714">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:25.527" endtime="20170809 11:05:25.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.716">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:25.715" endtime="20170809 11:05:25.716" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.716">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:25.716" endtime="20170809 11:05:25.717" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.716" endtime="20170809 11:05:25.717" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.715" endtime="20170809 11:05:25.717" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.714" endtime="20170809 11:05:25.717" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:25.717">Delete All Sessions</msg>
<status starttime="20170809 11:05:25.717" endtime="20170809 11:05:25.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:25.243" endtime="20170809 11:05:25.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.718" endtime="20170809 11:05:25.718" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.719">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:25.719">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:25.719">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:25.718" endtime="20170809 11:05:25.719" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.719">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:05:25.242" endtime="20170809 11:05:25.719" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.720">${host_state} = Running</msg>
<status starttime="20170809 11:05:25.242" endtime="20170809 11:05:25.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:05:25.720" endtime="20170809 11:05:25.720" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.724">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:25.724" endtime="20170809 11:05:25.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.725">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:25.725" endtime="20170809 11:05:25.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.726">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:25.725" endtime="20170809 11:05:25.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.727">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:25.726" endtime="20170809 11:05:25.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.915">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:25.727" endtime="20170809 11:05:25.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:25.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:25.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:25.727" endtime="20170809 11:05:25.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.916">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.916" endtime="20170809 11:05:25.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:25.916" endtime="20170809 11:05:25.917" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.723" endtime="20170809 11:05:25.917" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.723" endtime="20170809 11:05:25.917" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.722" endtime="20170809 11:05:25.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.918">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:05:25.917" endtime="20170809 11:05:25.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:25.923">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:25.919" endtime="20170809 11:05:25.923" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:25.924">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:25.923" endtime="20170809 11:05:25.924" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.923" endtime="20170809 11:05:25.924" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.919" endtime="20170809 11:05:25.924" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:25.918" endtime="20170809 11:05:25.924" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:26.014">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:26.014">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:25.924" endtime="20170809 11:05:26.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:26.016">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:26.015" endtime="20170809 11:05:26.016" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:26.017">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:26.017" endtime="20170809 11:05:26.017" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:26.016" endtime="20170809 11:05:26.017" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:26.015" endtime="20170809 11:05:26.017" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:26.014" endtime="20170809 11:05:26.017" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:26.018">Delete All Sessions</msg>
<status starttime="20170809 11:05:26.018" endtime="20170809 11:05:26.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:26.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:25.722" endtime="20170809 11:05:26.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:26.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:26.018" endtime="20170809 11:05:26.019" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:26.019">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:26.019">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:26.019">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:26.019" endtime="20170809 11:05:26.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:26.020">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:25.721" endtime="20170809 11:05:26.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:26.020">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:25.721" endtime="20170809 11:05:26.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:05:26.021">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:05:26.020" endtime="20170809 11:05:26.021" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:25.720" endtime="20170809 11:05:26.021" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:24.947" endtime="20170809 11:05:26.021" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.026">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:36.026" endtime="20170809 11:05:36.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:36.027" endtime="20170809 11:05:36.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.028">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:36.027" endtime="20170809 11:05:36.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:36.028" endtime="20170809 11:05:36.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:36.029" endtime="20170809 11:05:36.250" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.250">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:36.250">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.029" endtime="20170809 11:05:36.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.252">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.251" endtime="20170809 11:05:36.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.253" endtime="20170809 11:05:36.253" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.025" endtime="20170809 11:05:36.253" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.025" endtime="20170809 11:05:36.253" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.024" endtime="20170809 11:05:36.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.254">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:05:36.254" endtime="20170809 11:05:36.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.256">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:36.256" endtime="20170809 11:05:36.256" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.257">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:36.257" endtime="20170809 11:05:36.257" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.257" endtime="20170809 11:05:36.258" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.255" endtime="20170809 11:05:36.258" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.254" endtime="20170809 11:05:36.258" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.353">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:36.353">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.258" endtime="20170809 11:05:36.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.355">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:36.354" endtime="20170809 11:05:36.355" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.356">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:36.356" endtime="20170809 11:05:36.356" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.355" endtime="20170809 11:05:36.356" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.354" endtime="20170809 11:05:36.356" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.353" endtime="20170809 11:05:36.356" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:36.357">Delete All Sessions</msg>
<status starttime="20170809 11:05:36.357" endtime="20170809 11:05:36.357" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.357">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.023" endtime="20170809 11:05:36.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.358">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.358" endtime="20170809 11:05:36.358" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.358">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:36.359">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:36.359">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:36.358" endtime="20170809 11:05:36.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.359">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:05:36.023" endtime="20170809 11:05:36.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.359">${power_state} = On</msg>
<status starttime="20170809 11:05:36.022" endtime="20170809 11:05:36.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:05:36.360" endtime="20170809 11:05:36.360" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.022" endtime="20170809 11:05:36.360" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:36.363" endtime="20170809 11:05:36.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:36.365" endtime="20170809 11:05:36.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.365">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:36.365" endtime="20170809 11:05:36.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.366">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:36.366" endtime="20170809 11:05:36.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:36.367" endtime="20170809 11:05:36.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.569">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:36.569">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.366" endtime="20170809 11:05:36.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.570">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.569" endtime="20170809 11:05:36.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.570" endtime="20170809 11:05:36.571" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.363" endtime="20170809 11:05:36.571" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.362" endtime="20170809 11:05:36.571" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.362" endtime="20170809 11:05:36.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.571">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:05:36.571" endtime="20170809 11:05:36.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.574">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:36.573" endtime="20170809 11:05:36.574" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.574">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:36.574" endtime="20170809 11:05:36.575" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.574" endtime="20170809 11:05:36.575" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.572" endtime="20170809 11:05:36.575" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.572" endtime="20170809 11:05:36.575" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:36.664">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.575" endtime="20170809 11:05:36.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.665">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:36.665" endtime="20170809 11:05:36.666" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.667">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:36.666" endtime="20170809 11:05:36.667" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.666" endtime="20170809 11:05:36.667" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.665" endtime="20170809 11:05:36.667" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.664" endtime="20170809 11:05:36.667" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:36.667">Delete All Sessions</msg>
<status starttime="20170809 11:05:36.667" endtime="20170809 11:05:36.667" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.668">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.361" endtime="20170809 11:05:36.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.668" endtime="20170809 11:05:36.668" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.669">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:36.669">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:36.669">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:36.669" endtime="20170809 11:05:36.669" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.669">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:05:36.360" endtime="20170809 11:05:36.669" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.670">${host_state} = Running</msg>
<status starttime="20170809 11:05:36.360" endtime="20170809 11:05:36.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:05:36.670" endtime="20170809 11:05:36.670" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.674">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:36.674" endtime="20170809 11:05:36.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:36.675" endtime="20170809 11:05:36.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.676">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:36.675" endtime="20170809 11:05:36.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.677">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:36.676" endtime="20170809 11:05:36.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.889">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:36.677" endtime="20170809 11:05:36.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.889">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:36.890">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.677" endtime="20170809 11:05:36.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.890" endtime="20170809 11:05:36.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.891" endtime="20170809 11:05:36.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.673" endtime="20170809 11:05:36.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.673" endtime="20170809 11:05:36.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.673" endtime="20170809 11:05:36.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.892">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:05:36.892" endtime="20170809 11:05:36.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.894">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:36.893" endtime="20170809 11:05:36.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.895">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:36.895" endtime="20170809 11:05:36.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.895" endtime="20170809 11:05:36.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.893" endtime="20170809 11:05:36.896" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.892" endtime="20170809 11:05:36.896" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.963">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:36.963">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.896" endtime="20170809 11:05:36.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.965">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:36.965" endtime="20170809 11:05:36.965" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.966">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:36.966" endtime="20170809 11:05:36.966" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.965" endtime="20170809 11:05:36.966" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.964" endtime="20170809 11:05:36.966" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:36.964" endtime="20170809 11:05:36.966" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:36.967">Delete All Sessions</msg>
<status starttime="20170809 11:05:36.967" endtime="20170809 11:05:36.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.967">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:36.672" endtime="20170809 11:05:36.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:36.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:36.967" endtime="20170809 11:05:36.968" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:36.968">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:36.968">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:36.968">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:36.968" endtime="20170809 11:05:36.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.969">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:36.671" endtime="20170809 11:05:36.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:36.969">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:36.671" endtime="20170809 11:05:36.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:05:36.970">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:05:36.969" endtime="20170809 11:05:36.970" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:36.670" endtime="20170809 11:05:36.970" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:36.022" endtime="20170809 11:05:36.970" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:46.975">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:46.975" endtime="20170809 11:05:46.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:46.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:46.976" endtime="20170809 11:05:46.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:46.977">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:46.976" endtime="20170809 11:05:46.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:46.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:46.977" endtime="20170809 11:05:46.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.181">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:46.978" endtime="20170809 11:05:47.181" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.182">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:47.182">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:46.978" endtime="20170809 11:05:47.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.182">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.182" endtime="20170809 11:05:47.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.183" endtime="20170809 11:05:47.183" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:46.974" endtime="20170809 11:05:47.183" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:46.974" endtime="20170809 11:05:47.183" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:46.973" endtime="20170809 11:05:47.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.184">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:05:47.184" endtime="20170809 11:05:47.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.186">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:47.185" endtime="20170809 11:05:47.186" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.187">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:47.187" endtime="20170809 11:05:47.187" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.186" endtime="20170809 11:05:47.187" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.185" endtime="20170809 11:05:47.188" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.184" endtime="20170809 11:05:47.188" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.342">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:47.342">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:47.188" endtime="20170809 11:05:47.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.344">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:47.343" endtime="20170809 11:05:47.344" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.345">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:47.345" endtime="20170809 11:05:47.345" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.344" endtime="20170809 11:05:47.345" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.343" endtime="20170809 11:05:47.345" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.342" endtime="20170809 11:05:47.345" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:47.346">Delete All Sessions</msg>
<status starttime="20170809 11:05:47.346" endtime="20170809 11:05:47.346" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.346">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:46.972" endtime="20170809 11:05:47.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.346" endtime="20170809 11:05:47.347" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.347">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:47.347">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:47.347">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:47.347" endtime="20170809 11:05:47.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.348">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:05:46.972" endtime="20170809 11:05:47.348" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.348">${power_state} = On</msg>
<status starttime="20170809 11:05:46.971" endtime="20170809 11:05:47.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:05:47.348" endtime="20170809 11:05:47.349" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:46.971" endtime="20170809 11:05:47.349" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.354">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:47.353" endtime="20170809 11:05:47.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.355">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:47.355" endtime="20170809 11:05:47.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.356">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:47.355" endtime="20170809 11:05:47.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.356">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:47.356" endtime="20170809 11:05:47.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.616">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:47.357" endtime="20170809 11:05:47.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.616">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:47.616">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:47.357" endtime="20170809 11:05:47.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.617">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.617" endtime="20170809 11:05:47.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.617" endtime="20170809 11:05:47.618" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.353" endtime="20170809 11:05:47.618" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.352" endtime="20170809 11:05:47.618" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.352" endtime="20170809 11:05:47.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.619">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:05:47.618" endtime="20170809 11:05:47.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.621">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:47.620" endtime="20170809 11:05:47.621" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.622">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:47.621" endtime="20170809 11:05:47.622" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.621" endtime="20170809 11:05:47.622" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.619" endtime="20170809 11:05:47.622" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.619" endtime="20170809 11:05:47.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.727">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:47.727">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:47.622" endtime="20170809 11:05:47.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.728">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:47.728" endtime="20170809 11:05:47.729" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.729">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:47.729" endtime="20170809 11:05:47.729" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.729" endtime="20170809 11:05:47.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.727" endtime="20170809 11:05:47.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.727" endtime="20170809 11:05:47.730" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:47.730">Delete All Sessions</msg>
<status starttime="20170809 11:05:47.730" endtime="20170809 11:05:47.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.730">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:47.350" endtime="20170809 11:05:47.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.731" endtime="20170809 11:05:47.731" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.732">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:47.732">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:47.732">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:47.731" endtime="20170809 11:05:47.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.732">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:05:47.349" endtime="20170809 11:05:47.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.732">${host_state} = Running</msg>
<status starttime="20170809 11:05:47.349" endtime="20170809 11:05:47.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:05:47.733" endtime="20170809 11:05:47.733" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.738">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:47.737" endtime="20170809 11:05:47.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.739">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:47.739" endtime="20170809 11:05:47.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.740">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:47.740" endtime="20170809 11:05:47.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.741">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:47.741" endtime="20170809 11:05:47.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.938">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:47.742" endtime="20170809 11:05:47.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:47.939">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:47.939">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:47.742" endtime="20170809 11:05:47.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.939">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.939" endtime="20170809 11:05:47.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:47.940" endtime="20170809 11:05:47.940" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.737" endtime="20170809 11:05:47.940" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.736" endtime="20170809 11:05:47.940" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.735" endtime="20170809 11:05:47.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.941">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:05:47.941" endtime="20170809 11:05:47.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:47.944">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:47.942" endtime="20170809 11:05:47.944" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:47.945">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:47.945" endtime="20170809 11:05:47.945" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.944" endtime="20170809 11:05:47.945" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.942" endtime="20170809 11:05:47.945" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:47.941" endtime="20170809 11:05:47.945" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:48.013">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:48.013">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:47.946" endtime="20170809 11:05:48.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:48.015">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:48.014" endtime="20170809 11:05:48.015" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:48.016">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:48.015" endtime="20170809 11:05:48.016" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:48.015" endtime="20170809 11:05:48.016" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:48.014" endtime="20170809 11:05:48.016" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:48.013" endtime="20170809 11:05:48.016" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:48.017">Delete All Sessions</msg>
<status starttime="20170809 11:05:48.016" endtime="20170809 11:05:48.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:48.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:47.735" endtime="20170809 11:05:48.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:48.017">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:48.017" endtime="20170809 11:05:48.018" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:48.018">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:48.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:48.018">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:48.018" endtime="20170809 11:05:48.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:48.019">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:47.734" endtime="20170809 11:05:48.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:48.019">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:47.734" endtime="20170809 11:05:48.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:05:48.019">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:05:48.019" endtime="20170809 11:05:48.019" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:47.733" endtime="20170809 11:05:48.020" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:46.971" endtime="20170809 11:05:48.020" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.025">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:58.025" endtime="20170809 11:05:58.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:58.026" endtime="20170809 11:05:58.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.027">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:58.026" endtime="20170809 11:05:58.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:58.027" endtime="20170809 11:05:58.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.302">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:58.028" endtime="20170809 11:05:58.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.302">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:58.302">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.028" endtime="20170809 11:05:58.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.303">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.303" endtime="20170809 11:05:58.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.303" endtime="20170809 11:05:58.304" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.024" endtime="20170809 11:05:58.304" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.024" endtime="20170809 11:05:58.304" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.023" endtime="20170809 11:05:58.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.305">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:05:58.304" endtime="20170809 11:05:58.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.307">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:58.306" endtime="20170809 11:05:58.307" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.308">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:58.307" endtime="20170809 11:05:58.308" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.307" endtime="20170809 11:05:58.308" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.305" endtime="20170809 11:05:58.308" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.305" endtime="20170809 11:05:58.308" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.374">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:58.374">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.308" endtime="20170809 11:05:58.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.376">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:58.375" endtime="20170809 11:05:58.376" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.377">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:58.377" endtime="20170809 11:05:58.377" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.376" endtime="20170809 11:05:58.377" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.375" endtime="20170809 11:05:58.377" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.374" endtime="20170809 11:05:58.377" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:58.378">Delete All Sessions</msg>
<status starttime="20170809 11:05:58.378" endtime="20170809 11:05:58.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.022" endtime="20170809 11:05:58.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.378" endtime="20170809 11:05:58.379" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.379">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:58.379">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:58.379">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:58.379" endtime="20170809 11:05:58.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.380">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:05:58.022" endtime="20170809 11:05:58.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.380">${power_state} = On</msg>
<status starttime="20170809 11:05:58.021" endtime="20170809 11:05:58.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:05:58.381" endtime="20170809 11:05:58.381" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.021" endtime="20170809 11:05:58.381" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.385">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:58.385" endtime="20170809 11:05:58.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.386">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:58.386" endtime="20170809 11:05:58.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.387">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:58.386" endtime="20170809 11:05:58.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.387">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:58.387" endtime="20170809 11:05:58.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.573">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:58.388" endtime="20170809 11:05:58.573" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.573">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:58.574">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.388" endtime="20170809 11:05:58.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.574">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.574" endtime="20170809 11:05:58.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.575" endtime="20170809 11:05:58.575" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.384" endtime="20170809 11:05:58.575" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.383" endtime="20170809 11:05:58.575" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.383" endtime="20170809 11:05:58.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.576">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:05:58.576" endtime="20170809 11:05:58.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.578">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:58.577" endtime="20170809 11:05:58.578" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.579">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:05:58.579" endtime="20170809 11:05:58.579" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.578" endtime="20170809 11:05:58.579" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.577" endtime="20170809 11:05:58.579" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.576" endtime="20170809 11:05:58.579" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.698">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:58.698">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.580" endtime="20170809 11:05:58.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.700">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:58.699" endtime="20170809 11:05:58.700" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.701">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:58.701" endtime="20170809 11:05:58.701" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.700" endtime="20170809 11:05:58.701" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.699" endtime="20170809 11:05:58.701" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.699" endtime="20170809 11:05:58.701" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:58.702">Delete All Sessions</msg>
<status starttime="20170809 11:05:58.701" endtime="20170809 11:05:58.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.702">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.382" endtime="20170809 11:05:58.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.702" endtime="20170809 11:05:58.703" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.703">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:58.703">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:58.703">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:58.703" endtime="20170809 11:05:58.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.704">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:05:58.382" endtime="20170809 11:05:58.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.704">${host_state} = Running</msg>
<status starttime="20170809 11:05:58.381" endtime="20170809 11:05:58.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:05:58.704" endtime="20170809 11:05:58.704" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.709">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:05:58.708" endtime="20170809 11:05:58.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:05:58.709" endtime="20170809 11:05:58.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.710">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:05:58.710" endtime="20170809 11:05:58.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.711">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:05:58.711" endtime="20170809 11:05:58.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.913">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:05:58.712" endtime="20170809 11:05:58.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:58.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:05:58.913">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.711" endtime="20170809 11:05:58.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.914">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.913" endtime="20170809 11:05:58.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:58.914" endtime="20170809 11:05:58.915" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.708" endtime="20170809 11:05:58.915" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.707" endtime="20170809 11:05:58.915" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.707" endtime="20170809 11:05:58.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.915">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:05:58.915" endtime="20170809 11:05:58.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:58.922">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:58.921" endtime="20170809 11:05:58.922" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:58.923">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:05:58.923" endtime="20170809 11:05:58.924" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.923" endtime="20170809 11:05:58.924" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.916" endtime="20170809 11:05:58.924" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:58.916" endtime="20170809 11:05:58.924" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:59.013">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:05:59.013">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.924" endtime="20170809 11:05:59.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:59.015">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:59.015" endtime="20170809 11:05:59.015" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:59.016">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:05:59.016" endtime="20170809 11:05:59.016" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:59.015" endtime="20170809 11:05:59.016" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:59.014" endtime="20170809 11:05:59.016" status="PASS"></status>
</kw>
<status starttime="20170809 11:05:59.014" endtime="20170809 11:05:59.016" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:05:59.017">Delete All Sessions</msg>
<status starttime="20170809 11:05:59.017" endtime="20170809 11:05:59.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:59.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:05:58.706" endtime="20170809 11:05:59.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:05:59.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:05:59.017" endtime="20170809 11:05:59.018" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:05:59.018">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:05:59.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:05:59.019">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:05:59.018" endtime="20170809 11:05:59.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:59.019">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:58.706" endtime="20170809 11:05:59.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:05:59.019">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:05:58.705" endtime="20170809 11:05:59.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:05:59.020">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:05:59.019" endtime="20170809 11:05:59.020" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:58.705" endtime="20170809 11:05:59.020" status="FAIL"></status>
</kw>
<status starttime="20170809 11:05:58.020" endtime="20170809 11:05:59.020" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.025">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:09.024" endtime="20170809 11:06:09.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:09.025" endtime="20170809 11:06:09.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.026">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:09.026" endtime="20170809 11:06:09.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:09.027" endtime="20170809 11:06:09.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.280">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:09.028" endtime="20170809 11:06:09.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.280">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:09.280">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.028" endtime="20170809 11:06:09.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.281">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.281" endtime="20170809 11:06:09.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.281" endtime="20170809 11:06:09.282" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.024" endtime="20170809 11:06:09.282" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.023" endtime="20170809 11:06:09.282" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.023" endtime="20170809 11:06:09.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.283">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:06:09.282" endtime="20170809 11:06:09.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.285">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:09.284" endtime="20170809 11:06:09.285" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.286">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:09.285" endtime="20170809 11:06:09.286" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.285" endtime="20170809 11:06:09.286" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.283" endtime="20170809 11:06:09.286" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.283" endtime="20170809 11:06:09.286" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.362">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:09.362">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.286" endtime="20170809 11:06:09.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.364">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:09.363" endtime="20170809 11:06:09.364" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.365">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:09.364" endtime="20170809 11:06:09.365" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.364" endtime="20170809 11:06:09.365" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.363" endtime="20170809 11:06:09.365" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.362" endtime="20170809 11:06:09.365" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:09.365">Delete All Sessions</msg>
<status starttime="20170809 11:06:09.365" endtime="20170809 11:06:09.365" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.022" endtime="20170809 11:06:09.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.366" endtime="20170809 11:06:09.366" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.367">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:09.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:09.367">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:09.367" endtime="20170809 11:06:09.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.367">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:06:09.022" endtime="20170809 11:06:09.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.368">${power_state} = On</msg>
<status starttime="20170809 11:06:09.021" endtime="20170809 11:06:09.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:06:09.368" endtime="20170809 11:06:09.368" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.021" endtime="20170809 11:06:09.368" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.372">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:09.372" endtime="20170809 11:06:09.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.373">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:09.373" endtime="20170809 11:06:09.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.374">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:09.374" endtime="20170809 11:06:09.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.375">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:09.374" endtime="20170809 11:06:09.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.556">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:09.376" endtime="20170809 11:06:09.556" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.556">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:09.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.375" endtime="20170809 11:06:09.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.557">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.557" endtime="20170809 11:06:09.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.558" endtime="20170809 11:06:09.558" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.371" endtime="20170809 11:06:09.558" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.371" endtime="20170809 11:06:09.558" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.370" endtime="20170809 11:06:09.558" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.559">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:06:09.559" endtime="20170809 11:06:09.559" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.561">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:09.560" endtime="20170809 11:06:09.561" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.562">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:09.562" endtime="20170809 11:06:09.562" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.561" endtime="20170809 11:06:09.562" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.560" endtime="20170809 11:06:09.562" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.559" endtime="20170809 11:06:09.562" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.661">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:09.661">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.562" endtime="20170809 11:06:09.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.663">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:09.662" endtime="20170809 11:06:09.663" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.664">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:09.664" endtime="20170809 11:06:09.664" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.663" endtime="20170809 11:06:09.664" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.662" endtime="20170809 11:06:09.664" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.661" endtime="20170809 11:06:09.665" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:09.665">Delete All Sessions</msg>
<status starttime="20170809 11:06:09.665" endtime="20170809 11:06:09.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.369" endtime="20170809 11:06:09.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.665" endtime="20170809 11:06:09.666" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.666">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:09.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:09.667">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:09.666" endtime="20170809 11:06:09.667" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.667">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:06:09.369" endtime="20170809 11:06:09.667" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.667">${host_state} = Running</msg>
<status starttime="20170809 11:06:09.369" endtime="20170809 11:06:09.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:06:09.668" endtime="20170809 11:06:09.668" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.672">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:09.671" endtime="20170809 11:06:09.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:09.672" endtime="20170809 11:06:09.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.673">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:09.673" endtime="20170809 11:06:09.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:09.673" endtime="20170809 11:06:09.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:09.674" endtime="20170809 11:06:09.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.865">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:09.865">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.674" endtime="20170809 11:06:09.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.866">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.865" endtime="20170809 11:06:09.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.866" endtime="20170809 11:06:09.867" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.671" endtime="20170809 11:06:09.867" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.670" endtime="20170809 11:06:09.867" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.670" endtime="20170809 11:06:09.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.868">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:06:09.868" endtime="20170809 11:06:09.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.870">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:09.869" endtime="20170809 11:06:09.870" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.871">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:09.871" endtime="20170809 11:06:09.871" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.870" endtime="20170809 11:06:09.871" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.869" endtime="20170809 11:06:09.871" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.868" endtime="20170809 11:06:09.871" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.937">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:09.937">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.872" endtime="20170809 11:06:09.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.939">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:09.938" endtime="20170809 11:06:09.939" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.940">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:09.939" endtime="20170809 11:06:09.940" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.939" endtime="20170809 11:06:09.940" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.938" endtime="20170809 11:06:09.940" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:09.937" endtime="20170809 11:06:09.940" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:09.940">Delete All Sessions</msg>
<status starttime="20170809 11:06:09.940" endtime="20170809 11:06:09.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.941">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:09.669" endtime="20170809 11:06:09.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:09.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:09.941" endtime="20170809 11:06:09.941" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:09.942">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:09.942">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:09.942">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:09.942" endtime="20170809 11:06:09.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.942">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:09.669" endtime="20170809 11:06:09.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:09.943">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:09.668" endtime="20170809 11:06:09.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:06:09.943">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:06:09.943" endtime="20170809 11:06:09.943" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:09.668" endtime="20170809 11:06:09.943" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:09.021" endtime="20170809 11:06:09.944" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:19.949">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:19.949" endtime="20170809 11:06:19.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:19.950">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:19.950" endtime="20170809 11:06:19.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:19.951">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:19.950" endtime="20170809 11:06:19.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:19.951">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:19.951" endtime="20170809 11:06:19.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:19.952" endtime="20170809 11:06:20.135" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.135">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:20.136">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:19.951" endtime="20170809 11:06:20.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.136" endtime="20170809 11:06:20.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.137" endtime="20170809 11:06:20.137" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:19.948" endtime="20170809 11:06:20.137" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:19.947" endtime="20170809 11:06:20.137" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:19.947" endtime="20170809 11:06:20.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.138">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:06:20.138" endtime="20170809 11:06:20.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.140">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:20.139" endtime="20170809 11:06:20.140" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.141">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:20.141" endtime="20170809 11:06:20.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.140" endtime="20170809 11:06:20.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.139" endtime="20170809 11:06:20.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.138" endtime="20170809 11:06:20.141" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.205">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:20.205">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:20.142" endtime="20170809 11:06:20.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.207">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:20.206" endtime="20170809 11:06:20.207" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.208">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:20.207" endtime="20170809 11:06:20.208" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.207" endtime="20170809 11:06:20.208" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.205" endtime="20170809 11:06:20.208" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.205" endtime="20170809 11:06:20.208" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:20.209">Delete All Sessions</msg>
<status starttime="20170809 11:06:20.209" endtime="20170809 11:06:20.209" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.209">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:19.946" endtime="20170809 11:06:20.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.209" endtime="20170809 11:06:20.210" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.210">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:20.210">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:20.210">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:20.210" endtime="20170809 11:06:20.210" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.211">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:06:19.945" endtime="20170809 11:06:20.211" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.211">${power_state} = On</msg>
<status starttime="20170809 11:06:19.945" endtime="20170809 11:06:20.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:06:20.211" endtime="20170809 11:06:20.212" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:19.945" endtime="20170809 11:06:20.212" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.215">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:20.215" endtime="20170809 11:06:20.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.216">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:20.216" endtime="20170809 11:06:20.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.217">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:20.216" endtime="20170809 11:06:20.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.217">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:20.217" endtime="20170809 11:06:20.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:20.218" endtime="20170809 11:06:20.408" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:20.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:20.218" endtime="20170809 11:06:20.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.409">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.408" endtime="20170809 11:06:20.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.409" endtime="20170809 11:06:20.410" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.214" endtime="20170809 11:06:20.410" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.214" endtime="20170809 11:06:20.410" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.213" endtime="20170809 11:06:20.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.411">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:06:20.410" endtime="20170809 11:06:20.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.413">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:20.412" endtime="20170809 11:06:20.413" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.414">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:20.414" endtime="20170809 11:06:20.414" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.413" endtime="20170809 11:06:20.414" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.411" endtime="20170809 11:06:20.414" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.411" endtime="20170809 11:06:20.414" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.519">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:20.519">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:20.415" endtime="20170809 11:06:20.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.521">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:20.521" endtime="20170809 11:06:20.521" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.522">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:20.522" endtime="20170809 11:06:20.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.521" endtime="20170809 11:06:20.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.520" endtime="20170809 11:06:20.522" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.520" endtime="20170809 11:06:20.522" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:20.523">Delete All Sessions</msg>
<status starttime="20170809 11:06:20.523" endtime="20170809 11:06:20.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.523">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:20.213" endtime="20170809 11:06:20.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.523" endtime="20170809 11:06:20.524" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.524">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:20.524">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:20.524">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:20.524" endtime="20170809 11:06:20.525" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.525">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:06:20.212" endtime="20170809 11:06:20.525" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.525">${host_state} = Running</msg>
<status starttime="20170809 11:06:20.212" endtime="20170809 11:06:20.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:06:20.525" endtime="20170809 11:06:20.526" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:20.529" endtime="20170809 11:06:20.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:20.530" endtime="20170809 11:06:20.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.531">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:20.531" endtime="20170809 11:06:20.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:20.531" endtime="20170809 11:06:20.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.759">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:20.532" endtime="20170809 11:06:20.759" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.759">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:20.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:20.532" endtime="20170809 11:06:20.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.760">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.759" endtime="20170809 11:06:20.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.760">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.760" endtime="20170809 11:06:20.760" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.529" endtime="20170809 11:06:20.761" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.528" endtime="20170809 11:06:20.761" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.528" endtime="20170809 11:06:20.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.761">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:06:20.761" endtime="20170809 11:06:20.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.763">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:20.763" endtime="20170809 11:06:20.763" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.764">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:20.764" endtime="20170809 11:06:20.764" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.764" endtime="20170809 11:06:20.765" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.762" endtime="20170809 11:06:20.765" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.762" endtime="20170809 11:06:20.765" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.831">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:20.831">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:20.765" endtime="20170809 11:06:20.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.833">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:20.832" endtime="20170809 11:06:20.833" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.834">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:20.834" endtime="20170809 11:06:20.834" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.833" endtime="20170809 11:06:20.834" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.832" endtime="20170809 11:06:20.834" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:20.831" endtime="20170809 11:06:20.834" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:20.835">Delete All Sessions</msg>
<status starttime="20170809 11:06:20.834" endtime="20170809 11:06:20.835" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:20.527" endtime="20170809 11:06:20.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:20.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:20.835" endtime="20170809 11:06:20.836" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:20.836">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:20.836">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:20.836">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:20.836" endtime="20170809 11:06:20.836" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.837">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:20.527" endtime="20170809 11:06:20.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:20.837">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:20.526" endtime="20170809 11:06:20.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:06:20.838">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:06:20.837" endtime="20170809 11:06:20.838" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:20.526" endtime="20170809 11:06:20.838" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:19.944" endtime="20170809 11:06:20.838" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:30.844">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:30.843" endtime="20170809 11:06:30.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:30.845">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:30.844" endtime="20170809 11:06:30.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:30.845">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:30.845" endtime="20170809 11:06:30.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:30.846">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:30.845" endtime="20170809 11:06:30.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:30.847" endtime="20170809 11:06:31.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.060">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:31.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:30.846" endtime="20170809 11:06:31.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.060" endtime="20170809 11:06:31.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.061" endtime="20170809 11:06:31.061" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:30.843" endtime="20170809 11:06:31.061" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:30.842" endtime="20170809 11:06:31.061" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:30.841" endtime="20170809 11:06:31.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.062">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:06:31.062" endtime="20170809 11:06:31.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.064">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:31.063" endtime="20170809 11:06:31.064" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.065">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:31.065" endtime="20170809 11:06:31.065" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.064" endtime="20170809 11:06:31.065" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.063" endtime="20170809 11:06:31.065" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.062" endtime="20170809 11:06:31.065" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.133">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:31.133">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:31.066" endtime="20170809 11:06:31.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.135">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:31.134" endtime="20170809 11:06:31.135" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.136">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:31.136" endtime="20170809 11:06:31.136" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.135" endtime="20170809 11:06:31.136" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.134" endtime="20170809 11:06:31.136" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.133" endtime="20170809 11:06:31.136" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:31.137">Delete All Sessions</msg>
<status starttime="20170809 11:06:31.137" endtime="20170809 11:06:31.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.137">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:30.841" endtime="20170809 11:06:31.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.137" endtime="20170809 11:06:31.138" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.138">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:31.138">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:31.139">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:31.138" endtime="20170809 11:06:31.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.139">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:06:30.840" endtime="20170809 11:06:31.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.139">${power_state} = On</msg>
<status starttime="20170809 11:06:30.840" endtime="20170809 11:06:31.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:06:31.140" endtime="20170809 11:06:31.140" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:30.839" endtime="20170809 11:06:31.140" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.143">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:31.143" endtime="20170809 11:06:31.144" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.144">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:31.144" endtime="20170809 11:06:31.144" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.145">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:31.145" endtime="20170809 11:06:31.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:31.145" endtime="20170809 11:06:31.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.324">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:31.146" endtime="20170809 11:06:31.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.324">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:31.324">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:31.146" endtime="20170809 11:06:31.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.325">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.324" endtime="20170809 11:06:31.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.325" endtime="20170809 11:06:31.326" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.143" endtime="20170809 11:06:31.326" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.142" endtime="20170809 11:06:31.326" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.142" endtime="20170809 11:06:31.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.326">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:06:31.326" endtime="20170809 11:06:31.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.329">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:31.328" endtime="20170809 11:06:31.329" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.330">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:31.330" endtime="20170809 11:06:31.330" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.329" endtime="20170809 11:06:31.330" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.327" endtime="20170809 11:06:31.330" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.327" endtime="20170809 11:06:31.330" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.425">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:31.425">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:31.331" endtime="20170809 11:06:31.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.427">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:31.427" endtime="20170809 11:06:31.427" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.428">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:31.428" endtime="20170809 11:06:31.428" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.428" endtime="20170809 11:06:31.428" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.426" endtime="20170809 11:06:31.429" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.426" endtime="20170809 11:06:31.429" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:31.429">Delete All Sessions</msg>
<status starttime="20170809 11:06:31.429" endtime="20170809 11:06:31.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:31.141" endtime="20170809 11:06:31.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.430" endtime="20170809 11:06:31.430" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.431">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:31.431">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:31.431">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:31.430" endtime="20170809 11:06:31.431" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.431">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:06:31.140" endtime="20170809 11:06:31.431" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.431">${host_state} = Running</msg>
<status starttime="20170809 11:06:31.140" endtime="20170809 11:06:31.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:06:31.432" endtime="20170809 11:06:31.432" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.436">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:31.435" endtime="20170809 11:06:31.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:31.436" endtime="20170809 11:06:31.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.437">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:31.437" endtime="20170809 11:06:31.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.441">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:31.437" endtime="20170809 11:06:31.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.642">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:31.442" endtime="20170809 11:06:31.642" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.642">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:31.642">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:31.441" endtime="20170809 11:06:31.642" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.643">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.642" endtime="20170809 11:06:31.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.643" endtime="20170809 11:06:31.644" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.435" endtime="20170809 11:06:31.644" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.434" endtime="20170809 11:06:31.644" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.434" endtime="20170809 11:06:31.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.644">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:06:31.644" endtime="20170809 11:06:31.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.646">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:31.646" endtime="20170809 11:06:31.647" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.647">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:31.647" endtime="20170809 11:06:31.648" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.647" endtime="20170809 11:06:31.648" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.645" endtime="20170809 11:06:31.648" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.645" endtime="20170809 11:06:31.648" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.732">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:31.732">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:31.648" endtime="20170809 11:06:31.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.734">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:31.733" endtime="20170809 11:06:31.734" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.734">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:31.734" endtime="20170809 11:06:31.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.734" endtime="20170809 11:06:31.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.733" endtime="20170809 11:06:31.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:31.732" endtime="20170809 11:06:31.735" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:31.735">Delete All Sessions</msg>
<status starttime="20170809 11:06:31.735" endtime="20170809 11:06:31.735" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.736">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:31.433" endtime="20170809 11:06:31.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:31.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:31.736" endtime="20170809 11:06:31.736" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:31.737">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:31.737">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:31.737">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:31.737" endtime="20170809 11:06:31.737" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.737">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:31.433" endtime="20170809 11:06:31.737" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:31.738">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:31.432" endtime="20170809 11:06:31.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:06:31.738">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:06:31.738" endtime="20170809 11:06:31.738" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:31.432" endtime="20170809 11:06:31.738" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:30.839" endtime="20170809 11:06:31.739" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:41.744">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:41.744" endtime="20170809 11:06:41.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:41.745">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:41.745" endtime="20170809 11:06:41.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:41.746">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:41.745" endtime="20170809 11:06:41.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:41.746">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:41.746" endtime="20170809 11:06:41.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:42.565">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:41.747" endtime="20170809 11:06:42.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:42.565">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:42.565">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:41.747" endtime="20170809 11:06:42.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:42.566">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:42.565" endtime="20170809 11:06:42.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:42.566">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:42.566" endtime="20170809 11:06:42.566" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:41.743" endtime="20170809 11:06:42.566" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:41.743" endtime="20170809 11:06:42.567" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:41.742" endtime="20170809 11:06:42.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:42.567">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:06:42.567" endtime="20170809 11:06:42.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:42.569">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:42.569" endtime="20170809 11:06:42.570" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:42.571">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:42.570" endtime="20170809 11:06:42.571" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:42.570" endtime="20170809 11:06:42.571" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:42.568" endtime="20170809 11:06:42.571" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:42.568" endtime="20170809 11:06:42.571" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.271">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:47.271">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:42.571" endtime="20170809 11:06:47.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.274">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:47.273" endtime="20170809 11:06:47.274" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:47.274">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:47.274" endtime="20170809 11:06:47.275" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.274" endtime="20170809 11:06:47.275" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.272" endtime="20170809 11:06:47.275" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.272" endtime="20170809 11:06:47.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:47.275">Delete All Sessions</msg>
<status starttime="20170809 11:06:47.275" endtime="20170809 11:06:47.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:47.275">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:41.741" endtime="20170809 11:06:47.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:47.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:47.276" endtime="20170809 11:06:47.276" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.277">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:47.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:47.277">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:47.276" endtime="20170809 11:06:47.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:47.277">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:06:41.740" endtime="20170809 11:06:47.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:47.278">${power_state} = On</msg>
<status starttime="20170809 11:06:41.740" endtime="20170809 11:06:47.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:06:47.278" endtime="20170809 11:06:47.278" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:41.740" endtime="20170809 11:06:47.278" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:47.282">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:47.281" endtime="20170809 11:06:47.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:47.282" endtime="20170809 11:06:47.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.283">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:47.283" endtime="20170809 11:06:47.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:47.284" endtime="20170809 11:06:47.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:47.742">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:47.285" endtime="20170809 11:06:47.742" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:47.742">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:47.742">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:47.284" endtime="20170809 11:06:47.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:47.743">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:47.742" endtime="20170809 11:06:47.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:47.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:47.743" endtime="20170809 11:06:47.743" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.281" endtime="20170809 11:06:47.744" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.280" endtime="20170809 11:06:47.744" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.280" endtime="20170809 11:06:47.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.744">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:06:47.744" endtime="20170809 11:06:47.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:47.747">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:47.746" endtime="20170809 11:06:47.747" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:47.748">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:06:47.748" endtime="20170809 11:06:47.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.747" endtime="20170809 11:06:47.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.745" endtime="20170809 11:06:47.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:47.745" endtime="20170809 11:06:47.748" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.295">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:48.296">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:47.748" endtime="20170809 11:06:48.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.298">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:48.297" endtime="20170809 11:06:48.298" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:48.298">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:48.298" endtime="20170809 11:06:48.299" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.298" endtime="20170809 11:06:48.299" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.296" endtime="20170809 11:06:48.299" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.296" endtime="20170809 11:06:48.299" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:48.299">Delete All Sessions</msg>
<status starttime="20170809 11:06:48.299" endtime="20170809 11:06:48.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:48.300">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:47.279" endtime="20170809 11:06:48.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:48.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:48.300" endtime="20170809 11:06:48.300" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.301">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:48.301">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:48.301">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:48.301" endtime="20170809 11:06:48.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:48.301">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:06:47.279" endtime="20170809 11:06:48.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:48.302">${host_state} = Running</msg>
<status starttime="20170809 11:06:47.278" endtime="20170809 11:06:48.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:06:48.302" endtime="20170809 11:06:48.302" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:48.306">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:06:48.306" endtime="20170809 11:06:48.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.307">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:06:48.307" endtime="20170809 11:06:48.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:06:48.307" endtime="20170809 11:06:48.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:06:48.308" endtime="20170809 11:06:48.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:48.930">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:06:48.309" endtime="20170809 11:06:48.930" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:48.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:06:48.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:48.309" endtime="20170809 11:06:48.930" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:48.931">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:48.931" endtime="20170809 11:06:48.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:48.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:48.931" endtime="20170809 11:06:48.932" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.305" endtime="20170809 11:06:48.932" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.305" endtime="20170809 11:06:48.932" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.304" endtime="20170809 11:06:48.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.933">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:06:48.932" endtime="20170809 11:06:48.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:48.935">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:48.934" endtime="20170809 11:06:48.935" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:48.936">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:06:48.936" endtime="20170809 11:06:48.936" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.935" endtime="20170809 11:06:48.936" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.934" endtime="20170809 11:06:48.936" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:48.933" endtime="20170809 11:06:48.936" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:50.197">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:06:50.197">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:48.936" endtime="20170809 11:06:50.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:50.199">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:50.199" endtime="20170809 11:06:50.199" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:50.200">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:06:50.200" endtime="20170809 11:06:50.200" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:50.199" endtime="20170809 11:06:50.200" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:50.198" endtime="20170809 11:06:50.200" status="PASS"></status>
</kw>
<status starttime="20170809 11:06:50.198" endtime="20170809 11:06:50.200" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:06:50.201">Delete All Sessions</msg>
<status starttime="20170809 11:06:50.201" endtime="20170809 11:06:50.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:50.201">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:06:48.304" endtime="20170809 11:06:50.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:06:50.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:06:50.201" endtime="20170809 11:06:50.202" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:06:50.202">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:06:50.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:06:50.202">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:06:50.202" endtime="20170809 11:06:50.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:50.203">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:48.303" endtime="20170809 11:06:50.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:06:50.203">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:06:48.303" endtime="20170809 11:06:50.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:06:50.204">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:06:50.203" endtime="20170809 11:06:50.204" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:48.302" endtime="20170809 11:06:50.204" status="FAIL"></status>
</kw>
<status starttime="20170809 11:06:41.739" endtime="20170809 11:06:50.204" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:00.210">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:00.210" endtime="20170809 11:07:00.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:00.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:00.211" endtime="20170809 11:07:00.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:00.212">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:00.211" endtime="20170809 11:07:00.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:00.212">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:00.212" endtime="20170809 11:07:00.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:01.133">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:00.213" endtime="20170809 11:07:01.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:01.133">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:01.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:00.213" endtime="20170809 11:07:01.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:01.134">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:01.134" endtime="20170809 11:07:01.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:01.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:01.134" endtime="20170809 11:07:01.135" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:00.209" endtime="20170809 11:07:01.135" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:00.208" endtime="20170809 11:07:01.135" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:00.207" endtime="20170809 11:07:01.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:01.136">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:07:01.135" endtime="20170809 11:07:01.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:01.138">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:01.137" endtime="20170809 11:07:01.138" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:01.139">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:01.139" endtime="20170809 11:07:01.139" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:01.138" endtime="20170809 11:07:01.139" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:01.136" endtime="20170809 11:07:01.139" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:01.136" endtime="20170809 11:07:01.139" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:03.910">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:03.911">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:01.139" endtime="20170809 11:07:03.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:03.913">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:03.912" endtime="20170809 11:07:03.913" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:03.914">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:03.914" endtime="20170809 11:07:03.914" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:03.913" endtime="20170809 11:07:03.914" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:03.911" endtime="20170809 11:07:03.914" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:03.911" endtime="20170809 11:07:03.914" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:03.915">Delete All Sessions</msg>
<status starttime="20170809 11:07:03.914" endtime="20170809 11:07:03.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:03.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:00.206" endtime="20170809 11:07:03.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:03.915">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:03.915" endtime="20170809 11:07:03.916" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:03.916">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:03.916">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:03.916">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:03.916" endtime="20170809 11:07:03.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:03.917">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 11:07:00.206" endtime="20170809 11:07:03.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:03.917">${power_state} = Off</msg>
<status starttime="20170809 11:07:00.205" endtime="20170809 11:07:03.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:07:03.918">On != Off</msg>
<status starttime="20170809 11:07:03.917" endtime="20170809 11:07:03.918" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:00.205" endtime="20170809 11:07:03.918" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:00.204" endtime="20170809 11:07:03.918" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:13.923">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:13.923" endtime="20170809 11:07:13.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:13.924">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:13.924" endtime="20170809 11:07:13.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:13.925">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:13.924" endtime="20170809 11:07:13.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:13.925">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:13.925" endtime="20170809 11:07:13.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.335">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:13.926" endtime="20170809 11:07:14.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.335">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:14.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:13.926" endtime="20170809 11:07:14.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:14.336" endtime="20170809 11:07:14.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:14.337" endtime="20170809 11:07:14.337" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:13.922" endtime="20170809 11:07:14.337" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:13.922" endtime="20170809 11:07:14.337" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:13.921" endtime="20170809 11:07:14.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.338">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:07:14.338" endtime="20170809 11:07:14.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.340">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:14.339" endtime="20170809 11:07:14.340" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.341">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:14.341" endtime="20170809 11:07:14.341" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.340" endtime="20170809 11:07:14.341" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.339" endtime="20170809 11:07:14.341" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.338" endtime="20170809 11:07:14.341" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.604">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:14.604">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:14.342" endtime="20170809 11:07:14.604" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.606">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:14.605" endtime="20170809 11:07:14.606" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.606">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:14.606" endtime="20170809 11:07:14.607" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.606" endtime="20170809 11:07:14.607" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.605" endtime="20170809 11:07:14.607" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.604" endtime="20170809 11:07:14.607" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:14.607">Delete All Sessions</msg>
<status starttime="20170809 11:07:14.607" endtime="20170809 11:07:14.607" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.608">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:13.920" endtime="20170809 11:07:14.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:14.608" endtime="20170809 11:07:14.608" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.609">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:14.609">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:14.609">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:14.609" endtime="20170809 11:07:14.609" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.609">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:07:13.920" endtime="20170809 11:07:14.609" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.610">${power_state} = On</msg>
<status starttime="20170809 11:07:13.919" endtime="20170809 11:07:14.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:07:14.610" endtime="20170809 11:07:14.610" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:13.919" endtime="20170809 11:07:14.610" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.614">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:14.614" endtime="20170809 11:07:14.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:14.615" endtime="20170809 11:07:14.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.616">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:14.616" endtime="20170809 11:07:14.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.617">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:14.616" endtime="20170809 11:07:14.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:14.617" endtime="20170809 11:07:14.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:14.795">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:14.617" endtime="20170809 11:07:14.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:14.795" endtime="20170809 11:07:14.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:14.796" endtime="20170809 11:07:14.796" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.613" endtime="20170809 11:07:14.796" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.613" endtime="20170809 11:07:14.796" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.612" endtime="20170809 11:07:14.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.797">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:07:14.797" endtime="20170809 11:07:14.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.799">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:14.799" endtime="20170809 11:07:14.799" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.800">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:14.800" endtime="20170809 11:07:14.800" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.799" endtime="20170809 11:07:14.800" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.798" endtime="20170809 11:07:14.800" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.797" endtime="20170809 11:07:14.800" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.933">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:14.933">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:14.801" endtime="20170809 11:07:14.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.935">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:14.934" endtime="20170809 11:07:14.935" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.936">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:14.935" endtime="20170809 11:07:14.936" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.935" endtime="20170809 11:07:14.936" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.934" endtime="20170809 11:07:14.936" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.933" endtime="20170809 11:07:14.936" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:14.936">Delete All Sessions</msg>
<status starttime="20170809 11:07:14.936" endtime="20170809 11:07:14.937" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.937">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:14.611" endtime="20170809 11:07:14.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:14.937" endtime="20170809 11:07:14.937" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.938">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:14.938">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:14.938">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:14.938" endtime="20170809 11:07:14.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.938">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:07:14.611" endtime="20170809 11:07:14.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:14.939">${host_state} = Running</msg>
<status starttime="20170809 11:07:14.611" endtime="20170809 11:07:14.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:07:14.939" endtime="20170809 11:07:14.939" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:14.944">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:14.943" endtime="20170809 11:07:14.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.945">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:14.944" endtime="20170809 11:07:14.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.945">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:14.945" endtime="20170809 11:07:14.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:14.946">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:14.946" endtime="20170809 11:07:14.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:15.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:14.947" endtime="20170809 11:07:15.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:15.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:15.123">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:14.946" endtime="20170809 11:07:15.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:15.124">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:15.124" endtime="20170809 11:07:15.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:15.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:15.124" endtime="20170809 11:07:15.125" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.943" endtime="20170809 11:07:15.125" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.942" endtime="20170809 11:07:15.125" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:14.942" endtime="20170809 11:07:15.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:15.126">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:07:15.125" endtime="20170809 11:07:15.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:15.128">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:15.127" endtime="20170809 11:07:15.128" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:15.129">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:15.128" endtime="20170809 11:07:15.129" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:15.128" endtime="20170809 11:07:15.129" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:15.126" endtime="20170809 11:07:15.129" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:15.126" endtime="20170809 11:07:15.129" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:15.195">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:15.195">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:15.129" endtime="20170809 11:07:15.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:15.197">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:15.197" endtime="20170809 11:07:15.197" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:15.198">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:15.198" endtime="20170809 11:07:15.198" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:15.197" endtime="20170809 11:07:15.198" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:15.196" endtime="20170809 11:07:15.199" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:15.196" endtime="20170809 11:07:15.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:15.199">Delete All Sessions</msg>
<status starttime="20170809 11:07:15.199" endtime="20170809 11:07:15.199" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:15.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:14.941" endtime="20170809 11:07:15.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:15.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:15.200" endtime="20170809 11:07:15.200" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:15.200">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:15.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:15.201">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:15.200" endtime="20170809 11:07:15.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:15.201">${state} = Off</msg>
<status starttime="20170809 11:07:14.940" endtime="20170809 11:07:15.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:15.201">${boot_progress} = Off</msg>
<status starttime="20170809 11:07:14.940" endtime="20170809 11:07:15.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:07:15.202">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 11:07:15.202" endtime="20170809 11:07:15.202" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:14.940" endtime="20170809 11:07:15.202" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:13.919" endtime="20170809 11:07:15.202" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.207">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:25.207" endtime="20170809 11:07:25.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.208">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:25.208" endtime="20170809 11:07:25.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.209">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:25.209" endtime="20170809 11:07:25.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:25.209" endtime="20170809 11:07:25.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.417">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:25.210" endtime="20170809 11:07:25.417" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.418">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:25.418">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.210" endtime="20170809 11:07:25.418" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.418">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:25.418" endtime="20170809 11:07:25.418" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.419">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:25.419" endtime="20170809 11:07:25.419" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.206" endtime="20170809 11:07:25.419" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.206" endtime="20170809 11:07:25.419" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.205" endtime="20170809 11:07:25.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.420">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:07:25.420" endtime="20170809 11:07:25.420" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.422">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:25.421" endtime="20170809 11:07:25.422" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.423">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:25.423" endtime="20170809 11:07:25.423" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.422" endtime="20170809 11:07:25.423" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.421" endtime="20170809 11:07:25.423" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.420" endtime="20170809 11:07:25.424" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.494">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:25.494">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.424" endtime="20170809 11:07:25.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.496">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:25.495" endtime="20170809 11:07:25.496" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.497">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:25.497" endtime="20170809 11:07:25.497" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.496" endtime="20170809 11:07:25.497" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.495" endtime="20170809 11:07:25.497" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.494" endtime="20170809 11:07:25.497" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:25.498">Delete All Sessions</msg>
<status starttime="20170809 11:07:25.497" endtime="20170809 11:07:25.498" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.205" endtime="20170809 11:07:25.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:25.498" endtime="20170809 11:07:25.499" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.499">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:25.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:25.499">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:25.499" endtime="20170809 11:07:25.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.500">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:07:25.204" endtime="20170809 11:07:25.500" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.500">${power_state} = On</msg>
<status starttime="20170809 11:07:25.204" endtime="20170809 11:07:25.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:07:25.500" endtime="20170809 11:07:25.501" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.203" endtime="20170809 11:07:25.501" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.505">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:25.505" endtime="20170809 11:07:25.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.509">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:25.509" endtime="20170809 11:07:25.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.510">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:25.510" endtime="20170809 11:07:25.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.511">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:25.511" endtime="20170809 11:07:25.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.759">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:25.512" endtime="20170809 11:07:25.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.760">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:25.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.511" endtime="20170809 11:07:25.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.760">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:25.760" endtime="20170809 11:07:25.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:25.761" endtime="20170809 11:07:25.761" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.504" endtime="20170809 11:07:25.761" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.504" endtime="20170809 11:07:25.761" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.503" endtime="20170809 11:07:25.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.762">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:07:25.762" endtime="20170809 11:07:25.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.764">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:25.764" endtime="20170809 11:07:25.764" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.765">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:25.765" endtime="20170809 11:07:25.765" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.764" endtime="20170809 11:07:25.765" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.763" endtime="20170809 11:07:25.765" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.762" endtime="20170809 11:07:25.766" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.892">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:25.892">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.766" endtime="20170809 11:07:25.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.894">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:25.894" endtime="20170809 11:07:25.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.895">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:25.895" endtime="20170809 11:07:25.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.894" endtime="20170809 11:07:25.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.893" endtime="20170809 11:07:25.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.893" endtime="20170809 11:07:25.895" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:25.896">Delete All Sessions</msg>
<status starttime="20170809 11:07:25.896" endtime="20170809 11:07:25.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.503" endtime="20170809 11:07:25.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:25.896" endtime="20170809 11:07:25.897" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.897">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:25.897">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:25.897">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:25.897" endtime="20170809 11:07:25.898" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.898">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:07:25.501" endtime="20170809 11:07:25.898" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:25.898">${host_state} = Running</msg>
<status starttime="20170809 11:07:25.501" endtime="20170809 11:07:25.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:07:25.898" endtime="20170809 11:07:25.899" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:25.903">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:25.903" endtime="20170809 11:07:25.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.904">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:25.903" endtime="20170809 11:07:25.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.904">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:25.904" endtime="20170809 11:07:25.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:25.905">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:25.905" endtime="20170809 11:07:25.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:26.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:25.906" endtime="20170809 11:07:26.290" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:26.291">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:26.291">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.905" endtime="20170809 11:07:26.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:26.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:26.291" endtime="20170809 11:07:26.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:26.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:26.292" endtime="20170809 11:07:26.292" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.902" endtime="20170809 11:07:26.292" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.902" endtime="20170809 11:07:26.292" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:25.901" endtime="20170809 11:07:26.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:26.293">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:07:26.293" endtime="20170809 11:07:26.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:26.295">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:26.294" endtime="20170809 11:07:26.295" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:26.296">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:26.296" endtime="20170809 11:07:26.296" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:26.295" endtime="20170809 11:07:26.296" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:26.294" endtime="20170809 11:07:26.296" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:26.293" endtime="20170809 11:07:26.296" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:26.779">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:26.779">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:26.297" endtime="20170809 11:07:26.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:26.781">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:26.780" endtime="20170809 11:07:26.781" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:26.782">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:26.781" endtime="20170809 11:07:26.782" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:26.781" endtime="20170809 11:07:26.782" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:26.780" endtime="20170809 11:07:26.782" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:26.779" endtime="20170809 11:07:26.782" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:26.782">Delete All Sessions</msg>
<status starttime="20170809 11:07:26.782" endtime="20170809 11:07:26.783" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:26.783">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:25.900" endtime="20170809 11:07:26.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:26.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:26.783" endtime="20170809 11:07:26.783" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:26.784">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:26.784">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:26.784">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:26.784" endtime="20170809 11:07:26.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:26.784">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:25.900" endtime="20170809 11:07:26.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:26.785">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:25.899" endtime="20170809 11:07:26.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:07:26.785">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:07:26.785" endtime="20170809 11:07:26.785" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:25.899" endtime="20170809 11:07:26.786" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:25.203" endtime="20170809 11:07:26.786" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:36.793">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:36.792" endtime="20170809 11:07:36.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:36.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:36.793" endtime="20170809 11:07:36.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:36.794">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:36.794" endtime="20170809 11:07:36.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:36.795">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:36.795" endtime="20170809 11:07:36.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:36.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:36.796" endtime="20170809 11:07:36.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:36.997">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:36.997">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:36.795" endtime="20170809 11:07:36.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:36.998">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:36.998" endtime="20170809 11:07:36.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:36.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:36.998" endtime="20170809 11:07:36.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:36.791" endtime="20170809 11:07:36.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:36.791" endtime="20170809 11:07:36.999" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:36.790" endtime="20170809 11:07:36.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.000">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:07:37.000" endtime="20170809 11:07:37.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.002">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:37.001" endtime="20170809 11:07:37.002" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.003">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:37.003" endtime="20170809 11:07:37.003" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.002" endtime="20170809 11:07:37.003" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.001" endtime="20170809 11:07:37.003" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.000" endtime="20170809 11:07:37.003" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.068">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:37.068">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:37.004" endtime="20170809 11:07:37.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.070">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:37.070" endtime="20170809 11:07:37.070" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.071">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:37.071" endtime="20170809 11:07:37.071" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.070" endtime="20170809 11:07:37.071" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.069" endtime="20170809 11:07:37.071" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.069" endtime="20170809 11:07:37.071" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:37.072">Delete All Sessions</msg>
<status starttime="20170809 11:07:37.072" endtime="20170809 11:07:37.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.072">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:36.789" endtime="20170809 11:07:37.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:37.072" endtime="20170809 11:07:37.073" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.073">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:37.073">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:37.073">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:37.073" endtime="20170809 11:07:37.073" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.074">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:07:36.788" endtime="20170809 11:07:37.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.074">${power_state} = On</msg>
<status starttime="20170809 11:07:36.787" endtime="20170809 11:07:37.074" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:07:37.074" endtime="20170809 11:07:37.075" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:36.787" endtime="20170809 11:07:37.075" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.079">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:37.078" endtime="20170809 11:07:37.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:37.080" endtime="20170809 11:07:37.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.081">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:37.080" endtime="20170809 11:07:37.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:37.081" endtime="20170809 11:07:37.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:37.082" endtime="20170809 11:07:37.283" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:37.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:37.082" endtime="20170809 11:07:37.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:37.283" endtime="20170809 11:07:37.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:37.284" endtime="20170809 11:07:37.284" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.078" endtime="20170809 11:07:37.284" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.077" endtime="20170809 11:07:37.285" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.077" endtime="20170809 11:07:37.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.285">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:07:37.285" endtime="20170809 11:07:37.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.287">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:37.287" endtime="20170809 11:07:37.287" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.288">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:37.288" endtime="20170809 11:07:37.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.288" endtime="20170809 11:07:37.289" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.286" endtime="20170809 11:07:37.289" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.286" endtime="20170809 11:07:37.289" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.379">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:37.379">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:37.289" endtime="20170809 11:07:37.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.381">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:37.381" endtime="20170809 11:07:37.381" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.382">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:37.382" endtime="20170809 11:07:37.382" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.381" endtime="20170809 11:07:37.382" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.380" endtime="20170809 11:07:37.382" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.380" endtime="20170809 11:07:37.383" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:37.383">Delete All Sessions</msg>
<status starttime="20170809 11:07:37.383" endtime="20170809 11:07:37.383" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:37.076" endtime="20170809 11:07:37.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:37.383" endtime="20170809 11:07:37.384" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.384">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:37.384">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:37.385">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:37.384" endtime="20170809 11:07:37.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.385">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:07:37.075" endtime="20170809 11:07:37.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.385">${host_state} = Running</msg>
<status starttime="20170809 11:07:37.075" endtime="20170809 11:07:37.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:07:37.385" endtime="20170809 11:07:37.386" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.390">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:37.390" endtime="20170809 11:07:37.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.391">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:37.391" endtime="20170809 11:07:37.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.392">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:37.391" endtime="20170809 11:07:37.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.392">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:37.392" endtime="20170809 11:07:37.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.604">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:37.393" endtime="20170809 11:07:37.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.604">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:37.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:37.393" endtime="20170809 11:07:37.604" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.604">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:37.604" endtime="20170809 11:07:37.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:37.605" endtime="20170809 11:07:37.605" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.389" endtime="20170809 11:07:37.605" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.389" endtime="20170809 11:07:37.605" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.388" endtime="20170809 11:07:37.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.606">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:07:37.606" endtime="20170809 11:07:37.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.608">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:37.608" endtime="20170809 11:07:37.608" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.609">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:37.609" endtime="20170809 11:07:37.609" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.609" endtime="20170809 11:07:37.609" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.607" endtime="20170809 11:07:37.610" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.606" endtime="20170809 11:07:37.610" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.675">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:37.676">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:37.610" endtime="20170809 11:07:37.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.677">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:37.677" endtime="20170809 11:07:37.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.678">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:37.678" endtime="20170809 11:07:37.679" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.678" endtime="20170809 11:07:37.679" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.676" endtime="20170809 11:07:37.679" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:37.676" endtime="20170809 11:07:37.679" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:37.679">Delete All Sessions</msg>
<status starttime="20170809 11:07:37.679" endtime="20170809 11:07:37.679" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.680">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:37.387" endtime="20170809 11:07:37.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:37.680">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:37.680" endtime="20170809 11:07:37.680" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:37.681">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:37.681">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:37.681">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:37.681" endtime="20170809 11:07:37.681" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.681">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:37.387" endtime="20170809 11:07:37.681" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:37.682">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:37.386" endtime="20170809 11:07:37.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:07:37.682">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:07:37.682" endtime="20170809 11:07:37.682" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:37.386" endtime="20170809 11:07:37.682" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:36.786" endtime="20170809 11:07:37.683" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.688">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:47.687" endtime="20170809 11:07:47.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:47.688" endtime="20170809 11:07:47.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.689">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:47.689" endtime="20170809 11:07:47.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.690">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:47.690" endtime="20170809 11:07:47.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.889">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:47.691" endtime="20170809 11:07:47.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:47.889">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:47.889">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:47.690" endtime="20170809 11:07:47.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:47.890" endtime="20170809 11:07:47.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:47.891" endtime="20170809 11:07:47.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.687" endtime="20170809 11:07:47.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.686" endtime="20170809 11:07:47.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.686" endtime="20170809 11:07:47.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.892">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:07:47.892" endtime="20170809 11:07:47.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.894">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:47.893" endtime="20170809 11:07:47.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.895">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:47.895" endtime="20170809 11:07:47.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.894" endtime="20170809 11:07:47.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.893" endtime="20170809 11:07:47.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.892" endtime="20170809 11:07:47.895" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:47.962">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:47.896" endtime="20170809 11:07:47.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:47.964" endtime="20170809 11:07:47.964" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:47.965" endtime="20170809 11:07:47.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.964" endtime="20170809 11:07:47.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.963" endtime="20170809 11:07:47.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.963" endtime="20170809 11:07:47.966" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:47.966">Delete All Sessions</msg>
<status starttime="20170809 11:07:47.966" endtime="20170809 11:07:47.966" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:47.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:47.685" endtime="20170809 11:07:47.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:47.966" endtime="20170809 11:07:47.967" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:47.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:47.968">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:47.967" endtime="20170809 11:07:47.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:47.968">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:07:47.685" endtime="20170809 11:07:47.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:47.968">${power_state} = On</msg>
<status starttime="20170809 11:07:47.684" endtime="20170809 11:07:47.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:07:47.968" endtime="20170809 11:07:47.969" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.684" endtime="20170809 11:07:47.969" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:47.972">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:47.972" endtime="20170809 11:07:47.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:47.974" endtime="20170809 11:07:47.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.974">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:47.974" endtime="20170809 11:07:47.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:47.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:47.975" endtime="20170809 11:07:47.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.164">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:47.976" endtime="20170809 11:07:48.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.164">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:48.164">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:47.975" endtime="20170809 11:07:48.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.165">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:48.165" endtime="20170809 11:07:48.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:48.165" endtime="20170809 11:07:48.166" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.972" endtime="20170809 11:07:48.166" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.971" endtime="20170809 11:07:48.166" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:47.971" endtime="20170809 11:07:48.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.167">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:07:48.166" endtime="20170809 11:07:48.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.169">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:48.168" endtime="20170809 11:07:48.169" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.170">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:48.170" endtime="20170809 11:07:48.170" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.169" endtime="20170809 11:07:48.170" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.168" endtime="20170809 11:07:48.170" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.167" endtime="20170809 11:07:48.170" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.259">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:48.259">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:48.171" endtime="20170809 11:07:48.259" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.261">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:48.261" endtime="20170809 11:07:48.261" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.262">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:48.262" endtime="20170809 11:07:48.262" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.261" endtime="20170809 11:07:48.262" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.260" endtime="20170809 11:07:48.262" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.260" endtime="20170809 11:07:48.263" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:48.263">Delete All Sessions</msg>
<status starttime="20170809 11:07:48.263" endtime="20170809 11:07:48.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.263">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:47.970" endtime="20170809 11:07:48.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:48.263" endtime="20170809 11:07:48.264" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.264">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:48.264">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:48.265">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:48.264" endtime="20170809 11:07:48.265" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.265">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:07:47.970" endtime="20170809 11:07:48.265" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.265">${host_state} = Running</msg>
<status starttime="20170809 11:07:47.969" endtime="20170809 11:07:48.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:07:48.265" endtime="20170809 11:07:48.266" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.270">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:48.270" endtime="20170809 11:07:48.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:48.271" endtime="20170809 11:07:48.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.271">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:48.271" endtime="20170809 11:07:48.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:48.272" endtime="20170809 11:07:48.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.459">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:48.273" endtime="20170809 11:07:48.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:48.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:48.272" endtime="20170809 11:07:48.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.460">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:48.460" endtime="20170809 11:07:48.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:48.461" endtime="20170809 11:07:48.461" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.269" endtime="20170809 11:07:48.461" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.269" endtime="20170809 11:07:48.461" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.268" endtime="20170809 11:07:48.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.462">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:07:48.462" endtime="20170809 11:07:48.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.464">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:48.464" endtime="20170809 11:07:48.464" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.465">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:48.465" endtime="20170809 11:07:48.465" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.464" endtime="20170809 11:07:48.465" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.463" endtime="20170809 11:07:48.465" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.462" endtime="20170809 11:07:48.466" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.539">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:48.540">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:48.466" endtime="20170809 11:07:48.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.541">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:48.541" endtime="20170809 11:07:48.541" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.542">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:48.542" endtime="20170809 11:07:48.542" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.542" endtime="20170809 11:07:48.542" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.540" endtime="20170809 11:07:48.543" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:48.540" endtime="20170809 11:07:48.543" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:48.543">Delete All Sessions</msg>
<status starttime="20170809 11:07:48.543" endtime="20170809 11:07:48.543" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.543">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:48.267" endtime="20170809 11:07:48.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:48.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:48.544" endtime="20170809 11:07:48.544" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:48.544">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:48.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:48.545">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:48.544" endtime="20170809 11:07:48.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.545">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:48.267" endtime="20170809 11:07:48.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:48.545">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:48.266" endtime="20170809 11:07:48.545" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:07:48.546">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:07:48.546" endtime="20170809 11:07:48.546" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:48.266" endtime="20170809 11:07:48.546" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:47.683" endtime="20170809 11:07:48.546" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.551">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:58.551" endtime="20170809 11:07:58.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.552">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:58.552" endtime="20170809 11:07:58.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.553">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:58.552" endtime="20170809 11:07:58.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.553">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:58.553" endtime="20170809 11:07:58.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.762">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:58.554" endtime="20170809 11:07:58.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:58.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:58.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:58.554" endtime="20170809 11:07:58.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:58.763" endtime="20170809 11:07:58.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:58.763" endtime="20170809 11:07:58.764" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.550" endtime="20170809 11:07:58.764" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.550" endtime="20170809 11:07:58.764" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.549" endtime="20170809 11:07:58.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.765">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:07:58.764" endtime="20170809 11:07:58.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.767">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:58.766" endtime="20170809 11:07:58.767" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.767">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:58.767" endtime="20170809 11:07:58.768" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.767" endtime="20170809 11:07:58.768" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.765" endtime="20170809 11:07:58.768" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.765" endtime="20170809 11:07:58.768" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.832">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:58.832">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:58.768" endtime="20170809 11:07:58.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.833">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:58.833" endtime="20170809 11:07:58.834" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.834">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:58.834" endtime="20170809 11:07:58.834" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.834" endtime="20170809 11:07:58.835" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.833" endtime="20170809 11:07:58.835" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.832" endtime="20170809 11:07:58.835" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:58.835">Delete All Sessions</msg>
<status starttime="20170809 11:07:58.835" endtime="20170809 11:07:58.835" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:58.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:58.549" endtime="20170809 11:07:58.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:58.836" endtime="20170809 11:07:58.836" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.837">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:58.837">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:58.837">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:58.836" endtime="20170809 11:07:58.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:58.837">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:07:58.548" endtime="20170809 11:07:58.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:58.837">${power_state} = On</msg>
<status starttime="20170809 11:07:58.548" endtime="20170809 11:07:58.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:07:58.838" endtime="20170809 11:07:58.838" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.547" endtime="20170809 11:07:58.838" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:58.842">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:58.841" endtime="20170809 11:07:58.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.848">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:58.848" endtime="20170809 11:07:58.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.849">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:58.848" endtime="20170809 11:07:58.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:58.850">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:58.849" endtime="20170809 11:07:58.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.148">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:58.851" endtime="20170809 11:07:59.148" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:59.149">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:58.850" endtime="20170809 11:07:59.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:59.149" endtime="20170809 11:07:59.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:59.150" endtime="20170809 11:07:59.150" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.841" endtime="20170809 11:07:59.150" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.841" endtime="20170809 11:07:59.150" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:58.840" endtime="20170809 11:07:59.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.151">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:07:59.151" endtime="20170809 11:07:59.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.153">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:59.152" endtime="20170809 11:07:59.153" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.154">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:07:59.154" endtime="20170809 11:07:59.154" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.153" endtime="20170809 11:07:59.154" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.152" endtime="20170809 11:07:59.154" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.151" endtime="20170809 11:07:59.154" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.258">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:59.258">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:59.155" endtime="20170809 11:07:59.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.260">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:59.259" endtime="20170809 11:07:59.260" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.261">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:59.260" endtime="20170809 11:07:59.261" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.260" endtime="20170809 11:07:59.261" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.259" endtime="20170809 11:07:59.261" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.258" endtime="20170809 11:07:59.261" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:59.261">Delete All Sessions</msg>
<status starttime="20170809 11:07:59.261" endtime="20170809 11:07:59.261" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:58.839" endtime="20170809 11:07:59.262" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:59.262" endtime="20170809 11:07:59.262" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.263">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:59.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:59.263">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:59.263" endtime="20170809 11:07:59.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.263">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:07:58.839" endtime="20170809 11:07:59.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.264">${host_state} = Running</msg>
<status starttime="20170809 11:07:58.838" endtime="20170809 11:07:59.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:07:59.264" endtime="20170809 11:07:59.264" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.269">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:07:59.268" endtime="20170809 11:07:59.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:07:59.269" endtime="20170809 11:07:59.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.271">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:07:59.271" endtime="20170809 11:07:59.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:07:59.272" endtime="20170809 11:07:59.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:07:59.273" endtime="20170809 11:07:59.468" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.468">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:07:59.469">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:59.272" endtime="20170809 11:07:59.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.469">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:59.469" endtime="20170809 11:07:59.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:59.470" endtime="20170809 11:07:59.470" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.268" endtime="20170809 11:07:59.470" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.267" endtime="20170809 11:07:59.470" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.267" endtime="20170809 11:07:59.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.471">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:07:59.471" endtime="20170809 11:07:59.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.473">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:59.472" endtime="20170809 11:07:59.473" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.474">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:07:59.474" endtime="20170809 11:07:59.474" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.473" endtime="20170809 11:07:59.475" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.472" endtime="20170809 11:07:59.475" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.471" endtime="20170809 11:07:59.475" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.543">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:07:59.543">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:59.475" endtime="20170809 11:07:59.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.545">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:59.545" endtime="20170809 11:07:59.545" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.546">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:07:59.546" endtime="20170809 11:07:59.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.545" endtime="20170809 11:07:59.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.544" endtime="20170809 11:07:59.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:07:59.544" endtime="20170809 11:07:59.547" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:07:59.547">Delete All Sessions</msg>
<status starttime="20170809 11:07:59.547" endtime="20170809 11:07:59.547" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.547">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:07:59.266" endtime="20170809 11:07:59.547" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:07:59.548">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:07:59.547" endtime="20170809 11:07:59.548" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:07:59.548">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:07:59.548">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:07:59.549">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:07:59.548" endtime="20170809 11:07:59.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.549">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:59.265" endtime="20170809 11:07:59.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:07:59.549">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:07:59.265" endtime="20170809 11:07:59.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:07:59.550">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:07:59.549" endtime="20170809 11:07:59.550" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:59.264" endtime="20170809 11:07:59.550" status="FAIL"></status>
</kw>
<status starttime="20170809 11:07:58.547" endtime="20170809 11:07:59.550" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.555">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:09.555" endtime="20170809 11:08:09.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:09.556" endtime="20170809 11:08:09.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.557">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:09.556" endtime="20170809 11:08:09.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.557">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:09.557" endtime="20170809 11:08:09.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.784">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:09.558" endtime="20170809 11:08:09.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:09.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:09.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:09.558" endtime="20170809 11:08:09.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.785">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:09.785" endtime="20170809 11:08:09.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:09.785" endtime="20170809 11:08:09.786" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.554" endtime="20170809 11:08:09.786" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.554" endtime="20170809 11:08:09.786" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.553" endtime="20170809 11:08:09.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.786">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:08:09.786" endtime="20170809 11:08:09.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.790">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:09.789" endtime="20170809 11:08:09.790" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.791">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:09.791" endtime="20170809 11:08:09.791" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.790" endtime="20170809 11:08:09.791" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.787" endtime="20170809 11:08:09.791" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.787" endtime="20170809 11:08:09.791" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.909">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:09.909">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:09.791" endtime="20170809 11:08:09.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.911">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:09.910" endtime="20170809 11:08:09.911" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.912">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:09.911" endtime="20170809 11:08:09.912" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.911" endtime="20170809 11:08:09.912" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.910" endtime="20170809 11:08:09.912" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.909" endtime="20170809 11:08:09.912" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:09.913">Delete All Sessions</msg>
<status starttime="20170809 11:08:09.912" endtime="20170809 11:08:09.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:09.913">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:09.552" endtime="20170809 11:08:09.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:09.913" endtime="20170809 11:08:09.914" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.914">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:09.914">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:09.915">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:09.914" endtime="20170809 11:08:09.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:09.915">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:08:09.552" endtime="20170809 11:08:09.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:09.915">${power_state} = On</msg>
<status starttime="20170809 11:08:09.552" endtime="20170809 11:08:09.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:08:09.915" endtime="20170809 11:08:09.916" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.551" endtime="20170809 11:08:09.916" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:09.920">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:09.919" endtime="20170809 11:08:09.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:09.920" endtime="20170809 11:08:09.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.921">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:09.921" endtime="20170809 11:08:09.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:09.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:09.922" endtime="20170809 11:08:09.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:09.923" endtime="20170809 11:08:10.112" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:10.112">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:09.922" endtime="20170809 11:08:10.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:10.112" endtime="20170809 11:08:10.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:10.113" endtime="20170809 11:08:10.113" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.918" endtime="20170809 11:08:10.114" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.918" endtime="20170809 11:08:10.114" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:09.917" endtime="20170809 11:08:10.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.114">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:08:10.114" endtime="20170809 11:08:10.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.117">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:10.116" endtime="20170809 11:08:10.117" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.117">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:10.117" endtime="20170809 11:08:10.118" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.117" endtime="20170809 11:08:10.118" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.115" endtime="20170809 11:08:10.118" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.115" endtime="20170809 11:08:10.118" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.206">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:10.206">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:10.118" endtime="20170809 11:08:10.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.208">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:10.207" endtime="20170809 11:08:10.208" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.209">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:10.209" endtime="20170809 11:08:10.209" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.208" endtime="20170809 11:08:10.209" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.207" endtime="20170809 11:08:10.209" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.207" endtime="20170809 11:08:10.209" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:10.210">Delete All Sessions</msg>
<status starttime="20170809 11:08:10.210" endtime="20170809 11:08:10.210" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:09.917" endtime="20170809 11:08:10.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:10.210" endtime="20170809 11:08:10.211" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.211">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:10.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:10.211">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:10.211" endtime="20170809 11:08:10.211" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.212">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:08:09.916" endtime="20170809 11:08:10.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.212">${host_state} = Running</msg>
<status starttime="20170809 11:08:09.916" endtime="20170809 11:08:10.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:08:10.212" endtime="20170809 11:08:10.213" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.217">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:10.217" endtime="20170809 11:08:10.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:10.218" endtime="20170809 11:08:10.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.219">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:10.218" endtime="20170809 11:08:10.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.219">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:10.219" endtime="20170809 11:08:10.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.409">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:10.220" endtime="20170809 11:08:10.409" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.409">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:10.409">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:10.220" endtime="20170809 11:08:10.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.410">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:10.409" endtime="20170809 11:08:10.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:10.410" endtime="20170809 11:08:10.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.216" endtime="20170809 11:08:10.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.216" endtime="20170809 11:08:10.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.215" endtime="20170809 11:08:10.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.411">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:08:10.411" endtime="20170809 11:08:10.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.414">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:10.413" endtime="20170809 11:08:10.414" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.415">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:10.415" endtime="20170809 11:08:10.415" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.414" endtime="20170809 11:08:10.415" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.412" endtime="20170809 11:08:10.415" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.412" endtime="20170809 11:08:10.415" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.511">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:10.511">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:10.415" endtime="20170809 11:08:10.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.513">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:10.512" endtime="20170809 11:08:10.513" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.514">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:10.514" endtime="20170809 11:08:10.514" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.513" endtime="20170809 11:08:10.514" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.512" endtime="20170809 11:08:10.514" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:10.512" endtime="20170809 11:08:10.514" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:10.515">Delete All Sessions</msg>
<status starttime="20170809 11:08:10.515" endtime="20170809 11:08:10.515" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.515">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:10.215" endtime="20170809 11:08:10.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:10.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:10.515" endtime="20170809 11:08:10.516" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:10.516">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:10.516">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:10.516">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:10.516" endtime="20170809 11:08:10.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.517">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:10.214" endtime="20170809 11:08:10.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:10.517">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:10.213" endtime="20170809 11:08:10.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:08:10.518">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:08:10.517" endtime="20170809 11:08:10.518" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:10.213" endtime="20170809 11:08:10.518" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:09.551" endtime="20170809 11:08:10.518" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.524">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:20.524" endtime="20170809 11:08:20.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.525">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:20.525" endtime="20170809 11:08:20.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.526">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:20.525" endtime="20170809 11:08:20.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.526">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:20.526" endtime="20170809 11:08:20.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:20.527" endtime="20170809 11:08:20.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:20.800">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:20.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:20.527" endtime="20170809 11:08:20.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:20.800" endtime="20170809 11:08:20.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:20.801" endtime="20170809 11:08:20.801" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.522" endtime="20170809 11:08:20.802" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.522" endtime="20170809 11:08:20.802" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.521" endtime="20170809 11:08:20.802" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.802">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:08:20.802" endtime="20170809 11:08:20.802" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.804">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:20.804" endtime="20170809 11:08:20.804" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.805">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:20.805" endtime="20170809 11:08:20.805" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.805" endtime="20170809 11:08:20.806" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.803" endtime="20170809 11:08:20.806" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.803" endtime="20170809 11:08:20.806" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.889">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:20.890">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:20.806" endtime="20170809 11:08:20.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.891">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:20.891" endtime="20170809 11:08:20.891" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.892">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:20.892" endtime="20170809 11:08:20.892" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.892" endtime="20170809 11:08:20.893" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.890" endtime="20170809 11:08:20.893" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.890" endtime="20170809 11:08:20.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:20.893">Delete All Sessions</msg>
<status starttime="20170809 11:08:20.893" endtime="20170809 11:08:20.893" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:20.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:20.520" endtime="20170809 11:08:20.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:20.894" endtime="20170809 11:08:20.894" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.895">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:20.895">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:20.895">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:20.894" endtime="20170809 11:08:20.895" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:20.895">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:08:20.520" endtime="20170809 11:08:20.895" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:20.895">${power_state} = On</msg>
<status starttime="20170809 11:08:20.519" endtime="20170809 11:08:20.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:08:20.896" endtime="20170809 11:08:20.896" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.519" endtime="20170809 11:08:20.896" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:20.900">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:20.899" endtime="20170809 11:08:20.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.901">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:20.901" endtime="20170809 11:08:20.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.902">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:20.901" endtime="20170809 11:08:20.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:20.903">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:20.902" endtime="20170809 11:08:20.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:20.903" endtime="20170809 11:08:21.093" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.093">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:21.093">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:20.903" endtime="20170809 11:08:21.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:21.094" endtime="20170809 11:08:21.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:21.094" endtime="20170809 11:08:21.095" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.899" endtime="20170809 11:08:21.095" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.898" endtime="20170809 11:08:21.095" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:20.898" endtime="20170809 11:08:21.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.096">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:08:21.095" endtime="20170809 11:08:21.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.098">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:21.097" endtime="20170809 11:08:21.098" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.099">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:21.098" endtime="20170809 11:08:21.099" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.098" endtime="20170809 11:08:21.099" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.096" endtime="20170809 11:08:21.099" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.096" endtime="20170809 11:08:21.099" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.188">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:21.188">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:21.099" endtime="20170809 11:08:21.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.190">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:21.189" endtime="20170809 11:08:21.190" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:21.190" endtime="20170809 11:08:21.191" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.190" endtime="20170809 11:08:21.191" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.189" endtime="20170809 11:08:21.191" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.188" endtime="20170809 11:08:21.191" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:21.191">Delete All Sessions</msg>
<status starttime="20170809 11:08:21.191" endtime="20170809 11:08:21.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.192">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:20.897" endtime="20170809 11:08:21.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:21.192" endtime="20170809 11:08:21.192" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.193">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:21.193">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:21.193">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:21.193" endtime="20170809 11:08:21.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.193">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:08:20.897" endtime="20170809 11:08:21.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.194">${host_state} = Running</msg>
<status starttime="20170809 11:08:20.896" endtime="20170809 11:08:21.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:08:21.194" endtime="20170809 11:08:21.194" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.198">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:21.198" endtime="20170809 11:08:21.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:21.199" endtime="20170809 11:08:21.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.200">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:21.199" endtime="20170809 11:08:21.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.200">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:21.200" endtime="20170809 11:08:21.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.396">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:21.201" endtime="20170809 11:08:21.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.396">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:21.396">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:21.201" endtime="20170809 11:08:21.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:21.396" endtime="20170809 11:08:21.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:21.397" endtime="20170809 11:08:21.398" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.197" endtime="20170809 11:08:21.398" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.197" endtime="20170809 11:08:21.398" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.196" endtime="20170809 11:08:21.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.398">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:08:21.398" endtime="20170809 11:08:21.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.401">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:21.400" endtime="20170809 11:08:21.401" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.402">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:21.402" endtime="20170809 11:08:21.402" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.401" endtime="20170809 11:08:21.402" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.399" endtime="20170809 11:08:21.402" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.399" endtime="20170809 11:08:21.402" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.467">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:21.468">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:21.403" endtime="20170809 11:08:21.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.470">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:21.469" endtime="20170809 11:08:21.470" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.471">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:21.470" endtime="20170809 11:08:21.471" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.470" endtime="20170809 11:08:21.471" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.469" endtime="20170809 11:08:21.471" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:21.468" endtime="20170809 11:08:21.471" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:21.471">Delete All Sessions</msg>
<status starttime="20170809 11:08:21.471" endtime="20170809 11:08:21.472" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:21.196" endtime="20170809 11:08:21.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:21.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:21.472" endtime="20170809 11:08:21.472" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:21.473">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:21.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:21.473">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:21.473" endtime="20170809 11:08:21.473" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.473">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:21.195" endtime="20170809 11:08:21.474" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:21.474">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:21.195" endtime="20170809 11:08:21.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:08:21.474">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:08:21.474" endtime="20170809 11:08:21.475" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:21.194" endtime="20170809 11:08:21.475" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:20.519" endtime="20170809 11:08:21.475" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.480">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:31.480" endtime="20170809 11:08:31.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.481">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:31.481" endtime="20170809 11:08:31.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.482">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:31.481" endtime="20170809 11:08:31.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.482">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:31.482" endtime="20170809 11:08:31.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.696">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:31.483" endtime="20170809 11:08:31.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:31.696">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:31.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:31.482" endtime="20170809 11:08:31.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.697">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:31.697" endtime="20170809 11:08:31.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:31.697" endtime="20170809 11:08:31.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.479" endtime="20170809 11:08:31.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.479" endtime="20170809 11:08:31.698" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.478" endtime="20170809 11:08:31.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.699">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:08:31.698" endtime="20170809 11:08:31.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.701">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:31.700" endtime="20170809 11:08:31.701" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.702">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:31.702" endtime="20170809 11:08:31.702" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.701" endtime="20170809 11:08:31.702" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.700" endtime="20170809 11:08:31.702" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.699" endtime="20170809 11:08:31.702" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.765">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:31.765">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:31.703" endtime="20170809 11:08:31.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.768">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:31.767" endtime="20170809 11:08:31.768" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.769">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:31.769" endtime="20170809 11:08:31.769" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.768" endtime="20170809 11:08:31.769" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.766" endtime="20170809 11:08:31.770" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.766" endtime="20170809 11:08:31.770" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:31.770">Delete All Sessions</msg>
<status starttime="20170809 11:08:31.770" endtime="20170809 11:08:31.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:31.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:31.477" endtime="20170809 11:08:31.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:31.771" endtime="20170809 11:08:31.772" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.773">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:31.773">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:31.773">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:31.772" endtime="20170809 11:08:31.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:31.773">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:08:31.477" endtime="20170809 11:08:31.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:31.774">${power_state} = On</msg>
<status starttime="20170809 11:08:31.476" endtime="20170809 11:08:31.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:08:31.774" endtime="20170809 11:08:31.774" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.476" endtime="20170809 11:08:31.775" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.785">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:31.784" endtime="20170809 11:08:31.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:31.786" endtime="20170809 11:08:31.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.788">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:31.788" endtime="20170809 11:08:31.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:31.789" endtime="20170809 11:08:31.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.978">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:31.791" endtime="20170809 11:08:31.978" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:31.978">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:31.978">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:31.789" endtime="20170809 11:08:31.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.979">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:31.979" endtime="20170809 11:08:31.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:31.980" endtime="20170809 11:08:31.980" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.779" endtime="20170809 11:08:31.980" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.778" endtime="20170809 11:08:31.980" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.777" endtime="20170809 11:08:31.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.981">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:08:31.981" endtime="20170809 11:08:31.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:31.983">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:31.983" endtime="20170809 11:08:31.983" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:31.984">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:31.984" endtime="20170809 11:08:31.984" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.984" endtime="20170809 11:08:31.985" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.982" endtime="20170809 11:08:31.985" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:31.981" endtime="20170809 11:08:31.985" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.083">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:32.083">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:31.985" endtime="20170809 11:08:32.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.085">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:32.085" endtime="20170809 11:08:32.085" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.086">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:32.086" endtime="20170809 11:08:32.087" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.085" endtime="20170809 11:08:32.087" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.084" endtime="20170809 11:08:32.087" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.084" endtime="20170809 11:08:32.087" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:32.087">Delete All Sessions</msg>
<status starttime="20170809 11:08:32.087" endtime="20170809 11:08:32.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:32.087">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:31.777" endtime="20170809 11:08:32.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:32.088" endtime="20170809 11:08:32.088" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.089">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:32.089">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:32.089">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:32.088" endtime="20170809 11:08:32.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:32.089">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:08:31.775" endtime="20170809 11:08:32.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:32.090">${host_state} = Running</msg>
<status starttime="20170809 11:08:31.775" endtime="20170809 11:08:32.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:08:32.090" endtime="20170809 11:08:32.090" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.095">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:32.095" endtime="20170809 11:08:32.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.097">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:32.096" endtime="20170809 11:08:32.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.098">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:32.097" endtime="20170809 11:08:32.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.099">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:32.098" endtime="20170809 11:08:32.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:32.100" endtime="20170809 11:08:32.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:32.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:32.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:32.099" endtime="20170809 11:08:32.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:32.312" endtime="20170809 11:08:32.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:32.312" endtime="20170809 11:08:32.313" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.094" endtime="20170809 11:08:32.313" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.094" endtime="20170809 11:08:32.313" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.093" endtime="20170809 11:08:32.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.314">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:08:32.314" endtime="20170809 11:08:32.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.316">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:32.316" endtime="20170809 11:08:32.316" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.317">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:32.317" endtime="20170809 11:08:32.317" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.316" endtime="20170809 11:08:32.317" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.315" endtime="20170809 11:08:32.318" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.314" endtime="20170809 11:08:32.318" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.384">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:32.385">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:32.318" endtime="20170809 11:08:32.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.386">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:32.386" endtime="20170809 11:08:32.386" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.387">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:32.387" endtime="20170809 11:08:32.387" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.387" endtime="20170809 11:08:32.388" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.385" endtime="20170809 11:08:32.388" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:32.385" endtime="20170809 11:08:32.388" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:32.388">Delete All Sessions</msg>
<status starttime="20170809 11:08:32.388" endtime="20170809 11:08:32.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:32.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:32.092" endtime="20170809 11:08:32.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:32.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:32.389" endtime="20170809 11:08:32.389" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:32.390">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:32.390">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:32.390">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:32.389" endtime="20170809 11:08:32.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:32.390">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:32.091" endtime="20170809 11:08:32.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:32.390">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:32.091" endtime="20170809 11:08:32.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:08:32.391">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:08:32.391" endtime="20170809 11:08:32.391" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:32.090" endtime="20170809 11:08:32.391" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:31.475" endtime="20170809 11:08:32.392" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.397">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:42.397" endtime="20170809 11:08:42.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:42.398" endtime="20170809 11:08:42.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.399">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:42.398" endtime="20170809 11:08:42.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:42.399" endtime="20170809 11:08:42.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.636">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:42.400" endtime="20170809 11:08:42.636" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:42.636">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:42.636">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:42.400" endtime="20170809 11:08:42.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.637">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:42.637" endtime="20170809 11:08:42.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:42.637" endtime="20170809 11:08:42.638" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.396" endtime="20170809 11:08:42.638" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.395" endtime="20170809 11:08:42.638" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.395" endtime="20170809 11:08:42.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.639">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:08:42.638" endtime="20170809 11:08:42.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.641">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:42.640" endtime="20170809 11:08:42.641" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.642">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:42.642" endtime="20170809 11:08:42.642" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.641" endtime="20170809 11:08:42.642" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.640" endtime="20170809 11:08:42.642" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.639" endtime="20170809 11:08:42.642" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:42.722">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:42.643" endtime="20170809 11:08:42.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.724">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:42.723" endtime="20170809 11:08:42.724" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:42.724" endtime="20170809 11:08:42.725" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.724" endtime="20170809 11:08:42.725" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.723" endtime="20170809 11:08:42.725" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.722" endtime="20170809 11:08:42.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:42.726">Delete All Sessions</msg>
<status starttime="20170809 11:08:42.725" endtime="20170809 11:08:42.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:42.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:42.394" endtime="20170809 11:08:42.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:42.726" endtime="20170809 11:08:42.727" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:42.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:42.727">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:42.727" endtime="20170809 11:08:42.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:42.728">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:08:42.393" endtime="20170809 11:08:42.728" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:42.728">${power_state} = On</msg>
<status starttime="20170809 11:08:42.393" endtime="20170809 11:08:42.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:08:42.728" endtime="20170809 11:08:42.729" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.393" endtime="20170809 11:08:42.729" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.732">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:42.732" endtime="20170809 11:08:42.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.733">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:42.733" endtime="20170809 11:08:42.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.734">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:42.733" endtime="20170809 11:08:42.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.734">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:42.734" endtime="20170809 11:08:42.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.923">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:42.735" endtime="20170809 11:08:42.923" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:42.924">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:42.924">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:42.735" endtime="20170809 11:08:42.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.924">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:42.924" endtime="20170809 11:08:42.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:42.925" endtime="20170809 11:08:42.925" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.731" endtime="20170809 11:08:42.925" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.731" endtime="20170809 11:08:42.925" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.730" endtime="20170809 11:08:42.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.926">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:08:42.926" endtime="20170809 11:08:42.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:42.928">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:42.927" endtime="20170809 11:08:42.929" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:42.929">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:42.929" endtime="20170809 11:08:42.929" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.929" endtime="20170809 11:08:42.930" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.927" endtime="20170809 11:08:42.930" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:42.926" endtime="20170809 11:08:42.930" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.018">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:43.018">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:42.930" endtime="20170809 11:08:43.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.020">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:43.020" endtime="20170809 11:08:43.020" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.021">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:43.021" endtime="20170809 11:08:43.021" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.020" endtime="20170809 11:08:43.021" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.019" endtime="20170809 11:08:43.021" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.019" endtime="20170809 11:08:43.021" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:43.022">Delete All Sessions</msg>
<status starttime="20170809 11:08:43.022" endtime="20170809 11:08:43.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:43.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:42.730" endtime="20170809 11:08:43.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:43.022" endtime="20170809 11:08:43.023" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.023">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:43.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:43.023">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:43.023" endtime="20170809 11:08:43.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:43.024">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:08:42.729" endtime="20170809 11:08:43.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:43.024">${host_state} = Running</msg>
<status starttime="20170809 11:08:42.729" endtime="20170809 11:08:43.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:08:43.024" endtime="20170809 11:08:43.025" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.028">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:43.028" endtime="20170809 11:08:43.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.029">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:43.029" endtime="20170809 11:08:43.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.030">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:43.030" endtime="20170809 11:08:43.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.031">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:43.030" endtime="20170809 11:08:43.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.234">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:43.031" endtime="20170809 11:08:43.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:43.234">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:43.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:43.031" endtime="20170809 11:08:43.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.235">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:43.234" endtime="20170809 11:08:43.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.235">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:43.235" endtime="20170809 11:08:43.235" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.028" endtime="20170809 11:08:43.236" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.027" endtime="20170809 11:08:43.236" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.027" endtime="20170809 11:08:43.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.236">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:08:43.236" endtime="20170809 11:08:43.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.238">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:43.238" endtime="20170809 11:08:43.238" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.239">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:43.239" endtime="20170809 11:08:43.239" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.239" endtime="20170809 11:08:43.240" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.237" endtime="20170809 11:08:43.240" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.237" endtime="20170809 11:08:43.240" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.331">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:43.331">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:43.240" endtime="20170809 11:08:43.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.332">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:43.332" endtime="20170809 11:08:43.332" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.333">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:43.333" endtime="20170809 11:08:43.333" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.333" endtime="20170809 11:08:43.334" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.331" endtime="20170809 11:08:43.334" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:43.331" endtime="20170809 11:08:43.334" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:43.334">Delete All Sessions</msg>
<status starttime="20170809 11:08:43.334" endtime="20170809 11:08:43.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:43.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:43.026" endtime="20170809 11:08:43.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:43.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:43.335" endtime="20170809 11:08:43.335" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:43.336">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:43.336">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:43.336">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:43.335" endtime="20170809 11:08:43.336" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:43.336">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:43.025" endtime="20170809 11:08:43.336" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:43.336">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:43.025" endtime="20170809 11:08:43.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:08:43.337">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:08:43.337" endtime="20170809 11:08:43.337" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:43.025" endtime="20170809 11:08:43.337" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:42.392" endtime="20170809 11:08:43.337" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.343">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:53.343" endtime="20170809 11:08:53.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.344">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:53.344" endtime="20170809 11:08:53.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.345">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:53.344" endtime="20170809 11:08:53.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.345">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:53.345" endtime="20170809 11:08:53.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.531">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:53.346" endtime="20170809 11:08:53.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.532">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:53.532">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.346" endtime="20170809 11:08:53.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.532">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:53.532" endtime="20170809 11:08:53.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:53.533" endtime="20170809 11:08:53.533" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.342" endtime="20170809 11:08:53.533" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.341" endtime="20170809 11:08:53.533" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.341" endtime="20170809 11:08:53.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.534">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:08:53.534" endtime="20170809 11:08:53.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.536">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:53.535" endtime="20170809 11:08:53.536" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.537">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:53.537" endtime="20170809 11:08:53.537" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.537" endtime="20170809 11:08:53.538" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.535" endtime="20170809 11:08:53.538" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.534" endtime="20170809 11:08:53.538" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.600">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:53.600">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.538" endtime="20170809 11:08:53.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.602">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:53.602" endtime="20170809 11:08:53.603" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.603">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:53.603" endtime="20170809 11:08:53.604" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.603" endtime="20170809 11:08:53.604" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.601" endtime="20170809 11:08:53.604" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.601" endtime="20170809 11:08:53.604" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:53.604">Delete All Sessions</msg>
<status starttime="20170809 11:08:53.604" endtime="20170809 11:08:53.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.340" endtime="20170809 11:08:53.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:53.605" endtime="20170809 11:08:53.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.606">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:53.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:53.606">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:53.605" endtime="20170809 11:08:53.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.606">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:08:53.339" endtime="20170809 11:08:53.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.606">${power_state} = On</msg>
<status starttime="20170809 11:08:53.339" endtime="20170809 11:08:53.607" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:08:53.607" endtime="20170809 11:08:53.607" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.339" endtime="20170809 11:08:53.607" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.611">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:53.610" endtime="20170809 11:08:53.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.612">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:53.611" endtime="20170809 11:08:53.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.612">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:53.612" endtime="20170809 11:08:53.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.613">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:53.613" endtime="20170809 11:08:53.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.788">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:53.614" endtime="20170809 11:08:53.788" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.788">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:53.788">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.613" endtime="20170809 11:08:53.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.789">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:53.789" endtime="20170809 11:08:53.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.790">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:53.789" endtime="20170809 11:08:53.790" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.610" endtime="20170809 11:08:53.790" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.609" endtime="20170809 11:08:53.790" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.609" endtime="20170809 11:08:53.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.791">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:08:53.790" endtime="20170809 11:08:53.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.793">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:53.792" endtime="20170809 11:08:53.793" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.795">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:08:53.794" endtime="20170809 11:08:53.795" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.794" endtime="20170809 11:08:53.795" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.791" endtime="20170809 11:08:53.795" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.791" endtime="20170809 11:08:53.795" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.904">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:53.904">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.795" endtime="20170809 11:08:53.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.906">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:53.906" endtime="20170809 11:08:53.906" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.907">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:53.907" endtime="20170809 11:08:53.907" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.906" endtime="20170809 11:08:53.907" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.905" endtime="20170809 11:08:53.907" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.905" endtime="20170809 11:08:53.907" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:53.908">Delete All Sessions</msg>
<status starttime="20170809 11:08:53.908" endtime="20170809 11:08:53.908" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.908">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.608" endtime="20170809 11:08:53.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:53.908" endtime="20170809 11:08:53.909" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.909">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:53.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:53.910">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:53.909" endtime="20170809 11:08:53.910" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.910">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:08:53.608" endtime="20170809 11:08:53.910" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:53.910">${host_state} = Running</msg>
<status starttime="20170809 11:08:53.607" endtime="20170809 11:08:53.910" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:08:53.911" endtime="20170809 11:08:53.911" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:53.915">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:08:53.914" endtime="20170809 11:08:53.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.915">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:08:53.915" endtime="20170809 11:08:53.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.916">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:08:53.916" endtime="20170809 11:08:53.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:53.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:08:53.916" endtime="20170809 11:08:53.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:54.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:08:53.917" endtime="20170809 11:08:54.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:54.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:08:54.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.917" endtime="20170809 11:08:54.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:54.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:54.139" endtime="20170809 11:08:54.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:54.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:54.140" endtime="20170809 11:08:54.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.914" endtime="20170809 11:08:54.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.913" endtime="20170809 11:08:54.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:53.913" endtime="20170809 11:08:54.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:54.142">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:08:54.141" endtime="20170809 11:08:54.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:54.144">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:54.143" endtime="20170809 11:08:54.144" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:54.145">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:08:54.144" endtime="20170809 11:08:54.145" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:54.144" endtime="20170809 11:08:54.145" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:54.142" endtime="20170809 11:08:54.145" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:54.142" endtime="20170809 11:08:54.145" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:54.236">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:08:54.236">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:54.145" endtime="20170809 11:08:54.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:54.238">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:54.237" endtime="20170809 11:08:54.238" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:54.239">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:08:54.239" endtime="20170809 11:08:54.239" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:54.238" endtime="20170809 11:08:54.239" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:54.237" endtime="20170809 11:08:54.239" status="PASS"></status>
</kw>
<status starttime="20170809 11:08:54.236" endtime="20170809 11:08:54.239" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:08:54.240">Delete All Sessions</msg>
<status starttime="20170809 11:08:54.239" endtime="20170809 11:08:54.240" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:54.240">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:08:53.912" endtime="20170809 11:08:54.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:08:54.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:08:54.240" endtime="20170809 11:08:54.241" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:08:54.241">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:08:54.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:08:54.241">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:08:54.241" endtime="20170809 11:08:54.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:54.242">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:53.912" endtime="20170809 11:08:54.242" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:08:54.242">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:08:53.911" endtime="20170809 11:08:54.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:08:54.243">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:08:54.242" endtime="20170809 11:08:54.243" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:53.911" endtime="20170809 11:08:54.243" status="FAIL"></status>
</kw>
<status starttime="20170809 11:08:53.338" endtime="20170809 11:08:54.243" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.248">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:04.248" endtime="20170809 11:09:04.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:04.249" endtime="20170809 11:09:04.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.250">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:04.250" endtime="20170809 11:09:04.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:04.250" endtime="20170809 11:09:04.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.448">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:04.251" endtime="20170809 11:09:04.448" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.448">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:04.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.251" endtime="20170809 11:09:04.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.449">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:04.448" endtime="20170809 11:09:04.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:04.449" endtime="20170809 11:09:04.450" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.248" endtime="20170809 11:09:04.450" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.247" endtime="20170809 11:09:04.450" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.246" endtime="20170809 11:09:04.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.450">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:09:04.450" endtime="20170809 11:09:04.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.453">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:04.452" endtime="20170809 11:09:04.453" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.453">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:04.453" endtime="20170809 11:09:04.454" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.453" endtime="20170809 11:09:04.454" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.451" endtime="20170809 11:09:04.454" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.451" endtime="20170809 11:09:04.454" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.525">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:04.525">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.454" endtime="20170809 11:09:04.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.529">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:04.526" endtime="20170809 11:09:04.529" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.530">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:04.530" endtime="20170809 11:09:04.531" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.530" endtime="20170809 11:09:04.531" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.526" endtime="20170809 11:09:04.531" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.525" endtime="20170809 11:09:04.531" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:04.531">Delete All Sessions</msg>
<status starttime="20170809 11:09:04.531" endtime="20170809 11:09:04.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.532">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.245" endtime="20170809 11:09:04.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:04.532" endtime="20170809 11:09:04.532" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.533">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:04.533">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:04.533">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:04.533" endtime="20170809 11:09:04.533" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.533">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:09:04.245" endtime="20170809 11:09:04.533" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.534">${power_state} = On</msg>
<status starttime="20170809 11:09:04.244" endtime="20170809 11:09:04.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:09:04.534" endtime="20170809 11:09:04.534" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.244" endtime="20170809 11:09:04.534" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.538">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:04.538" endtime="20170809 11:09:04.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.539">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:04.539" endtime="20170809 11:09:04.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.540">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:04.539" endtime="20170809 11:09:04.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.540">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:04.540" endtime="20170809 11:09:04.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.733">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:04.541" endtime="20170809 11:09:04.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.733">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:04.733">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.541" endtime="20170809 11:09:04.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.734">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:04.734" endtime="20170809 11:09:04.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:04.734" endtime="20170809 11:09:04.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.537" endtime="20170809 11:09:04.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.537" endtime="20170809 11:09:04.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.536" endtime="20170809 11:09:04.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.736">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:09:04.735" endtime="20170809 11:09:04.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.738">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:04.737" endtime="20170809 11:09:04.738" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.739">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:04.739" endtime="20170809 11:09:04.739" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.738" endtime="20170809 11:09:04.739" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.736" endtime="20170809 11:09:04.739" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.736" endtime="20170809 11:09:04.739" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.829">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:04.829">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.740" endtime="20170809 11:09:04.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.831">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:04.830" endtime="20170809 11:09:04.831" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.832">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:04.832" endtime="20170809 11:09:04.832" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.831" endtime="20170809 11:09:04.832" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.830" endtime="20170809 11:09:04.832" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.829" endtime="20170809 11:09:04.832" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:04.833">Delete All Sessions</msg>
<status starttime="20170809 11:09:04.832" endtime="20170809 11:09:04.833" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.833">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.536" endtime="20170809 11:09:04.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:04.833" endtime="20170809 11:09:04.834" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:04.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:04.834">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:04.834" endtime="20170809 11:09:04.834" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.835">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:09:04.535" endtime="20170809 11:09:04.835" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:04.835">${host_state} = Running</msg>
<status starttime="20170809 11:09:04.534" endtime="20170809 11:09:04.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:09:04.835" endtime="20170809 11:09:04.835" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:04.839">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:04.839" endtime="20170809 11:09:04.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:04.840" endtime="20170809 11:09:04.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.841">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:04.840" endtime="20170809 11:09:04.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:04.841">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:04.841" endtime="20170809 11:09:04.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:05.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:04.842" endtime="20170809 11:09:05.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:05.018">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:05.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.842" endtime="20170809 11:09:05.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:05.019">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:05.018" endtime="20170809 11:09:05.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:05.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:05.019" endtime="20170809 11:09:05.019" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.838" endtime="20170809 11:09:05.020" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.838" endtime="20170809 11:09:05.020" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:04.837" endtime="20170809 11:09:05.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:05.020">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:09:05.020" endtime="20170809 11:09:05.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:05.023">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:05.022" endtime="20170809 11:09:05.023" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:05.023">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:05.023" endtime="20170809 11:09:05.024" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:05.023" endtime="20170809 11:09:05.024" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:05.021" endtime="20170809 11:09:05.024" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:05.021" endtime="20170809 11:09:05.024" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:05.090">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:05.090">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:05.024" endtime="20170809 11:09:05.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:05.092">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:05.092" endtime="20170809 11:09:05.092" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:05.093">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:05.093" endtime="20170809 11:09:05.093" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:05.092" endtime="20170809 11:09:05.093" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:05.091" endtime="20170809 11:09:05.093" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:05.091" endtime="20170809 11:09:05.094" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:05.094">Delete All Sessions</msg>
<status starttime="20170809 11:09:05.094" endtime="20170809 11:09:05.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:05.094">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:04.837" endtime="20170809 11:09:05.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:05.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:05.094" endtime="20170809 11:09:05.095" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:05.095">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:05.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:05.096">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:05.095" endtime="20170809 11:09:05.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:05.096">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:09:04.836" endtime="20170809 11:09:05.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:05.096">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:09:04.836" endtime="20170809 11:09:05.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:09:05.097">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:09:05.096" endtime="20170809 11:09:05.097" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:04.836" endtime="20170809 11:09:05.097" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:04.243" endtime="20170809 11:09:05.097" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.102">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:15.102" endtime="20170809 11:09:15.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.103">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:15.103" endtime="20170809 11:09:15.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.104">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:15.104" endtime="20170809 11:09:15.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.105">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:15.104" endtime="20170809 11:09:15.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.281">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:15.106" endtime="20170809 11:09:15.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.281">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:15.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.105" endtime="20170809 11:09:15.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.282">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.281" endtime="20170809 11:09:15.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.282" endtime="20170809 11:09:15.283" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.102" endtime="20170809 11:09:15.283" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.101" endtime="20170809 11:09:15.283" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.100" endtime="20170809 11:09:15.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.283">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:09:15.283" endtime="20170809 11:09:15.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.286">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:15.285" endtime="20170809 11:09:15.286" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.286">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:15.286" endtime="20170809 11:09:15.287" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.286" endtime="20170809 11:09:15.287" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.284" endtime="20170809 11:09:15.287" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.284" endtime="20170809 11:09:15.287" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.349">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:15.349">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.287" endtime="20170809 11:09:15.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.351">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:15.351" endtime="20170809 11:09:15.352" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.352">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:15.352" endtime="20170809 11:09:15.353" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.352" endtime="20170809 11:09:15.353" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.350" endtime="20170809 11:09:15.353" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.350" endtime="20170809 11:09:15.353" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:15.353">Delete All Sessions</msg>
<status starttime="20170809 11:09:15.353" endtime="20170809 11:09:15.353" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.099" endtime="20170809 11:09:15.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.354" endtime="20170809 11:09:15.354" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.355">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:15.355">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:15.355">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:15.355" endtime="20170809 11:09:15.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.355">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:09:15.099" endtime="20170809 11:09:15.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.356">${power_state} = On</msg>
<status starttime="20170809 11:09:15.098" endtime="20170809 11:09:15.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:09:15.356" endtime="20170809 11:09:15.356" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.098" endtime="20170809 11:09:15.356" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.362">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:15.361" endtime="20170809 11:09:15.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:15.363" endtime="20170809 11:09:15.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.364">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:15.363" endtime="20170809 11:09:15.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.365">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:15.364" endtime="20170809 11:09:15.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.575">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:15.366" endtime="20170809 11:09:15.575" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.575">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:15.575">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.365" endtime="20170809 11:09:15.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.576">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.576" endtime="20170809 11:09:15.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.576" endtime="20170809 11:09:15.577" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.360" endtime="20170809 11:09:15.577" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.360" endtime="20170809 11:09:15.577" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.359" endtime="20170809 11:09:15.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.578">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:09:15.577" endtime="20170809 11:09:15.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.580">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:15.579" endtime="20170809 11:09:15.580" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.581">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:15.581" endtime="20170809 11:09:15.581" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.581" endtime="20170809 11:09:15.582" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.579" endtime="20170809 11:09:15.582" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.578" endtime="20170809 11:09:15.582" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:15.707">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.582" endtime="20170809 11:09:15.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.709">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:15.708" endtime="20170809 11:09:15.709" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.710">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:15.709" endtime="20170809 11:09:15.710" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.709" endtime="20170809 11:09:15.710" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.708" endtime="20170809 11:09:15.710" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.707" endtime="20170809 11:09:15.710" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:15.710">Delete All Sessions</msg>
<status starttime="20170809 11:09:15.710" endtime="20170809 11:09:15.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.358" endtime="20170809 11:09:15.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.711" endtime="20170809 11:09:15.712" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.712">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:15.712">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:15.712">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:15.712" endtime="20170809 11:09:15.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.713">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:09:15.357" endtime="20170809 11:09:15.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.713">${host_state} = Running</msg>
<status starttime="20170809 11:09:15.357" endtime="20170809 11:09:15.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:09:15.713" endtime="20170809 11:09:15.713" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.717">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:15.717" endtime="20170809 11:09:15.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:15.718" endtime="20170809 11:09:15.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.719">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:15.718" endtime="20170809 11:09:15.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.719">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:15.719" endtime="20170809 11:09:15.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.897">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:15.720" endtime="20170809 11:09:15.897" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:15.897">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:15.897">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.720" endtime="20170809 11:09:15.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.898">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.898" endtime="20170809 11:09:15.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:15.898" endtime="20170809 11:09:15.899" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.716" endtime="20170809 11:09:15.899" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.716" endtime="20170809 11:09:15.899" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.715" endtime="20170809 11:09:15.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.900">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:09:15.899" endtime="20170809 11:09:15.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.902">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:15.901" endtime="20170809 11:09:15.902" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:15.903">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:15.902" endtime="20170809 11:09:15.903" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.902" endtime="20170809 11:09:15.903" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.900" endtime="20170809 11:09:15.903" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.900" endtime="20170809 11:09:15.903" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.997">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:15.997">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.903" endtime="20170809 11:09:15.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:15.999">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:15.998" endtime="20170809 11:09:15.999" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:16.000">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:16.000" endtime="20170809 11:09:16.000" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.999" endtime="20170809 11:09:16.000" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.998" endtime="20170809 11:09:16.000" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:15.998" endtime="20170809 11:09:16.000" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:16.001">Delete All Sessions</msg>
<status starttime="20170809 11:09:16.001" endtime="20170809 11:09:16.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:16.001">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:15.715" endtime="20170809 11:09:16.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:16.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:16.001" endtime="20170809 11:09:16.002" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:16.002">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:16.002">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:16.003">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:16.002" endtime="20170809 11:09:16.003" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:16.003">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:09:15.714" endtime="20170809 11:09:16.003" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:16.003">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:09:15.714" endtime="20170809 11:09:16.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:09:16.004">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:09:16.003" endtime="20170809 11:09:16.004" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:15.714" endtime="20170809 11:09:16.004" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:15.098" endtime="20170809 11:09:16.004" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:26.010">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:26.009" endtime="20170809 11:09:26.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:26.011">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:26.010" endtime="20170809 11:09:26.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:26.011">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:26.011" endtime="20170809 11:09:26.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:26.012">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:26.011" endtime="20170809 11:09:26.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:27.728">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:26.013" endtime="20170809 11:09:27.729" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:27.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:27.729">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:26.012" endtime="20170809 11:09:27.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:27.729">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:27.729" endtime="20170809 11:09:27.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:27.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:27.730" endtime="20170809 11:09:27.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:26.009" endtime="20170809 11:09:27.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:26.008" endtime="20170809 11:09:27.730" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:26.007" endtime="20170809 11:09:27.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:27.731">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:09:27.731" endtime="20170809 11:09:27.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:27.733">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:27.733" endtime="20170809 11:09:27.733" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:27.734">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:27.734" endtime="20170809 11:09:27.734" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:27.734" endtime="20170809 11:09:27.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:27.732" endtime="20170809 11:09:27.735" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:27.732" endtime="20170809 11:09:27.735" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.460">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:32.461">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:27.735" endtime="20170809 11:09:32.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.463">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:32.463" endtime="20170809 11:09:32.464" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:32.464">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:32.464" endtime="20170809 11:09:32.465" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.464" endtime="20170809 11:09:32.465" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.462" endtime="20170809 11:09:32.465" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.462" endtime="20170809 11:09:32.465" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:32.465">Delete All Sessions</msg>
<status starttime="20170809 11:09:32.465" endtime="20170809 11:09:32.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:32.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:26.006" endtime="20170809 11:09:32.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:32.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:32.466" endtime="20170809 11:09:32.466" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.467">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:32.467">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:32.467">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:32.466" endtime="20170809 11:09:32.467" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:32.467">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:09:26.006" endtime="20170809 11:09:32.467" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:32.467">${power_state} = On</msg>
<status starttime="20170809 11:09:26.006" endtime="20170809 11:09:32.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:09:32.468" endtime="20170809 11:09:32.468" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:26.005" endtime="20170809 11:09:32.468" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:32.472">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:32.472" endtime="20170809 11:09:32.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:32.473" endtime="20170809 11:09:32.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.474">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:32.474" endtime="20170809 11:09:32.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.475">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:32.474" endtime="20170809 11:09:32.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:32.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:32.475" endtime="20170809 11:09:32.851" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:32.851">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:32.851">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:32.475" endtime="20170809 11:09:32.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:32.851">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:32.851" endtime="20170809 11:09:32.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:32.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:32.852" endtime="20170809 11:09:32.852" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.471" endtime="20170809 11:09:32.852" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.470" endtime="20170809 11:09:32.852" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.470" endtime="20170809 11:09:32.853" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.853">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:09:32.853" endtime="20170809 11:09:32.853" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:32.856">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:32.855" endtime="20170809 11:09:32.856" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:32.857">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:32.856" endtime="20170809 11:09:32.857" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.856" endtime="20170809 11:09:32.857" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.854" endtime="20170809 11:09:32.857" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:32.853" endtime="20170809 11:09:32.857" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.180">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:34.181">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:32.857" endtime="20170809 11:09:34.181" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.183">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:34.182" endtime="20170809 11:09:34.183" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.184">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:34.183" endtime="20170809 11:09:34.184" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.183" endtime="20170809 11:09:34.184" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.182" endtime="20170809 11:09:34.184" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.181" endtime="20170809 11:09:34.184" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:34.184">Delete All Sessions</msg>
<status starttime="20170809 11:09:34.184" endtime="20170809 11:09:34.185" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:34.185">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:32.469" endtime="20170809 11:09:34.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.185">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:34.185" endtime="20170809 11:09:34.185" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.186">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:34.186">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:34.186">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:34.186" endtime="20170809 11:09:34.186" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:34.186">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:09:32.469" endtime="20170809 11:09:34.186" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:34.187">${host_state} = Running</msg>
<status starttime="20170809 11:09:32.468" endtime="20170809 11:09:34.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:09:34.187" endtime="20170809 11:09:34.187" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.192">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:34.192" endtime="20170809 11:09:34.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.193">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:34.193" endtime="20170809 11:09:34.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.194">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:34.194" endtime="20170809 11:09:34.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.195">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:34.195" endtime="20170809 11:09:34.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:34.196" endtime="20170809 11:09:34.383" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:34.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:34.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:34.196" endtime="20170809 11:09:34.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:34.383" endtime="20170809 11:09:34.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:34.384" endtime="20170809 11:09:34.384" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.191" endtime="20170809 11:09:34.385" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.190" endtime="20170809 11:09:34.385" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.190" endtime="20170809 11:09:34.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.385">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:09:34.385" endtime="20170809 11:09:34.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.387">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:34.387" endtime="20170809 11:09:34.387" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.388">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:34.388" endtime="20170809 11:09:34.388" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.388" endtime="20170809 11:09:34.389" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.386" endtime="20170809 11:09:34.389" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.386" endtime="20170809 11:09:34.389" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.457">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:34.457">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:34.389" endtime="20170809 11:09:34.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.459">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:34.458" endtime="20170809 11:09:34.459" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.460">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:34.459" endtime="20170809 11:09:34.460" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.459" endtime="20170809 11:09:34.460" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.458" endtime="20170809 11:09:34.460" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:34.457" endtime="20170809 11:09:34.460" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:34.460">Delete All Sessions</msg>
<status starttime="20170809 11:09:34.460" endtime="20170809 11:09:34.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:34.461">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:34.189" endtime="20170809 11:09:34.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:34.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:34.461" endtime="20170809 11:09:34.461" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:34.462">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:34.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:34.462">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:34.462" endtime="20170809 11:09:34.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:34.462">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:09:34.188" endtime="20170809 11:09:34.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:34.463">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:09:34.188" endtime="20170809 11:09:34.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:09:34.463">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:09:34.463" endtime="20170809 11:09:34.463" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:34.187" endtime="20170809 11:09:34.464" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:26.005" endtime="20170809 11:09:34.464" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:44.469">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:44.469" endtime="20170809 11:09:44.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:44.470">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:44.470" endtime="20170809 11:09:44.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:44.471">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:44.471" endtime="20170809 11:09:44.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:44.472">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:44.471" endtime="20170809 11:09:44.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:45.076">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:44.472" endtime="20170809 11:09:45.076" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:45.076">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:45.076">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:44.472" endtime="20170809 11:09:45.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:45.077">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:45.076" endtime="20170809 11:09:45.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:45.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:45.077" endtime="20170809 11:09:45.078" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:44.468" endtime="20170809 11:09:45.078" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:44.468" endtime="20170809 11:09:45.078" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:44.467" endtime="20170809 11:09:45.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:45.078">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:09:45.078" endtime="20170809 11:09:45.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:45.080">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:45.080" endtime="20170809 11:09:45.081" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:45.081">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:45.081" endtime="20170809 11:09:45.082" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:45.081" endtime="20170809 11:09:45.082" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:45.079" endtime="20170809 11:09:45.082" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:45.079" endtime="20170809 11:09:45.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:48.064">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:48.064">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:45.082" endtime="20170809 11:09:48.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:48.071">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:48.070" endtime="20170809 11:09:48.071" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:48.073">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:48.072" endtime="20170809 11:09:48.073" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:48.071" endtime="20170809 11:09:48.073" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:48.065" endtime="20170809 11:09:48.073" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:48.064" endtime="20170809 11:09:48.073" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:48.074">Delete All Sessions</msg>
<status starttime="20170809 11:09:48.074" endtime="20170809 11:09:48.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:48.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:44.466" endtime="20170809 11:09:48.074" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:48.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:48.074" endtime="20170809 11:09:48.075" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:48.077">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:48.077">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:48.077">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:48.075" endtime="20170809 11:09:48.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:48.077">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 11:09:44.466" endtime="20170809 11:09:48.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:48.077">${power_state} = Off</msg>
<status starttime="20170809 11:09:44.465" endtime="20170809 11:09:48.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:09:48.078">On != Off</msg>
<status starttime="20170809 11:09:48.078" endtime="20170809 11:09:48.078" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:44.465" endtime="20170809 11:09:48.079" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:44.464" endtime="20170809 11:09:48.079" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.084">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:58.083" endtime="20170809 11:09:58.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.085">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:58.084" endtime="20170809 11:09:58.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.085">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:58.085" endtime="20170809 11:09:58.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.086">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:58.086" endtime="20170809 11:09:58.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.476">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:58.087" endtime="20170809 11:09:58.476" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:58.477">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:58.477">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:58.087" endtime="20170809 11:09:58.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.477">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:58.477" endtime="20170809 11:09:58.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:58.478" endtime="20170809 11:09:58.478" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.083" endtime="20170809 11:09:58.478" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.083" endtime="20170809 11:09:58.478" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.082" endtime="20170809 11:09:58.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.479">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:09:58.479" endtime="20170809 11:09:58.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.481">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:58.480" endtime="20170809 11:09:58.481" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.482">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:58.482" endtime="20170809 11:09:58.482" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.481" endtime="20170809 11:09:58.482" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.480" endtime="20170809 11:09:58.482" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.479" endtime="20170809 11:09:58.482" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.774">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:58.774">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:58.483" endtime="20170809 11:09:58.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.776">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:58.775" endtime="20170809 11:09:58.776" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.777">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:58.776" endtime="20170809 11:09:58.777" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.776" endtime="20170809 11:09:58.777" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.775" endtime="20170809 11:09:58.777" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.774" endtime="20170809 11:09:58.777" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:58.777">Delete All Sessions</msg>
<status starttime="20170809 11:09:58.777" endtime="20170809 11:09:58.777" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:58.778">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:58.081" endtime="20170809 11:09:58.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:58.778" endtime="20170809 11:09:58.778" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.779">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:58.779">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:58.779">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:58.779" endtime="20170809 11:09:58.779" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:58.779">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:09:58.081" endtime="20170809 11:09:58.779" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:58.780">${power_state} = On</msg>
<status starttime="20170809 11:09:58.080" endtime="20170809 11:09:58.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:09:58.780" endtime="20170809 11:09:58.780" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.080" endtime="20170809 11:09:58.780" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.784">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:58.784" endtime="20170809 11:09:58.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.786">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:58.785" endtime="20170809 11:09:58.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.786">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:58.786" endtime="20170809 11:09:58.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.787">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:58.787" endtime="20170809 11:09:58.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:58.788" endtime="20170809 11:09:58.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:58.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:58.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:58.787" endtime="20170809 11:09:58.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:58.962" endtime="20170809 11:09:58.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:58.962" endtime="20170809 11:09:58.963" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.783" endtime="20170809 11:09:58.963" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.783" endtime="20170809 11:09:58.963" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.782" endtime="20170809 11:09:58.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.964">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:09:58.963" endtime="20170809 11:09:58.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:58.966">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:58.965" endtime="20170809 11:09:58.966" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:58.967">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:09:58.967" endtime="20170809 11:09:58.967" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.966" endtime="20170809 11:09:58.967" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.965" endtime="20170809 11:09:58.967" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:58.964" endtime="20170809 11:09:58.967" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.080">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:59.080">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:58.967" endtime="20170809 11:09:59.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.082">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:59.082" endtime="20170809 11:09:59.082" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.083">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:59.083" endtime="20170809 11:09:59.083" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.082" endtime="20170809 11:09:59.083" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.081" endtime="20170809 11:09:59.083" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.081" endtime="20170809 11:09:59.083" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:59.084">Delete All Sessions</msg>
<status starttime="20170809 11:09:59.084" endtime="20170809 11:09:59.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:59.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:58.781" endtime="20170809 11:09:59.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:59.084" endtime="20170809 11:09:59.085" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.086">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:59.086">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:59.086">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:59.085" endtime="20170809 11:09:59.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:59.086">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:09:58.781" endtime="20170809 11:09:59.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:59.087">${host_state} = Running</msg>
<status starttime="20170809 11:09:58.781" endtime="20170809 11:09:59.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:09:59.087" endtime="20170809 11:09:59.087" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.093">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:09:59.092" endtime="20170809 11:09:59.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:09:59.094" endtime="20170809 11:09:59.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.095">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:09:59.094" endtime="20170809 11:09:59.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.096">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:09:59.095" endtime="20170809 11:09:59.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.281">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:09:59.097" endtime="20170809 11:09:59.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:59.282">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:09:59.282">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:59.096" endtime="20170809 11:09:59.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.282">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:59.282" endtime="20170809 11:09:59.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:59.283" endtime="20170809 11:09:59.283" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.091" endtime="20170809 11:09:59.283" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.091" endtime="20170809 11:09:59.283" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.090" endtime="20170809 11:09:59.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.284">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:09:59.284" endtime="20170809 11:09:59.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.286">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:59.286" endtime="20170809 11:09:59.286" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.287">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:09:59.287" endtime="20170809 11:09:59.287" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.286" endtime="20170809 11:09:59.287" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.285" endtime="20170809 11:09:59.287" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.284" endtime="20170809 11:09:59.288" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.371">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:09:59.371">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:59.288" endtime="20170809 11:09:59.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.373">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:59.372" endtime="20170809 11:09:59.373" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.374">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:09:59.373" endtime="20170809 11:09:59.374" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.373" endtime="20170809 11:09:59.374" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.371" endtime="20170809 11:09:59.374" status="PASS"></status>
</kw>
<status starttime="20170809 11:09:59.371" endtime="20170809 11:09:59.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:09:59.374">Delete All Sessions</msg>
<status starttime="20170809 11:09:59.374" endtime="20170809 11:09:59.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:59.375">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:09:59.089" endtime="20170809 11:09:59.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:09:59.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:09:59.375" endtime="20170809 11:09:59.375" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:09:59.376">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:09:59.376">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:09:59.376">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:09:59.376" endtime="20170809 11:09:59.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:59.376">${state} = Off</msg>
<status starttime="20170809 11:09:59.088" endtime="20170809 11:09:59.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:09:59.377">${boot_progress} = Off</msg>
<status starttime="20170809 11:09:59.088" endtime="20170809 11:09:59.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:09:59.377">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 11:09:59.377" endtime="20170809 11:09:59.377" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:59.087" endtime="20170809 11:09:59.377" status="FAIL"></status>
</kw>
<status starttime="20170809 11:09:58.079" endtime="20170809 11:09:59.378" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:09.382">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:09.382" endtime="20170809 11:10:09.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:09.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:09.383" endtime="20170809 11:10:09.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:09.384">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:09.384" endtime="20170809 11:10:09.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:09.385">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:09.384" endtime="20170809 11:10:09.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:09.789">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:09.385" endtime="20170809 11:10:09.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:09.790">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:09.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:09.385" endtime="20170809 11:10:09.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:09.790">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:09.790" endtime="20170809 11:10:09.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:09.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:09.791" endtime="20170809 11:10:09.791" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:09.382" endtime="20170809 11:10:09.791" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:09.381" endtime="20170809 11:10:09.791" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:09.381" endtime="20170809 11:10:09.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:09.792">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:10:09.792" endtime="20170809 11:10:09.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:09.794">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:09.793" endtime="20170809 11:10:09.794" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:09.795">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:09.795" endtime="20170809 11:10:09.795" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:09.794" endtime="20170809 11:10:09.795" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:09.793" endtime="20170809 11:10:09.795" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:09.792" endtime="20170809 11:10:09.796" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.171">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:10.171">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:09.796" endtime="20170809 11:10:10.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.173">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:10.173" endtime="20170809 11:10:10.173" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.174">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:10.174" endtime="20170809 11:10:10.174" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.173" endtime="20170809 11:10:10.174" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.172" endtime="20170809 11:10:10.174" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.171" endtime="20170809 11:10:10.174" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:10.175">Delete All Sessions</msg>
<status starttime="20170809 11:10:10.175" endtime="20170809 11:10:10.175" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.175">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:09.380" endtime="20170809 11:10:10.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.176">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:10.175" endtime="20170809 11:10:10.176" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.176">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:10.176">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:10.177">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:10.176" endtime="20170809 11:10:10.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.177">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:10:09.379" endtime="20170809 11:10:10.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.177">${power_state} = On</msg>
<status starttime="20170809 11:10:09.379" endtime="20170809 11:10:10.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:10:10.177" endtime="20170809 11:10:10.178" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:09.379" endtime="20170809 11:10:10.178" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.181">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:10.181" endtime="20170809 11:10:10.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.183">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:10.182" endtime="20170809 11:10:10.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.183">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:10.183" endtime="20170809 11:10:10.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.184">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:10.184" endtime="20170809 11:10:10.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:10.185" endtime="20170809 11:10:10.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.470">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:10.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:10.184" endtime="20170809 11:10:10.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:10.470" endtime="20170809 11:10:10.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:10.471" endtime="20170809 11:10:10.471" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.180" endtime="20170809 11:10:10.471" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.180" endtime="20170809 11:10:10.471" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.180" endtime="20170809 11:10:10.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.472">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:10:10.472" endtime="20170809 11:10:10.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.474">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:10.474" endtime="20170809 11:10:10.474" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.475">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:10.475" endtime="20170809 11:10:10.475" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.474" endtime="20170809 11:10:10.475" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.473" endtime="20170809 11:10:10.476" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.473" endtime="20170809 11:10:10.476" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.602">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:10.602">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:10.476" endtime="20170809 11:10:10.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.604">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:10.604" endtime="20170809 11:10:10.604" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.605">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:10.605" endtime="20170809 11:10:10.605" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.604" endtime="20170809 11:10:10.605" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.603" endtime="20170809 11:10:10.605" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.603" endtime="20170809 11:10:10.606" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:10.606">Delete All Sessions</msg>
<status starttime="20170809 11:10:10.606" endtime="20170809 11:10:10.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.606">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:10.179" endtime="20170809 11:10:10.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:10.606" endtime="20170809 11:10:10.607" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.607">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:10.607">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:10.608">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:10.607" endtime="20170809 11:10:10.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.608">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:10:10.178" endtime="20170809 11:10:10.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.608">${host_state} = Running</msg>
<status starttime="20170809 11:10:10.178" endtime="20170809 11:10:10.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:10:10.609" endtime="20170809 11:10:10.609" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.614">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:10.613" endtime="20170809 11:10:10.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:10.615" endtime="20170809 11:10:10.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.616">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:10.616" endtime="20170809 11:10:10.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.617">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:10.617" endtime="20170809 11:10:10.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.863">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:10.618" endtime="20170809 11:10:10.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.864">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:10.864">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:10.618" endtime="20170809 11:10:10.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.864">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:10.864" endtime="20170809 11:10:10.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.865">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:10.865" endtime="20170809 11:10:10.865" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.613" endtime="20170809 11:10:10.865" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.612" endtime="20170809 11:10:10.865" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.611" endtime="20170809 11:10:10.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.866">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:10:10.866" endtime="20170809 11:10:10.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.868">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:10.867" endtime="20170809 11:10:10.868" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.869">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:10.869" endtime="20170809 11:10:10.869" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.868" endtime="20170809 11:10:10.869" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.867" endtime="20170809 11:10:10.869" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.866" endtime="20170809 11:10:10.869" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.936">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:10.936">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:10.870" endtime="20170809 11:10:10.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.938">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:10.938" endtime="20170809 11:10:10.938" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.939">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:10.939" endtime="20170809 11:10:10.939" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.938" endtime="20170809 11:10:10.939" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.937" endtime="20170809 11:10:10.939" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:10.937" endtime="20170809 11:10:10.940" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:10.940">Delete All Sessions</msg>
<status starttime="20170809 11:10:10.940" endtime="20170809 11:10:10.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.940">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:10.610" endtime="20170809 11:10:10.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:10.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:10.940" endtime="20170809 11:10:10.941" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:10.941">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:10.941">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:10.942">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:10.941" endtime="20170809 11:10:10.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.942">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:10.610" endtime="20170809 11:10:10.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:10.942">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:10.609" endtime="20170809 11:10:10.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:10:10.943">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:10:10.942" endtime="20170809 11:10:10.943" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:10.609" endtime="20170809 11:10:10.943" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:09.378" endtime="20170809 11:10:10.943" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:20.948">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:20.948" endtime="20170809 11:10:20.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:20.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:20.949" endtime="20170809 11:10:20.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:20.949">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:20.949" endtime="20170809 11:10:20.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:20.950">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:20.950" endtime="20170809 11:10:20.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:20.951" endtime="20170809 11:10:21.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:21.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:20.950" endtime="20170809 11:10:21.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.132" endtime="20170809 11:10:21.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.133" endtime="20170809 11:10:21.133" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:20.947" endtime="20170809 11:10:21.133" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:20.947" endtime="20170809 11:10:21.133" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:20.946" endtime="20170809 11:10:21.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.134">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:10:21.134" endtime="20170809 11:10:21.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.139">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:21.138" endtime="20170809 11:10:21.139" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.140">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:21.140" endtime="20170809 11:10:21.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.139" endtime="20170809 11:10:21.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.137" endtime="20170809 11:10:21.141" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.135" endtime="20170809 11:10:21.141" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.228">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:21.228">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:21.142" endtime="20170809 11:10:21.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.230">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:21.229" endtime="20170809 11:10:21.230" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.231">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:21.230" endtime="20170809 11:10:21.231" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.230" endtime="20170809 11:10:21.231" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.229" endtime="20170809 11:10:21.231" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.228" endtime="20170809 11:10:21.231" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:21.231">Delete All Sessions</msg>
<status starttime="20170809 11:10:21.231" endtime="20170809 11:10:21.232" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.232">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:20.945" endtime="20170809 11:10:21.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.232" endtime="20170809 11:10:21.233" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.233">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:21.233">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:21.234">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:21.233" endtime="20170809 11:10:21.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.234">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:10:20.945" endtime="20170809 11:10:21.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.234">${power_state} = On</msg>
<status starttime="20170809 11:10:20.944" endtime="20170809 11:10:21.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:10:21.235" endtime="20170809 11:10:21.235" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:20.944" endtime="20170809 11:10:21.235" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.241">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:21.240" endtime="20170809 11:10:21.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.242">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:21.242" endtime="20170809 11:10:21.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.243">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:21.243" endtime="20170809 11:10:21.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:21.244" endtime="20170809 11:10:21.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:21.247" endtime="20170809 11:10:21.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:21.451">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:21.245" endtime="20170809 11:10:21.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.451">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.451" endtime="20170809 11:10:21.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.452" endtime="20170809 11:10:21.452" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.239" endtime="20170809 11:10:21.453" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.239" endtime="20170809 11:10:21.453" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.238" endtime="20170809 11:10:21.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.453">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:10:21.453" endtime="20170809 11:10:21.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.455">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:21.455" endtime="20170809 11:10:21.455" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.456">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:21.456" endtime="20170809 11:10:21.456" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.456" endtime="20170809 11:10:21.456" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.454" endtime="20170809 11:10:21.457" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.454" endtime="20170809 11:10:21.457" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.546">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:21.546">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:21.457" endtime="20170809 11:10:21.546" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.548">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:21.548" endtime="20170809 11:10:21.548" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.550">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:21.549" endtime="20170809 11:10:21.550" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.549" endtime="20170809 11:10:21.550" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.547" endtime="20170809 11:10:21.550" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.547" endtime="20170809 11:10:21.550" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:21.551">Delete All Sessions</msg>
<status starttime="20170809 11:10:21.551" endtime="20170809 11:10:21.551" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.551">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:21.237" endtime="20170809 11:10:21.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.552" endtime="20170809 11:10:21.552" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.553">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:21.553">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:21.553">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:21.553" endtime="20170809 11:10:21.553" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.554">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:10:21.236" endtime="20170809 11:10:21.554" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.554">${host_state} = Running</msg>
<status starttime="20170809 11:10:21.236" endtime="20170809 11:10:21.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:10:21.555" endtime="20170809 11:10:21.555" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.560">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:21.559" endtime="20170809 11:10:21.560" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.561">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:21.560" endtime="20170809 11:10:21.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.562">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:21.561" endtime="20170809 11:10:21.562" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.563">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:21.562" endtime="20170809 11:10:21.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.750">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:21.564" endtime="20170809 11:10:21.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.750">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:21.750">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:21.563" endtime="20170809 11:10:21.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.751">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.751" endtime="20170809 11:10:21.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.752" endtime="20170809 11:10:21.753" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.559" endtime="20170809 11:10:21.753" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.558" endtime="20170809 11:10:21.753" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.558" endtime="20170809 11:10:21.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.754">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:10:21.753" endtime="20170809 11:10:21.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.757">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:21.756" endtime="20170809 11:10:21.757" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.763">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:21.763" endtime="20170809 11:10:21.763" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.757" endtime="20170809 11:10:21.763" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.755" endtime="20170809 11:10:21.764" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.754" endtime="20170809 11:10:21.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.848">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:21.848">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:21.764" endtime="20170809 11:10:21.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.850">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:21.849" endtime="20170809 11:10:21.850" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.851">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:21.850" endtime="20170809 11:10:21.851" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.850" endtime="20170809 11:10:21.851" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.849" endtime="20170809 11:10:21.851" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:21.848" endtime="20170809 11:10:21.851" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:21.851">Delete All Sessions</msg>
<status starttime="20170809 11:10:21.851" endtime="20170809 11:10:21.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:21.557" endtime="20170809 11:10:21.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:21.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:21.852" endtime="20170809 11:10:21.853" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:21.853">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:21.853">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:21.853">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:21.853" endtime="20170809 11:10:21.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.854">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:21.556" endtime="20170809 11:10:21.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:21.854">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:21.556" endtime="20170809 11:10:21.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:10:21.854">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:10:21.854" endtime="20170809 11:10:21.855" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:21.555" endtime="20170809 11:10:21.855" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:20.944" endtime="20170809 11:10:21.855" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:31.860">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:31.859" endtime="20170809 11:10:31.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:31.861">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:31.860" endtime="20170809 11:10:31.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:31.861">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:31.861" endtime="20170809 11:10:31.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:31.862">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:31.862" endtime="20170809 11:10:31.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.055">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:31.863" endtime="20170809 11:10:32.055" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:32.055">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:31.862" endtime="20170809 11:10:32.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.056">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.056" endtime="20170809 11:10:32.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.056" endtime="20170809 11:10:32.057" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:31.859" endtime="20170809 11:10:32.057" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:31.859" endtime="20170809 11:10:32.057" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:31.858" endtime="20170809 11:10:32.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.058">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:10:32.058" endtime="20170809 11:10:32.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.060">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:32.060" endtime="20170809 11:10:32.060" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.061">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:32.061" endtime="20170809 11:10:32.061" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.060" endtime="20170809 11:10:32.061" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.059" endtime="20170809 11:10:32.061" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.058" endtime="20170809 11:10:32.062" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.127">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:32.127">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:32.062" endtime="20170809 11:10:32.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.129">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:32.128" endtime="20170809 11:10:32.129" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.130">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:32.130" endtime="20170809 11:10:32.130" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.129" endtime="20170809 11:10:32.130" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.128" endtime="20170809 11:10:32.130" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.127" endtime="20170809 11:10:32.131" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:32.131">Delete All Sessions</msg>
<status starttime="20170809 11:10:32.131" endtime="20170809 11:10:32.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:31.857" endtime="20170809 11:10:32.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.131" endtime="20170809 11:10:32.132" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.132">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:32.132">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:32.133">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:32.132" endtime="20170809 11:10:32.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.133">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:10:31.857" endtime="20170809 11:10:32.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.133">${power_state} = On</msg>
<status starttime="20170809 11:10:31.856" endtime="20170809 11:10:32.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:10:32.134" endtime="20170809 11:10:32.134" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:31.856" endtime="20170809 11:10:32.134" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.138">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:32.137" endtime="20170809 11:10:32.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.139">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:32.139" endtime="20170809 11:10:32.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.139">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:32.139" endtime="20170809 11:10:32.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.140">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:32.140" endtime="20170809 11:10:32.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.317">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:32.141" endtime="20170809 11:10:32.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:32.317">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:32.140" endtime="20170809 11:10:32.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.318">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.318" endtime="20170809 11:10:32.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.318" endtime="20170809 11:10:32.319" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.137" endtime="20170809 11:10:32.319" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.136" endtime="20170809 11:10:32.319" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.136" endtime="20170809 11:10:32.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.320">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:10:32.319" endtime="20170809 11:10:32.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.322">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:32.321" endtime="20170809 11:10:32.322" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.323">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:32.322" endtime="20170809 11:10:32.323" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.322" endtime="20170809 11:10:32.323" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.320" endtime="20170809 11:10:32.323" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.320" endtime="20170809 11:10:32.323" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.411">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:32.411">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:32.323" endtime="20170809 11:10:32.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.413">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:32.413" endtime="20170809 11:10:32.413" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.414">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:32.414" endtime="20170809 11:10:32.414" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.413" endtime="20170809 11:10:32.414" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.412" endtime="20170809 11:10:32.414" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.412" endtime="20170809 11:10:32.414" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:32.415">Delete All Sessions</msg>
<status starttime="20170809 11:10:32.415" endtime="20170809 11:10:32.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.415">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:32.135" endtime="20170809 11:10:32.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.415" endtime="20170809 11:10:32.416" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.416">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:32.416">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:32.417">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:32.416" endtime="20170809 11:10:32.417" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.417">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:10:32.135" endtime="20170809 11:10:32.417" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.417">${host_state} = Running</msg>
<status starttime="20170809 11:10:32.134" endtime="20170809 11:10:32.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:10:32.417" endtime="20170809 11:10:32.418" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.422">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:32.421" endtime="20170809 11:10:32.422" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.423">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:32.422" endtime="20170809 11:10:32.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.423">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:32.423" endtime="20170809 11:10:32.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:32.424" endtime="20170809 11:10:32.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.646">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:32.425" endtime="20170809 11:10:32.646" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.647">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:32.647">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:32.424" endtime="20170809 11:10:32.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.647">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.647" endtime="20170809 11:10:32.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.648" endtime="20170809 11:10:32.648" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.421" endtime="20170809 11:10:32.648" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.421" endtime="20170809 11:10:32.648" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.420" endtime="20170809 11:10:32.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.649">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:10:32.649" endtime="20170809 11:10:32.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.651">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:32.650" endtime="20170809 11:10:32.651" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.652">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:32.652" endtime="20170809 11:10:32.652" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.651" endtime="20170809 11:10:32.653" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.650" endtime="20170809 11:10:32.653" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.649" endtime="20170809 11:10:32.653" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.751">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:32.751">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:32.653" endtime="20170809 11:10:32.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.753">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:32.752" endtime="20170809 11:10:32.753" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.754">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:32.754" endtime="20170809 11:10:32.754" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.753" endtime="20170809 11:10:32.754" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.752" endtime="20170809 11:10:32.754" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:32.751" endtime="20170809 11:10:32.754" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:32.755">Delete All Sessions</msg>
<status starttime="20170809 11:10:32.754" endtime="20170809 11:10:32.755" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.755">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:32.419" endtime="20170809 11:10:32.755" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:32.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:32.755" endtime="20170809 11:10:32.756" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:32.756">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:32.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:32.756">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:32.756" endtime="20170809 11:10:32.756" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.757">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:32.419" endtime="20170809 11:10:32.757" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:32.757">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:32.418" endtime="20170809 11:10:32.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:10:32.758">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:10:32.757" endtime="20170809 11:10:32.758" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:32.418" endtime="20170809 11:10:32.758" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:31.855" endtime="20170809 11:10:32.758" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:42.763">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:42.763" endtime="20170809 11:10:42.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:42.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:42.764" endtime="20170809 11:10:42.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:42.765">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:42.764" endtime="20170809 11:10:42.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:42.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:42.765" endtime="20170809 11:10:42.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:42.963">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:42.766" endtime="20170809 11:10:42.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:42.964">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:42.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:42.766" endtime="20170809 11:10:42.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:42.964">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:42.964" endtime="20170809 11:10:42.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:42.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:42.965" endtime="20170809 11:10:42.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:42.762" endtime="20170809 11:10:42.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:42.762" endtime="20170809 11:10:42.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:42.761" endtime="20170809 11:10:42.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:42.966">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:10:42.966" endtime="20170809 11:10:42.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:42.968">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:42.968" endtime="20170809 11:10:42.968" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:42.969">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:42.969" endtime="20170809 11:10:42.969" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:42.968" endtime="20170809 11:10:42.969" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:42.967" endtime="20170809 11:10:42.970" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:42.966" endtime="20170809 11:10:42.970" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.033">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:43.034">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:42.970" endtime="20170809 11:10:43.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.035">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:43.035" endtime="20170809 11:10:43.035" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.036">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:43.036" endtime="20170809 11:10:43.036" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.036" endtime="20170809 11:10:43.037" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.034" endtime="20170809 11:10:43.037" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.034" endtime="20170809 11:10:43.037" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:43.037">Delete All Sessions</msg>
<status starttime="20170809 11:10:43.037" endtime="20170809 11:10:43.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.037">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:42.760" endtime="20170809 11:10:43.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:43.038" endtime="20170809 11:10:43.038" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.039">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:43.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:43.039">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:43.038" endtime="20170809 11:10:43.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.039">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:10:42.760" endtime="20170809 11:10:43.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.039">${power_state} = On</msg>
<status starttime="20170809 11:10:42.759" endtime="20170809 11:10:43.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:10:43.040" endtime="20170809 11:10:43.040" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:42.759" endtime="20170809 11:10:43.040" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.044">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:43.043" endtime="20170809 11:10:43.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.045">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:43.045" endtime="20170809 11:10:43.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.046">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:43.045" endtime="20170809 11:10:43.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.046">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:43.046" endtime="20170809 11:10:43.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.345">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:43.047" endtime="20170809 11:10:43.345" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.346">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:43.346">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:43.047" endtime="20170809 11:10:43.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.346">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:43.346" endtime="20170809 11:10:43.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:43.347" endtime="20170809 11:10:43.347" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.043" endtime="20170809 11:10:43.347" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.042" endtime="20170809 11:10:43.347" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.042" endtime="20170809 11:10:43.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.348">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:10:43.348" endtime="20170809 11:10:43.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.350">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:43.349" endtime="20170809 11:10:43.350" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.351">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:43.351" endtime="20170809 11:10:43.351" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.350" endtime="20170809 11:10:43.351" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.349" endtime="20170809 11:10:43.351" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.348" endtime="20170809 11:10:43.351" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.454">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:43.454">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:43.352" endtime="20170809 11:10:43.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.456">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:43.456" endtime="20170809 11:10:43.456" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.457">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:43.457" endtime="20170809 11:10:43.457" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.456" endtime="20170809 11:10:43.457" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.455" endtime="20170809 11:10:43.457" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.455" endtime="20170809 11:10:43.458" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:43.458">Delete All Sessions</msg>
<status starttime="20170809 11:10:43.458" endtime="20170809 11:10:43.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.458">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:43.041" endtime="20170809 11:10:43.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:43.459" endtime="20170809 11:10:43.459" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.459">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:43.460">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:43.460">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:43.459" endtime="20170809 11:10:43.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.460">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:10:43.041" endtime="20170809 11:10:43.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.460">${host_state} = Running</msg>
<status starttime="20170809 11:10:43.040" endtime="20170809 11:10:43.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:10:43.461" endtime="20170809 11:10:43.461" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.465">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:43.465" endtime="20170809 11:10:43.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.466">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:43.466" endtime="20170809 11:10:43.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.467">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:43.466" endtime="20170809 11:10:43.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:43.467" endtime="20170809 11:10:43.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.644">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:43.468" endtime="20170809 11:10:43.644" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.644">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:43.644">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:43.468" endtime="20170809 11:10:43.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.645">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:43.645" endtime="20170809 11:10:43.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:43.645" endtime="20170809 11:10:43.646" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.464" endtime="20170809 11:10:43.646" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.464" endtime="20170809 11:10:43.646" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.463" endtime="20170809 11:10:43.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.647">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:10:43.646" endtime="20170809 11:10:43.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.649">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:43.648" endtime="20170809 11:10:43.649" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.650">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:43.650" endtime="20170809 11:10:43.650" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.649" endtime="20170809 11:10:43.650" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.647" endtime="20170809 11:10:43.650" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.647" endtime="20170809 11:10:43.650" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.716">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:43.717">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:43.651" endtime="20170809 11:10:43.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.718">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:43.718" endtime="20170809 11:10:43.718" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.719">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:43.719" endtime="20170809 11:10:43.719" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.718" endtime="20170809 11:10:43.719" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.717" endtime="20170809 11:10:43.720" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:43.717" endtime="20170809 11:10:43.720" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:43.720">Delete All Sessions</msg>
<status starttime="20170809 11:10:43.720" endtime="20170809 11:10:43.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:43.463" endtime="20170809 11:10:43.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:43.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:43.721" endtime="20170809 11:10:43.721" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:43.721">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:43.722">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:43.722">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:43.721" endtime="20170809 11:10:43.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.722">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:43.462" endtime="20170809 11:10:43.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:43.722">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:43.461" endtime="20170809 11:10:43.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:10:43.723">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:10:43.722" endtime="20170809 11:10:43.723" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:43.461" endtime="20170809 11:10:43.723" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:42.758" endtime="20170809 11:10:43.723" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:53.728">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:53.728" endtime="20170809 11:10:53.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:53.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:53.729" endtime="20170809 11:10:53.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:53.730">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:53.730" endtime="20170809 11:10:53.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:53.731">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:53.730" endtime="20170809 11:10:53.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:53.731" endtime="20170809 11:10:54.005" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.005">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:54.005">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:53.731" endtime="20170809 11:10:54.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.006" endtime="20170809 11:10:54.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.007" endtime="20170809 11:10:54.007" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:53.727" endtime="20170809 11:10:54.007" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:53.727" endtime="20170809 11:10:54.008" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:53.726" endtime="20170809 11:10:54.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.009">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:10:54.008" endtime="20170809 11:10:54.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.012">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:54.011" endtime="20170809 11:10:54.012" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.013">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:54.013" endtime="20170809 11:10:54.013" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.012" endtime="20170809 11:10:54.013" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.010" endtime="20170809 11:10:54.014" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.009" endtime="20170809 11:10:54.014" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.076">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:54.076">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:54.014" endtime="20170809 11:10:54.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.078">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:54.078" endtime="20170809 11:10:54.078" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.079">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:54.079" endtime="20170809 11:10:54.080" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.078" endtime="20170809 11:10:54.080" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.077" endtime="20170809 11:10:54.080" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.077" endtime="20170809 11:10:54.080" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:54.080">Delete All Sessions</msg>
<status starttime="20170809 11:10:54.080" endtime="20170809 11:10:54.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:53.726" endtime="20170809 11:10:54.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.081" endtime="20170809 11:10:54.081" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.082">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:54.082">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:54.082">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:54.082" endtime="20170809 11:10:54.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.083">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:10:53.725" endtime="20170809 11:10:54.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.084">${power_state} = On</msg>
<status starttime="20170809 11:10:53.725" endtime="20170809 11:10:54.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:10:54.084" endtime="20170809 11:10:54.084" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:53.724" endtime="20170809 11:10:54.084" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.089">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:54.088" endtime="20170809 11:10:54.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.091">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:54.091" endtime="20170809 11:10:54.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.092">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:54.091" endtime="20170809 11:10:54.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.092">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:54.092" endtime="20170809 11:10:54.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.282">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:54.093" endtime="20170809 11:10:54.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.282">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:54.282">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:54.093" endtime="20170809 11:10:54.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.283">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.282" endtime="20170809 11:10:54.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.283" endtime="20170809 11:10:54.283" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.087" endtime="20170809 11:10:54.284" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.087" endtime="20170809 11:10:54.284" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.086" endtime="20170809 11:10:54.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.284">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:10:54.284" endtime="20170809 11:10:54.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.287">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:54.286" endtime="20170809 11:10:54.287" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.287">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:10:54.287" endtime="20170809 11:10:54.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.287" endtime="20170809 11:10:54.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.285" endtime="20170809 11:10:54.288" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.285" endtime="20170809 11:10:54.288" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.378">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:54.378">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:54.288" endtime="20170809 11:10:54.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.380">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:54.380" endtime="20170809 11:10:54.380" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.381">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:54.381" endtime="20170809 11:10:54.381" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.381" endtime="20170809 11:10:54.382" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.379" endtime="20170809 11:10:54.382" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.379" endtime="20170809 11:10:54.382" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:54.382">Delete All Sessions</msg>
<status starttime="20170809 11:10:54.382" endtime="20170809 11:10:54.382" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:54.086" endtime="20170809 11:10:54.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.383" endtime="20170809 11:10:54.383" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.384">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:54.384">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:54.384">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:54.384" endtime="20170809 11:10:54.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.384">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:10:54.085" endtime="20170809 11:10:54.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.385">${host_state} = Running</msg>
<status starttime="20170809 11:10:54.085" endtime="20170809 11:10:54.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:10:54.385" endtime="20170809 11:10:54.385" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.390">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:10:54.389" endtime="20170809 11:10:54.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.391">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:10:54.390" endtime="20170809 11:10:54.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.391">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:10:54.391" endtime="20170809 11:10:54.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.392">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:10:54.392" endtime="20170809 11:10:54.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.578">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:10:54.393" endtime="20170809 11:10:54.578" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.578">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:10:54.578">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:54.392" endtime="20170809 11:10:54.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.579">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.579" endtime="20170809 11:10:54.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.579" endtime="20170809 11:10:54.580" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.389" endtime="20170809 11:10:54.580" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.388" endtime="20170809 11:10:54.580" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.388" endtime="20170809 11:10:54.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.581">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:10:54.580" endtime="20170809 11:10:54.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.587">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:54.582" endtime="20170809 11:10:54.587" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.588">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:10:54.587" endtime="20170809 11:10:54.588" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.587" endtime="20170809 11:10:54.588" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.581" endtime="20170809 11:10:54.588" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.581" endtime="20170809 11:10:54.588" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.672">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:10:54.672">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:54.588" endtime="20170809 11:10:54.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.674">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:54.674" endtime="20170809 11:10:54.674" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.675">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:10:54.675" endtime="20170809 11:10:54.675" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.675" endtime="20170809 11:10:54.675" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.673" endtime="20170809 11:10:54.676" status="PASS"></status>
</kw>
<status starttime="20170809 11:10:54.673" endtime="20170809 11:10:54.676" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:10:54.676">Delete All Sessions</msg>
<status starttime="20170809 11:10:54.676" endtime="20170809 11:10:54.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.676">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:10:54.387" endtime="20170809 11:10:54.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:10:54.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:10:54.677" endtime="20170809 11:10:54.677" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:10:54.678">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:10:54.678">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:10:54.678">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:10:54.677" endtime="20170809 11:10:54.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.678">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:54.386" endtime="20170809 11:10:54.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:10:54.678">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:10:54.386" endtime="20170809 11:10:54.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:10:54.679">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:10:54.679" endtime="20170809 11:10:54.679" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:54.385" endtime="20170809 11:10:54.679" status="FAIL"></status>
</kw>
<status starttime="20170809 11:10:53.724" endtime="20170809 11:10:54.679" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.684">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:04.684" endtime="20170809 11:11:04.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.685">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:04.685" endtime="20170809 11:11:04.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.686">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:04.686" endtime="20170809 11:11:04.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.687">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:04.686" endtime="20170809 11:11:04.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.889">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:04.687" endtime="20170809 11:11:04.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:04.889">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:04.890">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:04.687" endtime="20170809 11:11:04.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:04.890" endtime="20170809 11:11:04.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:04.891" endtime="20170809 11:11:04.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.683" endtime="20170809 11:11:04.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.683" endtime="20170809 11:11:04.891" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.682" endtime="20170809 11:11:04.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.892">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:11:04.892" endtime="20170809 11:11:04.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.894">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:04.894" endtime="20170809 11:11:04.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.895">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:04.895" endtime="20170809 11:11:04.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.895" endtime="20170809 11:11:04.895" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.893" endtime="20170809 11:11:04.896" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.892" endtime="20170809 11:11:04.896" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.958">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:04.958">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:04.896" endtime="20170809 11:11:04.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.960">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:04.960" endtime="20170809 11:11:04.960" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.961">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:04.961" endtime="20170809 11:11:04.961" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.960" endtime="20170809 11:11:04.961" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.959" endtime="20170809 11:11:04.961" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.959" endtime="20170809 11:11:04.961" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:04.962">Delete All Sessions</msg>
<status starttime="20170809 11:11:04.962" endtime="20170809 11:11:04.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:04.962">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:04.682" endtime="20170809 11:11:04.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:04.962" endtime="20170809 11:11:04.963" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.963">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:04.963">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:04.963">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:04.963" endtime="20170809 11:11:04.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:04.964">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:11:04.681" endtime="20170809 11:11:04.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:04.964">${power_state} = On</msg>
<status starttime="20170809 11:11:04.681" endtime="20170809 11:11:04.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:11:04.964" endtime="20170809 11:11:04.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.680" endtime="20170809 11:11:04.965" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:04.969">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:04.968" endtime="20170809 11:11:04.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:04.969" endtime="20170809 11:11:04.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.970">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:04.970" endtime="20170809 11:11:04.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:04.971">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:04.971" endtime="20170809 11:11:04.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.182">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:04.972" endtime="20170809 11:11:05.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.183">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:05.183">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:04.971" endtime="20170809 11:11:05.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.184">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:05.183" endtime="20170809 11:11:05.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:05.184" endtime="20170809 11:11:05.184" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.967" endtime="20170809 11:11:05.185" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.967" endtime="20170809 11:11:05.185" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:04.967" endtime="20170809 11:11:05.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.185">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:11:05.185" endtime="20170809 11:11:05.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.187">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:05.187" endtime="20170809 11:11:05.188" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.188">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:05.188" endtime="20170809 11:11:05.189" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.188" endtime="20170809 11:11:05.189" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.186" endtime="20170809 11:11:05.189" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.186" endtime="20170809 11:11:05.189" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.295">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:05.296">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:05.189" endtime="20170809 11:11:05.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.297">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:05.297" endtime="20170809 11:11:05.297" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.298">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:05.298" endtime="20170809 11:11:05.298" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.298" endtime="20170809 11:11:05.298" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.296" endtime="20170809 11:11:05.299" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.296" endtime="20170809 11:11:05.299" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:05.299">Delete All Sessions</msg>
<status starttime="20170809 11:11:05.299" endtime="20170809 11:11:05.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.299">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:04.966" endtime="20170809 11:11:05.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:05.300" endtime="20170809 11:11:05.300" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.301">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:05.301">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:05.301">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:05.300" endtime="20170809 11:11:05.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.301">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:11:04.965" endtime="20170809 11:11:05.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.301">${host_state} = Running</msg>
<status starttime="20170809 11:11:04.965" endtime="20170809 11:11:05.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:11:05.302" endtime="20170809 11:11:05.302" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.306">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:05.306" endtime="20170809 11:11:05.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.307">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:05.307" endtime="20170809 11:11:05.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:05.307" endtime="20170809 11:11:05.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:05.308" endtime="20170809 11:11:05.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:05.309" endtime="20170809 11:11:05.487" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.487">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:05.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:05.309" endtime="20170809 11:11:05.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.488">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:05.487" endtime="20170809 11:11:05.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:05.488" endtime="20170809 11:11:05.489" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.305" endtime="20170809 11:11:05.489" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.305" endtime="20170809 11:11:05.489" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.304" endtime="20170809 11:11:05.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.489">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:11:05.489" endtime="20170809 11:11:05.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.492">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:11:05.491" endtime="20170809 11:11:05.492" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.493">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:11:05.492" endtime="20170809 11:11:05.493" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.492" endtime="20170809 11:11:05.493" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.490" endtime="20170809 11:11:05.493" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.490" endtime="20170809 11:11:05.493" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.559">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:05.559">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:05.493" endtime="20170809 11:11:05.559" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.561">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:05.560" endtime="20170809 11:11:05.561" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.562">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:05.562" endtime="20170809 11:11:05.562" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.561" endtime="20170809 11:11:05.562" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.560" endtime="20170809 11:11:05.562" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:05.560" endtime="20170809 11:11:05.562" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:05.563">Delete All Sessions</msg>
<status starttime="20170809 11:11:05.562" endtime="20170809 11:11:05.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.563">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:05.304" endtime="20170809 11:11:05.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:05.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:05.563" endtime="20170809 11:11:05.564" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:05.564">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:05.564">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:05.564">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:05.564" endtime="20170809 11:11:05.564" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.565">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:11:05.303" endtime="20170809 11:11:05.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:05.565">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:11:05.302" endtime="20170809 11:11:05.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:11:05.566">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:11:05.565" endtime="20170809 11:11:05.566" status="FAIL"></status>
</kw>
<status starttime="20170809 11:11:05.302" endtime="20170809 11:11:05.566" status="FAIL"></status>
</kw>
<status starttime="20170809 11:11:04.680" endtime="20170809 11:11:05.566" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.571">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:15.570" endtime="20170809 11:11:15.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.572">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:15.571" endtime="20170809 11:11:15.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.572">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:15.572" endtime="20170809 11:11:15.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.573">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:15.573" endtime="20170809 11:11:15.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.846">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:15.574" endtime="20170809 11:11:15.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:15.846">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:15.846">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:15.573" endtime="20170809 11:11:15.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.847">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:15.846" endtime="20170809 11:11:15.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:15.847" endtime="20170809 11:11:15.847" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.570" endtime="20170809 11:11:15.847" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.569" endtime="20170809 11:11:15.848" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.569" endtime="20170809 11:11:15.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.848">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:11:15.848" endtime="20170809 11:11:15.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.850">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:15.850" endtime="20170809 11:11:15.850" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.851">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:15.851" endtime="20170809 11:11:15.851" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.851" endtime="20170809 11:11:15.852" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.849" endtime="20170809 11:11:15.852" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.849" endtime="20170809 11:11:15.852" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.915">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:15.916">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:15.852" endtime="20170809 11:11:15.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.917">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:15.917" endtime="20170809 11:11:15.917" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.918">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:15.918" endtime="20170809 11:11:15.918" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.918" endtime="20170809 11:11:15.919" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.916" endtime="20170809 11:11:15.919" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.916" endtime="20170809 11:11:15.919" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:15.919">Delete All Sessions</msg>
<status starttime="20170809 11:11:15.919" endtime="20170809 11:11:15.919" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:15.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:15.568" endtime="20170809 11:11:15.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:15.920" endtime="20170809 11:11:15.920" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.921">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:15.921">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:15.921">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:15.920" endtime="20170809 11:11:15.921" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:15.921">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:11:15.568" endtime="20170809 11:11:15.921" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:15.921">${power_state} = On</msg>
<status starttime="20170809 11:11:15.567" endtime="20170809 11:11:15.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:11:15.922" endtime="20170809 11:11:15.922" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.567" endtime="20170809 11:11:15.922" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:15.926">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:15.925" endtime="20170809 11:11:15.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:15.927" endtime="20170809 11:11:15.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:15.928" endtime="20170809 11:11:15.928" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:15.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:15.928" endtime="20170809 11:11:15.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:15.930" endtime="20170809 11:11:16.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.126">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:16.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:15.929" endtime="20170809 11:11:16.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.127">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:16.126" endtime="20170809 11:11:16.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:16.127" endtime="20170809 11:11:16.128" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.925" endtime="20170809 11:11:16.128" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.924" endtime="20170809 11:11:16.128" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:15.924" endtime="20170809 11:11:16.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.129">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:11:16.128" endtime="20170809 11:11:16.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.132">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:16.131" endtime="20170809 11:11:16.132" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.133">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:16.133" endtime="20170809 11:11:16.133" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.132" endtime="20170809 11:11:16.133" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.130" endtime="20170809 11:11:16.133" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.129" endtime="20170809 11:11:16.134" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.225">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:16.225">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:16.134" endtime="20170809 11:11:16.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.227">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:16.227" endtime="20170809 11:11:16.227" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.228">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:16.228" endtime="20170809 11:11:16.228" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.228" endtime="20170809 11:11:16.228" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.226" endtime="20170809 11:11:16.229" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.226" endtime="20170809 11:11:16.229" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:16.229">Delete All Sessions</msg>
<status starttime="20170809 11:11:16.229" endtime="20170809 11:11:16.229" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.229">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:15.923" endtime="20170809 11:11:16.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:16.230" endtime="20170809 11:11:16.230" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.231">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:16.231">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:16.231">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:16.230" endtime="20170809 11:11:16.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.231">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:11:15.923" endtime="20170809 11:11:16.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.231">${host_state} = Running</msg>
<status starttime="20170809 11:11:15.922" endtime="20170809 11:11:16.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:11:16.232" endtime="20170809 11:11:16.232" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.238">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:16.237" endtime="20170809 11:11:16.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.239">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:16.239" endtime="20170809 11:11:16.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.240">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:16.239" endtime="20170809 11:11:16.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.241">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:16.240" endtime="20170809 11:11:16.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:16.242" endtime="20170809 11:11:16.434" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:16.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:16.241" endtime="20170809 11:11:16.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:16.435" endtime="20170809 11:11:16.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:16.435" endtime="20170809 11:11:16.436" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.236" endtime="20170809 11:11:16.436" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.236" endtime="20170809 11:11:16.436" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.235" endtime="20170809 11:11:16.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.437">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:11:16.436" endtime="20170809 11:11:16.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.439">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:11:16.438" endtime="20170809 11:11:16.439" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.440">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:11:16.440" endtime="20170809 11:11:16.440" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.439" endtime="20170809 11:11:16.440" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.437" endtime="20170809 11:11:16.440" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.437" endtime="20170809 11:11:16.440" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.506">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:16.506">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:16.441" endtime="20170809 11:11:16.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.508">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:16.507" endtime="20170809 11:11:16.508" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.509">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:16.509" endtime="20170809 11:11:16.509" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.508" endtime="20170809 11:11:16.509" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.507" endtime="20170809 11:11:16.509" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:16.506" endtime="20170809 11:11:16.509" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:16.510">Delete All Sessions</msg>
<status starttime="20170809 11:11:16.509" endtime="20170809 11:11:16.510" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:16.234" endtime="20170809 11:11:16.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:16.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:16.510" endtime="20170809 11:11:16.511" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:16.511">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:16.511">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:16.511">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:16.511" endtime="20170809 11:11:16.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.512">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:11:16.233" endtime="20170809 11:11:16.512" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:16.512">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:11:16.232" endtime="20170809 11:11:16.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:11:16.512">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:11:16.512" endtime="20170809 11:11:16.513" status="FAIL"></status>
</kw>
<status starttime="20170809 11:11:16.232" endtime="20170809 11:11:16.513" status="FAIL"></status>
</kw>
<status starttime="20170809 11:11:15.566" endtime="20170809 11:11:16.513" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.518">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:26.517" endtime="20170809 11:11:26.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:26.519" endtime="20170809 11:11:26.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.519">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:26.519" endtime="20170809 11:11:26.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:26.520" endtime="20170809 11:11:26.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.722">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:26.521" endtime="20170809 11:11:26.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:26.722">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:26.722">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:26.520" endtime="20170809 11:11:26.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.723">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:26.723" endtime="20170809 11:11:26.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:26.723" endtime="20170809 11:11:26.724" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.517" endtime="20170809 11:11:26.724" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.516" endtime="20170809 11:11:26.724" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.516" endtime="20170809 11:11:26.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.725">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 11:11:26.724" endtime="20170809 11:11:26.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.727">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:26.726" endtime="20170809 11:11:26.727" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.728">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:26.728" endtime="20170809 11:11:26.728" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.727" endtime="20170809 11:11:26.728" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.726" endtime="20170809 11:11:26.728" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.725" endtime="20170809 11:11:26.728" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.872">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:26.872">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:26.728" endtime="20170809 11:11:26.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.874">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:26.874" endtime="20170809 11:11:26.874" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.875">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:26.875" endtime="20170809 11:11:26.875" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.874" endtime="20170809 11:11:26.875" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.873" endtime="20170809 11:11:26.876" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.873" endtime="20170809 11:11:26.876" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:26.876">Delete All Sessions</msg>
<status starttime="20170809 11:11:26.876" endtime="20170809 11:11:26.876" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:26.876">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:26.515" endtime="20170809 11:11:26.876" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:26.877" endtime="20170809 11:11:26.877" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.878">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:26.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:26.878">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:26.877" endtime="20170809 11:11:26.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:26.878">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 11:11:26.515" endtime="20170809 11:11:26.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:26.878">${power_state} = On</msg>
<status starttime="20170809 11:11:26.514" endtime="20170809 11:11:26.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 11:11:26.879" endtime="20170809 11:11:26.879" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.514" endtime="20170809 11:11:26.879" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:26.883">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:26.883" endtime="20170809 11:11:26.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:26.884" endtime="20170809 11:11:26.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.885">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:26.884" endtime="20170809 11:11:26.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:26.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:26.885" endtime="20170809 11:11:26.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.113">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:26.886" endtime="20170809 11:11:27.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.114">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:27.114">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:26.885" endtime="20170809 11:11:27.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.114" endtime="20170809 11:11:27.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.115" endtime="20170809 11:11:27.115" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.882" endtime="20170809 11:11:27.115" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.881" endtime="20170809 11:11:27.116" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:26.881" endtime="20170809 11:11:27.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.116">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:11:27.116" endtime="20170809 11:11:27.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.118">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:27.118" endtime="20170809 11:11:27.118" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.119">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:27.119" endtime="20170809 11:11:27.119" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.119" endtime="20170809 11:11:27.120" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.117" endtime="20170809 11:11:27.120" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.117" endtime="20170809 11:11:27.120" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.208">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:27.208">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:27.120" endtime="20170809 11:11:27.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.210">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:27.210" endtime="20170809 11:11:27.210" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.211">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:27.211" endtime="20170809 11:11:27.211" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.210" endtime="20170809 11:11:27.211" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.209" endtime="20170809 11:11:27.211" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.209" endtime="20170809 11:11:27.211" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:27.212">Delete All Sessions</msg>
<status starttime="20170809 11:11:27.212" endtime="20170809 11:11:27.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.212">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:26.880" endtime="20170809 11:11:27.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.212" endtime="20170809 11:11:27.213" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.213">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:27.213">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:27.213">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:27.213" endtime="20170809 11:11:27.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.214">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:11:26.880" endtime="20170809 11:11:27.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.214">${host_state} = Running</msg>
<status starttime="20170809 11:11:26.879" endtime="20170809 11:11:27.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 11:11:27.214" endtime="20170809 11:11:27.215" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.219">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:27.219" endtime="20170809 11:11:27.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:27.219" endtime="20170809 11:11:27.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.220">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:27.220" endtime="20170809 11:11:27.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:27.221" endtime="20170809 11:11:27.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.409">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:27.222" endtime="20170809 11:11:27.409" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.409">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:27.409">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:27.221" endtime="20170809 11:11:27.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.410">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.409" endtime="20170809 11:11:27.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.410" endtime="20170809 11:11:27.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.218" endtime="20170809 11:11:27.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.218" endtime="20170809 11:11:27.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.217" endtime="20170809 11:11:27.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.411">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 11:11:27.411" endtime="20170809 11:11:27.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.416">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:11:27.416" endtime="20170809 11:11:27.417" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.417">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 11:11:27.417" endtime="20170809 11:11:27.418" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.417" endtime="20170809 11:11:27.418" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.412" endtime="20170809 11:11:27.418" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.412" endtime="20170809 11:11:27.418" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.556">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:27.557">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:27.418" endtime="20170809 11:11:27.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.559">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:27.558" endtime="20170809 11:11:27.559" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.560">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:27.560" endtime="20170809 11:11:27.560" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.559" endtime="20170809 11:11:27.560" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.557" endtime="20170809 11:11:27.560" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.557" endtime="20170809 11:11:27.560" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:27.561">Delete All Sessions</msg>
<status starttime="20170809 11:11:27.561" endtime="20170809 11:11:27.561" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.561">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:27.216" endtime="20170809 11:11:27.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.561" endtime="20170809 11:11:27.562" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.562">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:27.562">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:27.562">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:27.562" endtime="20170809 11:11:27.562" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.563">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:11:27.216" endtime="20170809 11:11:27.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.563">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 11:11:27.215" endtime="20170809 11:11:27.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:11:27.564">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:11:27.563" endtime="20170809 11:11:27.564" status="FAIL"></status>
</kw>
<status starttime="20170809 11:11:27.215" endtime="20170809 11:11:27.564" status="FAIL"></status>
</kw>
<status starttime="20170809 11:11:26.513" endtime="20170809 11:11:27.564" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170809 11:11:27.564">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 11:01:23.151" endtime="20170809 11:11:27.564" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:21.790" endtime="20170809 11:11:27.564" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:14.325" endtime="20170809 11:11:27.565" status="FAIL"></status>
</kw>
<status starttime="20170809 11:01:14.324" endtime="20170809 11:11:27.565" status="FAIL"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.570">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:27.569" endtime="20170809 11:11:27.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.570">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:27.570" endtime="20170809 11:11:27.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.571">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:27.571" endtime="20170809 11:11:27.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.572">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:27.571" endtime="20170809 11:11:27.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.859">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:27.572" endtime="20170809 11:11:27.860" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.860">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:27.860">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:27.572" endtime="20170809 11:11:27.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.860">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.860" endtime="20170809 11:11:27.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.861" endtime="20170809 11:11:27.862" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.569" endtime="20170809 11:11:27.862" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.568" endtime="20170809 11:11:27.862" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.568" endtime="20170809 11:11:27.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.863">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 11:11:27.862" endtime="20170809 11:11:27.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.866">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:27.865" endtime="20170809 11:11:27.866" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.867">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 11:11:27.867" endtime="20170809 11:11:27.867" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.866" endtime="20170809 11:11:27.868" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.864" endtime="20170809 11:11:27.868" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.863" endtime="20170809 11:11:27.868" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.957">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:27.957">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:27.868" endtime="20170809 11:11:27.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.959">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:27.958" endtime="20170809 11:11:27.959" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.960">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 11:11:27.960" endtime="20170809 11:11:27.960" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.959" endtime="20170809 11:11:27.960" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.958" endtime="20170809 11:11:27.960" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.957" endtime="20170809 11:11:27.960" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:27.961">Delete All Sessions</msg>
<status starttime="20170809 11:11:27.961" endtime="20170809 11:11:27.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:27.567" endtime="20170809 11:11:27.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:27.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:27.961" endtime="20170809 11:11:27.962" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:27.962">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:27.962">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:27.962">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:27.962" endtime="20170809 11:11:27.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.963">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 11:11:27.566" endtime="20170809 11:11:27.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.963">${host_state} = Running</msg>
<status starttime="20170809 11:11:27.566" endtime="20170809 11:11:27.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:11:27.964">Running != Quiesced</msg>
<status starttime="20170809 11:11:27.964" endtime="20170809 11:11:27.964" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.964">${status} = False</msg>
<status starttime="20170809 11:11:27.963" endtime="20170809 11:11:27.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:27.965">${status} = False</msg>
<status starttime="20170809 11:11:27.566" endtime="20170809 11:11:27.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:28.002">Length is 10</msg>
<status starttime="20170809 11:11:28.002" endtime="20170809 11:11:28.003" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:28.014">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 11:11:31.023">${RC} = 0</msg>
<msg level="INFO" timestamp="20170809 11:11:31.024">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=4.82 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.595 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status starttime="20170809 11:11:28.003" endtime="20170809 11:11:31.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.037">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=4.82 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.595 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.564 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.564/1.652/4.827/1.833 ms</msg>
<status starttime="20170809 11:11:31.034" endtime="20170809 11:11:31.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170809 11:11:31.038" endtime="20170809 11:11:31.039" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:28.001" endtime="20170809 11:11:31.039" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.087">${cur_time} = 2017-08-09 11:11:31:086264</msg>
<status starttime="20170809 11:11:31.086" endtime="20170809 11:11:31.087" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.088">${cur_time} = 20170809111131086264</msg>
<status starttime="20170809 11:11:31.088" endtime="20170809 11:11:31.088" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.085" endtime="20170809 11:11:31.088" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.089">${FFDC_TIME} = 20170809111131086264</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.105">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170809 11:11:31.104" endtime="20170809 11:11:31.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.105">${suite_name} = 20170809111131086264_TestsTestBasicPoweron</msg>
<status starttime="20170809 11:11:31.105" endtime="20170809 11:11:31.105" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.106">${test_name} = PowerOnTest</msg>
<status starttime="20170809 11:11:31.106" endtime="20170809 11:11:31.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.106">${test_name} = 20170809111131086264_PowerOnTest</msg>
<status starttime="20170809 11:11:31.106" endtime="20170809 11:11:31.107" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.103" endtime="20170809 11:11:31.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.107">${FFDC_DIR_PATH} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170809 11:11:31.107">${FFDC_PREFIX} = 20170809111131086264_</msg>
<msg level="INFO" timestamp="20170809 11:11:31.156">${LOG_PREFIX} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.158">Created directory '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.157" endtime="20170809 11:11:31.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.163">${FFDC_FILE_PATH} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.215">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.215" endtime="20170809 11:11:31.216" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.214" endtime="20170809 11:11:31.216" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.217">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.216" endtime="20170809 11:11:31.217" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.216" endtime="20170809 11:11:31.217" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.218">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.218" endtime="20170809 11:11:31.218" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.217" endtime="20170809 11:11:31.218" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.220">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.219" endtime="20170809 11:11:31.220" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.219" endtime="20170809 11:11:31.220" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.221">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.221" endtime="20170809 11:11:31.221" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.220" endtime="20170809 11:11:31.221" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.223">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.222" endtime="20170809 11:11:31.223" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.222" endtime="20170809 11:11:31.223" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.224">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.224" endtime="20170809 11:11:31.224" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.223" endtime="20170809 11:11:31.224" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.226">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.225" endtime="20170809 11:11:31.226" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.224" endtime="20170809 11:11:31.226" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.227">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.227" endtime="20170809 11:11:31.227" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.226" endtime="20170809 11:11:31.227" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.230">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.229" endtime="20170809 11:11:31.230" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.228" endtime="20170809 11:11:31.230" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.231">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.231" endtime="20170809 11:11:31.231" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.230" endtime="20170809 11:11:31.231" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.232">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.232" endtime="20170809 11:11:31.233" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.231" endtime="20170809 11:11:31.233" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.234">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.233" endtime="20170809 11:11:31.234" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.233" endtime="20170809 11:11:31.234" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.301">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:31.302">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 11:11:31.371">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 11:11:31.402">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 11:11:31.402">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 11:11:31.402">${rc} = 0</msg>
<status starttime="20170809 11:11:31.235" endtime="20170809 11:11:31.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.402">Length is 0</msg>
<status starttime="20170809 11:11:31.402" endtime="20170809 11:11:31.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.403">Length is 11</msg>
<status starttime="20170809 11:11:31.403" endtime="20170809 11:11:31.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.403">${model_name} = Witherspoon</msg>
<status starttime="20170809 11:11:31.234" endtime="20170809 11:11:31.403" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.405">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.404" endtime="20170809 11:11:31.405" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.403" endtime="20170809 11:11:31.405" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.227" endtime="20170809 11:11:31.405" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.406">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.406" endtime="20170809 11:11:31.406" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.405" endtime="20170809 11:11:31.407" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.407">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status starttime="20170809 11:11:31.407" endtime="20170809 11:11:31.407" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.409">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.408" endtime="20170809 11:11:31.409" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.407" endtime="20170809 11:11:31.409" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.410">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.409" endtime="20170809 11:11:31.410" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.409" endtime="20170809 11:11:31.410" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.407" endtime="20170809 11:11:31.410" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.411">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.411" endtime="20170809 11:11:31.411" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.410" endtime="20170809 11:11:31.412" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.413">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.412" endtime="20170809 11:11:31.413" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.412" endtime="20170809 11:11:31.413" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.410" endtime="20170809 11:11:31.413" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.414">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.414" endtime="20170809 11:11:31.414" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.413" endtime="20170809 11:11:31.414" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.416">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.415" endtime="20170809 11:11:31.416" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.415" endtime="20170809 11:11:31.416" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.413" endtime="20170809 11:11:31.418" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.407" endtime="20170809 11:11:31.419" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:31.420">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:31.419" endtime="20170809 11:11:31.420" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.419" endtime="20170809 11:11:31.420" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.213" endtime="20170809 11:11:31.420" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.440">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170809 11:11:31.439" endtime="20170809 11:11:31.440" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.441">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') |...</msg>
<status starttime="20170809 11:11:31.441" endtime="20170809 11:11:31.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170809 11:11:31.442" endtime="20170809 11:11:31.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.443">@{ffdc_function_list} = [ Get Request FFDC | FFDC Generic Report | OS FFDC | SEL Log | Core Files | BMC Specific Files ]</msg>
<status starttime="20170809 11:11:31.442" endtime="20170809 11:11:31.443" status="PASS"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 11:11:31.444" endtime="20170809 11:11:31.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:31.445">${ret_values} = None</msg>
<status starttime="20170809 11:11:31.444" endtime="20170809 11:11:31.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 11:11:31.445" endtime="20170809 11:11:31.445" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.507">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170809 11:11:31.507" endtime="20170809 11:11:31.507" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.508">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status starttime="20170809 11:11:31.508" endtime="20170809 11:11:31.508" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.509">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_record_log.txt</msg>
<status starttime="20170809 11:11:31.509" endtime="20170809 11:11:31.509" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.512">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:31.512" endtime="20170809 11:11:31.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:31.513" endtime="20170809 11:11:31.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.514">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:31.514" endtime="20170809 11:11:31.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.515">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:31.514" endtime="20170809 11:11:31.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.720">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:31.515" endtime="20170809 11:11:31.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.720">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:31.721">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:31.515" endtime="20170809 11:11:31.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.721">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:31.721" endtime="20170809 11:11:31.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:31.722" endtime="20170809 11:11:31.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.511" endtime="20170809 11:11:31.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.511" endtime="20170809 11:11:31.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.510" endtime="20170809 11:11:31.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.724">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170809 11:11:31.723" endtime="20170809 11:11:31.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:31.724" endtime="20170809 11:11:31.724" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.768">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:31.769">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 11:11:31.725" endtime="20170809 11:11:31.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:31.769" endtime="20170809 11:11:31.769" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:31.770">Delete All Sessions</msg>
<status starttime="20170809 11:11:31.769" endtime="20170809 11:11:31.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.770">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 11:11:31.509" endtime="20170809 11:11:31.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 11:11:31.771">404 != 200</msg>
<status starttime="20170809 11:11:31.771" endtime="20170809 11:11:31.771" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.771">${status} = False</msg>
<status starttime="20170809 11:11:31.770" endtime="20170809 11:11:31.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 11:11:31.773">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 11:11:31.773" endtime="20170809 11:11:31.773" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.772" endtime="20170809 11:11:31.773" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.509" endtime="20170809 11:11:31.773" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.774">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_inventory.txt</msg>
<status starttime="20170809 11:11:31.773" endtime="20170809 11:11:31.774" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.777">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:31.777" endtime="20170809 11:11:31.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.778">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:31.778" endtime="20170809 11:11:31.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.779">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:31.778" endtime="20170809 11:11:31.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.779">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:31.779" endtime="20170809 11:11:31.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.986">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:31.780" endtime="20170809 11:11:31.986" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:31.986">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:31.987">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:31.780" endtime="20170809 11:11:31.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.987">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:31.987" endtime="20170809 11:11:31.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:31.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:31.988" endtime="20170809 11:11:31.988" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.776" endtime="20170809 11:11:31.988" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.775" endtime="20170809 11:11:31.988" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.775" endtime="20170809 11:11:31.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:31.989">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170809 11:11:31.989" endtime="20170809 11:11:31.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:31.989" endtime="20170809 11:11:31.990" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.262">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:32.263">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:31.990" endtime="20170809 11:11:32.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:32.263" endtime="20170809 11:11:32.263" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:32.264">Delete All Sessions</msg>
<status starttime="20170809 11:11:32.264" endtime="20170809 11:11:32.264" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:32.264">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:31.774" endtime="20170809 11:11:32.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:32.265" endtime="20170809 11:11:32.265" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:32.265">${status} = True</msg>
<status starttime="20170809 11:11:32.264" endtime="20170809 11:11:32.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 11:11:32.266" endtime="20170809 11:11:32.266" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.267">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:32.267">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 11:11:32.268">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170809 11:11:32.267" endtime="20170809 11:11:32.268" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:32.270">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_inventory.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:32.269" endtime="20170809 11:11:32.270" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.268" endtime="20170809 11:11:32.271" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.773" endtime="20170809 11:11:32.271" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.271">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_led.txt</msg>
<status starttime="20170809 11:11:32.271" endtime="20170809 11:11:32.271" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.275">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:32.274" endtime="20170809 11:11:32.275" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.276">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:32.276" endtime="20170809 11:11:32.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.277">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:32.276" endtime="20170809 11:11:32.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.277">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:32.277" endtime="20170809 11:11:32.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.498">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:32.278" endtime="20170809 11:11:32.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:32.499">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:32.499">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:32.278" endtime="20170809 11:11:32.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.499">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:32.499" endtime="20170809 11:11:32.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.500">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:32.500" endtime="20170809 11:11:32.500" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.273" endtime="20170809 11:11:32.500" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.273" endtime="20170809 11:11:32.500" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.272" endtime="20170809 11:11:32.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.501">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170809 11:11:32.501" endtime="20170809 11:11:32.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:32.501" endtime="20170809 11:11:32.502" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.628">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:32.629">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 11:11:32.502" endtime="20170809 11:11:32.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:32.629" endtime="20170809 11:11:32.629" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:32.630">Delete All Sessions</msg>
<status starttime="20170809 11:11:32.630" endtime="20170809 11:11:32.630" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:32.630">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 11:11:32.271" endtime="20170809 11:11:32.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 11:11:32.631">404 != 200</msg>
<status starttime="20170809 11:11:32.631" endtime="20170809 11:11:32.631" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:32.631">${status} = False</msg>
<status starttime="20170809 11:11:32.630" endtime="20170809 11:11:32.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 11:11:32.632">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 11:11:32.632" endtime="20170809 11:11:32.632" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.632" endtime="20170809 11:11:32.633" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.271" endtime="20170809 11:11:32.633" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.633">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_elog.txt</msg>
<status starttime="20170809 11:11:32.633" endtime="20170809 11:11:32.633" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.637">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:32.636" endtime="20170809 11:11:32.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.638">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:32.637" endtime="20170809 11:11:32.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.638">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:32.638" endtime="20170809 11:11:32.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.639">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:32.638" endtime="20170809 11:11:32.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.840">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:32.640" endtime="20170809 11:11:32.840" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:32.840">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:32.840">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:32.639" endtime="20170809 11:11:32.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.841">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:32.841" endtime="20170809 11:11:32.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:32.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:32.841" endtime="20170809 11:11:32.842" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.635" endtime="20170809 11:11:32.842" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.635" endtime="20170809 11:11:32.842" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.634" endtime="20170809 11:11:32.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:32.843">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170809 11:11:32.842" endtime="20170809 11:11:32.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:32.843" endtime="20170809 11:11:32.843" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.132">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:33.132">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:32.844" endtime="20170809 11:11:33.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:33.132" endtime="20170809 11:11:33.133" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:33.133">Delete All Sessions</msg>
<status starttime="20170809 11:11:33.133" endtime="20170809 11:11:33.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:33.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:32.634" endtime="20170809 11:11:33.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:33.134" endtime="20170809 11:11:33.135" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:33.135">${status} = True</msg>
<status starttime="20170809 11:11:33.134" endtime="20170809 11:11:33.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 11:11:33.135" endtime="20170809 11:11:33.135" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.138">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 61 82 73 00 00 00 00 9f 8e 19 6a 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 00 9c 39 d5 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 b5 e5 9e 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 b7 1c a7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 b8 3a 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 b8 41 70 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 b8 4f eb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 b8 5a 57 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 ba 1b 07 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 ba 25 7e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 ba 42 59 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 ba 8b d8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 ba 9c 08 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 00 bb d8 af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 bb e2 b5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 bc 29 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 bc 33 cb 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 00 bc 3d 14 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 00 bd bc e2 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 bd c5 67 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d 44 66 dd 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d 44 6e e0 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 00 9c 39 d5 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 b5 e5 9e 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 b7 1c a7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 b8 3a 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 b8 41 70 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 b8 4f eb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 b8 5a 57 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 ba 1b 07 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 ba 25 7e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 ba 42 59 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 ba 8b d8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 ba 9c 08"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502277015327, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502275555839, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276191749, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d0 fa 2e 05 00 00 00 00 d1 28 2b 88 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 15 00 9c 5a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 1a 56 42 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 15 1b 8a ff 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1c a6 b2 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 15 1c ae fb 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 1c be 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 15 1c c9 19 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 15 1e 8b ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 15 1e 96 80 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1e b3 80 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 1f 04 b3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 15 1f 0e d3 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 15 20 4a 72 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 20 56 0e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 20 b4 9f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 20 bf ff 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 15 20 cb 3c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 15 22 7c 07 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 22 9e 02 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 32 87 d2 b3 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 32 87 db 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 15 00 9c 5a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 1a 56 42 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 15 1b 8a ff 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1c a6 b2 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 15 1c ae fb 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 1c be 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 15 1c c9 19 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 15 1e 8b ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 15 1e 96 80 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1e b3 80 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 1f 04 b3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 15 1f 0e d3"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276521861, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276639869, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9e f1 97 b5 00 00 00 00 9f 1c 4a 64 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 04 3a ed 44 b0 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 06 ee 1a 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 3b 08 20 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 09 3f f7 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 3b 09 47 27 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 09 55 de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 3b 09 60 06 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 3b 0b 26 b0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 3b 0b 30 a9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 0b 4d 20 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0b 95 d6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 3b 0b a6 4e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 04 3b 0c e3 ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 0c ed eb 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 0d 34 6e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0d 3e bf 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 04 3b 0d 48 6f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 04 3b 0e c5 8e 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 0e ce 2b 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0c 69 cf b6 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0c 69 d8 86 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 04 3a ed 44 b0 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 06 ee 1a 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 3b 08 20 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 09 3f f7 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 3b 09 47 27 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 09 55 de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 3b 09 60 06 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 3b 0b 26 b0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 3b 0b 30 a9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 0b 4d 20 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0b 95 d6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 3b 0b a6 4e"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276688202, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276805866, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 42 a2 8a 00 00 00 00 a1 6d c0 b2 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 04 54 2c 73 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 6d d7 d5 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 6f 08 2b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 70 23 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 70 2a e1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 70 39 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 70 44 62 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 72 0a af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 72 14 ff 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 72 31 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 72 7b 1c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 72 92 78 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 04 73 cf 56 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 73 da 10 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 74 20 37 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 74 2a 7d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 04 74 33 f1 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 04 75 b0 4c 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 75 b8 b5 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 f0 19 79 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 f0 21 c8 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 04 54 2c 73 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 6d d7 d5 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 6f 08 2b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 70 23 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 70 2a e1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 70 39 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 70 44 62 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 72 0a af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 72 14 ff 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 72 31 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 72 7b 1c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 72 92 78"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276852160, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276970038, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:33.139">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 11:11:33.140">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu...</msg>
<status starttime="20170809 11:11:33.136" endtime="20170809 11:11:33.140" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.142">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_elog.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.141" endtime="20170809 11:11:33.142" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.140" endtime="20170809 11:11:33.142" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:32.633" endtime="20170809 11:11:33.142" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.143">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_sensor_list.txt</msg>
<status starttime="20170809 11:11:33.142" endtime="20170809 11:11:33.143" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.146">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:33.145" endtime="20170809 11:11:33.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.147">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:33.146" endtime="20170809 11:11:33.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.147">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:33.147" endtime="20170809 11:11:33.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.148">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:33.148" endtime="20170809 11:11:33.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:33.149" endtime="20170809 11:11:33.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:33.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:33.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:33.148" endtime="20170809 11:11:33.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:33.368" endtime="20170809 11:11:33.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:33.369" endtime="20170809 11:11:33.369" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.145" endtime="20170809 11:11:33.369" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.144" endtime="20170809 11:11:33.369" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.143" endtime="20170809 11:11:33.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.370">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170809 11:11:33.370" endtime="20170809 11:11:33.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:33.370" endtime="20170809 11:11:33.371" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.540">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:33.540">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:33.371" endtime="20170809 11:11:33.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:33.540" endtime="20170809 11:11:33.541" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:33.541">Delete All Sessions</msg>
<status starttime="20170809 11:11:33.541" endtime="20170809 11:11:33.541" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:33.542">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:33.143" endtime="20170809 11:11:33.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:33.542" endtime="20170809 11:11:33.543" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:33.543">${status} = True</msg>
<status starttime="20170809 11:11:33.542" endtime="20170809 11:11:33.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 11:11:33.543" endtime="20170809 11:11:33.543" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.544">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:33.544">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 11:11:33.544">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170809 11:11:33.544" endtime="20170809 11:11:33.544" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.546">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_sensor_list.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.545" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.545" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.142" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.508" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.508" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.507" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.507" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.506" endtime="20170809 11:11:33.546" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.446" endtime="20170809 11:11:33.547" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.443" endtime="20170809 11:11:33.547" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.443" endtime="20170809 11:11:33.547" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 11:11:33.548" endtime="20170809 11:11:33.548" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:33.549">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:33.549">${ret_values} = None</msg>
<status starttime="20170809 11:11:33.548" endtime="20170809 11:11:33.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 11:11:33.549" endtime="20170809 11:11:33.549" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.638">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status starttime="20170809 11:11:33.638" endtime="20170809 11:11:33.638" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.640">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status starttime="20170809 11:11:33.639" endtime="20170809 11:11:33.640" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.646">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170809 11:11:33.640" endtime="20170809 11:11:33.646" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.649">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.649" endtime="20170809 11:11:33.649" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.648" endtime="20170809 11:11:33.650" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.651">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.650" endtime="20170809 11:11:33.651" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.650" endtime="20170809 11:11:33.651" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.652">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.652" endtime="20170809 11:11:33.652" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.651" endtime="20170809 11:11:33.652" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.653">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.653" endtime="20170809 11:11:33.654" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.652" endtime="20170809 11:11:33.654" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.648" endtime="20170809 11:11:33.654" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.647" endtime="20170809 11:11:33.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.655">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170809 11:11:33.654" endtime="20170809 11:11:33.655" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:33.812">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:33.814">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170809 11:11:33.951">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:33.740" endtime="20170809 11:11:33.951" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:33.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:33.952">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 10:30:19 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170809 11:11:33.655" endtime="20170809 11:11:33.952" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.953">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 10:30:19 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170809 11:11:33.952" endtime="20170809 11:11:33.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.953">${stderr} = </msg>
<status starttime="20170809 11:11:33.953" endtime="20170809 11:11:33.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.960">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.959" endtime="20170809 11:11:33.960" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.959" endtime="20170809 11:11:33.960" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.953" endtime="20170809 11:11:33.960" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.647" endtime="20170809 11:11:33.960" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.646" endtime="20170809 11:11:33.960" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.963">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.963" endtime="20170809 11:11:33.963" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.962" endtime="20170809 11:11:33.963" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.965">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.964" endtime="20170809 11:11:33.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.964" endtime="20170809 11:11:33.965" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.966">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.966" endtime="20170809 11:11:33.966" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.965" endtime="20170809 11:11:33.966" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:33.967">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:33.967" endtime="20170809 11:11:33.967" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.966" endtime="20170809 11:11:33.967" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.962" endtime="20170809 11:11:33.968" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.961" endtime="20170809 11:11:33.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:33.968">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170809 11:11:33.968" endtime="20170809 11:11:33.968" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:34.080">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:34.085">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170809 11:11:34.143">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:34.022" endtime="20170809 11:11:34.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:34.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:34.143">${ret_values} = (u' 11:11:39 up 16 min,  load average: 1.63, 1.71, 1.10', u'', 0)</msg>
<status starttime="20170809 11:11:33.969" endtime="20170809 11:11:34.143" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:34.144">${stdout} =  11:11:39 up 16 min,  load average: 1.63, 1.71, 1.10</msg>
<status starttime="20170809 11:11:34.144" endtime="20170809 11:11:34.144" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:34.145">${stderr} = </msg>
<status starttime="20170809 11:11:34.144" endtime="20170809 11:11:34.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.151">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.151" endtime="20170809 11:11:34.151" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.150" endtime="20170809 11:11:34.151" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.145" endtime="20170809 11:11:34.152" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.961" endtime="20170809 11:11:34.152" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.960" endtime="20170809 11:11:34.152" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.155">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.154" endtime="20170809 11:11:34.155" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.154" endtime="20170809 11:11:34.155" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.156">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.156" endtime="20170809 11:11:34.156" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.155" endtime="20170809 11:11:34.156" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.158">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.157" endtime="20170809 11:11:34.158" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.157" endtime="20170809 11:11:34.158" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.159">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.158" endtime="20170809 11:11:34.159" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.158" endtime="20170809 11:11:34.159" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.153" endtime="20170809 11:11:34.159" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.153" endtime="20170809 11:11:34.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:34.160">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170809 11:11:34.160" endtime="20170809 11:11:34.160" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:34.272">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:34.275">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170809 11:11:34.332">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:34.213" endtime="20170809 11:11:34.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:34.332">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:34.332">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170809 11:11:34.160" endtime="20170809 11:11:34.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:34.333">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status starttime="20170809 11:11:34.332" endtime="20170809 11:11:34.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:34.333">${stderr} = </msg>
<status starttime="20170809 11:11:34.333" endtime="20170809 11:11:34.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.340">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.339" endtime="20170809 11:11:34.340" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.339" endtime="20170809 11:11:34.340" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.334" endtime="20170809 11:11:34.340" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.152" endtime="20170809 11:11:34.340" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.152" endtime="20170809 11:11:34.340" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.646" endtime="20170809 11:11:34.340" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.639" endtime="20170809 11:11:34.341" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.639" endtime="20170809 11:11:34.341" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:34.342">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170809 11:11:34.341" endtime="20170809 11:11:34.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:34.342">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170809 11:11:34.342" endtime="20170809 11:11:34.342" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.346">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.345" endtime="20170809 11:11:34.346" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.345" endtime="20170809 11:11:34.346" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.347">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.347" endtime="20170809 11:11:34.347" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.346" endtime="20170809 11:11:34.347" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.348">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.348" endtime="20170809 11:11:34.349" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.348" endtime="20170809 11:11:34.349" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:34.350">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:34.349" endtime="20170809 11:11:34.350" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.349" endtime="20170809 11:11:34.350" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.344" endtime="20170809 11:11:34.350" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.344" endtime="20170809 11:11:34.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:34.351">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170809 11:11:34.350" endtime="20170809 11:11:34.351" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:34.466">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:34.467">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170809 11:11:35.865">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:34.405" endtime="20170809 11:11:35.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:35.865">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:35.865">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status starttime="20170809 11:11:34.351" endtime="20170809 11:11:35.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:35.866">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status starttime="20170809 11:11:35.865" endtime="20170809 11:11:35.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:35.866">${stderr} = </msg>
<status starttime="20170809 11:11:35.866" endtime="20170809 11:11:35.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:35.873">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:35.872" endtime="20170809 11:11:35.873" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.872" endtime="20170809 11:11:35.873" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.867" endtime="20170809 11:11:35.873" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.343" endtime="20170809 11:11:35.873" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.343" endtime="20170809 11:11:35.873" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.343" endtime="20170809 11:11:35.873" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.341" endtime="20170809 11:11:35.874" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:34.341" endtime="20170809 11:11:35.874" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:35.875">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170809 11:11:35.874" endtime="20170809 11:11:35.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:35.875">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170809 11:11:35.875" endtime="20170809 11:11:35.876" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:35.879">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:35.878" endtime="20170809 11:11:35.879" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.878" endtime="20170809 11:11:35.879" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:35.880">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:35.880" endtime="20170809 11:11:35.880" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.879" endtime="20170809 11:11:35.880" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:35.881">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:35.881" endtime="20170809 11:11:35.881" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.880" endtime="20170809 11:11:35.881" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:35.883">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:35.882" endtime="20170809 11:11:35.883" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.882" endtime="20170809 11:11:35.883" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.877" endtime="20170809 11:11:35.883" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.877" endtime="20170809 11:11:35.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:35.884">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170809 11:11:35.883" endtime="20170809 11:11:35.884" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:35.998">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:35.998">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170809 11:11:36.075">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:35.931" endtime="20170809 11:11:36.076" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:36.076">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:36.076">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-201"\nVERSION_ID="v1.99.8-201-ga13956a"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170809 11:11:35.884" endtime="20170809 11:11:36.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.077">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-201"
VERSION_ID="v1.99.8-201-ga13956a"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170809 11:11:36.076" endtime="20170809 11:11:36.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.077">${stderr} = </msg>
<status starttime="20170809 11:11:36.077" endtime="20170809 11:11:36.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:36.084">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:36.083" endtime="20170809 11:11:36.084" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.083" endtime="20170809 11:11:36.084" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.078" endtime="20170809 11:11:36.084" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.876" endtime="20170809 11:11:36.084" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.876" endtime="20170809 11:11:36.084" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.876" endtime="20170809 11:11:36.084" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.874" endtime="20170809 11:11:36.085" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:35.874" endtime="20170809 11:11:36.085" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.638" endtime="20170809 11:11:36.085" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.637" endtime="20170809 11:11:36.085" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.549" endtime="20170809 11:11:36.085" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.547" endtime="20170809 11:11:36.085" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:33.547" endtime="20170809 11:11:36.085" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 11:11:36.087" endtime="20170809 11:11:36.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:36.087">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:36.087">${ret_values} = None</msg>
<status starttime="20170809 11:11:36.086" endtime="20170809 11:11:36.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 11:11:36.087" endtime="20170809 11:11:36.088" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.126">Returning from the enclosing user keyword.</msg>
<status starttime="20170809 11:11:36.126" endtime="20170809 11:11:36.126" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.125" endtime="20170809 11:11:36.126" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.088" endtime="20170809 11:11:36.126" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.085" endtime="20170809 11:11:36.127" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.085" endtime="20170809 11:11:36.127" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 11:11:36.131" endtime="20170809 11:11:36.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:36.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:36.131">${ret_values} = None</msg>
<status starttime="20170809 11:11:36.128" endtime="20170809 11:11:36.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 11:11:36.132" endtime="20170809 11:11:36.132" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.177">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:36.176" endtime="20170809 11:11:36.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:36.178" endtime="20170809 11:11:36.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.179">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:36.178" endtime="20170809 11:11:36.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.179">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:36.179" endtime="20170809 11:11:36.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.464">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:36.180" endtime="20170809 11:11:36.464" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:36.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:36.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:36.180" endtime="20170809 11:11:36.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.465">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:36.464" endtime="20170809 11:11:36.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:36.465" endtime="20170809 11:11:36.465" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.175" endtime="20170809 11:11:36.466" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.175" endtime="20170809 11:11:36.466" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.174" endtime="20170809 11:11:36.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.466">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170809 11:11:36.466" endtime="20170809 11:11:36.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:36.467" endtime="20170809 11:11:36.467" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.759">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:36.759">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:36.467" endtime="20170809 11:11:36.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:36.759" endtime="20170809 11:11:36.760" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:36.760">Delete All Sessions</msg>
<status starttime="20170809 11:11:36.760" endtime="20170809 11:11:36.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:36.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:36.173" endtime="20170809 11:11:36.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:36.761" endtime="20170809 11:11:36.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:36.762">${status} = True</msg>
<status starttime="20170809 11:11:36.761" endtime="20170809 11:11:36.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170809 11:11:36.762" endtime="20170809 11:11:36.762" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.763">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 61 82 73 00 00 00 00 9f 8e 19 6a 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 00 9c 39 d5 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 b5 e5 9e 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 b7 1c a7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 b8 3a 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 b8 41 70 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 b8 4f eb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 b8 5a 57 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 ba 1b 07 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 ba 25 7e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 ba 42 59 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 ba 8b d8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 ba 9c 08 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 00 bb d8 af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 bb e2 b5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 bc 29 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 bc 33 cb 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 00 bc 3d 14 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 00 bd bc e2 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 bd c5 67 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d 44 66 dd 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d 44 6e e0 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 00 9c 39 d5 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 b5 e5 9e 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 b7 1c a7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 b8 3a 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 b8 41 70 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 b8 4f eb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 b8 5a 57 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 ba 1b 07 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 ba 25 7e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 ba 42 59 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 ba 8b d8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 ba 9c 08"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502277015327, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502275555839, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276191749, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d0 fa 2e 05 00 00 00 00 d1 28 2b 88 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 15 00 9c 5a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 1a 56 42 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 15 1b 8a ff 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1c a6 b2 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 15 1c ae fb 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 1c be 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 15 1c c9 19 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 15 1e 8b ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 15 1e 96 80 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1e b3 80 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 1f 04 b3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 15 1f 0e d3 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 15 20 4a 72 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 20 56 0e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 20 b4 9f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 20 bf ff 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 15 20 cb 3c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 15 22 7c 07 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 22 9e 02 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 32 87 d2 b3 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 32 87 db 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 15 00 9c 5a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 1a 56 42 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 15 1b 8a ff 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1c a6 b2 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 15 1c ae fb 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 1c be 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 15 1c c9 19 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 15 1e 8b ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 15 1e 96 80 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1e b3 80 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 1f 04 b3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 15 1f 0e d3"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276521861, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276639869, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9e f1 97 b5 00 00 00 00 9f 1c 4a 64 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 04 3a ed 44 b0 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 06 ee 1a 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 3b 08 20 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 09 3f f7 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 3b 09 47 27 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 09 55 de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 3b 09 60 06 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 3b 0b 26 b0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 3b 0b 30 a9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 0b 4d 20 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0b 95 d6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 3b 0b a6 4e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 04 3b 0c e3 ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 0c ed eb 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 0d 34 6e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0d 3e bf 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 04 3b 0d 48 6f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 04 3b 0e c5 8e 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 0e ce 2b 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0c 69 cf b6 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0c 69 d8 86 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 04 3a ed 44 b0 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 06 ee 1a 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 3b 08 20 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 09 3f f7 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 3b 09 47 27 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 09 55 de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 3b 09 60 06 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 3b 0b 26 b0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 3b 0b 30 a9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 0b 4d 20 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0b 95 d6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 3b 0b a6 4e"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276688202, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276805866, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 42 a2 8a 00 00 00 00 a1 6d c0 b2 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 04 54 2c 73 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 6d d7 d5 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 6f 08 2b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 70 23 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 70 2a e1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 70 39 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 70 44 62 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 72 0a af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 72 14 ff 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 72 31 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 72 7b 1c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 72 92 78 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 04 73 cf 56 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 73 da 10 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 74 20 37 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 74 2a 7d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 04 74 33 f1 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 04 75 b0 4c 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 75 b8 b5 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 f0 19 79 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 f0 21 c8 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 04 54 2c 73 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 6d d7 d5 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 6f 08 2b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 70 23 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 70 2a e1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 70 39 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 70 44 62 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 72 0a af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 72 14 ff 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 72 31 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 72 7b 1c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 72 92 78"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276852160, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502276970038, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:36.764">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:36.765">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/9': {u'associations': [], u'AdditionalData': [], u'Message': u'org.open_power.Host.Error.WatchdogTimedOut', u'Timestamp': 1502276970038, u'Severity': u'...</msg>
<status starttime="20170809 11:11:36.762" endtime="20170809 11:11:36.765" status="PASS"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.765">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/ent...</msg>
<status starttime="20170809 11:11:36.765" endtime="20170809 11:11:36.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.766">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel</msg>
<status starttime="20170809 11:11:36.766" endtime="20170809 11:11:36.766" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:36.767">Created file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:36.766" endtime="20170809 11:11:36.767" status="PASS"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/10">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:36.767" endtime="20170809 11:11:36.768" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.771">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:36.771" endtime="20170809 11:11:36.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.772">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:36.772" endtime="20170809 11:11:36.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.773">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:36.773" endtime="20170809 11:11:36.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.774">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:36.773" endtime="20170809 11:11:36.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:36.774" endtime="20170809 11:11:36.953" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:36.953">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:36.953">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:36.774" endtime="20170809 11:11:36.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.954">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:36.953" endtime="20170809 11:11:36.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:36.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:36.954" endtime="20170809 11:11:36.954" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.770" endtime="20170809 11:11:36.954" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.770" endtime="20170809 11:11:36.955" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.769" endtime="20170809 11:11:36.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:36.955">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status starttime="20170809 11:11:36.955" endtime="20170809 11:11:36.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:36.956" endtime="20170809 11:11:36.956" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.044">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:37.044">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:36.956" endtime="20170809 11:11:37.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:37.044" endtime="20170809 11:11:37.045" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:37.045">Delete All Sessions</msg>
<status starttime="20170809 11:11:37.045" endtime="20170809 11:11:37.045" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.046">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:36.769" endtime="20170809 11:11:37.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.046" endtime="20170809 11:11:37.046" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.047">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 61 82 73 00 00 00 00 9f 8e 19 6a 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 00 9c 39 d5 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 b5 e5 9e 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 b7 1c a7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 b8 3a 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 b8 41 70 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 b8 4f eb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 b8 5a 57 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 ba 1b 07 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 ba 25 7e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 ba 42 59 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 ba 8b d8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 ba 9c 08 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 00 bb d8 af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 bb e2 b5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 bc 29 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 bc 33 cb 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 00 bc 3d 14 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 00 bd bc e2 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 bd c5 67 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d 44 66 dd 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d 44 6e e0 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 00 9c 39 d5 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 b5 e5 9e 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 b7 1c a7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 b8 3a 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 b8 41 70 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 b8 4f eb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 b8 5a 57 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 ba 1b 07 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 ba 25 7e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 ba 42 59 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 ba 8b d8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 ba 9c 08"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:37.047">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:37.047">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 61 82...</msg>
<status starttime="20170809 11:11:37.046" endtime="20170809 11:11:37.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.048">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 61 82 73 00 00 ...</msg>
<status starttime="20170809 11:11:36.768" endtime="20170809 11:11:37.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.048">Length is 2</msg>
<msg level="INFO" timestamp="20170809 11:11:37.048">${length} = 2</msg>
<status starttime="20170809 11:11:37.048" endtime="20170809 11:11:37.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 11:11:37.049" endtime="20170809 11:11:37.049" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.049">${index} = 1</msg>
<status starttime="20170809 11:11:37.049" endtime="20170809 11:11:37.050" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:37.051">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:37.050" endtime="20170809 11:11:37.051" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.050" endtime="20170809 11:11:37.051" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:37.052">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:37.052" endtime="20170809 11:11:37.052" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.051" endtime="20170809 11:11:37.052" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.767" endtime="20170809 11:11:37.052" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:37.053" endtime="20170809 11:11:37.053" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.057">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:37.057" endtime="20170809 11:11:37.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.058">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:37.058" endtime="20170809 11:11:37.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.058">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:37.058" endtime="20170809 11:11:37.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.059">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:37.059" endtime="20170809 11:11:37.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:37.060" endtime="20170809 11:11:37.283" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:37.284">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.059" endtime="20170809 11:11:37.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.284" endtime="20170809 11:11:37.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.285" endtime="20170809 11:11:37.285" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.056" endtime="20170809 11:11:37.285" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.056" endtime="20170809 11:11:37.285" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.055" endtime="20170809 11:11:37.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.286">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170809 11:11:37.286" endtime="20170809 11:11:37.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:37.286" endtime="20170809 11:11:37.287" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.387">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:37.388">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.287" endtime="20170809 11:11:37.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:37.388" endtime="20170809 11:11:37.388" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:37.389">Delete All Sessions</msg>
<status starttime="20170809 11:11:37.388" endtime="20170809 11:11:37.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.054" endtime="20170809 11:11:37.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.389" endtime="20170809 11:11:37.390" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.390">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:37.390">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:37.390">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:37.390" endtime="20170809 11:11:37.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.391">${esel_data} = []</msg>
<status starttime="20170809 11:11:37.053" endtime="20170809 11:11:37.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.392">Length is 0</msg>
<msg level="INFO" timestamp="20170809 11:11:37.392">${length} = 0</msg>
<status starttime="20170809 11:11:37.391" endtime="20170809 11:11:37.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.393">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 11:11:37.392" endtime="20170809 11:11:37.393" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.053" endtime="20170809 11:11:37.393" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:37.393" endtime="20170809 11:11:37.394" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.399">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:37.399" endtime="20170809 11:11:37.400" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.401">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:37.400" endtime="20170809 11:11:37.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.401">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:37.401" endtime="20170809 11:11:37.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.402">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:37.402" endtime="20170809 11:11:37.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:37.403" endtime="20170809 11:11:37.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.686">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:37.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.402" endtime="20170809 11:11:37.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.686" endtime="20170809 11:11:37.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.687" endtime="20170809 11:11:37.687" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.398" endtime="20170809 11:11:37.687" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.397" endtime="20170809 11:11:37.687" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.397" endtime="20170809 11:11:37.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.688">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170809 11:11:37.688" endtime="20170809 11:11:37.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:37.688" endtime="20170809 11:11:37.689" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.770">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:37.770">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.689" endtime="20170809 11:11:37.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:37.770" endtime="20170809 11:11:37.771" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:37.771">Delete All Sessions</msg>
<status starttime="20170809 11:11:37.771" endtime="20170809 11:11:37.771" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.396" endtime="20170809 11:11:37.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.772" endtime="20170809 11:11:37.772" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.772">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:37.773">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:37.773">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:37.772" endtime="20170809 11:11:37.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.773">${esel_data} = []</msg>
<status starttime="20170809 11:11:37.394" endtime="20170809 11:11:37.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.773">Length is 0</msg>
<msg level="INFO" timestamp="20170809 11:11:37.774">${length} = 0</msg>
<status starttime="20170809 11:11:37.773" endtime="20170809 11:11:37.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.774">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 11:11:37.774" endtime="20170809 11:11:37.774" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.393" endtime="20170809 11:11:37.774" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:37.775" endtime="20170809 11:11:37.775" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.779">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:37.779" endtime="20170809 11:11:37.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.780">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:37.780" endtime="20170809 11:11:37.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.781">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:37.781" endtime="20170809 11:11:37.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.782">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:37.782" endtime="20170809 11:11:37.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.966">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:37.783" endtime="20170809 11:11:37.966" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:37.966">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:37.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.783" endtime="20170809 11:11:37.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.967">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.966" endtime="20170809 11:11:37.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:37.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:37.967" endtime="20170809 11:11:37.967" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.778" endtime="20170809 11:11:37.968" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.778" endtime="20170809 11:11:37.968" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.777" endtime="20170809 11:11:37.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:37.968">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170809 11:11:37.968" endtime="20170809 11:11:37.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:37.969" endtime="20170809 11:11:37.969" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.055">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:38.055">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.969" endtime="20170809 11:11:38.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:38.055" endtime="20170809 11:11:38.056" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:38.056">Delete All Sessions</msg>
<status starttime="20170809 11:11:38.056" endtime="20170809 11:11:38.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.056">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:37.776" endtime="20170809 11:11:38.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:38.057" endtime="20170809 11:11:38.057" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.058">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d0 fa 2e 05 00 00 00 00 d1 28 2b 88 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 15 00 9c 5a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 1a 56 42 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 15 1b 8a ff 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1c a6 b2 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 15 1c ae fb 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 1c be 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 15 1c c9 19 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 15 1e 8b ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 15 1e 96 80 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1e b3 80 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 1f 04 b3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 15 1f 0e d3 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 15 20 4a 72 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 20 56 0e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 20 b4 9f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 20 bf ff 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 15 20 cb 3c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 15 22 7c 07 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 22 9e 02 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 32 87 d2 b3 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 32 87 db 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 15 00 9c 5a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 15 1a 56 42 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 15 1b 8a ff 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1c a6 b2 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 15 1c ae fb 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 15 1c be 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 15 1c c9 19 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 15 1e 8b ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 15 1e 96 80 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 15 1e b3 80 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 15 1f 04 b3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 15 1f 0e d3"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:38.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:38.058">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d0 fa 2e...</msg>
<status starttime="20170809 11:11:38.057" endtime="20170809 11:11:38.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.059">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d0 fa 2e 05 00 00 ...</msg>
<status starttime="20170809 11:11:37.775" endtime="20170809 11:11:38.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.059">Length is 2</msg>
<msg level="INFO" timestamp="20170809 11:11:38.059">${length} = 2</msg>
<status starttime="20170809 11:11:38.059" endtime="20170809 11:11:38.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 11:11:38.060" endtime="20170809 11:11:38.060" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.061">${index} = 1</msg>
<status starttime="20170809 11:11:38.060" endtime="20170809 11:11:38.061" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:38.062">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:38.062" endtime="20170809 11:11:38.062" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.061" endtime="20170809 11:11:38.063" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:38.064">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:38.063" endtime="20170809 11:11:38.064" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.063" endtime="20170809 11:11:38.064" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:37.775" endtime="20170809 11:11:38.064" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:38.064" endtime="20170809 11:11:38.065" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.068">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:38.068" endtime="20170809 11:11:38.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:38.069" endtime="20170809 11:11:38.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.070">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:38.069" endtime="20170809 11:11:38.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.070">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:38.070" endtime="20170809 11:11:38.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.280">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:38.071" endtime="20170809 11:11:38.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.281">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:38.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.071" endtime="20170809 11:11:38.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.281">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:38.281" endtime="20170809 11:11:38.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:38.282" endtime="20170809 11:11:38.282" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.067" endtime="20170809 11:11:38.282" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.067" endtime="20170809 11:11:38.282" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.066" endtime="20170809 11:11:38.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.283">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170809 11:11:38.283" endtime="20170809 11:11:38.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:38.283" endtime="20170809 11:11:38.284" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.374">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:38.374">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.284" endtime="20170809 11:11:38.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:38.375" endtime="20170809 11:11:38.375" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:38.376">Delete All Sessions</msg>
<status starttime="20170809 11:11:38.375" endtime="20170809 11:11:38.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.376">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.066" endtime="20170809 11:11:38.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.377">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:38.376" endtime="20170809 11:11:38.377" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.377">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:38.377">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:38.377">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:38.377" endtime="20170809 11:11:38.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.378">${esel_data} = []</msg>
<status starttime="20170809 11:11:38.065" endtime="20170809 11:11:38.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.378">Length is 0</msg>
<msg level="INFO" timestamp="20170809 11:11:38.378">${length} = 0</msg>
<status starttime="20170809 11:11:38.378" endtime="20170809 11:11:38.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.379">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 11:11:38.379" endtime="20170809 11:11:38.379" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.064" endtime="20170809 11:11:38.379" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:38.379" endtime="20170809 11:11:38.380" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.383">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:38.383" endtime="20170809 11:11:38.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:38.384" endtime="20170809 11:11:38.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.385">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:38.384" endtime="20170809 11:11:38.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.386">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:38.385" endtime="20170809 11:11:38.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.746">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:38.387" endtime="20170809 11:11:38.747" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.747">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:38.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.386" endtime="20170809 11:11:38.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:38.747" endtime="20170809 11:11:38.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:38.748" endtime="20170809 11:11:38.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.382" endtime="20170809 11:11:38.748" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.382" endtime="20170809 11:11:38.749" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.381" endtime="20170809 11:11:38.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.749">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status starttime="20170809 11:11:38.749" endtime="20170809 11:11:38.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:38.750" endtime="20170809 11:11:38.750" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.879">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:38.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.750" endtime="20170809 11:11:38.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:38.880" endtime="20170809 11:11:38.880" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:38.881">Delete All Sessions</msg>
<status starttime="20170809 11:11:38.880" endtime="20170809 11:11:38.881" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.881">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.381" endtime="20170809 11:11:38.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:38.881" endtime="20170809 11:11:38.882" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.882">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9e f1 97 b5 00 00 00 00 9f 1c 4a 64 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 04 3a ed 44 b0 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 06 ee 1a 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 3b 08 20 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 09 3f f7 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 3b 09 47 27 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 09 55 de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 3b 09 60 06 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 3b 0b 26 b0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 3b 0b 30 a9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 0b 4d 20 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0b 95 d6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 3b 0b a6 4e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 04 3b 0c e3 ca 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 0c ed eb 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 0d 34 6e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0d 3e bf 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 04 3b 0d 48 6f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 04 3b 0e c5 8e 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 0e ce 2b 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0c 69 cf b6 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0c 69 d8 86 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 04 3a ed 44 b0 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 3b 06 ee 1a 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 3b 08 20 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 09 3f f7 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 3b 09 47 27 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 3b 09 55 de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 3b 09 60 06 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 3b 0b 26 b0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 3b 0b 30 a9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 3b 0b 4d 20 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 3b 0b 95 d6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 3b 0b a6 4e"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:38.882">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:38.883">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9e f1 97...</msg>
<status starttime="20170809 11:11:38.882" endtime="20170809 11:11:38.883" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:38.883">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9e f1 97 b5 00 00 ...</msg>
<status starttime="20170809 11:11:38.380" endtime="20170809 11:11:38.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.884">Length is 2</msg>
<msg level="INFO" timestamp="20170809 11:11:38.884">${length} = 2</msg>
<status starttime="20170809 11:11:38.883" endtime="20170809 11:11:38.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 11:11:38.884" endtime="20170809 11:11:38.884" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.885">${index} = 1</msg>
<status starttime="20170809 11:11:38.885" endtime="20170809 11:11:38.885" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:38.886">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:38.886" endtime="20170809 11:11:38.886" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.885" endtime="20170809 11:11:38.886" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:38.887">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:38.887" endtime="20170809 11:11:38.888" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.887" endtime="20170809 11:11:38.888" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.379" endtime="20170809 11:11:38.888" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:38.888" endtime="20170809 11:11:38.889" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:38.894">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:38.893" endtime="20170809 11:11:38.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.895">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:38.895" endtime="20170809 11:11:38.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.896">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:38.896" endtime="20170809 11:11:38.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:38.897">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:38.896" endtime="20170809 11:11:38.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.080">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:38.897" endtime="20170809 11:11:39.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.080">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:39.080">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.897" endtime="20170809 11:11:39.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.081">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.080" endtime="20170809 11:11:39.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.081" endtime="20170809 11:11:39.081" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.892" endtime="20170809 11:11:39.082" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.892" endtime="20170809 11:11:39.082" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.891" endtime="20170809 11:11:39.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.082">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status starttime="20170809 11:11:39.082" endtime="20170809 11:11:39.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:39.083" endtime="20170809 11:11:39.083" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.167">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:39.167">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:39.083" endtime="20170809 11:11:39.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:39.168" endtime="20170809 11:11:39.168" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:39.168">Delete All Sessions</msg>
<status starttime="20170809 11:11:39.168" endtime="20170809 11:11:39.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:38.890" endtime="20170809 11:11:39.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.169" endtime="20170809 11:11:39.169" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.170">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:39.170">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:39.170">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:39.169" endtime="20170809 11:11:39.170" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.170">${esel_data} = []</msg>
<status starttime="20170809 11:11:38.889" endtime="20170809 11:11:39.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.171">Length is 0</msg>
<msg level="INFO" timestamp="20170809 11:11:39.171">${length} = 0</msg>
<status starttime="20170809 11:11:39.171" endtime="20170809 11:11:39.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.171">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 11:11:39.171" endtime="20170809 11:11:39.172" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:38.888" endtime="20170809 11:11:39.172" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:39.172" endtime="20170809 11:11:39.172" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.176">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:39.176" endtime="20170809 11:11:39.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.177">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:39.177" endtime="20170809 11:11:39.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.178">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:39.177" endtime="20170809 11:11:39.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.178">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:39.178" endtime="20170809 11:11:39.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.396">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:39.179" endtime="20170809 11:11:39.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:39.397">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:39.179" endtime="20170809 11:11:39.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.397" endtime="20170809 11:11:39.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.398" endtime="20170809 11:11:39.398" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.175" endtime="20170809 11:11:39.398" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.174" endtime="20170809 11:11:39.398" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.174" endtime="20170809 11:11:39.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.399">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status starttime="20170809 11:11:39.399" endtime="20170809 11:11:39.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:39.399" endtime="20170809 11:11:39.400" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.486">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:39.486">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:39.400" endtime="20170809 11:11:39.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:39.486" endtime="20170809 11:11:39.487" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:39.487">Delete All Sessions</msg>
<status starttime="20170809 11:11:39.487" endtime="20170809 11:11:39.487" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:39.173" endtime="20170809 11:11:39.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.488" endtime="20170809 11:11:39.488" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.489">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 42 a2 8a 00 00 00 00 a1 6d c0 b2 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 04 54 2c 73 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 6d d7 d5 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 6f 08 2b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 70 23 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 70 2a e1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 70 39 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 70 44 62 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 72 0a af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 72 14 ff 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 72 31 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 72 7b 1c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 72 92 78 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 04 73 cf 56 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 73 da 10 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 74 20 37 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 74 2a 7d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 04 74 33 f1 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 04 75 b0 4c 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 75 b8 b5 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 f0 19 79 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 f0 21 c8 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 04 54 2c 73 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 6d d7 d5 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 6f 08 2b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 70 23 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 70 2a e1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 70 39 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 70 44 62 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 72 0a af 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 72 14 ff 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 72 31 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 72 7b 1c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 72 92 78"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:39.489">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:39.489">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 42 a2...</msg>
<status starttime="20170809 11:11:39.488" endtime="20170809 11:11:39.489" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.490">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 42 a2 8a 00 00 ...</msg>
<status starttime="20170809 11:11:39.173" endtime="20170809 11:11:39.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.490">Length is 2</msg>
<msg level="INFO" timestamp="20170809 11:11:39.490">${length} = 2</msg>
<status starttime="20170809 11:11:39.490" endtime="20170809 11:11:39.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 11:11:39.491" endtime="20170809 11:11:39.491" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.492">${index} = 1</msg>
<status starttime="20170809 11:11:39.491" endtime="20170809 11:11:39.492" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:39.493">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:39.492" endtime="20170809 11:11:39.493" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.492" endtime="20170809 11:11:39.493" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:39.494">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:39.494" endtime="20170809 11:11:39.494" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.493" endtime="20170809 11:11:39.494" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.172" endtime="20170809 11:11:39.495" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 11:11:39.495" endtime="20170809 11:11:39.495" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.500">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 11:11:39.500" endtime="20170809 11:11:39.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 11:11:39.501" endtime="20170809 11:11:39.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.502">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 11:11:39.502" endtime="20170809 11:11:39.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.503">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 11:11:39.503" endtime="20170809 11:11:39.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.720">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 11:11:39.505" endtime="20170809 11:11:39.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.721">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:39.721">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:39.504" endtime="20170809 11:11:39.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.722">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.721" endtime="20170809 11:11:39.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.722" endtime="20170809 11:11:39.722" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.499" endtime="20170809 11:11:39.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.498" endtime="20170809 11:11:39.723" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.497" endtime="20170809 11:11:39.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.725">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status starttime="20170809 11:11:39.723" endtime="20170809 11:11:39.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 11:11:39.725" endtime="20170809 11:11:39.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.843">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 11:11:39.843">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:39.726" endtime="20170809 11:11:39.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 11:11:39.843" endtime="20170809 11:11:39.844" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 11:11:39.844">Delete All Sessions</msg>
<status starttime="20170809 11:11:39.844" endtime="20170809 11:11:39.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.844">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 11:11:39.496" endtime="20170809 11:11:39.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 11:11:39.845" endtime="20170809 11:11:39.845" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.846">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 11:11:39.846">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 11:11:39.846">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170809 11:11:39.845" endtime="20170809 11:11:39.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.846">${esel_data} = []</msg>
<status starttime="20170809 11:11:39.495" endtime="20170809 11:11:39.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.846">Length is 0</msg>
<msg level="INFO" timestamp="20170809 11:11:39.847">${length} = 0</msg>
<status starttime="20170809 11:11:39.846" endtime="20170809 11:11:39.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.847">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 11:11:39.847" endtime="20170809 11:11:39.848" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.495" endtime="20170809 11:11:39.848" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.767" endtime="20170809 11:11:39.848" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:39.863">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 11:11:39.883">${out} = </msg>
<status starttime="20170809 11:11:39.848" endtime="20170809 11:11:39.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 11:11:39.900">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170809 11:11:39.897" endtime="20170809 11:11:39.900" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.900">${status} = False</msg>
<status starttime="20170809 11:11:39.893" endtime="20170809 11:11:39.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:39.902">Returning from the enclosing user keyword.</msg>
<status starttime="20170809 11:11:39.901" endtime="20170809 11:11:39.903" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.172" endtime="20170809 11:11:39.904" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.132" endtime="20170809 11:11:39.906" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.127" endtime="20170809 11:11:39.906" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:36.127" endtime="20170809 11:11:39.906" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 11:11:39.913" endtime="20170809 11:11:39.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:39.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:39.914">${ret_values} = None</msg>
<status starttime="20170809 11:11:39.912" endtime="20170809 11:11:39.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 11:11:39.914" endtime="20170809 11:11:39.914" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:40.018">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:40.019">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170809 11:11:40.067">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 11:11:40.084">${core_files} = /tmp/core_phosphor-hwmon-.2054</msg>
<msg level="INFO" timestamp="20170809 11:11:40.084">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 11:11:40.084">${rc} = 0</msg>
<status starttime="20170809 11:11:39.965" endtime="20170809 11:11:40.084" status="PASS"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:40.085">@{core_list} = [ /tmp/core_phosphor-hwmon-.2054 ]</msg>
<status starttime="20170809 11:11:40.084" endtime="20170809 11:11:40.085" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170809 11:11:40.104" endtime="20170809 11:11:40.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170809 11:11:40.119" endtime="20170809 11:11:40.817" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:40.118" endtime="20170809 11:11:40.817" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:40.118" endtime="20170809 11:11:40.817" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:40.104" endtime="20170809 11:11:40.818" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:40.085" endtime="20170809 11:11:40.818" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2054">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170809 11:11:40.818" endtime="20170809 11:11:41.078" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:41.128">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:41.128">Executing command 'rm /tmp/core_phosphor-hwmon-.2054'.</msg>
<msg level="INFO" timestamp="20170809 11:11:41.187">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:41.078" endtime="20170809 11:11:41.204" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:40.818" endtime="20170809 11:11:41.205" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:40.818" endtime="20170809 11:11:41.205" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.964" endtime="20170809 11:11:41.205" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.915" endtime="20170809 11:11:41.205" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.909" endtime="20170809 11:11:41.205" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:39.908" endtime="20170809 11:11:41.205" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 11:11:41.207" endtime="20170809 11:11:41.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:41.207">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:41.207">${ret_values} = None</msg>
<status starttime="20170809 11:11:41.206" endtime="20170809 11:11:41.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 11:11:41.207" endtime="20170809 11:11:41.208" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.250">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170809 11:11:41.250" endtime="20170809 11:11:41.250" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.251">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd...</msg>
<status starttime="20170809 11:11:41.251" endtime="20170809 11:11:41.251" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.254">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_meminfo.txt</msg>
<status starttime="20170809 11:11:41.252" endtime="20170809 11:11:41.254" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 11:11:41.255" endtime="20170809 11:11:41.255" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.256">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170809 11:11:41.255" endtime="20170809 11:11:41.256" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:41.358">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:41.358">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170809 11:11:41.426">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:41.300" endtime="20170809 11:11:41.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:41.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:41.426">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          249540 kB\nMemAvailable:     318448 kB\nBuffers:           15616 kB\nCached:            69700 kB\nSwapCached:            0 kB\nActive:           12277...</msg>
<status starttime="20170809 11:11:41.256" endtime="20170809 11:11:41.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.427">${stdout} = MemTotal:         432260 kB
MemFree:          249540 kB
MemAvailable:     318448 kB
Buffers:           15616 kB
Cached:            69700 kB
SwapCached:            0 kB
Active:           122772 kB
Inac...</msg>
<status starttime="20170809 11:11:41.427" endtime="20170809 11:11:41.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.427">${stderr} = </msg>
<status starttime="20170809 11:11:41.427" endtime="20170809 11:11:41.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:41.434">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_meminfo.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:41.434" endtime="20170809 11:11:41.434" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.433" endtime="20170809 11:11:41.435" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.428" endtime="20170809 11:11:41.435" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.254" endtime="20170809 11:11:41.435" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.251" endtime="20170809 11:11:41.435" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.436">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_procinfo.txt</msg>
<status starttime="20170809 11:11:41.435" endtime="20170809 11:11:41.436" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 11:11:41.437" endtime="20170809 11:11:41.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.438">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170809 11:11:41.437" endtime="20170809 11:11:41.438" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:41.553">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:41.553">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170809 11:11:41.600">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:41.495" endtime="20170809 11:11:41.601" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:41.601">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:41.601">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170809 11:11:41.438" endtime="20170809 11:11:41.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.602">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170809 11:11:41.601" endtime="20170809 11:11:41.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.602">${stderr} = </msg>
<status starttime="20170809 11:11:41.602" endtime="20170809 11:11:41.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:41.611">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_procinfo.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:41.610" endtime="20170809 11:11:41.611" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.609" endtime="20170809 11:11:41.611" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.602" endtime="20170809 11:11:41.611" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.436" endtime="20170809 11:11:41.611" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.435" endtime="20170809 11:11:41.611" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.612">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_journalctl.txt</msg>
<status starttime="20170809 11:11:41.611" endtime="20170809 11:11:41.612" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 11:11:41.613" endtime="20170809 11:11:41.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:41.614">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170809 11:11:41.613" endtime="20170809 11:11:41.614" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:41.730">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:41.730">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170809 11:11:44.448">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:41.666" endtime="20170809 11:11:44.453" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:44.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:44.457">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 10:55:26 UTC, end at Wed 2017-08-09 11:11:46 UTC. --\nAug 09 10:55:26 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 10:55:26 witherspoon kernel: Linu...</msg>
<status starttime="20170809 11:11:41.614" endtime="20170809 11:11:44.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:44.459">${stdout} = -- Logs begin at Wed 2017-08-09 10:55:26 UTC, end at Wed 2017-08-09 11:11:46 UTC. --
Aug 09 10:55:26 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 10:55:26 witherspoon kernel: Linux ver...</msg>
<status starttime="20170809 11:11:44.457" endtime="20170809 11:11:44.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:44.459">${stderr} = </msg>
<status starttime="20170809 11:11:44.459" endtime="20170809 11:11:44.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:44.473">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_journalctl.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:44.469" endtime="20170809 11:11:44.473" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:44.464" endtime="20170809 11:11:44.473" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:44.459" endtime="20170809 11:11:44.473" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.612" endtime="20170809 11:11:44.473" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.611" endtime="20170809 11:11:44.473" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:44.474">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_proc_list.txt</msg>
<status starttime="20170809 11:11:44.473" endtime="20170809 11:11:44.474" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 11:11:44.475" endtime="20170809 11:11:44.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:44.476">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170809 11:11:44.475" endtime="20170809 11:11:44.476" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:44.588">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:44.588">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170809 11:11:45.049">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:44.529" endtime="20170809 11:11:45.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:45.049">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:45.049">${ret_values} = (u'Mem: 182720K used, 249540K free, 14720K shrd, 15616K buff, 69704K cached\nCPU:  12% usr  12% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 1.65 1.71 1.12 2/169 2865\n  PID  PPID ...</msg>
<status starttime="20170809 11:11:44.477" endtime="20170809 11:11:45.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.050">${stdout} = Mem: 182720K used, 249540K free, 14720K shrd, 15616K buff, 69704K cached
CPU:  12% usr  12% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 1.65 1.71 1.12 2/169 2865
  PID  PPID USER  ...</msg>
<status starttime="20170809 11:11:45.050" endtime="20170809 11:11:45.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.051">${stderr} = </msg>
<status starttime="20170809 11:11:45.050" endtime="20170809 11:11:45.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:45.057">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_proc_list.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:45.057" endtime="20170809 11:11:45.057" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.056" endtime="20170809 11:11:45.057" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.051" endtime="20170809 11:11:45.057" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:44.474" endtime="20170809 11:11:45.058" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:44.473" endtime="20170809 11:11:45.058" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.058">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_dmesg.txt</msg>
<status starttime="20170809 11:11:45.058" endtime="20170809 11:11:45.058" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 11:11:45.059" endtime="20170809 11:11:45.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.060">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170809 11:11:45.060" endtime="20170809 11:11:45.060" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:45.173">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:45.173">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170809 11:11:45.232">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:45.110" endtime="20170809 11:11:45.233" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:45.233">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:45.233">${ret_values} = (u'[    2.840000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB\n[    2.840000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB\n[    2.8...</msg>
<status starttime="20170809 11:11:45.061" endtime="20170809 11:11:45.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.234">${stdout} = [    2.840000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB
[    2.840000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB
[    2.870000...</msg>
<status starttime="20170809 11:11:45.233" endtime="20170809 11:11:45.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.234">${stderr} = </msg>
<status starttime="20170809 11:11:45.234" endtime="20170809 11:11:45.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:45.241">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_dmesg.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:45.240" endtime="20170809 11:11:45.241" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.240" endtime="20170809 11:11:45.241" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.235" endtime="20170809 11:11:45.241" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.059" endtime="20170809 11:11:45.241" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.058" endtime="20170809 11:11:45.241" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.242">${logpath} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170809 11:11:45.242" endtime="20170809 11:11:45.242" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 11:11:45.243" endtime="20170809 11:11:45.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.244">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170809 11:11:45.244" endtime="20170809 11:11:45.244" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:45.369">width=80
prompt=# 
alias=bmc_connection
height=24
index=1
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/</msg>
<msg level="INFO" timestamp="20170809 11:11:45.370">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170809 11:11:45.941">Command exited with return code 0.</msg>
<status starttime="20170809 11:11:45.300" endtime="20170809 11:11:45.941" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:45.941">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 11:11:45.942">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 11:11 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 11:11 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170809 11:11:45.245" endtime="20170809 11:11:45.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.943">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 11:11 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 11:11 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170809 11:11:45.943" endtime="20170809 11:11:45.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.944">${stderr} = ls: /proc/2867/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170809 11:11:45.944" endtime="20170809 11:11:45.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:45.951">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/20170809111131086264_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:45.950" endtime="20170809 11:11:45.951" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.949" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.944" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.242" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.242" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.251" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.250" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.250" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.250" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.249" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.208" endtime="20170809 11:11:45.952" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.205" endtime="20170809 11:11:45.953" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:41.205" endtime="20170809 11:11:45.953" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.443" endtime="20170809 11:11:45.953" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.440" endtime="20170809 11:11:45.953" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.440" endtime="20170809 11:11:45.953" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.440" endtime="20170809 11:11:45.953" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170809 11:11:45.965" endtime="20170809 11:11:45.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.953" endtime="20170809 11:11:45.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:31.439" endtime="20170809 11:11:45.965" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.966" endtime="20170809 11:11:45.966" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.965" endtime="20170809 11:11:45.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170809 11:11:45.966" endtime="20170809 11:11:45.966" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.976">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170809 11:11:45.967" endtime="20170809 11:11:45.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.977">${FFDC_DIR_PATH} = /tmp/fspcibld/10020/obmc-robot/logs/20170809111131086264_TestsTestBasicPoweron/20170809111131086264_PowerOnTest/</msg>
<status starttime="20170809 11:11:45.976" endtime="20170809 11:11:45.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170809 11:11:45.977" endtime="20170809 11:11:45.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170809 11:11:45.978" endtime="20170809 11:11:45.978" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:45.979">Directory '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs"&gt;/tmp/fspcibld/10020/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170809 11:11:45.978" endtime="20170809 11:11:45.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:45.980">File '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170809 11:11:45.979" endtime="20170809 11:11:45.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:45.980">${exist} = True</msg>
<status starttime="20170809 11:11:45.979" endtime="20170809 11:11:45.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170809 11:11:45.980" endtime="20170809 11:11:45.980" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170809 11:11:45.981" endtime="20170809 11:11:45.981" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.983">${cur_time} = 2017-08-09 11:11:45:982164</msg>
<status starttime="20170809 11:11:45.982" endtime="20170809 11:11:45.983" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.983">${cur_time} = 20170809111145982164</msg>
<status starttime="20170809 11:11:45.983" endtime="20170809 11:11:45.983" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:45.984">${cur_time} = 20170809111145982164</msg>
<status starttime="20170809 11:11:45.982" endtime="20170809 11:11:45.984" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:45.985">Appended to file '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10020/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:45.984" endtime="20170809 11:11:45.985" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:45.967" endtime="20170809 11:11:45.985" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.565" endtime="20170809 11:11:45.985" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.987">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:11:45.986" endtime="20170809 11:11:45.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.987">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:11:45.987" endtime="20170809 11:11:45.987" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:45.988">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 11:11:45.986" endtime="20170809 11:11:45.988" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.988">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 11:11:45.988" endtime="20170809 11:11:45.988" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:11:45.989" endtime="20170809 11:11:45.989" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:45.998">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 11:11:46.001">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 11:11:46.002">${output} = /tmp/fspcibld/10020/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 11:11:45.989" endtime="20170809 11:11:46.002" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 11:11:46.004" endtime="20170809 11:11:46.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 11:11:46.005" endtime="20170809 11:11:46.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:46.007">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 11:11:46.007" endtime="20170809 11:11:46.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:46.008">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 11:11:45.988" endtime="20170809 11:11:46.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:46.009">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170809 11:11:46.008" endtime="20170809 11:11:46.009" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:11:46.009" endtime="20170809 11:11:46.009" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:46.014">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 11:11:46.038">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 11:11:46.039">${os_con_pid} = </msg>
<status starttime="20170809 11:11:46.010" endtime="20170809 11:11:46.039" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170809 11:11:46.050" endtime="20170809 11:11:46.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:46.055">${cmd_buf} = kill -9 </msg>
<status starttime="20170809 11:11:46.053" endtime="20170809 11:11:46.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 11:11:46.057" endtime="20170809 11:11:46.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:46.070">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 11:11:46.070">${output} = None</msg>
<status starttime="20170809 11:11:46.069" endtime="20170809 11:11:46.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 11:11:46.071" endtime="20170809 11:11:46.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170809 11:11:46.077">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10020/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/10020/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170809 11:11:46.073" endtime="20170809 11:11:46.077" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:46.072" endtime="20170809 11:11:46.078" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:46.071" endtime="20170809 11:11:46.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:46.078">${output} = </msg>
<status starttime="20170809 11:11:46.078" endtime="20170809 11:11:46.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 11:11:46.079">${loc_quiet} = 1</msg>
<status starttime="20170809 11:11:46.078" endtime="20170809 11:11:46.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170809 11:11:46.080" endtime="20170809 11:11:46.154" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:46.161">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 11:11:46.161">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status starttime="20170809 11:11:46.079" endtime="20170809 11:11:46.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 11:11:46.165">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status starttime="20170809 11:11:45.985" endtime="20170809 11:11:46.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 11:11:46.174">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85024|secure|Booting in non-secure mode.
  3.85025|secure|SecureROM invalid - skipping functionality
  6.27234|ISTEP  6. 5 - host_init_fsi
  6.35819|ISTEP  6. 6 - host_set_ipl_parms
  6.38293|ISTEP  6. 7 - host_discover_targets
  6.86135|================================================
  6.86313|Error reported by i2c (0x0700) PLID 0x90000005
  6.86495|  Bus Arbitration Lost Error was found in the I2C status register.
  6.86495|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  6.86496|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  6.86675|  UserData1  Status Register Value : 0x080e080000050001
  6.86676|  UserData2  Master Target : 0x0300006c0190004d
  6.86676|------------------------------------------------
  6.86677|  Callout type             : Hardware Callout
  6.86677|  CPU id                   : 2
  6.86678|  Target                   : Physical:/Sys0/Node0/Proc1
  6.86679|  Deconfig State           : NO_DECONFIG
  6.86679|  GARD Error Type          : GARD_NULL
  6.86680|  Priority                 : SRCI_PRIORITY_HIGH
  6.86680|------------------------------------------------
  6.86681|  Callout type             : Procedure Callout
  6.86681|  Procedure                : EPUB_PRC_HB_CODE
  6.86682|  Priority                 : SRCI_PRIORITY_LOW
  6.86682|------------------------------------------------
  6.86683|  
  6.86683|------------------------------------------------
  6.86683|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  6.86684|================================================
166.26534|IPMI: shutdown requested
166.42075|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85044|secure|Booting in non-secure mode.
  3.85045|secure|SecureROM invalid - skipping functionality
  4.92006|ISTEP  6. 5 - host_init_fsi
  4.99453|ISTEP  6. 6 - host_set_ipl_parms
  5.00330|ISTEP  6. 7 - host_discover_targets
  5.22154|================================================
  5.22331|Error reported by i2c (0x0700) PLID 0x90000007
  5.22513|  Bus Arbitration Lost Error was found in the I2C status register.
  5.22513|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.22514|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.22695|  UserData1  Status Register Value : 0x080e080000050001
  5.22696|  UserData2  Master Target : 0x0300006c0190004d
  5.22696|------------------------------------------------
  5.22697|  Callout type             : Hardware Callout
  5.22697|  CPU id                   : 0
  5.22698|  Target                   : Physical:/Sys0/Node0/Proc1
  5.22699|  Deconfig State           : NO_DECONFIG
  5.22699|  GARD Error Type          : GARD_NULL
  5.22699|  Priority                 : SRCI_PRIORITY_HIGH
  5.22700|------------------------------------------------
  5.22700|  Callout type             : Procedure Callout
  5.22701|  Procedure                : EPUB_PRC_HB_CODE
  5.22702|  Priority                 : SRCI_PRIORITY_LOW
  5.22702|------------------------------------------------
  5.22702|  
  5.22703|------------------------------------------------
  5.22703|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.22704|================================================
163.01993|IPMI: shutdown requested
163.08841|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85034|secure|Booting in non-secure mode.
  3.85035|secure|SecureROM invalid - skipping functionality
  4.99471|ISTEP  6. 5 - host_init_fsi
  5.07861|ISTEP  6. 6 - host_set_ipl_parms
  5.08536|ISTEP  6. 7 - host_discover_targets
  5.29757|================================================
  5.29938|Error reported by i2c (0x0700) PLID 0x90000009
  5.30121|  Bus Arbitration Lost Error was found in the I2C status register.
  5.30121|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.30122|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.30304|  UserData1  Status Register Value : 0x080e080000050001
  5.30304|  UserData2  Master Target : 0x0300006c0190004d
  5.30305|------------------------------------------------
  5.30305|  Callout type             : Hardware Callout
  5.30306|  CPU id                   : 2
  5.30307|  Target                   : Physical:/Sys0/Node0/Proc1
  5.30307|  Deconfig State           : NO_DECONFIG
  5.30308|  GARD Error Type          : GARD_NULL
  5.30308|  Priority                 : SRCI_PRIORITY_HIGH
  5.30309|------------------------------------------------
  5.30309|  Callout type             : Procedure Callout
  5.30310|  Procedure                : EPUB_PRC_HB_CODE
  5.30310|  Priority                 : SRCI_PRIORITY_LOW
  5.30311|------------------------------------------------
  5.30311|  
  5.30312|------------------------------------------------
  5.30312|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.30313|================================================
159.29273|IPMI: shutdown requested
159.31293|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85018|secure|Booting in non-secure mode.
  3.85019|secure|SecureROM invalid - skipping functionality
  4.93456|ISTEP  6. 5 - host_init_fsi
  5.01665|ISTEP  6. 6 - host_set_ipl_parms
  5.02304|ISTEP  6. 7 - host_discover_targets
  5.23707|================================================
  5.23889|Error reported by i2c (0x0700) PLID 0x9000000B
  5.24071|  Bus Arbitration Lost Error was found in the I2C status register.
  5.24071|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.24072|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.24254|  UserData1  Status Register Value : 0x080e080000050001
  5.24255|  UserData2  Master Target : 0x0300006c0190004d
  5.24255|------------------------------------------------
  5.24256|  Callout type             : Hardware Callout
  5.24256|  CPU id                   : 2
  5.24257|  Target                   : Physical:/Sys0/Node0/Proc1
  5.24258|  Deconfig State           : NO_DECONFIG
  5.24258|  GARD Error Type          : GARD_NULL
  5.24259|  Priority                 : SRCI_PRIORITY_HIGH
  5.24259|------------------------------------------------
  5.24260|  Callout type             : Procedure Callout
  5.24260|  Procedure                : EPUB_PRC_HB_CODE
  5.24261|  Priority                 : SRCI_PRIORITY_LOW
  5.24261|------------------------------------------------
  5.24262|  
  5.24262|------------------------------------------------
  5.24263|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.24263|================================================
</msg>
<status starttime="20170809 11:11:46.172" endtime="20170809 11:11:46.176" status="PASS"></status>
</kw>
<status starttime="20170809 11:11:27.565" endtime="20170809 11:11:46.176" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170809 11:01:14.137" endtime="20170809 11:11:46.177" status="FAIL" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170809 11:01:14.100" endtime="20170809 11:11:46.182" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170809 11:01:07.824" endtime="20170809 11:11:46.190" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" id="s1" name="Tests" fail="1">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" id="s1-s2" name="Test Basic Poweron" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
