<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170725 12:29:53.314" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170725 12:29:54.298" level="INFO">Length is 42</msg>
<status status="PASS" endtime="20170725 12:29:54.298" starttime="20170725 12:29:54.297"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170725 12:29:54.299" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor"&gt;/home/fspcibld/witherspoon_910_golden.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170725 12:29:54.299" starttime="20170725 12:29:54.298"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:54.299" starttime="20170725 12:29:54.297"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170725 12:29:54.307" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 12:29:54.381" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:29:54.382" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170725 12:29:55.181" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170725 12:29:55.182" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170725 12:29:55.264" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 12:29:55.274" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170725 12:29:55.275" level="INFO">${stderr} = </msg>
<msg timestamp="20170725 12:29:55.275" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170725 12:29:55.275" starttime="20170725 12:29:54.360"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 12:29:55.277" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 12:29:55.277" starttime="20170725 12:29:55.275"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170725 12:29:55.278" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170725 12:29:55.278" starttime="20170725 12:29:55.278"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:55.278" starttime="20170725 12:29:54.358"></status>
</kw>
<msg timestamp="20170725 12:29:55.278" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170725 12:29:55.646" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170725 12:29:55.663" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 12:29:55.663" starttime="20170725 12:29:55.662"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:55.665" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170725 12:29:55.665" starttime="20170725 12:29:55.664"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:29:55.668" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:29:55.671" starttime="20170725 12:29:55.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:55.671" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:55.671" starttime="20170725 12:29:55.671"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:29:55.672" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:29:55.672" starttime="20170725 12:29:55.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:29:55.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:29:55.673" starttime="20170725 12:29:55.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:29:55.895" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:29:55.895" starttime="20170725 12:29:55.674"></status>
</kw>
<msg timestamp="20170725 12:29:55.895" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:29:55.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:55.895" starttime="20170725 12:29:55.673"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:29:55.896" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:55.896" starttime="20170725 12:29:55.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:55.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:55.897" starttime="20170725 12:29:55.896"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:55.897" starttime="20170725 12:29:55.667"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:55.897" starttime="20170725 12:29:55.667"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:55.897" starttime="20170725 12:29:55.666"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:55.898" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 12:29:55.898" starttime="20170725 12:29:55.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:55.898" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:55.898" starttime="20170725 12:29:55.898"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:55.899" starttime="20170725 12:29:55.899"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:29:55.901" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 12:29:55.901" starttime="20170725 12:29:55.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:29:55.901" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 12:29:55.902" starttime="20170725 12:29:55.901"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:55.902" starttime="20170725 12:29:55.901"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:55.902" starttime="20170725 12:29:55.899"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:29:56.121" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170725 12:29:56.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.121" starttime="20170725 12:29:55.902"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:29:56.123" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:29:56.123" starttime="20170725 12:29:56.122"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:29:56.124" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:29:56.124" starttime="20170725 12:29:56.124"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.124" starttime="20170725 12:29:56.123"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.124" starttime="20170725 12:29:56.122"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:29:56.125" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:29:56.125" starttime="20170725 12:29:56.125"></status>
</kw>
<msg timestamp="20170725 12:29:56.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.125" starttime="20170725 12:29:55.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.126" starttime="20170725 12:29:56.126"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170725 12:29:56.127" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:29:56.127" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:29:56.127" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170725 12:29:56.128" starttime="20170725 12:29:56.126"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.128" starttime="20170725 12:29:55.663"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:29:56.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:29:56.132" starttime="20170725 12:29:56.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:56.132" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:56.132" starttime="20170725 12:29:56.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:29:56.133" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:29:56.133" starttime="20170725 12:29:56.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:29:56.134" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:29:56.134" starttime="20170725 12:29:56.133"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.351" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:29:56.352" starttime="20170725 12:29:56.135"></status>
</kw>
<msg timestamp="20170725 12:29:56.352" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:29:56.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.352" starttime="20170725 12:29:56.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.352" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.353" starttime="20170725 12:29:56.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.353" starttime="20170725 12:29:56.353"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.353" starttime="20170725 12:29:56.130"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.353" starttime="20170725 12:29:56.130"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.354" starttime="20170725 12:29:56.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:56.354" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 12:29:56.354" starttime="20170725 12:29:56.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:56.355" starttime="20170725 12:29:56.354"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:29:56.446" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170725 12:29:56.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.446" starttime="20170725 12:29:56.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:56.446" starttime="20170725 12:29:56.446"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:29:56.447" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:29:56.447" starttime="20170725 12:29:56.447"></status>
</kw>
<msg timestamp="20170725 12:29:56.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.447" starttime="20170725 12:29:56.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.448" starttime="20170725 12:29:56.447"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:29:56.448" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:29:56.448" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:29:56.449" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 12:29:56.449" starttime="20170725 12:29:56.448"></status>
</kw>
<msg timestamp="20170725 12:29:56.449" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170725 12:29:56.449" starttime="20170725 12:29:56.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.449" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.450" starttime="20170725 12:29:56.449"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.450" starttime="20170725 12:29:55.661"></status>
</kw>
<msg timestamp="20170725 12:29:56.502" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 12:29:56.519" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 12:29:56.524" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170725 12:29:56.524" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:29:56.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:29:56.560" starttime="20170725 12:29:56.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:56.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:56.561" starttime="20170725 12:29:56.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:29:56.561" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:29:56.561" starttime="20170725 12:29:56.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:29:56.562" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:29:56.562" starttime="20170725 12:29:56.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:29:56.757" starttime="20170725 12:29:56.563"></status>
</kw>
<msg timestamp="20170725 12:29:56.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:29:56.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.757" starttime="20170725 12:29:56.562"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.758" starttime="20170725 12:29:56.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.758" starttime="20170725 12:29:56.758"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.758" starttime="20170725 12:29:56.557"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.758" starttime="20170725 12:29:56.556"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.759" starttime="20170725 12:29:56.555"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:56.759" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:29:56.759" starttime="20170725 12:29:56.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:56.760" starttime="20170725 12:29:56.759"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:29:56.826" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:29:56.826" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.826" starttime="20170725 12:29:56.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:56.827" starttime="20170725 12:29:56.826"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:29:56.827" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:29:56.827" starttime="20170725 12:29:56.827"></status>
</kw>
<msg timestamp="20170725 12:29:56.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.827" starttime="20170725 12:29:56.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:56.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:56.828" starttime="20170725 12:29:56.828"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:29:56.829" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:29:56.829" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:29:56.829" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170725 12:29:56.829" starttime="20170725 12:29:56.828"></status>
</kw>
<msg timestamp="20170725 12:29:56.829" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170725 12:29:56.829" starttime="20170725 12:29:56.554"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:56.829" starttime="20170725 12:29:56.552"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:29:56.834" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:29:56.834" starttime="20170725 12:29:56.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:56.835" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:56.835" starttime="20170725 12:29:56.835"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:29:56.835" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:29:56.836" starttime="20170725 12:29:56.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:29:56.836" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:29:56.836" starttime="20170725 12:29:56.836"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.043" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:29:57.043" starttime="20170725 12:29:56.837"></status>
</kw>
<msg timestamp="20170725 12:29:57.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:29:57.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.044" starttime="20170725 12:29:56.836"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.044" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.044" starttime="20170725 12:29:57.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.045" starttime="20170725 12:29:57.045"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.045" starttime="20170725 12:29:56.833"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.045" starttime="20170725 12:29:56.832"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.045" starttime="20170725 12:29:56.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:57.046" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 12:29:57.046" starttime="20170725 12:29:57.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:57.047" starttime="20170725 12:29:57.046"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:29:57.112" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 12:29:57.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.112" starttime="20170725 12:29:57.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:57.113" starttime="20170725 12:29:57.113"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:29:57.113" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:29:57.113" starttime="20170725 12:29:57.113"></status>
</kw>
<msg timestamp="20170725 12:29:57.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.114" starttime="20170725 12:29:56.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.114" starttime="20170725 12:29:57.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:29:57.115" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:29:57.115" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:29:57.115" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 12:29:57.115" starttime="20170725 12:29:57.115"></status>
</kw>
<msg timestamp="20170725 12:29:57.115" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 12:29:57.115" starttime="20170725 12:29:56.830"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.116" starttime="20170725 12:29:56.830"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:29:57.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:29:57.120" starttime="20170725 12:29:57.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:57.121" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:57.121" starttime="20170725 12:29:57.120"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:29:57.121" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:29:57.121" starttime="20170725 12:29:57.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:29:57.122" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:29:57.122" starttime="20170725 12:29:57.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:29:57.356" starttime="20170725 12:29:57.123"></status>
</kw>
<msg timestamp="20170725 12:29:57.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:29:57.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.357" starttime="20170725 12:29:57.122"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.357" starttime="20170725 12:29:57.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.358" starttime="20170725 12:29:57.358"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.358" starttime="20170725 12:29:57.119"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.358" starttime="20170725 12:29:57.118"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.358" starttime="20170725 12:29:57.118"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:57.359" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:29:57.359" starttime="20170725 12:29:57.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:57.360" starttime="20170725 12:29:57.359"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:29:57.463" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:29:57.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.463" starttime="20170725 12:29:57.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:57.463" starttime="20170725 12:29:57.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:29:57.464" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:29:57.464" starttime="20170725 12:29:57.464"></status>
</kw>
<msg timestamp="20170725 12:29:57.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.464" starttime="20170725 12:29:57.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.465" starttime="20170725 12:29:57.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:29:57.465" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:29:57.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:29:57.466" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:29:57.466" starttime="20170725 12:29:57.465"></status>
</kw>
<msg timestamp="20170725 12:29:57.466" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:29:57.466" starttime="20170725 12:29:57.116"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.466" starttime="20170725 12:29:57.116"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:29:57.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:29:57.471" starttime="20170725 12:29:57.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:57.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:57.471" starttime="20170725 12:29:57.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:29:57.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:29:57.472" starttime="20170725 12:29:57.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:29:57.472" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:29:57.472" starttime="20170725 12:29:57.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.675" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:29:57.675" starttime="20170725 12:29:57.473"></status>
</kw>
<msg timestamp="20170725 12:29:57.675" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:29:57.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.675" starttime="20170725 12:29:57.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.676" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.676" starttime="20170725 12:29:57.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.677" starttime="20170725 12:29:57.676"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.677" starttime="20170725 12:29:57.469"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.677" starttime="20170725 12:29:57.469"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.677" starttime="20170725 12:29:57.468"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:57.678" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:29:57.678" starttime="20170725 12:29:57.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:57.678" starttime="20170725 12:29:57.678"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:29:57.745" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:29:57.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.745" starttime="20170725 12:29:57.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:57.746" starttime="20170725 12:29:57.746"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:29:57.746" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:29:57.746" starttime="20170725 12:29:57.746"></status>
</kw>
<msg timestamp="20170725 12:29:57.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.747" starttime="20170725 12:29:57.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:57.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:57.747" starttime="20170725 12:29:57.747"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:29:57.748" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:29:57.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:29:57.748" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 12:29:57.748" starttime="20170725 12:29:57.748"></status>
</kw>
<msg timestamp="20170725 12:29:57.748" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 12:29:57.748" starttime="20170725 12:29:57.467"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.749" starttime="20170725 12:29:57.466"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.787" starttime="20170725 12:29:54.306"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170725 12:29:57.794" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170725 12:29:57.795" starttime="20170725 12:29:57.788"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.795" starttime="20170725 12:29:54.306"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:57.795" starttime="20170725 12:29:54.299"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Delete Error logs</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:29:57.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:29:57.807" starttime="20170725 12:29:57.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:29:57.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:29:57.808" starttime="20170725 12:29:57.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:29:57.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:29:57.809" starttime="20170725 12:29:57.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:29:57.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:29:57.809" starttime="20170725 12:29:57.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:29:58.029" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:29:58.029" starttime="20170725 12:29:57.810"></status>
</kw>
<msg timestamp="20170725 12:29:58.029" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:29:58.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:58.029" starttime="20170725 12:29:57.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:29:58.030" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:58.030" starttime="20170725 12:29:58.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:29:58.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:29:58.030" starttime="20170725 12:29:58.030"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.030" starttime="20170725 12:29:57.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.031" starttime="20170725 12:29:57.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.031" starttime="20170725 12:29:57.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:29:58.032" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170725 12:29:58.032" starttime="20170725 12:29:58.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:58.032" starttime="20170725 12:29:58.032"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:29:58.079" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170725 12:29:58.079" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:58.079" starttime="20170725 12:29:58.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:58.080" starttime="20170725 12:29:58.080"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:29:58.081" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:29:58.081" starttime="20170725 12:29:58.080"></status>
</kw>
<msg timestamp="20170725 12:29:58.081" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:29:58.081" starttime="20170725 12:29:57.804"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170725 12:29:58.081" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 12:29:58.082" starttime="20170725 12:29:58.081"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.082" starttime="20170725 12:29:57.804"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.082" starttime="20170725 12:29:57.796"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.082" starttime="20170725 12:29:54.299"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:58.101" starttime="20170725 12:29:58.092"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:58.103" starttime="20170725 12:29:58.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:29:58.809" starttime="20170725 12:29:58.104"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.809" starttime="20170725 12:29:58.103"></status>
</kw>
<status status="PASS" endtime="20170725 12:29:58.810" starttime="20170725 12:29:58.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170725 12:29:58.810" level="INFO">Copying /home/fspcibld/witherspoon_910_golden.pnor to /tmp</msg>
<status status="PASS" endtime="20170725 12:29:58.810" starttime="20170725 12:29:58.810"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:36.277" starttime="20170725 12:29:58.811"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:36.277" starttime="20170725 12:29:58.091"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:36.277" starttime="20170725 12:29:58.082"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170725 12:30:36.279" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170725 12:30:36.279" level="INFO">${pnor_basename} = witherspoon_910_golden.pnor</msg>
<status status="PASS" endtime="20170725 12:30:36.279" starttime="20170725 12:30:36.278"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon_910_golden.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170725 12:30:36.290" level="INFO">@{arglist} = [ /tmp/witherspoon_910_golden.pnor ]</msg>
<status status="PASS" endtime="20170725 12:30:36.290" starttime="20170725 12:30:36.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170725 12:30:36.291" level="INFO">${args} = {u'data': [u'/tmp/witherspoon_910_golden.pnor']}</msg>
<status status="PASS" endtime="20170725 12:30:36.291" starttime="20170725 12:30:36.290"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:30:36.293" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170725 12:30:36.293" starttime="20170725 12:30:36.292"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:30:36.296" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:30:36.296" starttime="20170725 12:30:36.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:30:36.297" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:30:36.297" starttime="20170725 12:30:36.297"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:30:36.298" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:30:36.298" starttime="20170725 12:30:36.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:30:36.298" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:30:36.298" starttime="20170725 12:30:36.298"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:30:36.538" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:30:36.538" starttime="20170725 12:30:36.299"></status>
</kw>
<msg timestamp="20170725 12:30:36.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:30:36.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:36.538" starttime="20170725 12:30:36.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:30:36.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:36.539" starttime="20170725 12:30:36.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:36.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:36.540" starttime="20170725 12:30:36.539"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:36.540" starttime="20170725 12:30:36.295"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:36.540" starttime="20170725 12:30:36.294"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:36.540" starttime="20170725 12:30:36.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:30:36.541" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170725 12:30:36.541" starttime="20170725 12:30:36.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:30:36.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:30:36.541" starttime="20170725 12:30:36.541"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:36.542" starttime="20170725 12:30:36.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:36.543" starttime="20170725 12:30:36.542"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:30:36.781" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon_910_golden.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170725 12:30:36.781" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:36.781" starttime="20170725 12:30:36.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:36.781" starttime="20170725 12:30:36.781"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:30:36.782" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:30:36.782" starttime="20170725 12:30:36.782"></status>
</kw>
<msg timestamp="20170725 12:30:36.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:36.782" starttime="20170725 12:30:36.293"></status>
</kw>
<msg timestamp="20170725 12:30:36.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:36.783" starttime="20170725 12:30:36.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:36.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:36.784" starttime="20170725 12:30:36.783"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flashing</arg>
</arguments>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:30:36.790" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:30:36.791" starttime="20170725 12:30:36.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:30:36.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:30:36.792" starttime="20170725 12:30:36.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:30:36.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:30:36.793" starttime="20170725 12:30:36.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:30:36.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:30:36.794" starttime="20170725 12:30:36.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:30:37.059" starttime="20170725 12:30:36.795"></status>
</kw>
<msg timestamp="20170725 12:30:37.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:30:37.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.059" starttime="20170725 12:30:36.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.060" starttime="20170725 12:30:37.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.061" starttime="20170725 12:30:37.060"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.061" starttime="20170725 12:30:36.789"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.061" starttime="20170725 12:30:36.788"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.061" starttime="20170725 12:30:36.787"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:30:37.062" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:30:37.062" starttime="20170725 12:30:37.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:37.063" starttime="20170725 12:30:37.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:30:37.415" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:30:37.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.415" starttime="20170725 12:30:37.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:37.416" starttime="20170725 12:30:37.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:30:37.416" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:30:37.416" starttime="20170725 12:30:37.416"></status>
</kw>
<msg timestamp="20170725 12:30:37.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.417" starttime="20170725 12:30:36.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.417" starttime="20170725 12:30:37.417"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:30:37.418" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:30:37.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:30:37.418" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:30:37.418" starttime="20170725 12:30:37.418"></status>
</kw>
<msg timestamp="20170725 12:30:37.418" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:30:37.418" starttime="20170725 12:30:36.786"></status>
</kw>
<msg timestamp="20170725 12:30:37.419" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:30:37.419" starttime="20170725 12:30:36.785"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flashing</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:37.419" starttime="20170725 12:30:37.419"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.419" starttime="20170725 12:30:36.785"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.419" starttime="20170725 12:30:36.784"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.420" starttime="20170725 12:30:36.289"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.420" starttime="20170725 12:30:36.279"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds \ 7 min \ 10 sec \ Is PNOR Flash Done</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>7 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flash Done</arg>
</arguments>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:30:37.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:30:37.434" starttime="20170725 12:30:37.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:30:37.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:30:37.435" starttime="20170725 12:30:37.435"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:30:37.435" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:30:37.436" starttime="20170725 12:30:37.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:30:37.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:30:37.437" starttime="20170725 12:30:37.436"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.873" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:30:37.874" starttime="20170725 12:30:37.438"></status>
</kw>
<msg timestamp="20170725 12:30:37.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:30:37.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.874" starttime="20170725 12:30:37.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.874" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.874" starttime="20170725 12:30:37.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.875" starttime="20170725 12:30:37.875"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.875" starttime="20170725 12:30:37.432"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.875" starttime="20170725 12:30:37.432"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:37.875" starttime="20170725 12:30:37.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:30:37.876" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:30:37.876" starttime="20170725 12:30:37.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:37.877" starttime="20170725 12:30:37.876"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:30:37.971" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:30:37.971" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.971" starttime="20170725 12:30:37.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:37.972" starttime="20170725 12:30:37.972"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:30:37.972" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:30:37.972" starttime="20170725 12:30:37.972"></status>
</kw>
<msg timestamp="20170725 12:30:37.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.973" starttime="20170725 12:30:37.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:37.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:37.973" starttime="20170725 12:30:37.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:30:37.974" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:30:37.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:30:37.974" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:30:37.974" starttime="20170725 12:30:37.974"></status>
</kw>
<msg timestamp="20170725 12:30:37.974" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:30:37.975" starttime="20170725 12:30:37.430"></status>
</kw>
<msg timestamp="20170725 12:30:37.975" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:30:37.975" starttime="20170725 12:30:37.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:30:37.975" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:30:37.976" starttime="20170725 12:30:37.975"></status>
</kw>
<status status="FAIL" endtime="20170725 12:30:37.976" starttime="20170725 12:30:37.430"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:30:47.982" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:30:47.983" starttime="20170725 12:30:47.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:30:47.984" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:30:47.984" starttime="20170725 12:30:47.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:30:47.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:30:47.985" starttime="20170725 12:30:47.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:30:47.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:30:47.986" starttime="20170725 12:30:47.985"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:30:48.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:30:48.544" starttime="20170725 12:30:47.987"></status>
</kw>
<msg timestamp="20170725 12:30:48.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:30:48.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:48.544" starttime="20170725 12:30:47.987"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:30:48.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:48.545" starttime="20170725 12:30:48.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:48.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:48.545" starttime="20170725 12:30:48.545"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:48.546" starttime="20170725 12:30:47.981"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:48.546" starttime="20170725 12:30:47.980"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:48.546" starttime="20170725 12:30:47.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:30:48.546" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:30:48.546" starttime="20170725 12:30:48.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:48.547" starttime="20170725 12:30:48.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:30:48.631" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:30:48.632" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:48.632" starttime="20170725 12:30:48.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:48.632" starttime="20170725 12:30:48.632"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:30:48.633" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:30:48.633" starttime="20170725 12:30:48.633"></status>
</kw>
<msg timestamp="20170725 12:30:48.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:48.633" starttime="20170725 12:30:47.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:48.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:48.634" starttime="20170725 12:30:48.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:30:48.634" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:30:48.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:30:48.635" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:30:48.635" starttime="20170725 12:30:48.634"></status>
</kw>
<msg timestamp="20170725 12:30:48.635" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:30:48.635" starttime="20170725 12:30:47.977"></status>
</kw>
<msg timestamp="20170725 12:30:48.635" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:30:48.635" starttime="20170725 12:30:47.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:30:48.636" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:30:48.636" starttime="20170725 12:30:48.635"></status>
</kw>
<status status="FAIL" endtime="20170725 12:30:48.636" starttime="20170725 12:30:47.976"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:30:58.641" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:30:58.642" starttime="20170725 12:30:58.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:30:58.643" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:30:58.643" starttime="20170725 12:30:58.643"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:30:58.643" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:30:58.644" starttime="20170725 12:30:58.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:30:58.644" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:30:58.644" starttime="20170725 12:30:58.644"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:30:58.838" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:30:58.839" starttime="20170725 12:30:58.645"></status>
</kw>
<msg timestamp="20170725 12:30:58.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:30:58.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:58.839" starttime="20170725 12:30:58.644"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:30:58.839" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:58.839" starttime="20170725 12:30:58.839"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:58.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:58.840" starttime="20170725 12:30:58.840"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:58.840" starttime="20170725 12:30:58.640"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:58.840" starttime="20170725 12:30:58.640"></status>
</kw>
<status status="PASS" endtime="20170725 12:30:58.841" starttime="20170725 12:30:58.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:30:58.841" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:30:58.841" starttime="20170725 12:30:58.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:58.842" starttime="20170725 12:30:58.841"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:30:59.462" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:30:59.462" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:59.463" starttime="20170725 12:30:58.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:30:59.463" starttime="20170725 12:30:59.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:30:59.464" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:30:59.464" starttime="20170725 12:30:59.464"></status>
</kw>
<msg timestamp="20170725 12:30:59.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:30:59.464" starttime="20170725 12:30:58.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:30:59.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:30:59.465" starttime="20170725 12:30:59.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:30:59.465" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:30:59.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:30:59.465" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:30:59.465" starttime="20170725 12:30:59.465"></status>
</kw>
<msg timestamp="20170725 12:30:59.466" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:30:59.466" starttime="20170725 12:30:58.638"></status>
</kw>
<msg timestamp="20170725 12:30:59.466" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:30:59.466" starttime="20170725 12:30:58.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:30:59.467" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:30:59.467" starttime="20170725 12:30:59.466"></status>
</kw>
<status status="FAIL" endtime="20170725 12:30:59.467" starttime="20170725 12:30:58.637"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:31:09.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:31:09.472" starttime="20170725 12:31:09.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:31:09.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:31:09.473" starttime="20170725 12:31:09.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:31:09.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:31:09.474" starttime="20170725 12:31:09.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:31:09.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:31:09.474" starttime="20170725 12:31:09.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:31:09.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:31:09.653" starttime="20170725 12:31:09.475"></status>
</kw>
<msg timestamp="20170725 12:31:09.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:31:09.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:09.653" starttime="20170725 12:31:09.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:31:09.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:09.654" starttime="20170725 12:31:09.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:09.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:09.655" starttime="20170725 12:31:09.654"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:09.655" starttime="20170725 12:31:09.471"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:09.655" starttime="20170725 12:31:09.470"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:09.655" starttime="20170725 12:31:09.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:31:09.656" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:31:09.656" starttime="20170725 12:31:09.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:09.657" starttime="20170725 12:31:09.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:31:09.740" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:31:09.740" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:09.740" starttime="20170725 12:31:09.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:09.741" starttime="20170725 12:31:09.740"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:31:09.741" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:31:09.741" starttime="20170725 12:31:09.741"></status>
</kw>
<msg timestamp="20170725 12:31:09.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:09.741" starttime="20170725 12:31:09.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:09.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:09.742" starttime="20170725 12:31:09.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:31:09.743" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:31:09.743" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:31:09.743" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:31:09.743" starttime="20170725 12:31:09.742"></status>
</kw>
<msg timestamp="20170725 12:31:09.743" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:31:09.743" starttime="20170725 12:31:09.468"></status>
</kw>
<msg timestamp="20170725 12:31:09.743" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:31:09.743" starttime="20170725 12:31:09.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:31:09.744" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:31:09.744" starttime="20170725 12:31:09.744"></status>
</kw>
<status status="FAIL" endtime="20170725 12:31:09.744" starttime="20170725 12:31:09.467"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:31:19.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:31:19.750" starttime="20170725 12:31:19.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:31:19.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:31:19.751" starttime="20170725 12:31:19.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:31:19.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:31:19.751" starttime="20170725 12:31:19.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:31:19.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:31:19.752" starttime="20170725 12:31:19.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:31:19.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:31:19.930" starttime="20170725 12:31:19.753"></status>
</kw>
<msg timestamp="20170725 12:31:19.930" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:31:19.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:19.930" starttime="20170725 12:31:19.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:31:19.930" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:19.931" starttime="20170725 12:31:19.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:19.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:19.932" starttime="20170725 12:31:19.931"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:19.932" starttime="20170725 12:31:19.748"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:19.932" starttime="20170725 12:31:19.748"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:19.932" starttime="20170725 12:31:19.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:31:19.933" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:31:19.933" starttime="20170725 12:31:19.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:19.934" starttime="20170725 12:31:19.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:31:20.015" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:31:20.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:20.015" starttime="20170725 12:31:19.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:20.016" starttime="20170725 12:31:20.015"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:31:20.016" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:31:20.016" starttime="20170725 12:31:20.016"></status>
</kw>
<msg timestamp="20170725 12:31:20.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:20.016" starttime="20170725 12:31:19.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:20.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:20.017" starttime="20170725 12:31:20.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:31:20.018" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:31:20.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:31:20.018" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:31:20.018" starttime="20170725 12:31:20.017"></status>
</kw>
<msg timestamp="20170725 12:31:20.018" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:31:20.018" starttime="20170725 12:31:19.746"></status>
</kw>
<msg timestamp="20170725 12:31:20.018" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:31:20.018" starttime="20170725 12:31:19.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:31:20.019" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:31:20.019" starttime="20170725 12:31:20.019"></status>
</kw>
<status status="FAIL" endtime="20170725 12:31:20.019" starttime="20170725 12:31:19.745"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:31:30.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:31:30.025" starttime="20170725 12:31:30.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:31:30.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:31:30.026" starttime="20170725 12:31:30.025"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:31:30.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:31:30.026" starttime="20170725 12:31:30.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:31:30.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:31:30.027" starttime="20170725 12:31:30.026"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:31:31.005" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:31:31.005" starttime="20170725 12:31:30.028"></status>
</kw>
<msg timestamp="20170725 12:31:31.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:31:31.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:31.006" starttime="20170725 12:31:30.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:31:31.006" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:31.006" starttime="20170725 12:31:31.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:31.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:31.007" starttime="20170725 12:31:31.007"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:31.007" starttime="20170725 12:31:30.023"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:31.007" starttime="20170725 12:31:30.023"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:31.007" starttime="20170725 12:31:30.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:31:31.008" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:31:31.008" starttime="20170725 12:31:31.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:31.009" starttime="20170725 12:31:31.008"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:31:31.089" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:31:31.090" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:31.090" starttime="20170725 12:31:31.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:31.090" starttime="20170725 12:31:31.090"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:31:31.091" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:31:31.091" starttime="20170725 12:31:31.091"></status>
</kw>
<msg timestamp="20170725 12:31:31.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:31.091" starttime="20170725 12:31:30.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:31.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:31.092" starttime="20170725 12:31:31.091"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:31:31.092" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:31:31.092" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:31:31.093" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:31:31.093" starttime="20170725 12:31:31.092"></status>
</kw>
<msg timestamp="20170725 12:31:31.093" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:31:31.093" starttime="20170725 12:31:30.021"></status>
</kw>
<msg timestamp="20170725 12:31:31.093" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:31:31.093" starttime="20170725 12:31:30.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:31:31.094" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:31:31.094" starttime="20170725 12:31:31.093"></status>
</kw>
<status status="FAIL" endtime="20170725 12:31:31.094" starttime="20170725 12:31:30.020"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:31:41.099" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:31:41.100" starttime="20170725 12:31:41.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:31:41.100" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:31:41.100" starttime="20170725 12:31:41.100"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:31:41.101" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:31:41.101" starttime="20170725 12:31:41.101"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:31:41.102" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:31:41.102" starttime="20170725 12:31:41.101"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:31:41.287" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:31:41.287" starttime="20170725 12:31:41.102"></status>
</kw>
<msg timestamp="20170725 12:31:41.287" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:31:41.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:41.287" starttime="20170725 12:31:41.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:31:41.288" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:41.288" starttime="20170725 12:31:41.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:41.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:41.288" starttime="20170725 12:31:41.288"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:41.289" starttime="20170725 12:31:41.098"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:41.289" starttime="20170725 12:31:41.098"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:41.289" starttime="20170725 12:31:41.097"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:31:41.289" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:31:41.290" starttime="20170725 12:31:41.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:41.290" starttime="20170725 12:31:41.290"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:31:41.377" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:31:41.377" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:41.377" starttime="20170725 12:31:41.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:41.377" starttime="20170725 12:31:41.377"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:31:41.378" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:31:41.378" starttime="20170725 12:31:41.378"></status>
</kw>
<msg timestamp="20170725 12:31:41.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:41.378" starttime="20170725 12:31:41.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:41.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:41.379" starttime="20170725 12:31:41.378"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:31:41.379" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:31:41.379" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:31:41.380" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:31:41.380" starttime="20170725 12:31:41.379"></status>
</kw>
<msg timestamp="20170725 12:31:41.380" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:31:41.380" starttime="20170725 12:31:41.096"></status>
</kw>
<msg timestamp="20170725 12:31:41.380" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:31:41.380" starttime="20170725 12:31:41.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:31:41.381" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:31:41.381" starttime="20170725 12:31:41.381"></status>
</kw>
<status status="FAIL" endtime="20170725 12:31:41.381" starttime="20170725 12:31:41.095"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:31:51.387" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:31:51.387" starttime="20170725 12:31:51.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:31:51.388" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:31:51.388" starttime="20170725 12:31:51.387"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:31:51.388" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:31:51.388" starttime="20170725 12:31:51.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:31:51.389" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:31:51.389" starttime="20170725 12:31:51.389"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:31:51.567" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:31:51.567" starttime="20170725 12:31:51.390"></status>
</kw>
<msg timestamp="20170725 12:31:51.567" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:31:51.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:51.567" starttime="20170725 12:31:51.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:31:51.568" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:51.568" starttime="20170725 12:31:51.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:51.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:51.569" starttime="20170725 12:31:51.568"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:51.569" starttime="20170725 12:31:51.385"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:51.569" starttime="20170725 12:31:51.385"></status>
</kw>
<status status="PASS" endtime="20170725 12:31:51.569" starttime="20170725 12:31:51.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:31:51.569" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:31:51.570" starttime="20170725 12:31:51.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:51.570" starttime="20170725 12:31:51.570"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:31:51.653" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:31:51.654" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:51.654" starttime="20170725 12:31:51.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:31:51.654" starttime="20170725 12:31:51.654"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:31:51.655" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:31:51.655" starttime="20170725 12:31:51.655"></status>
</kw>
<msg timestamp="20170725 12:31:51.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:31:51.655" starttime="20170725 12:31:51.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:31:51.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:31:51.656" starttime="20170725 12:31:51.655"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:31:51.656" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:31:51.656" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:31:51.657" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:31:51.657" starttime="20170725 12:31:51.656"></status>
</kw>
<msg timestamp="20170725 12:31:51.657" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:31:51.657" starttime="20170725 12:31:51.383"></status>
</kw>
<msg timestamp="20170725 12:31:51.657" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:31:51.657" starttime="20170725 12:31:51.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:31:51.658" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:31:51.658" starttime="20170725 12:31:51.658"></status>
</kw>
<status status="FAIL" endtime="20170725 12:31:51.658" starttime="20170725 12:31:51.382"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:32:01.663" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:32:01.664" starttime="20170725 12:32:01.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:32:01.664" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:32:01.664" starttime="20170725 12:32:01.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:32:01.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:32:01.665" starttime="20170725 12:32:01.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:32:01.666" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:32:01.666" starttime="20170725 12:32:01.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:32:01.853" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:32:01.854" starttime="20170725 12:32:01.666"></status>
</kw>
<msg timestamp="20170725 12:32:01.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:32:01.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:01.854" starttime="20170725 12:32:01.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:32:01.854" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:01.855" starttime="20170725 12:32:01.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:01.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:01.855" starttime="20170725 12:32:01.855"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:01.855" starttime="20170725 12:32:01.662"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:01.855" starttime="20170725 12:32:01.661"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:01.856" starttime="20170725 12:32:01.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:32:01.856" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:32:01.856" starttime="20170725 12:32:01.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:01.857" starttime="20170725 12:32:01.856"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:32:01.940" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:32:01.940" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:01.940" starttime="20170725 12:32:01.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:01.941" starttime="20170725 12:32:01.941"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:32:01.941" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:32:01.941" starttime="20170725 12:32:01.941"></status>
</kw>
<msg timestamp="20170725 12:32:01.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:01.942" starttime="20170725 12:32:01.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:01.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:01.942" starttime="20170725 12:32:01.942"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:32:01.943" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:32:01.943" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:32:01.943" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:32:01.943" starttime="20170725 12:32:01.943"></status>
</kw>
<msg timestamp="20170725 12:32:01.943" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:32:01.943" starttime="20170725 12:32:01.660"></status>
</kw>
<msg timestamp="20170725 12:32:01.944" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:32:01.944" starttime="20170725 12:32:01.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:32:01.944" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:32:01.944" starttime="20170725 12:32:01.944"></status>
</kw>
<status status="FAIL" endtime="20170725 12:32:01.945" starttime="20170725 12:32:01.659"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:32:11.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:32:11.950" starttime="20170725 12:32:11.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:32:11.951" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:32:11.951" starttime="20170725 12:32:11.950"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:32:11.951" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:32:11.951" starttime="20170725 12:32:11.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:32:11.952" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:32:11.952" starttime="20170725 12:32:11.952"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:32:12.128" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:32:12.128" starttime="20170725 12:32:11.953"></status>
</kw>
<msg timestamp="20170725 12:32:12.128" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:32:12.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:12.128" starttime="20170725 12:32:11.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:32:12.129" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:12.129" starttime="20170725 12:32:12.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:12.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:12.130" starttime="20170725 12:32:12.129"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:12.130" starttime="20170725 12:32:11.948"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:12.130" starttime="20170725 12:32:11.948"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:12.130" starttime="20170725 12:32:11.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:32:12.131" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:32:12.131" starttime="20170725 12:32:12.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:12.131" starttime="20170725 12:32:12.131"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:32:12.214" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:32:12.214" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:12.214" starttime="20170725 12:32:12.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:12.215" starttime="20170725 12:32:12.214"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:32:12.215" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:32:12.215" starttime="20170725 12:32:12.215"></status>
</kw>
<msg timestamp="20170725 12:32:12.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:12.215" starttime="20170725 12:32:11.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:12.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:12.216" starttime="20170725 12:32:12.216"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:32:12.217" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:32:12.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:32:12.217" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:32:12.217" starttime="20170725 12:32:12.216"></status>
</kw>
<msg timestamp="20170725 12:32:12.217" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:32:12.217" starttime="20170725 12:32:11.946"></status>
</kw>
<msg timestamp="20170725 12:32:12.218" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:32:12.218" starttime="20170725 12:32:11.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:32:12.218" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:32:12.218" starttime="20170725 12:32:12.218"></status>
</kw>
<status status="FAIL" endtime="20170725 12:32:12.218" starttime="20170725 12:32:11.945"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:32:22.228" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:32:22.228" starttime="20170725 12:32:22.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:32:22.229" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:32:22.229" starttime="20170725 12:32:22.229"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:32:22.230" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:32:22.230" starttime="20170725 12:32:22.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:32:22.230" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:32:22.230" starttime="20170725 12:32:22.230"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:32:22.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:32:22.444" starttime="20170725 12:32:22.231"></status>
</kw>
<msg timestamp="20170725 12:32:22.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:32:22.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:22.444" starttime="20170725 12:32:22.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:32:22.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:22.445" starttime="20170725 12:32:22.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:22.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:22.446" starttime="20170725 12:32:22.445"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:22.446" starttime="20170725 12:32:22.222"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:22.446" starttime="20170725 12:32:22.222"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:22.446" starttime="20170725 12:32:22.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:32:22.447" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:32:22.447" starttime="20170725 12:32:22.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:22.447" starttime="20170725 12:32:22.447"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:32:22.532" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:32:22.532" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:22.532" starttime="20170725 12:32:22.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:22.533" starttime="20170725 12:32:22.532"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:32:22.533" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:32:22.533" starttime="20170725 12:32:22.533"></status>
</kw>
<msg timestamp="20170725 12:32:22.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:22.534" starttime="20170725 12:32:22.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:22.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:22.535" starttime="20170725 12:32:22.534"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:32:22.536" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:32:22.536" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:32:22.536" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:32:22.536" starttime="20170725 12:32:22.535"></status>
</kw>
<msg timestamp="20170725 12:32:22.536" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:32:22.536" starttime="20170725 12:32:22.220"></status>
</kw>
<msg timestamp="20170725 12:32:22.537" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:32:22.537" starttime="20170725 12:32:22.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:32:22.538" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:32:22.538" starttime="20170725 12:32:22.537"></status>
</kw>
<status status="FAIL" endtime="20170725 12:32:22.538" starttime="20170725 12:32:22.219"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:32:32.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:32:32.544" starttime="20170725 12:32:32.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:32:32.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:32:32.545" starttime="20170725 12:32:32.544"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:32:32.545" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:32:32.545" starttime="20170725 12:32:32.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:32:32.546" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:32:32.546" starttime="20170725 12:32:32.545"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:32:32.742" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:32:32.742" starttime="20170725 12:32:32.547"></status>
</kw>
<msg timestamp="20170725 12:32:32.742" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:32:32.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:32.742" starttime="20170725 12:32:32.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:32:32.743" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:32.743" starttime="20170725 12:32:32.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:32.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:32.744" starttime="20170725 12:32:32.743"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:32.744" starttime="20170725 12:32:32.542"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:32.744" starttime="20170725 12:32:32.542"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:32.744" starttime="20170725 12:32:32.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:32:32.745" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:32:32.745" starttime="20170725 12:32:32.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:32.745" starttime="20170725 12:32:32.745"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:32:32.830" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:32:32.830" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:32.830" starttime="20170725 12:32:32.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:32.831" starttime="20170725 12:32:32.831"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:32:32.831" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:32:32.831" starttime="20170725 12:32:32.831"></status>
</kw>
<msg timestamp="20170725 12:32:32.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:32.832" starttime="20170725 12:32:32.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:32.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:32.832" starttime="20170725 12:32:32.832"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:32:32.833" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:32:32.833" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:32:32.833" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:32:32.833" starttime="20170725 12:32:32.833"></status>
</kw>
<msg timestamp="20170725 12:32:32.833" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:32:32.833" starttime="20170725 12:32:32.540"></status>
</kw>
<msg timestamp="20170725 12:32:32.834" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:32:32.834" starttime="20170725 12:32:32.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:32:32.834" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:32:32.834" starttime="20170725 12:32:32.834"></status>
</kw>
<status status="FAIL" endtime="20170725 12:32:32.835" starttime="20170725 12:32:32.539"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:32:42.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:32:42.842" starttime="20170725 12:32:42.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:32:42.843" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:32:42.843" starttime="20170725 12:32:42.842"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:32:42.844" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:32:42.844" starttime="20170725 12:32:42.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:32:42.845" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:32:42.845" starttime="20170725 12:32:42.844"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:32:43.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:32:43.027" starttime="20170725 12:32:42.846"></status>
</kw>
<msg timestamp="20170725 12:32:43.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:32:43.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:43.027" starttime="20170725 12:32:42.845"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:32:43.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:43.028" starttime="20170725 12:32:43.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:43.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:43.029" starttime="20170725 12:32:43.028"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:43.029" starttime="20170725 12:32:42.839"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:43.029" starttime="20170725 12:32:42.838"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:43.029" starttime="20170725 12:32:42.838"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:32:43.029" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:32:43.029" starttime="20170725 12:32:43.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:43.030" starttime="20170725 12:32:43.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:32:43.113" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:32:43.113" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:43.113" starttime="20170725 12:32:43.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:43.114" starttime="20170725 12:32:43.113"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:32:43.114" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:32:43.115" starttime="20170725 12:32:43.114"></status>
</kw>
<msg timestamp="20170725 12:32:43.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:43.115" starttime="20170725 12:32:42.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:43.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:43.115" starttime="20170725 12:32:43.115"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:32:43.116" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:32:43.116" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:32:43.116" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:32:43.116" starttime="20170725 12:32:43.116"></status>
</kw>
<msg timestamp="20170725 12:32:43.117" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:32:43.117" starttime="20170725 12:32:42.836"></status>
</kw>
<msg timestamp="20170725 12:32:43.117" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:32:43.117" starttime="20170725 12:32:42.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:32:43.118" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:32:43.118" starttime="20170725 12:32:43.117"></status>
</kw>
<status status="FAIL" endtime="20170725 12:32:43.118" starttime="20170725 12:32:42.835"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:32:53.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:32:53.124" starttime="20170725 12:32:53.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:32:53.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:32:53.124" starttime="20170725 12:32:53.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:32:53.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:32:53.125" starttime="20170725 12:32:53.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:32:53.125" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:32:53.126" starttime="20170725 12:32:53.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:32:53.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:32:53.304" starttime="20170725 12:32:53.126"></status>
</kw>
<msg timestamp="20170725 12:32:53.304" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:32:53.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:53.304" starttime="20170725 12:32:53.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:32:53.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:53.305" starttime="20170725 12:32:53.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:53.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:53.305" starttime="20170725 12:32:53.305"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:53.305" starttime="20170725 12:32:53.122"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:53.305" starttime="20170725 12:32:53.121"></status>
</kw>
<status status="PASS" endtime="20170725 12:32:53.306" starttime="20170725 12:32:53.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:32:53.306" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:32:53.306" starttime="20170725 12:32:53.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:53.307" starttime="20170725 12:32:53.306"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:32:53.404" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:32:53.404" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:53.404" starttime="20170725 12:32:53.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:32:53.405" starttime="20170725 12:32:53.404"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:32:53.405" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:32:53.405" starttime="20170725 12:32:53.405"></status>
</kw>
<msg timestamp="20170725 12:32:53.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:32:53.405" starttime="20170725 12:32:53.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:32:53.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:32:53.406" starttime="20170725 12:32:53.406"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:32:53.407" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:32:53.407" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:32:53.407" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:32:53.407" starttime="20170725 12:32:53.406"></status>
</kw>
<msg timestamp="20170725 12:32:53.407" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:32:53.407" starttime="20170725 12:32:53.119"></status>
</kw>
<msg timestamp="20170725 12:32:53.408" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:32:53.408" starttime="20170725 12:32:53.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:32:53.408" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:32:53.408" starttime="20170725 12:32:53.408"></status>
</kw>
<status status="FAIL" endtime="20170725 12:32:53.408" starttime="20170725 12:32:53.118"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:33:03.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:33:03.414" starttime="20170725 12:33:03.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:33:03.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:33:03.414" starttime="20170725 12:33:03.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:33:03.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:33:03.415" starttime="20170725 12:33:03.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:33:03.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:33:03.416" starttime="20170725 12:33:03.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:33:03.620" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:33:03.621" starttime="20170725 12:33:03.416"></status>
</kw>
<msg timestamp="20170725 12:33:03.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:33:03.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:03.621" starttime="20170725 12:33:03.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:33:03.621" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:03.622" starttime="20170725 12:33:03.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:03.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:03.622" starttime="20170725 12:33:03.622"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:03.622" starttime="20170725 12:33:03.412"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:03.622" starttime="20170725 12:33:03.412"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:03.623" starttime="20170725 12:33:03.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:33:03.623" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:33:03.623" starttime="20170725 12:33:03.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:03.624" starttime="20170725 12:33:03.623"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:33:03.710" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:33:03.710" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:03.710" starttime="20170725 12:33:03.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:03.711" starttime="20170725 12:33:03.711"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:33:03.711" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:33:03.712" starttime="20170725 12:33:03.711"></status>
</kw>
<msg timestamp="20170725 12:33:03.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:03.712" starttime="20170725 12:33:03.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:03.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:03.712" starttime="20170725 12:33:03.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:33:03.713" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:33:03.713" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:33:03.713" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 12:33:03.713" starttime="20170725 12:33:03.713"></status>
</kw>
<msg timestamp="20170725 12:33:03.714" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 12:33:03.714" starttime="20170725 12:33:03.410"></status>
</kw>
<msg timestamp="20170725 12:33:03.714" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 12:33:03.714" starttime="20170725 12:33:03.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:33:03.715" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:33:03.715" starttime="20170725 12:33:03.714"></status>
</kw>
<status status="FAIL" endtime="20170725 12:33:03.715" starttime="20170725 12:33:03.409"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:33:13.720" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:33:13.720" starttime="20170725 12:33:13.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:33:13.721" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:33:13.721" starttime="20170725 12:33:13.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:33:13.721" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:33:13.721" starttime="20170725 12:33:13.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:33:13.722" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:33:13.722" starttime="20170725 12:33:13.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:33:15.216" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:33:15.217" starttime="20170725 12:33:13.723"></status>
</kw>
<msg timestamp="20170725 12:33:15.217" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:33:15.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:15.217" starttime="20170725 12:33:13.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:33:15.218" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:15.218" starttime="20170725 12:33:15.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:15.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:15.218" starttime="20170725 12:33:15.218"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:15.218" starttime="20170725 12:33:13.718"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:15.219" starttime="20170725 12:33:13.718"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:15.219" starttime="20170725 12:33:13.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:33:15.219" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:33:15.219" starttime="20170725 12:33:15.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:15.220" starttime="20170725 12:33:15.220"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:33:15.300" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:33:15.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:15.300" starttime="20170725 12:33:15.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:15.301" starttime="20170725 12:33:15.301"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:33:15.301" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:33:15.301" starttime="20170725 12:33:15.301"></status>
</kw>
<msg timestamp="20170725 12:33:15.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:15.302" starttime="20170725 12:33:13.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:15.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:15.302" starttime="20170725 12:33:15.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:33:15.303" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 10%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:33:15.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:33:15.303" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 10%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 12:33:15.303" starttime="20170725 12:33:15.303"></status>
</kw>
<msg timestamp="20170725 12:33:15.304" level="INFO">${data} = {u'status': u'Flashing: 10%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 12:33:15.304" starttime="20170725 12:33:13.716"></status>
</kw>
<msg timestamp="20170725 12:33:15.304" level="INFO">${status} = Flashing: 10%</msg>
<status status="PASS" endtime="20170725 12:33:15.304" starttime="20170725 12:33:13.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:33:15.305" level="FAIL">Flashing: 10% != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:33:15.305" starttime="20170725 12:33:15.304"></status>
</kw>
<status status="FAIL" endtime="20170725 12:33:15.305" starttime="20170725 12:33:13.715"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:33:25.310" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:33:25.310" starttime="20170725 12:33:25.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:33:25.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:33:25.311" starttime="20170725 12:33:25.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:33:25.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:33:25.311" starttime="20170725 12:33:25.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:33:25.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:33:25.312" starttime="20170725 12:33:25.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:33:25.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:33:25.493" starttime="20170725 12:33:25.313"></status>
</kw>
<msg timestamp="20170725 12:33:25.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:33:25.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:25.493" starttime="20170725 12:33:25.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:33:25.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:25.494" starttime="20170725 12:33:25.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:25.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:25.495" starttime="20170725 12:33:25.494"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:25.495" starttime="20170725 12:33:25.308"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:25.495" starttime="20170725 12:33:25.308"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:25.495" starttime="20170725 12:33:25.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:33:25.496" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:33:25.496" starttime="20170725 12:33:25.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:25.496" starttime="20170725 12:33:25.496"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:33:25.579" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:33:25.579" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:25.579" starttime="20170725 12:33:25.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:25.580" starttime="20170725 12:33:25.580"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:33:25.580" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:33:25.580" starttime="20170725 12:33:25.580"></status>
</kw>
<msg timestamp="20170725 12:33:25.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:25.581" starttime="20170725 12:33:25.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:25.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:25.581" starttime="20170725 12:33:25.581"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:33:25.582" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 24%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:33:25.582" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:33:25.582" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 24%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 12:33:25.582" starttime="20170725 12:33:25.582"></status>
</kw>
<msg timestamp="20170725 12:33:25.582" level="INFO">${data} = {u'status': u'Flashing: 24%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 12:33:25.583" starttime="20170725 12:33:25.306"></status>
</kw>
<msg timestamp="20170725 12:33:25.583" level="INFO">${status} = Flashing: 24%</msg>
<status status="PASS" endtime="20170725 12:33:25.583" starttime="20170725 12:33:25.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:33:25.583" level="FAIL">Flashing: 24% != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:33:25.583" starttime="20170725 12:33:25.583"></status>
</kw>
<status status="FAIL" endtime="20170725 12:33:25.584" starttime="20170725 12:33:25.305"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:33:35.589" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:33:35.589" starttime="20170725 12:33:35.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:33:35.590" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:33:35.590" starttime="20170725 12:33:35.590"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:33:35.591" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:33:35.591" starttime="20170725 12:33:35.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:33:35.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:33:35.591" starttime="20170725 12:33:35.591"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:33:37.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:33:37.148" starttime="20170725 12:33:35.592"></status>
</kw>
<msg timestamp="20170725 12:33:37.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:33:37.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:37.148" starttime="20170725 12:33:35.592"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:33:37.148" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:37.149" starttime="20170725 12:33:37.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:37.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:37.149" starttime="20170725 12:33:37.149"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:37.149" starttime="20170725 12:33:35.588"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:37.149" starttime="20170725 12:33:35.587"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:37.150" starttime="20170725 12:33:35.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:33:37.150" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:33:37.150" starttime="20170725 12:33:37.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:37.151" starttime="20170725 12:33:37.151"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:33:37.231" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:33:37.231" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:37.231" starttime="20170725 12:33:37.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:37.232" starttime="20170725 12:33:37.231"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:33:37.232" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:33:37.232" starttime="20170725 12:33:37.232"></status>
</kw>
<msg timestamp="20170725 12:33:37.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:37.233" starttime="20170725 12:33:35.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:37.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:37.233" starttime="20170725 12:33:37.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:33:37.234" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 41%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:33:37.234" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:33:37.234" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 41%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 12:33:37.234" starttime="20170725 12:33:37.234"></status>
</kw>
<msg timestamp="20170725 12:33:37.235" level="INFO">${data} = {u'status': u'Flashing: 41%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 12:33:37.235" starttime="20170725 12:33:35.585"></status>
</kw>
<msg timestamp="20170725 12:33:37.235" level="INFO">${status} = Flashing: 41%</msg>
<status status="PASS" endtime="20170725 12:33:37.235" starttime="20170725 12:33:35.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:33:37.236" level="FAIL">Flashing: 41% != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:33:37.236" starttime="20170725 12:33:37.235"></status>
</kw>
<status status="FAIL" endtime="20170725 12:33:37.236" starttime="20170725 12:33:35.584"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:33:47.241" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:33:47.241" starttime="20170725 12:33:47.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:33:47.242" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:33:47.242" starttime="20170725 12:33:47.241"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:33:47.242" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:33:47.242" starttime="20170725 12:33:47.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:33:47.243" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:33:47.243" starttime="20170725 12:33:47.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:33:47.419" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:33:47.419" starttime="20170725 12:33:47.244"></status>
</kw>
<msg timestamp="20170725 12:33:47.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:33:47.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:47.419" starttime="20170725 12:33:47.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:33:47.420" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:47.420" starttime="20170725 12:33:47.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:47.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:47.421" starttime="20170725 12:33:47.420"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:47.421" starttime="20170725 12:33:47.239"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:47.421" starttime="20170725 12:33:47.239"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:47.421" starttime="20170725 12:33:47.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:33:47.422" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:33:47.422" starttime="20170725 12:33:47.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:47.422" starttime="20170725 12:33:47.422"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:33:47.506" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:33:47.506" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:47.506" starttime="20170725 12:33:47.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:47.507" starttime="20170725 12:33:47.506"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:33:47.507" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:33:47.507" starttime="20170725 12:33:47.507"></status>
</kw>
<msg timestamp="20170725 12:33:47.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:47.507" starttime="20170725 12:33:47.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:47.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:47.508" starttime="20170725 12:33:47.508"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:33:47.509" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 55%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:33:47.509" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:33:47.509" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 55%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 12:33:47.509" starttime="20170725 12:33:47.508"></status>
</kw>
<msg timestamp="20170725 12:33:47.509" level="INFO">${data} = {u'status': u'Flashing: 55%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 12:33:47.509" starttime="20170725 12:33:47.237"></status>
</kw>
<msg timestamp="20170725 12:33:47.509" level="INFO">${status} = Flashing: 55%</msg>
<status status="PASS" endtime="20170725 12:33:47.509" starttime="20170725 12:33:47.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:33:47.510" level="FAIL">Flashing: 55% != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:33:47.510" starttime="20170725 12:33:47.510"></status>
</kw>
<status status="FAIL" endtime="20170725 12:33:47.510" starttime="20170725 12:33:47.236"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:33:57.515" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:33:57.516" starttime="20170725 12:33:57.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:33:57.516" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:33:57.516" starttime="20170725 12:33:57.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:33:57.517" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:33:57.517" starttime="20170725 12:33:57.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:33:57.517" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:33:57.518" starttime="20170725 12:33:57.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:33:57.697" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:33:57.697" starttime="20170725 12:33:57.518"></status>
</kw>
<msg timestamp="20170725 12:33:57.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:33:57.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:57.697" starttime="20170725 12:33:57.518"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:33:57.698" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:57.698" starttime="20170725 12:33:57.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:57.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:57.699" starttime="20170725 12:33:57.698"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:57.699" starttime="20170725 12:33:57.514"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:57.699" starttime="20170725 12:33:57.513"></status>
</kw>
<status status="PASS" endtime="20170725 12:33:57.699" starttime="20170725 12:33:57.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:33:57.700" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:33:57.700" starttime="20170725 12:33:57.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:57.700" starttime="20170725 12:33:57.700"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:33:57.797" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:33:57.797" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:57.797" starttime="20170725 12:33:57.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:33:57.798" starttime="20170725 12:33:57.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:33:57.798" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:33:57.798" starttime="20170725 12:33:57.798"></status>
</kw>
<msg timestamp="20170725 12:33:57.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:33:57.799" starttime="20170725 12:33:57.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:33:57.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:33:57.799" starttime="20170725 12:33:57.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:33:57.800" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 11%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:33:57.800" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:33:57.800" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 11%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 12:33:57.800" starttime="20170725 12:33:57.800"></status>
</kw>
<msg timestamp="20170725 12:33:57.801" level="INFO">${data} = {u'status': u'Flashing: 11%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 12:33:57.801" starttime="20170725 12:33:57.512"></status>
</kw>
<msg timestamp="20170725 12:33:57.801" level="INFO">${status} = Flashing: 11%</msg>
<status status="PASS" endtime="20170725 12:33:57.801" starttime="20170725 12:33:57.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 12:33:57.802" level="FAIL">Flashing: 11% != Flash Done</msg>
<status status="FAIL" endtime="20170725 12:33:57.802" starttime="20170725 12:33:57.801"></status>
</kw>
<status status="FAIL" endtime="20170725 12:33:57.802" starttime="20170725 12:33:57.511"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:07.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:07.807" starttime="20170725 12:34:07.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:07.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:07.808" starttime="20170725 12:34:07.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:07.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:07.809" starttime="20170725 12:34:07.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:07.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:07.809" starttime="20170725 12:34:07.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:07.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:07.988" starttime="20170725 12:34:07.810"></status>
</kw>
<msg timestamp="20170725 12:34:07.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:07.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:07.988" starttime="20170725 12:34:07.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:07.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:07.989" starttime="20170725 12:34:07.988"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:07.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:07.989" starttime="20170725 12:34:07.989"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:07.990" starttime="20170725 12:34:07.805"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:07.990" starttime="20170725 12:34:07.805"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:07.990" starttime="20170725 12:34:07.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:07.990" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 12:34:07.990" starttime="20170725 12:34:07.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:07.991" starttime="20170725 12:34:07.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:08.072" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 12:34:08.073" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:08.073" starttime="20170725 12:34:07.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:08.074" starttime="20170725 12:34:08.073"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:08.074" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:08.074" starttime="20170725 12:34:08.074"></status>
</kw>
<msg timestamp="20170725 12:34:08.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:08.075" starttime="20170725 12:34:07.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:08.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:08.076" starttime="20170725 12:34:08.075"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:08.077" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flash Done"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:08.077" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:08.077" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path':...</msg>
<status status="PASS" endtime="20170725 12:34:08.077" starttime="20170725 12:34:08.076"></status>
</kw>
<msg timestamp="20170725 12:34:08.077" level="INFO">${data} = {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flash...</msg>
<status status="PASS" endtime="20170725 12:34:08.077" starttime="20170725 12:34:07.803"></status>
</kw>
<msg timestamp="20170725 12:34:08.078" level="INFO">${status} = Flash Done</msg>
<status status="PASS" endtime="20170725 12:34:08.078" starttime="20170725 12:34:07.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:08.079" starttime="20170725 12:34:08.078"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:08.079" starttime="20170725 12:34:07.802"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:08.079" starttime="20170725 12:30:37.429"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:08.079" starttime="20170725 12:30:37.420"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:08.079" starttime="20170725 12:29:58.082"></status>
</kw>
<kw name="Verify PNOR Update" library="utils">
<doc>Verify that the PNOR is not corrupted.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170725 12:34:08.082" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170725 12:34:08.082" starttime="20170725 12:34:08.081"></status>
</kw>
<msg timestamp="20170725 12:34:08.082" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170725 12:34:08.082" starttime="20170725 12:34:08.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:08.083" starttime="20170725 12:34:08.083"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:08.083" starttime="20170725 12:34:08.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:08.084" starttime="20170725 12:34:08.083"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170725 12:34:08.085" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170725 12:34:08.085" starttime="20170725 12:34:08.085"></status>
</kw>
<msg timestamp="20170725 12:34:08.085" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170725 12:34:08.085" starttime="20170725 12:34:08.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:08.087" starttime="20170725 12:34:08.087"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:08.087" starttime="20170725 12:34:08.086"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:08.087" starttime="20170725 12:34:08.086"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170725 12:34:08.088" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170725 12:34:09.781" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170725 12:34:09.781" starttime="20170725 12:34:08.087"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:09.781" starttime="20170725 12:34:08.080"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${pflash_cmd}</arg>
</arguments>
<assign>
<var>${pnor_info}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:34:09.783" level="INFO">Executing command '/usr/sbin/pflash -r /dev/stdout -P VERSION'.</msg>
<msg timestamp="20170725 12:34:09.880" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 12:34:09.880" level="INFO">${stdout} = Reading to "/dev/stdout" from 0x02820000..0x02821000 !
[                                                  ] 0%IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2...</msg>
<msg timestamp="20170725 12:34:09.880" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:34:09.880" starttime="20170725 12:34:09.782"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 12:34:09.880" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 12:34:09.881" starttime="20170725 12:34:09.880"></status>
</kw>
<msg timestamp="20170725 12:34:09.881" level="INFO">${pnor_info} = Reading to "/dev/stdout" from 0x02820000..0x02821000 !
[                                                  ] 0%IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2...</msg>
<status status="PASS" endtime="20170725 12:34:09.881" starttime="20170725 12:34:09.782"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${pnor_info}</arg>
<arg>Flash header not found</arg>
<arg>Error</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:09.881" starttime="20170725 12:34:09.881"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:09.882" starttime="20170725 12:34:08.080"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170725 12:34:09.883" starttime="20170725 12:34:09.883"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:09.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:09.901" starttime="20170725 12:34:09.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:09.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:09.902" starttime="20170725 12:34:09.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:09.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:09.903" starttime="20170725 12:34:09.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:09.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:09.903" starttime="20170725 12:34:09.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.108" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:10.108" starttime="20170725 12:34:09.905"></status>
</kw>
<msg timestamp="20170725 12:34:10.108" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:10.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:10.108" starttime="20170725 12:34:09.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.109" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:10.109" starttime="20170725 12:34:10.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:10.109" starttime="20170725 12:34:10.109"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.109" starttime="20170725 12:34:09.897"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.110" starttime="20170725 12:34:09.897"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.110" starttime="20170725 12:34:09.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:10.110" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:34:10.110" starttime="20170725 12:34:10.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.111" starttime="20170725 12:34:10.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:10.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:10.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:10.174" starttime="20170725 12:34:10.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.175" starttime="20170725 12:34:10.174"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:10.175" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:10.175" starttime="20170725 12:34:10.175"></status>
</kw>
<msg timestamp="20170725 12:34:10.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:10.175" starttime="20170725 12:34:09.895"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:10.176" starttime="20170725 12:34:10.176"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:10.177" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:10.177" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:10.177" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 12:34:10.177" starttime="20170725 12:34:10.176"></status>
</kw>
<msg timestamp="20170725 12:34:10.177" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 12:34:10.177" starttime="20170725 12:34:09.894"></status>
</kw>
<msg timestamp="20170725 12:34:10.178" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170725 12:34:10.178" starttime="20170725 12:34:09.894"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170725 12:34:10.179" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170725 12:34:10.179" starttime="20170725 12:34:10.178"></status>
</kw>
<msg timestamp="20170725 12:34:10.179" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:34:10.179" starttime="20170725 12:34:10.178"></status>
</kw>
<msg timestamp="20170725 12:34:10.179" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:34:10.179" starttime="20170725 12:34:09.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.180" starttime="20170725 12:34:10.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.180" starttime="20170725 12:34:10.180"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170725 12:34:10.181" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170725 12:34:10.181" starttime="20170725 12:34:10.181"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170725 12:34:10.182" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170725 12:34:10.182" starttime="20170725 12:34:10.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.183" starttime="20170725 12:34:10.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.183" starttime="20170725 12:34:10.183"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.184" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170725 12:34:10.184" starttime="20170725 12:34:10.184"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.185" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170725 12:34:10.185" starttime="20170725 12:34:10.185"></status>
</kw>
<msg timestamp="20170725 12:34:10.186" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170725 12:34:10.186" starttime="20170725 12:34:10.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.186" starttime="20170725 12:34:10.186"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.187" starttime="20170725 12:34:10.186"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:34:10.189" level="INFO">${cur_time} = 2017-07-25 12:34:10:189200</msg>
<status status="PASS" endtime="20170725 12:34:10.189" starttime="20170725 12:34:10.189"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:34:10.190" level="INFO">${cur_time} = 20170725123410189200</msg>
<status status="PASS" endtime="20170725 12:34:10.190" starttime="20170725 12:34:10.190"></status>
</kw>
<msg timestamp="20170725 12:34:10.190" level="INFO">${cur_time} = 20170725123410189200</msg>
<status status="PASS" endtime="20170725 12:34:10.190" starttime="20170725 12:34:10.187"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.191" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:34:10.191" starttime="20170725 12:34:10.191"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.192" starttime="20170725 12:34:10.181"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.192" starttime="20170725 12:34:09.893"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.192" starttime="20170725 12:34:09.884"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.192" starttime="20170725 12:34:09.882"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170725 12:34:10.192" critical="yes" starttime="20170725 12:29:54.296"></status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<kw name="Validate Power On">
<doc>Power the host on, and validate that the sytem booted.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Start SOL Console Logging</arg>
</arguments>
<kw name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170725 12:34:10.208" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:34:10.208" starttime="20170725 12:34:10.207"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170725 12:34:10.209" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:34:10.209" starttime="20170725 12:34:10.208"></status>
</kw>
<msg timestamp="20170725 12:34:10.210" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:34:10.210" starttime="20170725 12:34:10.207"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170725 12:34:10.211" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:34:10.211" starttime="20170725 12:34:10.211"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170725 12:34:10.212" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:34:10.212" starttime="20170725 12:34:10.212"></status>
</kw>
<msg timestamp="20170725 12:34:10.212" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:34:10.212" starttime="20170725 12:34:10.210"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:34:10.213" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170725 12:34:10.213" starttime="20170725 12:34:10.213"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.214" starttime="20170725 12:34:10.214"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:34:10.218" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:34:10.224" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 12:34:10.225" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170725 12:34:10.225" starttime="20170725 12:34:10.214"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.229" starttime="20170725 12:34:10.227"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.230" starttime="20170725 12:34:10.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:34:10.230" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 12:34:10.230" starttime="20170725 12:34:10.230"></status>
</kw>
<msg timestamp="20170725 12:34:10.231" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 12:34:10.231" starttime="20170725 12:34:10.213"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:34:10.231" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170725 12:34:10.231" starttime="20170725 12:34:10.231"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.232" starttime="20170725 12:34:10.232"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170725 12:34:10.236" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:34:10.257" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 12:34:10.257" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170725 12:34:10.257" starttime="20170725 12:34:10.233"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.262" starttime="20170725 12:34:10.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:34:10.263" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170725 12:34:10.263" starttime="20170725 12:34:10.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.264" starttime="20170725 12:34:10.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:34:10.265" level="INFO">${rc} = None</msg>
<msg timestamp="20170725 12:34:10.265" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170725 12:34:10.265" starttime="20170725 12:34:10.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.266" starttime="20170725 12:34:10.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.268" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status status="FAIL" endtime="20170725 12:34:10.268" starttime="20170725 12:34:10.267"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.268" starttime="20170725 12:34:10.267"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.268" starttime="20170725 12:34:10.266"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:34:10.268" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170725 12:34:10.269" starttime="20170725 12:34:10.268"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170725 12:34:10.269" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170725 12:34:10.269" starttime="20170725 12:34:10.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.314" starttime="20170725 12:34:10.270"></status>
</kw>
<msg timestamp="20170725 12:34:10.315" level="INFO">${rc} = 1</msg>
<msg timestamp="20170725 12:34:10.315" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170725 12:34:10.315" starttime="20170725 12:34:10.270"></status>
</kw>
<msg timestamp="20170725 12:34:10.316" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170725 12:34:10.316" starttime="20170725 12:34:10.210"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.318" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:34:10.318" starttime="20170725 12:34:10.317"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:34:10.319" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170725 12:34:10.319" starttime="20170725 12:34:10.319"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.320" starttime="20170725 12:34:10.320"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:34:10.324" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:34:10.328" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 12:34:10.328" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170725 12:34:10.329" starttime="20170725 12:34:10.321"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.332" starttime="20170725 12:34:10.331"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.333" starttime="20170725 12:34:10.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:34:10.334" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 12:34:10.334" starttime="20170725 12:34:10.334"></status>
</kw>
<msg timestamp="20170725 12:34:10.335" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 12:34:10.335" starttime="20170725 12:34:10.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:34:10.335" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170725 12:34:10.335" starttime="20170725 12:34:10.335"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.336" starttime="20170725 12:34:10.336"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:34:10.342" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170725 12:34:10.345" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 12:34:10.345" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170725 12:34:10.345" starttime="20170725 12:34:10.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:10.349" starttime="20170725 12:34:10.348"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.350" starttime="20170725 12:34:10.206"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:10.350" starttime="20170725 12:34:10.195"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power On</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power On</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170725 12:34:10.365" level="INFO">${boot_stack} = REST Power On</msg>
<msg timestamp="20170725 12:34:10.764" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170725 12:34:10.785" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 12:34:10.785" starttime="20170725 12:34:10.784"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:10.787" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170725 12:34:10.787" starttime="20170725 12:34:10.786"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:10.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:10.795" starttime="20170725 12:34:10.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:10.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:10.796" starttime="20170725 12:34:10.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:10.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:10.797" starttime="20170725 12:34:10.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:10.797" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:10.797" starttime="20170725 12:34:10.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:11.210" starttime="20170725 12:34:10.798"></status>
</kw>
<msg timestamp="20170725 12:34:11.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:11.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.211" starttime="20170725 12:34:10.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.211" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.211" starttime="20170725 12:34:11.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.212" starttime="20170725 12:34:11.212"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.212" starttime="20170725 12:34:10.790"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.212" starttime="20170725 12:34:10.789"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.213" starttime="20170725 12:34:10.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:11.213" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 12:34:11.213" starttime="20170725 12:34:11.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:11.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:11.214" starttime="20170725 12:34:11.213"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:11.214" starttime="20170725 12:34:11.214"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:34:11.216" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 12:34:11.216" starttime="20170725 12:34:11.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:34:11.217" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 12:34:11.217" starttime="20170725 12:34:11.217"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.217" starttime="20170725 12:34:11.216"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.217" starttime="20170725 12:34:11.215"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:11.399" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170725 12:34:11.399" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.399" starttime="20170725 12:34:11.218"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:34:11.400" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:34:11.400" starttime="20170725 12:34:11.400"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:34:11.401" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:34:11.401" starttime="20170725 12:34:11.401"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.401" starttime="20170725 12:34:11.400"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.402" starttime="20170725 12:34:11.399"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:11.403" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:11.403" starttime="20170725 12:34:11.402"></status>
</kw>
<msg timestamp="20170725 12:34:11.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.403" starttime="20170725 12:34:10.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.404" starttime="20170725 12:34:11.404"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170725 12:34:11.405" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:11.405" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:11.405" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170725 12:34:11.405" starttime="20170725 12:34:11.404"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.405" starttime="20170725 12:34:10.786"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:11.409" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:11.409" starttime="20170725 12:34:11.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:11.410" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:11.410" starttime="20170725 12:34:11.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:11.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:11.410" starttime="20170725 12:34:11.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:11.411" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:11.411" starttime="20170725 12:34:11.410"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:11.598" starttime="20170725 12:34:11.412"></status>
</kw>
<msg timestamp="20170725 12:34:11.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:11.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.598" starttime="20170725 12:34:11.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.599" starttime="20170725 12:34:11.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.600" starttime="20170725 12:34:11.599"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.600" starttime="20170725 12:34:11.408"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.600" starttime="20170725 12:34:11.407"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.600" starttime="20170725 12:34:11.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:11.601" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 12:34:11.601" starttime="20170725 12:34:11.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:11.601" starttime="20170725 12:34:11.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:11.709" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170725 12:34:11.709" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.709" starttime="20170725 12:34:11.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:11.710" starttime="20170725 12:34:11.710"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:11.710" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:11.710" starttime="20170725 12:34:11.710"></status>
</kw>
<msg timestamp="20170725 12:34:11.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.711" starttime="20170725 12:34:11.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.711" starttime="20170725 12:34:11.711"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:11.712" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:11.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:11.712" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 12:34:11.712" starttime="20170725 12:34:11.712"></status>
</kw>
<msg timestamp="20170725 12:34:11.712" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170725 12:34:11.712" starttime="20170725 12:34:11.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.713" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.713" starttime="20170725 12:34:11.713"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.713" starttime="20170725 12:34:10.782"></status>
</kw>
<msg timestamp="20170725 12:34:11.728" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 12:34:11.733" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 12:34:11.733" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170725 12:34:11.734" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:11.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:11.770" starttime="20170725 12:34:11.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:11.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:11.771" starttime="20170725 12:34:11.770"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:11.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:11.772" starttime="20170725 12:34:11.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:11.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:11.773" starttime="20170725 12:34:11.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.998" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:11.998" starttime="20170725 12:34:11.773"></status>
</kw>
<msg timestamp="20170725 12:34:11.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:11.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.998" starttime="20170725 12:34:11.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.999" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.999" starttime="20170725 12:34:11.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:11.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:11.999" starttime="20170725 12:34:11.999"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:11.999" starttime="20170725 12:34:11.768"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.000" starttime="20170725 12:34:11.767"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.000" starttime="20170725 12:34:11.766"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:12.000" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:34:12.000" starttime="20170725 12:34:12.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.001" starttime="20170725 12:34:12.001"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:12.063" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:12.063" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.063" starttime="20170725 12:34:12.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.064" starttime="20170725 12:34:12.063"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:12.064" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:12.064" starttime="20170725 12:34:12.064"></status>
</kw>
<msg timestamp="20170725 12:34:12.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.065" starttime="20170725 12:34:11.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.065" starttime="20170725 12:34:12.065"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:12.066" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:12.066" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:12.066" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170725 12:34:12.066" starttime="20170725 12:34:12.066"></status>
</kw>
<msg timestamp="20170725 12:34:12.066" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170725 12:34:12.066" starttime="20170725 12:34:11.764"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.067" starttime="20170725 12:34:11.762"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:12.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:12.071" starttime="20170725 12:34:12.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:12.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:12.071" starttime="20170725 12:34:12.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:12.072" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:12.072" starttime="20170725 12:34:12.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:12.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:12.073" starttime="20170725 12:34:12.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.251" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:12.251" starttime="20170725 12:34:12.074"></status>
</kw>
<msg timestamp="20170725 12:34:12.251" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:12.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.251" starttime="20170725 12:34:12.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.252" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.252" starttime="20170725 12:34:12.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.253" starttime="20170725 12:34:12.252"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.253" starttime="20170725 12:34:12.070"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.253" starttime="20170725 12:34:12.069"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.253" starttime="20170725 12:34:12.069"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:12.254" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 12:34:12.254" starttime="20170725 12:34:12.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.254" starttime="20170725 12:34:12.254"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:12.317" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:12.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.317" starttime="20170725 12:34:12.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.317" starttime="20170725 12:34:12.317"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:12.318" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:12.318" starttime="20170725 12:34:12.318"></status>
</kw>
<msg timestamp="20170725 12:34:12.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.318" starttime="20170725 12:34:12.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.319" starttime="20170725 12:34:12.318"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:12.320" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:12.320" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:12.320" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 12:34:12.320" starttime="20170725 12:34:12.319"></status>
</kw>
<msg timestamp="20170725 12:34:12.320" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 12:34:12.320" starttime="20170725 12:34:12.067"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.320" starttime="20170725 12:34:12.067"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:12.324" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:12.325" starttime="20170725 12:34:12.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:12.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:12.325" starttime="20170725 12:34:12.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:12.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:12.326" starttime="20170725 12:34:12.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:12.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:12.327" starttime="20170725 12:34:12.326"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.505" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:12.505" starttime="20170725 12:34:12.327"></status>
</kw>
<msg timestamp="20170725 12:34:12.505" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:12.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.505" starttime="20170725 12:34:12.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.506" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.506" starttime="20170725 12:34:12.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.507" starttime="20170725 12:34:12.506"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.507" starttime="20170725 12:34:12.323"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.507" starttime="20170725 12:34:12.323"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.507" starttime="20170725 12:34:12.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:12.508" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:34:12.508" starttime="20170725 12:34:12.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.508" starttime="20170725 12:34:12.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:12.579" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:34:12.579" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.579" starttime="20170725 12:34:12.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.580" starttime="20170725 12:34:12.580"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:12.581" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:12.581" starttime="20170725 12:34:12.580"></status>
</kw>
<msg timestamp="20170725 12:34:12.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.581" starttime="20170725 12:34:12.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.582" starttime="20170725 12:34:12.581"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:12.582" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:12.582" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:12.582" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:34:12.582" starttime="20170725 12:34:12.582"></status>
</kw>
<msg timestamp="20170725 12:34:12.583" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:34:12.583" starttime="20170725 12:34:12.321"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.583" starttime="20170725 12:34:12.321"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:12.587" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:12.587" starttime="20170725 12:34:12.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:12.587" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:12.587" starttime="20170725 12:34:12.587"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:12.588" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:12.588" starttime="20170725 12:34:12.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:12.589" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:12.589" starttime="20170725 12:34:12.588"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.807" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:12.807" starttime="20170725 12:34:12.590"></status>
</kw>
<msg timestamp="20170725 12:34:12.807" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:12.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.808" starttime="20170725 12:34:12.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.808" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.808" starttime="20170725 12:34:12.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.809" starttime="20170725 12:34:12.808"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.809" starttime="20170725 12:34:12.586"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.809" starttime="20170725 12:34:12.585"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.809" starttime="20170725 12:34:12.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:12.810" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:34:12.810" starttime="20170725 12:34:12.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.811" starttime="20170725 12:34:12.810"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:12.895" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:12.895" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.895" starttime="20170725 12:34:12.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:12.896" starttime="20170725 12:34:12.896"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:12.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:12.897" starttime="20170725 12:34:12.896"></status>
</kw>
<msg timestamp="20170725 12:34:12.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.897" starttime="20170725 12:34:12.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:12.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:12.898" starttime="20170725 12:34:12.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:12.898" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:12.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:12.898" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 12:34:12.898" starttime="20170725 12:34:12.898"></status>
</kw>
<msg timestamp="20170725 12:34:12.899" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 12:34:12.899" starttime="20170725 12:34:12.584"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:12.899" starttime="20170725 12:34:12.583"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>REST Power On</arg>
</arguments>
<msg timestamp="20170725 12:34:12.905" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 12:34:12.921" level="INFO">${QUIET} = 1</msg>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<arguments>
<arg>wait=${0}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170725 12:34:12.922" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170725 12:34:12.922" starttime="20170725 12:34:12.922"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:12.924" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170725 12:34:12.924" starttime="20170725 12:34:12.923"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:12.927" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:12.927" starttime="20170725 12:34:12.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:12.928" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:12.928" starttime="20170725 12:34:12.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:12.928" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:12.928" starttime="20170725 12:34:12.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:12.929" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:12.929" starttime="20170725 12:34:12.929"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:13.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:13.114" starttime="20170725 12:34:12.930"></status>
</kw>
<msg timestamp="20170725 12:34:13.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:13.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:13.114" starttime="20170725 12:34:12.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:13.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:13.114" starttime="20170725 12:34:13.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:13.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:13.115" starttime="20170725 12:34:13.115"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.115" starttime="20170725 12:34:12.925"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.115" starttime="20170725 12:34:12.925"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.115" starttime="20170725 12:34:12.924"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:13.116" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170725 12:34:13.116" starttime="20170725 12:34:13.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:13.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:13.117" starttime="20170725 12:34:13.116"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:13.117" starttime="20170725 12:34:13.117"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:34:13.119" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Typ...</msg>
<status status="PASS" endtime="20170725 12:34:13.119" starttime="20170725 12:34:13.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:34:13.120" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 12:34:13.120" starttime="20170725 12:34:13.119"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.120" starttime="20170725 12:34:13.119"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.120" starttime="20170725 12:34:13.117"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:13.320" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170725 12:34:13.320" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:13.320" starttime="20170725 12:34:13.121"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:34:13.322" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:34:13.322" starttime="20170725 12:34:13.321"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:34:13.326" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:34:13.326" starttime="20170725 12:34:13.322"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.326" starttime="20170725 12:34:13.322"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.326" starttime="20170725 12:34:13.321"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:13.327" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:13.327" starttime="20170725 12:34:13.327"></status>
</kw>
<msg timestamp="20170725 12:34:13.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:13.327" starttime="20170725 12:34:12.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:13.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:13.328" starttime="20170725 12:34:13.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170725 12:34:13.329" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:13.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:13.329" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170725 12:34:13.329" starttime="20170725 12:34:13.328"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.329" starttime="20170725 12:34:12.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170725 12:34:13.330" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 12:34:13.330" starttime="20170725 12:34:13.330"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.330" starttime="20170725 12:34:13.329"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:13.330" starttime="20170725 12:34:12.921"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:13.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:13.345" starttime="20170725 12:34:13.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:13.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:13.345" starttime="20170725 12:34:13.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:13.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:13.346" starttime="20170725 12:34:13.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:13.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:13.346" starttime="20170725 12:34:13.346"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:14.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:14.113" starttime="20170725 12:34:13.347"></status>
</kw>
<msg timestamp="20170725 12:34:14.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:14.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:14.113" starttime="20170725 12:34:13.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:14.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:14.114" starttime="20170725 12:34:14.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:14.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:14.115" starttime="20170725 12:34:14.115"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:14.115" starttime="20170725 12:34:13.343"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:14.115" starttime="20170725 12:34:13.343"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:14.115" starttime="20170725 12:34:13.342"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:14.116" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:34:14.116" starttime="20170725 12:34:14.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:14.117" starttime="20170725 12:34:14.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:14.180" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:14.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:14.180" starttime="20170725 12:34:14.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:14.181" starttime="20170725 12:34:14.180"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:14.181" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:14.181" starttime="20170725 12:34:14.181"></status>
</kw>
<msg timestamp="20170725 12:34:14.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:14.181" starttime="20170725 12:34:13.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:14.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:14.182" starttime="20170725 12:34:14.182"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:14.183" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:14.183" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:14.183" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170725 12:34:14.183" starttime="20170725 12:34:14.182"></status>
</kw>
<msg timestamp="20170725 12:34:14.183" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170725 12:34:14.183" starttime="20170725 12:34:13.341"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:14.183" starttime="20170725 12:34:13.341"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:14.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:14.188" starttime="20170725 12:34:14.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:14.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:14.188" starttime="20170725 12:34:14.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:14.189" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:14.189" starttime="20170725 12:34:14.188"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:14.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:14.190" starttime="20170725 12:34:14.189"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:16.023" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:16.023" starttime="20170725 12:34:14.190"></status>
</kw>
<msg timestamp="20170725 12:34:16.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:16.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:16.023" starttime="20170725 12:34:14.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:16.024" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:16.024" starttime="20170725 12:34:16.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:16.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:16.025" starttime="20170725 12:34:16.024"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:16.025" starttime="20170725 12:34:14.186"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:16.025" starttime="20170725 12:34:14.186"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:16.025" starttime="20170725 12:34:14.185"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:16.026" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 12:34:16.026" starttime="20170725 12:34:16.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:16.026" starttime="20170725 12:34:16.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:17.018" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:17.019" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:17.019" starttime="20170725 12:34:16.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:17.019" starttime="20170725 12:34:17.019"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:17.020" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:17.020" starttime="20170725 12:34:17.020"></status>
</kw>
<msg timestamp="20170725 12:34:17.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:17.020" starttime="20170725 12:34:14.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:17.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:17.021" starttime="20170725 12:34:17.020"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:17.021" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:17.021" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:17.022" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 12:34:17.022" starttime="20170725 12:34:17.021"></status>
</kw>
<msg timestamp="20170725 12:34:17.022" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 12:34:17.022" starttime="20170725 12:34:14.184"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:17.022" starttime="20170725 12:34:14.184"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:17.026" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:17.026" starttime="20170725 12:34:17.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:17.027" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:17.027" starttime="20170725 12:34:17.026"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:17.027" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:17.027" starttime="20170725 12:34:17.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:17.028" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:17.028" starttime="20170725 12:34:17.028"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:17.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:17.809" starttime="20170725 12:34:17.029"></status>
</kw>
<msg timestamp="20170725 12:34:17.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:17.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:17.809" starttime="20170725 12:34:17.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:17.810" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:17.810" starttime="20170725 12:34:17.809"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:17.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:17.810" starttime="20170725 12:34:17.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:17.810" starttime="20170725 12:34:17.025"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:17.810" starttime="20170725 12:34:17.025"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:17.811" starttime="20170725 12:34:17.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:17.811" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:34:17.811" starttime="20170725 12:34:17.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:17.812" starttime="20170725 12:34:17.812"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:22.858" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:34:22.858" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:22.858" starttime="20170725 12:34:17.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:22.859" starttime="20170725 12:34:22.858"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:22.859" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:22.859" starttime="20170725 12:34:22.859"></status>
</kw>
<msg timestamp="20170725 12:34:22.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:22.859" starttime="20170725 12:34:17.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:22.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:22.860" starttime="20170725 12:34:22.860"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:22.861" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:22.861" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:22.861" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:34:22.861" starttime="20170725 12:34:22.860"></status>
</kw>
<msg timestamp="20170725 12:34:22.861" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:34:22.861" starttime="20170725 12:34:17.023"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:22.861" starttime="20170725 12:34:17.022"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:22.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:22.865" starttime="20170725 12:34:22.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:22.866" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:22.866" starttime="20170725 12:34:22.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:22.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:22.867" starttime="20170725 12:34:22.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:22.867" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:22.867" starttime="20170725 12:34:22.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:23.237" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:23.237" starttime="20170725 12:34:22.868"></status>
</kw>
<msg timestamp="20170725 12:34:23.237" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:23.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:23.237" starttime="20170725 12:34:22.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:23.237" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:23.238" starttime="20170725 12:34:23.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:23.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:23.238" starttime="20170725 12:34:23.238"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:23.238" starttime="20170725 12:34:22.864"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:23.238" starttime="20170725 12:34:22.864"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:23.238" starttime="20170725 12:34:22.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:23.239" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:34:23.239" starttime="20170725 12:34:23.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:23.240" starttime="20170725 12:34:23.239"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:23.877" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:23.877" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:23.877" starttime="20170725 12:34:23.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:23.878" starttime="20170725 12:34:23.877"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:23.878" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:23.878" starttime="20170725 12:34:23.878"></status>
</kw>
<msg timestamp="20170725 12:34:23.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:23.878" starttime="20170725 12:34:22.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:23.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:23.879" starttime="20170725 12:34:23.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:23.880" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:23.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:23.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 12:34:23.880" starttime="20170725 12:34:23.879"></status>
</kw>
<msg timestamp="20170725 12:34:23.880" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 12:34:23.880" starttime="20170725 12:34:22.862"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:23.880" starttime="20170725 12:34:22.862"></status>
</kw>
<msg timestamp="20170725 12:34:23.881" level="FAIL">
#(UTC) 2017/07/25 12:34:23.880823 -   10.980295 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170725 12:34:23.881" starttime="20170725 12:34:13.339"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:33.887" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:33.888" starttime="20170725 12:34:33.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:33.888" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:33.888" starttime="20170725 12:34:33.888"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:33.889" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:33.889" starttime="20170725 12:34:33.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:33.890" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:33.890" starttime="20170725 12:34:33.889"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:34.248" starttime="20170725 12:34:33.890"></status>
</kw>
<msg timestamp="20170725 12:34:34.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:34.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.248" starttime="20170725 12:34:33.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.249" starttime="20170725 12:34:34.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.250" starttime="20170725 12:34:34.249"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.250" starttime="20170725 12:34:33.886"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.250" starttime="20170725 12:34:33.886"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.250" starttime="20170725 12:34:33.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:34.251" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:34:34.251" starttime="20170725 12:34:34.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:34.251" starttime="20170725 12:34:34.251"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:34.535" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:34.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.535" starttime="20170725 12:34:34.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:34.536" starttime="20170725 12:34:34.536"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:34.537" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:34.537" starttime="20170725 12:34:34.536"></status>
</kw>
<msg timestamp="20170725 12:34:34.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.537" starttime="20170725 12:34:33.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.538" starttime="20170725 12:34:34.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:34.538" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:34.538" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:34.538" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:34:34.538" starttime="20170725 12:34:34.538"></status>
</kw>
<msg timestamp="20170725 12:34:34.539" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:34:34.539" starttime="20170725 12:34:33.884"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.539" starttime="20170725 12:34:33.884"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:34.543" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:34.543" starttime="20170725 12:34:34.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:34.544" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:34.544" starttime="20170725 12:34:34.544"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:34.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:34.545" starttime="20170725 12:34:34.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:34.545" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:34.545" starttime="20170725 12:34:34.545"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.731" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:34.731" starttime="20170725 12:34:34.546"></status>
</kw>
<msg timestamp="20170725 12:34:34.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:34.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.732" starttime="20170725 12:34:34.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.732" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.733" starttime="20170725 12:34:34.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.733" starttime="20170725 12:34:34.733"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.734" starttime="20170725 12:34:34.542"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.734" starttime="20170725 12:34:34.542"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.734" starttime="20170725 12:34:34.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:34.734" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 12:34:34.734" starttime="20170725 12:34:34.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:34.735" starttime="20170725 12:34:34.735"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:34.883" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:34.883" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.883" starttime="20170725 12:34:34.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:34.884" starttime="20170725 12:34:34.883"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:34.884" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:34.884" starttime="20170725 12:34:34.884"></status>
</kw>
<msg timestamp="20170725 12:34:34.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.884" starttime="20170725 12:34:34.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:34.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:34.885" starttime="20170725 12:34:34.885"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:34.886" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:34.886" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:34.886" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 12:34:34.886" starttime="20170725 12:34:34.885"></status>
</kw>
<msg timestamp="20170725 12:34:34.886" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 12:34:34.886" starttime="20170725 12:34:34.540"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:34.886" starttime="20170725 12:34:34.539"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:34.890" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:34.891" starttime="20170725 12:34:34.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:34.891" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:34.891" starttime="20170725 12:34:34.891"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:34.892" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:34.892" starttime="20170725 12:34:34.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:34.893" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:34.893" starttime="20170725 12:34:34.892"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:35.076" starttime="20170725 12:34:34.893"></status>
</kw>
<msg timestamp="20170725 12:34:35.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:35.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.076" starttime="20170725 12:34:34.893"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.077" starttime="20170725 12:34:35.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.078" starttime="20170725 12:34:35.077"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.078" starttime="20170725 12:34:34.889"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.078" starttime="20170725 12:34:34.889"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.078" starttime="20170725 12:34:34.888"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:35.078" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:34:35.079" starttime="20170725 12:34:35.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:35.079" starttime="20170725 12:34:35.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:35.145" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:34:35.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.145" starttime="20170725 12:34:35.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:35.145" starttime="20170725 12:34:35.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:35.146" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:35.146" starttime="20170725 12:34:35.146"></status>
</kw>
<msg timestamp="20170725 12:34:35.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.146" starttime="20170725 12:34:34.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.147" starttime="20170725 12:34:35.146"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:35.147" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:35.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:35.148" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:34:35.148" starttime="20170725 12:34:35.147"></status>
</kw>
<msg timestamp="20170725 12:34:35.148" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:34:35.148" starttime="20170725 12:34:34.887"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.148" starttime="20170725 12:34:34.887"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:35.152" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:35.152" starttime="20170725 12:34:35.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:35.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:35.153" starttime="20170725 12:34:35.153"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:35.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:35.153" starttime="20170725 12:34:35.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:35.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:35.154" starttime="20170725 12:34:35.154"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.347" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:35.347" starttime="20170725 12:34:35.155"></status>
</kw>
<msg timestamp="20170725 12:34:35.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:35.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.347" starttime="20170725 12:34:35.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.348" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.348" starttime="20170725 12:34:35.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.349" starttime="20170725 12:34:35.348"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.349" starttime="20170725 12:34:35.151"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.349" starttime="20170725 12:34:35.151"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.349" starttime="20170725 12:34:35.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:35.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:34:35.349" starttime="20170725 12:34:35.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:35.350" starttime="20170725 12:34:35.350"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:35.442" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:35.442" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.442" starttime="20170725 12:34:35.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:35.442" starttime="20170725 12:34:35.442"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:35.443" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:35.443" starttime="20170725 12:34:35.443"></status>
</kw>
<msg timestamp="20170725 12:34:35.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.443" starttime="20170725 12:34:35.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.444" starttime="20170725 12:34:35.443"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:35.444" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:35.444" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:35.445" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 12:34:35.445" starttime="20170725 12:34:35.444"></status>
</kw>
<msg timestamp="20170725 12:34:35.445" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 12:34:35.445" starttime="20170725 12:34:35.149"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.445" starttime="20170725 12:34:35.148"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.445" starttime="20170725 12:34:33.882"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:35.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:35.459" starttime="20170725 12:34:35.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:35.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:35.460" starttime="20170725 12:34:35.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:35.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:35.461" starttime="20170725 12:34:35.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:35.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:35.462" starttime="20170725 12:34:35.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.681" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:35.681" starttime="20170725 12:34:35.463"></status>
</kw>
<msg timestamp="20170725 12:34:35.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:35.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.681" starttime="20170725 12:34:35.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.682" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.682" starttime="20170725 12:34:35.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.683" starttime="20170725 12:34:35.682"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.683" starttime="20170725 12:34:35.458"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.683" starttime="20170725 12:34:35.458"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.683" starttime="20170725 12:34:35.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:35.684" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:34:35.684" starttime="20170725 12:34:35.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:35.684" starttime="20170725 12:34:35.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:35.747" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:35.747" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.747" starttime="20170725 12:34:35.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:35.747" starttime="20170725 12:34:35.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:35.748" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:35.748" starttime="20170725 12:34:35.748"></status>
</kw>
<msg timestamp="20170725 12:34:35.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.748" starttime="20170725 12:34:35.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.749" starttime="20170725 12:34:35.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:35.749" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:35.749" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:35.750" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:34:35.750" starttime="20170725 12:34:35.749"></status>
</kw>
<msg timestamp="20170725 12:34:35.750" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:34:35.750" starttime="20170725 12:34:35.456"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.750" starttime="20170725 12:34:35.455"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:35.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:35.754" starttime="20170725 12:34:35.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:35.755" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:35.755" starttime="20170725 12:34:35.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:35.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:35.756" starttime="20170725 12:34:35.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:35.756" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:35.756" starttime="20170725 12:34:35.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.942" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:35.942" starttime="20170725 12:34:35.757"></status>
</kw>
<msg timestamp="20170725 12:34:35.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:35.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.943" starttime="20170725 12:34:35.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.943" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.943" starttime="20170725 12:34:35.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:35.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:35.944" starttime="20170725 12:34:35.944"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.944" starttime="20170725 12:34:35.753"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.944" starttime="20170725 12:34:35.753"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:35.944" starttime="20170725 12:34:35.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:35.945" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:34:35.945" starttime="20170725 12:34:35.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:35.946" starttime="20170725 12:34:35.945"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:36.013" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:34:36.014" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.014" starttime="20170725 12:34:35.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:36.014" starttime="20170725 12:34:36.014"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:36.015" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:36.015" starttime="20170725 12:34:36.015"></status>
</kw>
<msg timestamp="20170725 12:34:36.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.015" starttime="20170725 12:34:35.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:36.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.016" starttime="20170725 12:34:36.015"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:36.016" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:36.016" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:36.016" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:34:36.016" starttime="20170725 12:34:36.016"></status>
</kw>
<msg timestamp="20170725 12:34:36.017" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:34:36.017" starttime="20170725 12:34:35.751"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:36.017" starttime="20170725 12:34:35.750"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:36.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:36.021" starttime="20170725 12:34:36.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:36.022" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:36.022" starttime="20170725 12:34:36.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:36.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:36.023" starttime="20170725 12:34:36.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:36.023" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:36.023" starttime="20170725 12:34:36.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:36.200" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:36.200" starttime="20170725 12:34:36.024"></status>
</kw>
<msg timestamp="20170725 12:34:36.200" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:36.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.200" starttime="20170725 12:34:36.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:36.201" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.201" starttime="20170725 12:34:36.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:36.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.202" starttime="20170725 12:34:36.201"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:36.202" starttime="20170725 12:34:36.020"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:36.202" starttime="20170725 12:34:36.019"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:36.202" starttime="20170725 12:34:36.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:36.203" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:34:36.203" starttime="20170725 12:34:36.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:36.203" starttime="20170725 12:34:36.203"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:36.281" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:36.281" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.281" starttime="20170725 12:34:36.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:36.281" starttime="20170725 12:34:36.281"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:36.282" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:36.282" starttime="20170725 12:34:36.282"></status>
</kw>
<msg timestamp="20170725 12:34:36.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.282" starttime="20170725 12:34:36.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:36.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:36.283" starttime="20170725 12:34:36.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:36.283" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:36.283" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:36.284" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 12:34:36.284" starttime="20170725 12:34:36.283"></status>
</kw>
<msg timestamp="20170725 12:34:36.284" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 12:34:36.284" starttime="20170725 12:34:36.018"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:36.284" starttime="20170725 12:34:36.017"></status>
</kw>
<msg timestamp="20170725 12:34:36.285" level="FAIL">
#(UTC) 2017/07/25 12:34:36.284444 -   12.403621 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:34:36.285" starttime="20170725 12:34:35.454"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:46.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:46.291" starttime="20170725 12:34:46.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:46.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:46.292" starttime="20170725 12:34:46.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:46.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:46.293" starttime="20170725 12:34:46.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:46.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:46.293" starttime="20170725 12:34:46.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.506" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:46.506" starttime="20170725 12:34:46.294"></status>
</kw>
<msg timestamp="20170725 12:34:46.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:46.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.507" starttime="20170725 12:34:46.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.507" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.507" starttime="20170725 12:34:46.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.508" starttime="20170725 12:34:46.508"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.508" starttime="20170725 12:34:46.290"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.508" starttime="20170725 12:34:46.289"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.508" starttime="20170725 12:34:46.289"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:46.509" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:34:46.509" starttime="20170725 12:34:46.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:46.510" starttime="20170725 12:34:46.509"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:46.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:46.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.581" starttime="20170725 12:34:46.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:46.582" starttime="20170725 12:34:46.582"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:46.582" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:46.582" starttime="20170725 12:34:46.582"></status>
</kw>
<msg timestamp="20170725 12:34:46.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.583" starttime="20170725 12:34:46.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.583" starttime="20170725 12:34:46.583"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:46.584" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:46.584" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:46.584" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:34:46.584" starttime="20170725 12:34:46.584"></status>
</kw>
<msg timestamp="20170725 12:34:46.584" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:34:46.584" starttime="20170725 12:34:46.288"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.585" starttime="20170725 12:34:46.287"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:46.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:46.589" starttime="20170725 12:34:46.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:46.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:46.589" starttime="20170725 12:34:46.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:46.590" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:46.590" starttime="20170725 12:34:46.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:46.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:46.591" starttime="20170725 12:34:46.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:46.816" starttime="20170725 12:34:46.591"></status>
</kw>
<msg timestamp="20170725 12:34:46.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:46.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.816" starttime="20170725 12:34:46.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.817" starttime="20170725 12:34:46.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.818" starttime="20170725 12:34:46.817"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.818" starttime="20170725 12:34:46.588"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.818" starttime="20170725 12:34:46.587"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.818" starttime="20170725 12:34:46.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:46.819" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:34:46.819" starttime="20170725 12:34:46.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:46.820" starttime="20170725 12:34:46.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:46.886" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:34:46.886" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.886" starttime="20170725 12:34:46.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:46.887" starttime="20170725 12:34:46.887"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:46.887" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:46.887" starttime="20170725 12:34:46.887"></status>
</kw>
<msg timestamp="20170725 12:34:46.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.888" starttime="20170725 12:34:46.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:46.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:46.888" starttime="20170725 12:34:46.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:46.889" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:46.889" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:46.889" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:34:46.889" starttime="20170725 12:34:46.889"></status>
</kw>
<msg timestamp="20170725 12:34:46.889" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:34:46.889" starttime="20170725 12:34:46.585"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:46.890" starttime="20170725 12:34:46.585"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:46.893" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:46.894" starttime="20170725 12:34:46.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:46.894" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:46.894" starttime="20170725 12:34:46.894"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:46.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:46.895" starttime="20170725 12:34:46.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:46.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:46.896" starttime="20170725 12:34:46.895"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:47.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:47.089" starttime="20170725 12:34:46.896"></status>
</kw>
<msg timestamp="20170725 12:34:47.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:47.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:47.089" starttime="20170725 12:34:46.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:47.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:47.090" starttime="20170725 12:34:47.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:47.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:47.090" starttime="20170725 12:34:47.090"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:47.090" starttime="20170725 12:34:46.892"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:47.091" starttime="20170725 12:34:46.892"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:47.091" starttime="20170725 12:34:46.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:47.091" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:34:47.091" starttime="20170725 12:34:47.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:47.092" starttime="20170725 12:34:47.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:47.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:47.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:47.174" starttime="20170725 12:34:47.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:47.175" starttime="20170725 12:34:47.174"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:47.175" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:47.175" starttime="20170725 12:34:47.175"></status>
</kw>
<msg timestamp="20170725 12:34:47.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:47.175" starttime="20170725 12:34:46.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:47.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:47.176" starttime="20170725 12:34:47.176"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:47.177" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:47.177" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:47.177" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 12:34:47.177" starttime="20170725 12:34:47.176"></status>
</kw>
<msg timestamp="20170725 12:34:47.177" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 12:34:47.177" starttime="20170725 12:34:46.890"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:47.178" starttime="20170725 12:34:46.890"></status>
</kw>
<msg timestamp="20170725 12:34:47.178" level="FAIL">
#(UTC) 2017/07/25 12:34:47.177776 -   10.893332 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:34:47.178" starttime="20170725 12:34:46.286"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:57.184" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:57.184" starttime="20170725 12:34:57.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:57.185" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:57.185" starttime="20170725 12:34:57.185"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:57.186" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:57.186" starttime="20170725 12:34:57.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:57.186" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:57.186" starttime="20170725 12:34:57.186"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:57.377" starttime="20170725 12:34:57.187"></status>
</kw>
<msg timestamp="20170725 12:34:57.377" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:57.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.377" starttime="20170725 12:34:57.187"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.378" starttime="20170725 12:34:57.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.379" starttime="20170725 12:34:57.378"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.379" starttime="20170725 12:34:57.183"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.379" starttime="20170725 12:34:57.183"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.379" starttime="20170725 12:34:57.182"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:57.379" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:34:57.379" starttime="20170725 12:34:57.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:57.380" starttime="20170725 12:34:57.380"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:57.443" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:57.443" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.443" starttime="20170725 12:34:57.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:57.444" starttime="20170725 12:34:57.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:57.444" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:57.444" starttime="20170725 12:34:57.444"></status>
</kw>
<msg timestamp="20170725 12:34:57.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.444" starttime="20170725 12:34:57.181"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.445" starttime="20170725 12:34:57.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:57.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:57.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:57.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:34:57.446" starttime="20170725 12:34:57.445"></status>
</kw>
<msg timestamp="20170725 12:34:57.446" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:34:57.446" starttime="20170725 12:34:57.181"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.446" starttime="20170725 12:34:57.180"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:57.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:57.451" starttime="20170725 12:34:57.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:57.452" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:57.452" starttime="20170725 12:34:57.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:57.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:57.452" starttime="20170725 12:34:57.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:57.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:57.453" starttime="20170725 12:34:57.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:57.633" starttime="20170725 12:34:57.454"></status>
</kw>
<msg timestamp="20170725 12:34:57.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:57.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.634" starttime="20170725 12:34:57.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.634" starttime="20170725 12:34:57.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.635" starttime="20170725 12:34:57.635"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.635" starttime="20170725 12:34:57.450"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.635" starttime="20170725 12:34:57.449"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.635" starttime="20170725 12:34:57.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:57.636" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:34:57.636" starttime="20170725 12:34:57.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:57.637" starttime="20170725 12:34:57.636"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:57.705" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:34:57.705" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.705" starttime="20170725 12:34:57.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:57.705" starttime="20170725 12:34:57.705"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:57.706" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:57.706" starttime="20170725 12:34:57.706"></status>
</kw>
<msg timestamp="20170725 12:34:57.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.706" starttime="20170725 12:34:57.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.707" starttime="20170725 12:34:57.706"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:57.707" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:57.707" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:57.708" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:34:57.708" starttime="20170725 12:34:57.707"></status>
</kw>
<msg timestamp="20170725 12:34:57.708" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:34:57.708" starttime="20170725 12:34:57.447"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.708" starttime="20170725 12:34:57.447"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:34:57.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:34:57.712" starttime="20170725 12:34:57.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:34:57.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:34:57.713" starttime="20170725 12:34:57.713"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:34:57.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:34:57.714" starttime="20170725 12:34:57.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:34:57.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:34:57.714" starttime="20170725 12:34:57.714"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:34:57.991" starttime="20170725 12:34:57.715"></status>
</kw>
<msg timestamp="20170725 12:34:57.991" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:34:57.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.992" starttime="20170725 12:34:57.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.992" starttime="20170725 12:34:57.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:57.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:57.993" starttime="20170725 12:34:57.993"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.993" starttime="20170725 12:34:57.711"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.993" starttime="20170725 12:34:57.711"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:57.993" starttime="20170725 12:34:57.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:34:57.994" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:34:57.994" starttime="20170725 12:34:57.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:57.995" starttime="20170725 12:34:57.994"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:34:58.057" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:34:58.057" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:58.057" starttime="20170725 12:34:57.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:34:58.058" starttime="20170725 12:34:58.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:34:58.058" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:34:58.059" starttime="20170725 12:34:58.058"></status>
</kw>
<msg timestamp="20170725 12:34:58.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:34:58.059" starttime="20170725 12:34:57.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:34:58.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:34:58.059" starttime="20170725 12:34:58.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:34:58.060" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:34:58.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:34:58.060" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 12:34:58.060" starttime="20170725 12:34:58.060"></status>
</kw>
<msg timestamp="20170725 12:34:58.061" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 12:34:58.061" starttime="20170725 12:34:57.709"></status>
</kw>
<status status="PASS" endtime="20170725 12:34:58.061" starttime="20170725 12:34:57.708"></status>
</kw>
<msg timestamp="20170725 12:34:58.061" level="FAIL">
#(UTC) 2017/07/25 12:34:58.061047 -   10.883271 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:34:58.062" starttime="20170725 12:34:57.179"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:08.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:08.069" starttime="20170725 12:35:08.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:08.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:08.070" starttime="20170725 12:35:08.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:08.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:08.071" starttime="20170725 12:35:08.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:08.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:08.072" starttime="20170725 12:35:08.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:08.248" starttime="20170725 12:35:08.073"></status>
</kw>
<msg timestamp="20170725 12:35:08.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:08.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.248" starttime="20170725 12:35:08.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.249" starttime="20170725 12:35:08.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.250" starttime="20170725 12:35:08.249"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.250" starttime="20170725 12:35:08.068"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.250" starttime="20170725 12:35:08.067"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.250" starttime="20170725 12:35:08.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:08.251" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:35:08.251" starttime="20170725 12:35:08.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:08.251" starttime="20170725 12:35:08.251"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:08.313" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:08.314" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.314" starttime="20170725 12:35:08.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:08.314" starttime="20170725 12:35:08.314"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:08.315" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:08.315" starttime="20170725 12:35:08.315"></status>
</kw>
<msg timestamp="20170725 12:35:08.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.315" starttime="20170725 12:35:08.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.316" starttime="20170725 12:35:08.315"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:08.316" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:08.316" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:08.317" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:35:08.317" starttime="20170725 12:35:08.316"></status>
</kw>
<msg timestamp="20170725 12:35:08.317" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:35:08.317" starttime="20170725 12:35:08.064"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.317" starttime="20170725 12:35:08.064"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:08.321" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:08.321" starttime="20170725 12:35:08.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:08.322" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:08.322" starttime="20170725 12:35:08.322"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:08.323" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:08.323" starttime="20170725 12:35:08.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:08.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:08.323" starttime="20170725 12:35:08.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:08.605" starttime="20170725 12:35:08.324"></status>
</kw>
<msg timestamp="20170725 12:35:08.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:08.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.605" starttime="20170725 12:35:08.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.606" starttime="20170725 12:35:08.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.607" starttime="20170725 12:35:08.606"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.607" starttime="20170725 12:35:08.320"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.607" starttime="20170725 12:35:08.320"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.607" starttime="20170725 12:35:08.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:08.607" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:35:08.607" starttime="20170725 12:35:08.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:08.608" starttime="20170725 12:35:08.608"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:08.750" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:35:08.750" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.750" starttime="20170725 12:35:08.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:08.751" starttime="20170725 12:35:08.751"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:08.752" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:08.752" starttime="20170725 12:35:08.752"></status>
</kw>
<msg timestamp="20170725 12:35:08.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.752" starttime="20170725 12:35:08.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.753" starttime="20170725 12:35:08.752"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:08.753" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:08.754" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:08.754" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:35:08.754" starttime="20170725 12:35:08.753"></status>
</kw>
<msg timestamp="20170725 12:35:08.754" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:35:08.754" starttime="20170725 12:35:08.318"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.754" starttime="20170725 12:35:08.317"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:08.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:08.759" starttime="20170725 12:35:08.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:08.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:08.760" starttime="20170725 12:35:08.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:08.760" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:08.760" starttime="20170725 12:35:08.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:08.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:08.761" starttime="20170725 12:35:08.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.965" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:08.965" starttime="20170725 12:35:08.762"></status>
</kw>
<msg timestamp="20170725 12:35:08.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:08.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.965" starttime="20170725 12:35:08.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.966" starttime="20170725 12:35:08.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:08.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:08.967" starttime="20170725 12:35:08.966"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.967" starttime="20170725 12:35:08.758"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.967" starttime="20170725 12:35:08.758"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:08.967" starttime="20170725 12:35:08.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:08.967" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:35:08.967" starttime="20170725 12:35:08.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:08.968" starttime="20170725 12:35:08.968"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:09.032" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:09.032" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:09.032" starttime="20170725 12:35:08.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:09.033" starttime="20170725 12:35:09.033"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:09.033" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:09.033" starttime="20170725 12:35:09.033"></status>
</kw>
<msg timestamp="20170725 12:35:09.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:09.034" starttime="20170725 12:35:08.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:09.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:09.035" starttime="20170725 12:35:09.034"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:09.035" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:09.035" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:09.035" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:35:09.035" starttime="20170725 12:35:09.035"></status>
</kw>
<msg timestamp="20170725 12:35:09.036" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:35:09.036" starttime="20170725 12:35:08.755"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:09.036" starttime="20170725 12:35:08.755"></status>
</kw>
<msg timestamp="20170725 12:35:09.037" level="FAIL">
#(UTC) 2017/07/25 12:35:09.036221 -   10.975174 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:35:09.037" starttime="20170725 12:35:08.062"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:19.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:19.043" starttime="20170725 12:35:19.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:19.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:19.044" starttime="20170725 12:35:19.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:19.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:19.044" starttime="20170725 12:35:19.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:19.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:19.045" starttime="20170725 12:35:19.045"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:19.259" starttime="20170725 12:35:19.046"></status>
</kw>
<msg timestamp="20170725 12:35:19.259" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:19.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.259" starttime="20170725 12:35:19.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.260" starttime="20170725 12:35:19.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.261" starttime="20170725 12:35:19.260"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.261" starttime="20170725 12:35:19.042"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.261" starttime="20170725 12:35:19.041"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.261" starttime="20170725 12:35:19.041"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:19.262" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:35:19.262" starttime="20170725 12:35:19.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:19.262" starttime="20170725 12:35:19.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:19.326" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:19.326" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.326" starttime="20170725 12:35:19.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:19.327" starttime="20170725 12:35:19.326"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:19.327" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:19.327" starttime="20170725 12:35:19.327"></status>
</kw>
<msg timestamp="20170725 12:35:19.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.328" starttime="20170725 12:35:19.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.328" starttime="20170725 12:35:19.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:19.329" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:19.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:19.329" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:35:19.329" starttime="20170725 12:35:19.329"></status>
</kw>
<msg timestamp="20170725 12:35:19.329" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:35:19.329" starttime="20170725 12:35:19.039"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.330" starttime="20170725 12:35:19.039"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:19.333" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:19.334" starttime="20170725 12:35:19.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:19.334" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:19.334" starttime="20170725 12:35:19.334"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:19.335" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:19.335" starttime="20170725 12:35:19.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:19.336" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:19.336" starttime="20170725 12:35:19.336"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.518" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:19.519" starttime="20170725 12:35:19.337"></status>
</kw>
<msg timestamp="20170725 12:35:19.519" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:19.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.519" starttime="20170725 12:35:19.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.519" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.520" starttime="20170725 12:35:19.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.520" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.520" starttime="20170725 12:35:19.520"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.520" starttime="20170725 12:35:19.333"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.520" starttime="20170725 12:35:19.332"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.521" starttime="20170725 12:35:19.332"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:19.521" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:35:19.521" starttime="20170725 12:35:19.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:19.522" starttime="20170725 12:35:19.522"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:19.587" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:35:19.587" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.587" starttime="20170725 12:35:19.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:19.588" starttime="20170725 12:35:19.588"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:19.588" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:19.588" starttime="20170725 12:35:19.588"></status>
</kw>
<msg timestamp="20170725 12:35:19.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.589" starttime="20170725 12:35:19.331"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.589" starttime="20170725 12:35:19.589"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:19.590" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:19.590" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:19.590" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:35:19.590" starttime="20170725 12:35:19.590"></status>
</kw>
<msg timestamp="20170725 12:35:19.590" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:35:19.590" starttime="20170725 12:35:19.330"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.591" starttime="20170725 12:35:19.330"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:19.594" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:19.595" starttime="20170725 12:35:19.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:19.595" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:19.595" starttime="20170725 12:35:19.595"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:19.596" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:19.596" starttime="20170725 12:35:19.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:19.597" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:19.597" starttime="20170725 12:35:19.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:19.783" starttime="20170725 12:35:19.597"></status>
</kw>
<msg timestamp="20170725 12:35:19.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:19.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.784" starttime="20170725 12:35:19.597"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.784" starttime="20170725 12:35:19.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.785" starttime="20170725 12:35:19.785"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.785" starttime="20170725 12:35:19.593"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.785" starttime="20170725 12:35:19.593"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.785" starttime="20170725 12:35:19.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:19.786" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:35:19.786" starttime="20170725 12:35:19.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:19.787" starttime="20170725 12:35:19.787"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:19.851" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:19.851" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.851" starttime="20170725 12:35:19.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:19.851" starttime="20170725 12:35:19.851"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:19.852" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:19.852" starttime="20170725 12:35:19.852"></status>
</kw>
<msg timestamp="20170725 12:35:19.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.852" starttime="20170725 12:35:19.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:19.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:19.853" starttime="20170725 12:35:19.853"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:19.854" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:19.854" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:19.854" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:35:19.854" starttime="20170725 12:35:19.853"></status>
</kw>
<msg timestamp="20170725 12:35:19.854" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:35:19.854" starttime="20170725 12:35:19.591"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:19.854" starttime="20170725 12:35:19.591"></status>
</kw>
<msg timestamp="20170725 12:35:19.855" level="FAIL">
#(UTC) 2017/07/25 12:35:19.854619 -   10.818398 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:35:19.855" starttime="20170725 12:35:19.037"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:29.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:29.861" starttime="20170725 12:35:29.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:29.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:29.862" starttime="20170725 12:35:29.862"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:29.863" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:29.863" starttime="20170725 12:35:29.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:29.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:29.863" starttime="20170725 12:35:29.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.077" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:30.077" starttime="20170725 12:35:29.864"></status>
</kw>
<msg timestamp="20170725 12:35:30.077" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:30.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.078" starttime="20170725 12:35:29.864"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.078" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.078" starttime="20170725 12:35:30.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.079" starttime="20170725 12:35:30.079"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.079" starttime="20170725 12:35:29.860"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.079" starttime="20170725 12:35:29.860"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.079" starttime="20170725 12:35:29.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:30.080" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:35:30.080" starttime="20170725 12:35:30.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:30.081" starttime="20170725 12:35:30.080"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:30.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:30.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.144" starttime="20170725 12:35:30.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:30.145" starttime="20170725 12:35:30.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:30.145" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:30.146" starttime="20170725 12:35:30.145"></status>
</kw>
<msg timestamp="20170725 12:35:30.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.146" starttime="20170725 12:35:29.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.146" starttime="20170725 12:35:30.146"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:30.147" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:30.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:30.147" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:35:30.147" starttime="20170725 12:35:30.147"></status>
</kw>
<msg timestamp="20170725 12:35:30.147" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:35:30.147" starttime="20170725 12:35:29.858"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.148" starttime="20170725 12:35:29.857"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:30.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:30.152" starttime="20170725 12:35:30.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:30.152" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:30.152" starttime="20170725 12:35:30.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:30.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:30.153" starttime="20170725 12:35:30.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:30.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:30.154" starttime="20170725 12:35:30.153"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:30.336" starttime="20170725 12:35:30.155"></status>
</kw>
<msg timestamp="20170725 12:35:30.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:30.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.336" starttime="20170725 12:35:30.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.337" starttime="20170725 12:35:30.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.338" starttime="20170725 12:35:30.337"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.338" starttime="20170725 12:35:30.151"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.338" starttime="20170725 12:35:30.150"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.338" starttime="20170725 12:35:30.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:30.339" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:35:30.339" starttime="20170725 12:35:30.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:30.339" starttime="20170725 12:35:30.339"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:30.430" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:35:30.430" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.430" starttime="20170725 12:35:30.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:30.431" starttime="20170725 12:35:30.431"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:30.431" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:30.431" starttime="20170725 12:35:30.431"></status>
</kw>
<msg timestamp="20170725 12:35:30.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.432" starttime="20170725 12:35:30.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.432" starttime="20170725 12:35:30.432"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:30.433" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:30.433" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:30.433" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:35:30.433" starttime="20170725 12:35:30.433"></status>
</kw>
<msg timestamp="20170725 12:35:30.433" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:35:30.433" starttime="20170725 12:35:30.148"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.434" starttime="20170725 12:35:30.148"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:30.438" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:30.438" starttime="20170725 12:35:30.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:30.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:30.439" starttime="20170725 12:35:30.438"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:30.439" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:30.439" starttime="20170725 12:35:30.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:30.440" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:30.440" starttime="20170725 12:35:30.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.738" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:30.738" starttime="20170725 12:35:30.441"></status>
</kw>
<msg timestamp="20170725 12:35:30.738" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:30.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.738" starttime="20170725 12:35:30.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.739" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.739" starttime="20170725 12:35:30.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.739" starttime="20170725 12:35:30.739"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.740" starttime="20170725 12:35:30.437"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.740" starttime="20170725 12:35:30.436"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.740" starttime="20170725 12:35:30.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:30.740" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:35:30.740" starttime="20170725 12:35:30.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:30.741" starttime="20170725 12:35:30.741"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:30.803" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:30.803" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.803" starttime="20170725 12:35:30.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:30.804" starttime="20170725 12:35:30.803"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:30.804" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:30.804" starttime="20170725 12:35:30.804"></status>
</kw>
<msg timestamp="20170725 12:35:30.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.804" starttime="20170725 12:35:30.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:30.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:30.805" starttime="20170725 12:35:30.805"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:30.806" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:30.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:30.806" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:35:30.806" starttime="20170725 12:35:30.805"></status>
</kw>
<msg timestamp="20170725 12:35:30.806" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:35:30.806" starttime="20170725 12:35:30.434"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:30.806" starttime="20170725 12:35:30.434"></status>
</kw>
<msg timestamp="20170725 12:35:30.807" level="FAIL">
#(UTC) 2017/07/25 12:35:30.806592 -   10.951973 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:35:30.807" starttime="20170725 12:35:29.856"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:40.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:40.813" starttime="20170725 12:35:40.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:40.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:40.814" starttime="20170725 12:35:40.813"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:40.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:40.815" starttime="20170725 12:35:40.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:40.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:40.816" starttime="20170725 12:35:40.815"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.000" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:41.001" starttime="20170725 12:35:40.817"></status>
</kw>
<msg timestamp="20170725 12:35:41.001" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:41.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.001" starttime="20170725 12:35:40.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.002" starttime="20170725 12:35:41.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.002" starttime="20170725 12:35:41.002"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.002" starttime="20170725 12:35:40.812"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.002" starttime="20170725 12:35:40.811"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.003" starttime="20170725 12:35:40.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:41.003" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:35:41.003" starttime="20170725 12:35:41.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:41.004" starttime="20170725 12:35:41.004"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:41.111" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:41.111" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.111" starttime="20170725 12:35:41.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:41.112" starttime="20170725 12:35:41.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:41.113" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:41.113" starttime="20170725 12:35:41.112"></status>
</kw>
<msg timestamp="20170725 12:35:41.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.113" starttime="20170725 12:35:40.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.114" starttime="20170725 12:35:41.113"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:41.114" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:41.114" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:41.114" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:35:41.114" starttime="20170725 12:35:41.114"></status>
</kw>
<msg timestamp="20170725 12:35:41.115" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:35:41.115" starttime="20170725 12:35:40.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.115" starttime="20170725 12:35:40.809"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:41.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:41.120" starttime="20170725 12:35:41.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:41.121" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:41.121" starttime="20170725 12:35:41.120"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:41.122" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:41.122" starttime="20170725 12:35:41.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:41.123" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:41.123" starttime="20170725 12:35:41.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.398" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:41.398" starttime="20170725 12:35:41.124"></status>
</kw>
<msg timestamp="20170725 12:35:41.398" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:41.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.398" starttime="20170725 12:35:41.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.399" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.399" starttime="20170725 12:35:41.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.399" starttime="20170725 12:35:41.399"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.400" starttime="20170725 12:35:41.118"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.400" starttime="20170725 12:35:41.117"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.400" starttime="20170725 12:35:41.117"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:41.401" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:35:41.401" starttime="20170725 12:35:41.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:41.401" starttime="20170725 12:35:41.401"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:41.468" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:35:41.468" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.468" starttime="20170725 12:35:41.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:41.469" starttime="20170725 12:35:41.469"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:41.469" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:41.470" starttime="20170725 12:35:41.469"></status>
</kw>
<msg timestamp="20170725 12:35:41.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.470" starttime="20170725 12:35:41.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.471" starttime="20170725 12:35:41.470"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:41.471" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:41.471" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:41.471" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:35:41.471" starttime="20170725 12:35:41.471"></status>
</kw>
<msg timestamp="20170725 12:35:41.472" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:35:41.472" starttime="20170725 12:35:41.116"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.472" starttime="20170725 12:35:41.115"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:41.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:41.476" starttime="20170725 12:35:41.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:41.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:41.476" starttime="20170725 12:35:41.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:41.477" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:41.477" starttime="20170725 12:35:41.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:41.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:41.478" starttime="20170725 12:35:41.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.672" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:41.672" starttime="20170725 12:35:41.478"></status>
</kw>
<msg timestamp="20170725 12:35:41.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:41.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.672" starttime="20170725 12:35:41.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.673" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.673" starttime="20170725 12:35:41.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.674" starttime="20170725 12:35:41.673"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.674" starttime="20170725 12:35:41.475"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.674" starttime="20170725 12:35:41.474"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.674" starttime="20170725 12:35:41.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:41.675" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:35:41.675" starttime="20170725 12:35:41.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:41.675" starttime="20170725 12:35:41.675"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:41.737" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:41.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.737" starttime="20170725 12:35:41.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:41.738" starttime="20170725 12:35:41.738"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:41.738" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:41.738" starttime="20170725 12:35:41.738"></status>
</kw>
<msg timestamp="20170725 12:35:41.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.739" starttime="20170725 12:35:41.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:41.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:41.739" starttime="20170725 12:35:41.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:41.740" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:41.740" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:41.740" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:35:41.740" starttime="20170725 12:35:41.740"></status>
</kw>
<msg timestamp="20170725 12:35:41.740" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:35:41.740" starttime="20170725 12:35:41.472"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:41.741" starttime="20170725 12:35:41.472"></status>
</kw>
<msg timestamp="20170725 12:35:41.741" level="FAIL">
#(UTC) 2017/07/25 12:35:41.740955 -   10.934363 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:35:41.741" starttime="20170725 12:35:40.808"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:51.747" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:51.747" starttime="20170725 12:35:51.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:51.748" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:51.748" starttime="20170725 12:35:51.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:51.749" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:51.749" starttime="20170725 12:35:51.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:51.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:51.749" starttime="20170725 12:35:51.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:51.932" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:51.932" starttime="20170725 12:35:51.750"></status>
</kw>
<msg timestamp="20170725 12:35:51.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:51.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:51.932" starttime="20170725 12:35:51.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:51.933" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:51.933" starttime="20170725 12:35:51.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:51.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:51.934" starttime="20170725 12:35:51.933"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:51.934" starttime="20170725 12:35:51.746"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:51.934" starttime="20170725 12:35:51.746"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:51.934" starttime="20170725 12:35:51.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:51.935" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:35:51.935" starttime="20170725 12:35:51.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:51.935" starttime="20170725 12:35:51.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:51.997" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:51.997" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:51.997" starttime="20170725 12:35:51.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:51.998" starttime="20170725 12:35:51.998"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:51.998" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:51.998" starttime="20170725 12:35:51.998"></status>
</kw>
<msg timestamp="20170725 12:35:51.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:51.999" starttime="20170725 12:35:51.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:51.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:51.999" starttime="20170725 12:35:51.999"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:52.000" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:52.000" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:52.000" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:35:52.000" starttime="20170725 12:35:52.000"></status>
</kw>
<msg timestamp="20170725 12:35:52.000" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:35:52.000" starttime="20170725 12:35:51.744"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.001" starttime="20170725 12:35:51.743"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:52.004" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:52.005" starttime="20170725 12:35:52.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:52.005" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:52.005" starttime="20170725 12:35:52.005"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:52.006" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:52.006" starttime="20170725 12:35:52.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:52.007" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:52.007" starttime="20170725 12:35:52.006"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.206" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:52.206" starttime="20170725 12:35:52.008"></status>
</kw>
<msg timestamp="20170725 12:35:52.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:52.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.206" starttime="20170725 12:35:52.007"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.207" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.207" starttime="20170725 12:35:52.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.208" starttime="20170725 12:35:52.207"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.208" starttime="20170725 12:35:52.004"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.208" starttime="20170725 12:35:52.003"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.208" starttime="20170725 12:35:52.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:52.208" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:35:52.208" starttime="20170725 12:35:52.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:52.209" starttime="20170725 12:35:52.209"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:52.284" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:35:52.284" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.284" starttime="20170725 12:35:52.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:52.285" starttime="20170725 12:35:52.284"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:52.285" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:52.285" starttime="20170725 12:35:52.285"></status>
</kw>
<msg timestamp="20170725 12:35:52.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.285" starttime="20170725 12:35:52.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.286" starttime="20170725 12:35:52.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:52.287" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:52.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:52.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:35:52.287" starttime="20170725 12:35:52.286"></status>
</kw>
<msg timestamp="20170725 12:35:52.287" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:35:52.287" starttime="20170725 12:35:52.001"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.287" starttime="20170725 12:35:52.001"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:35:52.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:35:52.291" starttime="20170725 12:35:52.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:35:52.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:35:52.292" starttime="20170725 12:35:52.292"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:35:52.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:35:52.293" starttime="20170725 12:35:52.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:35:52.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:35:52.293" starttime="20170725 12:35:52.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:35:52.593" starttime="20170725 12:35:52.294"></status>
</kw>
<msg timestamp="20170725 12:35:52.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:35:52.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.594" starttime="20170725 12:35:52.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.594" starttime="20170725 12:35:52.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.595" starttime="20170725 12:35:52.595"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.595" starttime="20170725 12:35:52.290"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.595" starttime="20170725 12:35:52.290"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.595" starttime="20170725 12:35:52.289"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:35:52.596" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:35:52.596" starttime="20170725 12:35:52.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:52.597" starttime="20170725 12:35:52.596"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:35:52.671" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:35:52.671" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.671" starttime="20170725 12:35:52.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:35:52.672" starttime="20170725 12:35:52.671"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:35:52.672" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:35:52.672" starttime="20170725 12:35:52.672"></status>
</kw>
<msg timestamp="20170725 12:35:52.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.672" starttime="20170725 12:35:52.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:35:52.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:35:52.673" starttime="20170725 12:35:52.673"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:35:52.674" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:35:52.674" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:35:52.674" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:35:52.674" starttime="20170725 12:35:52.673"></status>
</kw>
<msg timestamp="20170725 12:35:52.674" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:35:52.674" starttime="20170725 12:35:52.288"></status>
</kw>
<status status="PASS" endtime="20170725 12:35:52.674" starttime="20170725 12:35:52.288"></status>
</kw>
<msg timestamp="20170725 12:35:52.675" level="FAIL">
#(UTC) 2017/07/25 12:35:52.674699 -   10.933744 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:35:52.675" starttime="20170725 12:35:51.742"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:02.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:02.681" starttime="20170725 12:36:02.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:02.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:02.682" starttime="20170725 12:36:02.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:02.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:02.683" starttime="20170725 12:36:02.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:02.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:02.683" starttime="20170725 12:36:02.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:02.934" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:02.934" starttime="20170725 12:36:02.684"></status>
</kw>
<msg timestamp="20170725 12:36:02.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:02.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:02.935" starttime="20170725 12:36:02.684"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:02.935" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:02.935" starttime="20170725 12:36:02.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:02.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:02.936" starttime="20170725 12:36:02.936"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:02.936" starttime="20170725 12:36:02.680"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:02.936" starttime="20170725 12:36:02.680"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:02.936" starttime="20170725 12:36:02.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:02.937" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:36:02.937" starttime="20170725 12:36:02.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:02.938" starttime="20170725 12:36:02.937"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:03.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:03.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.049" starttime="20170725 12:36:02.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:03.050" starttime="20170725 12:36:03.050"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:03.050" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:03.051" starttime="20170725 12:36:03.050"></status>
</kw>
<msg timestamp="20170725 12:36:03.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.051" starttime="20170725 12:36:02.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.052" starttime="20170725 12:36:03.051"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:03.052" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:03.052" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:03.052" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:36:03.052" starttime="20170725 12:36:03.052"></status>
</kw>
<msg timestamp="20170725 12:36:03.053" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:36:03.053" starttime="20170725 12:36:02.678"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.053" starttime="20170725 12:36:02.677"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:03.059" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:03.059" starttime="20170725 12:36:03.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:03.060" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:03.060" starttime="20170725 12:36:03.060"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:03.061" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:03.061" starttime="20170725 12:36:03.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:03.061" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:03.061" starttime="20170725 12:36:03.061"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.243" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:03.244" starttime="20170725 12:36:03.062"></status>
</kw>
<msg timestamp="20170725 12:36:03.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:03.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.244" starttime="20170725 12:36:03.062"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.245" starttime="20170725 12:36:03.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.245" starttime="20170725 12:36:03.245"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.245" starttime="20170725 12:36:03.058"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.245" starttime="20170725 12:36:03.058"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.246" starttime="20170725 12:36:03.057"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:03.246" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:36:03.246" starttime="20170725 12:36:03.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:03.247" starttime="20170725 12:36:03.246"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:03.313" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:36:03.314" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.314" starttime="20170725 12:36:03.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:03.314" starttime="20170725 12:36:03.314"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:03.315" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:03.315" starttime="20170725 12:36:03.315"></status>
</kw>
<msg timestamp="20170725 12:36:03.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.315" starttime="20170725 12:36:03.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.316" starttime="20170725 12:36:03.315"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:03.316" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:03.316" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:03.317" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:36:03.317" starttime="20170725 12:36:03.316"></status>
</kw>
<msg timestamp="20170725 12:36:03.317" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:36:03.317" starttime="20170725 12:36:03.054"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.317" starttime="20170725 12:36:03.053"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:03.321" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:03.321" starttime="20170725 12:36:03.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:03.322" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:03.322" starttime="20170725 12:36:03.321"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:03.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:03.322" starttime="20170725 12:36:03.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:03.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:03.323" starttime="20170725 12:36:03.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.519" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:03.519" starttime="20170725 12:36:03.324"></status>
</kw>
<msg timestamp="20170725 12:36:03.519" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:03.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.519" starttime="20170725 12:36:03.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.520" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.520" starttime="20170725 12:36:03.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.521" starttime="20170725 12:36:03.520"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.521" starttime="20170725 12:36:03.320"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.521" starttime="20170725 12:36:03.319"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.521" starttime="20170725 12:36:03.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:03.522" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:36:03.522" starttime="20170725 12:36:03.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:03.522" starttime="20170725 12:36:03.522"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:03.586" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:03.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.587" starttime="20170725 12:36:03.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:03.587" starttime="20170725 12:36:03.587"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:03.588" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:03.588" starttime="20170725 12:36:03.588"></status>
</kw>
<msg timestamp="20170725 12:36:03.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.588" starttime="20170725 12:36:03.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:03.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:03.589" starttime="20170725 12:36:03.588"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:03.589" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:03.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:03.589" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:36:03.589" starttime="20170725 12:36:03.589"></status>
</kw>
<msg timestamp="20170725 12:36:03.590" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:36:03.590" starttime="20170725 12:36:03.318"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:03.590" starttime="20170725 12:36:03.317"></status>
</kw>
<msg timestamp="20170725 12:36:03.591" level="FAIL">
#(UTC) 2017/07/25 12:36:03.590221 -   10.915522 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:36:03.591" starttime="20170725 12:36:02.676"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:13.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:13.597" starttime="20170725 12:36:13.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:13.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:13.598" starttime="20170725 12:36:13.597"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:13.598" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:13.598" starttime="20170725 12:36:13.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:13.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:13.599" starttime="20170725 12:36:13.599"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:13.829" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:13.829" starttime="20170725 12:36:13.600"></status>
</kw>
<msg timestamp="20170725 12:36:13.829" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:13.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:13.829" starttime="20170725 12:36:13.599"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:13.830" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:13.830" starttime="20170725 12:36:13.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:13.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:13.831" starttime="20170725 12:36:13.830"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:13.831" starttime="20170725 12:36:13.596"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:13.831" starttime="20170725 12:36:13.595"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:13.831" starttime="20170725 12:36:13.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:13.832" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:36:13.832" starttime="20170725 12:36:13.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:13.833" starttime="20170725 12:36:13.832"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:13.894" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:13.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:13.894" starttime="20170725 12:36:13.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:13.895" starttime="20170725 12:36:13.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:13.895" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:13.896" starttime="20170725 12:36:13.895"></status>
</kw>
<msg timestamp="20170725 12:36:13.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:13.896" starttime="20170725 12:36:13.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:13.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:13.896" starttime="20170725 12:36:13.896"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:13.897" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:13.897" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:13.897" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:36:13.897" starttime="20170725 12:36:13.897"></status>
</kw>
<msg timestamp="20170725 12:36:13.897" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:36:13.898" starttime="20170725 12:36:13.593"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:13.898" starttime="20170725 12:36:13.593"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:13.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:13.902" starttime="20170725 12:36:13.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:13.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:13.903" starttime="20170725 12:36:13.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:13.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:13.903" starttime="20170725 12:36:13.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:13.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:13.904" starttime="20170725 12:36:13.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:14.083" starttime="20170725 12:36:13.905"></status>
</kw>
<msg timestamp="20170725 12:36:14.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:14.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.083" starttime="20170725 12:36:13.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.084" starttime="20170725 12:36:14.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.085" starttime="20170725 12:36:14.084"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.085" starttime="20170725 12:36:13.901"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.085" starttime="20170725 12:36:13.900"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.085" starttime="20170725 12:36:13.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:14.086" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:36:14.086" starttime="20170725 12:36:14.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:14.086" starttime="20170725 12:36:14.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:14.161" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:36:14.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.161" starttime="20170725 12:36:14.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:14.162" starttime="20170725 12:36:14.161"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:14.162" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:14.162" starttime="20170725 12:36:14.162"></status>
</kw>
<msg timestamp="20170725 12:36:14.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.162" starttime="20170725 12:36:13.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.163" starttime="20170725 12:36:14.163"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:14.164" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:14.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:14.164" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:36:14.164" starttime="20170725 12:36:14.163"></status>
</kw>
<msg timestamp="20170725 12:36:14.164" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:36:14.164" starttime="20170725 12:36:13.898"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.164" starttime="20170725 12:36:13.898"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:14.169" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:14.170" starttime="20170725 12:36:14.169"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:14.170" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:14.171" starttime="20170725 12:36:14.170"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:14.171" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:14.171" starttime="20170725 12:36:14.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:14.172" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:14.172" starttime="20170725 12:36:14.172"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.359" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:14.360" starttime="20170725 12:36:14.173"></status>
</kw>
<msg timestamp="20170725 12:36:14.360" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:14.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.360" starttime="20170725 12:36:14.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.360" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.360" starttime="20170725 12:36:14.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.361" starttime="20170725 12:36:14.361"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.361" starttime="20170725 12:36:14.168"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.361" starttime="20170725 12:36:14.167"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.361" starttime="20170725 12:36:14.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:14.362" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:36:14.362" starttime="20170725 12:36:14.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:14.363" starttime="20170725 12:36:14.362"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:14.432" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:14.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.432" starttime="20170725 12:36:14.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:14.433" starttime="20170725 12:36:14.433"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:14.433" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:14.433" starttime="20170725 12:36:14.433"></status>
</kw>
<msg timestamp="20170725 12:36:14.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.434" starttime="20170725 12:36:14.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:14.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:14.434" starttime="20170725 12:36:14.434"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:14.435" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:14.435" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:14.435" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:36:14.435" starttime="20170725 12:36:14.435"></status>
</kw>
<msg timestamp="20170725 12:36:14.436" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:36:14.436" starttime="20170725 12:36:14.165"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:14.436" starttime="20170725 12:36:14.165"></status>
</kw>
<msg timestamp="20170725 12:36:14.436" level="FAIL">
#(UTC) 2017/07/25 12:36:14.436061 -   10.845840 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:36:14.437" starttime="20170725 12:36:13.591"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:24.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:24.443" starttime="20170725 12:36:24.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:24.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:24.444" starttime="20170725 12:36:24.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:24.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:24.444" starttime="20170725 12:36:24.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:24.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:24.445" starttime="20170725 12:36:24.445"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:24.641" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:24.641" starttime="20170725 12:36:24.446"></status>
</kw>
<msg timestamp="20170725 12:36:24.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:24.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.642" starttime="20170725 12:36:24.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:24.642" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.643" starttime="20170725 12:36:24.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:24.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.643" starttime="20170725 12:36:24.643"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:24.643" starttime="20170725 12:36:24.442"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:24.643" starttime="20170725 12:36:24.441"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:24.644" starttime="20170725 12:36:24.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:24.644" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:36:24.644" starttime="20170725 12:36:24.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:24.645" starttime="20170725 12:36:24.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:24.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:24.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.792" starttime="20170725 12:36:24.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:24.793" starttime="20170725 12:36:24.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:24.793" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:24.793" starttime="20170725 12:36:24.793"></status>
</kw>
<msg timestamp="20170725 12:36:24.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.793" starttime="20170725 12:36:24.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:24.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.794" starttime="20170725 12:36:24.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:24.795" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:24.795" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:24.795" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:36:24.795" starttime="20170725 12:36:24.794"></status>
</kw>
<msg timestamp="20170725 12:36:24.795" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:36:24.795" starttime="20170725 12:36:24.439"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:24.795" starttime="20170725 12:36:24.439"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:24.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:24.800" starttime="20170725 12:36:24.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:24.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:24.800" starttime="20170725 12:36:24.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:24.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:24.801" starttime="20170725 12:36:24.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:24.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:24.802" starttime="20170725 12:36:24.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:24.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:24.988" starttime="20170725 12:36:24.802"></status>
</kw>
<msg timestamp="20170725 12:36:24.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:24.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.988" starttime="20170725 12:36:24.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:24.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.989" starttime="20170725 12:36:24.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:24.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:24.990" starttime="20170725 12:36:24.989"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:24.990" starttime="20170725 12:36:24.798"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:24.990" starttime="20170725 12:36:24.798"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:24.990" starttime="20170725 12:36:24.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:24.991" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:36:24.991" starttime="20170725 12:36:24.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:24.991" starttime="20170725 12:36:24.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:25.058" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:36:25.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.058" starttime="20170725 12:36:24.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:25.059" starttime="20170725 12:36:25.059"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:25.060" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:25.060" starttime="20170725 12:36:25.059"></status>
</kw>
<msg timestamp="20170725 12:36:25.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.060" starttime="20170725 12:36:24.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:25.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.061" starttime="20170725 12:36:25.061"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:25.062" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:25.062" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:25.062" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:36:25.062" starttime="20170725 12:36:25.062"></status>
</kw>
<msg timestamp="20170725 12:36:25.062" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:36:25.062" starttime="20170725 12:36:24.796"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:25.063" starttime="20170725 12:36:24.796"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:25.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:25.067" starttime="20170725 12:36:25.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:25.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:25.067" starttime="20170725 12:36:25.067"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:25.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:25.068" starttime="20170725 12:36:25.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:25.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:25.069" starttime="20170725 12:36:25.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:25.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:25.248" starttime="20170725 12:36:25.069"></status>
</kw>
<msg timestamp="20170725 12:36:25.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:25.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.248" starttime="20170725 12:36:25.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:25.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.249" starttime="20170725 12:36:25.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:25.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.250" starttime="20170725 12:36:25.249"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:25.250" starttime="20170725 12:36:25.066"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:25.250" starttime="20170725 12:36:25.065"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:25.250" starttime="20170725 12:36:25.065"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:25.251" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:36:25.251" starttime="20170725 12:36:25.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:25.251" starttime="20170725 12:36:25.251"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:25.325" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:25.325" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.325" starttime="20170725 12:36:25.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:25.326" starttime="20170725 12:36:25.325"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:25.326" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:25.326" starttime="20170725 12:36:25.326"></status>
</kw>
<msg timestamp="20170725 12:36:25.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.327" starttime="20170725 12:36:25.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:25.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:25.327" starttime="20170725 12:36:25.327"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:25.328" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:25.328" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:25.328" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:36:25.328" starttime="20170725 12:36:25.328"></status>
</kw>
<msg timestamp="20170725 12:36:25.328" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:36:25.328" starttime="20170725 12:36:25.063"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:25.329" starttime="20170725 12:36:25.063"></status>
</kw>
<msg timestamp="20170725 12:36:25.329" level="FAIL">
#(UTC) 2017/07/25 12:36:25.328815 -   10.892754 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:36:25.329" starttime="20170725 12:36:24.437"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:35.336" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:35.336" starttime="20170725 12:36:35.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:35.337" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:35.337" starttime="20170725 12:36:35.336"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:35.337" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:35.337" starttime="20170725 12:36:35.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:35.338" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:35.338" starttime="20170725 12:36:35.338"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.527" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:35.527" starttime="20170725 12:36:35.339"></status>
</kw>
<msg timestamp="20170725 12:36:35.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:35.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.528" starttime="20170725 12:36:35.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.528" starttime="20170725 12:36:35.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.529" starttime="20170725 12:36:35.529"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.529" starttime="20170725 12:36:35.335"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.529" starttime="20170725 12:36:35.334"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.529" starttime="20170725 12:36:35.334"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:35.530" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:36:35.530" starttime="20170725 12:36:35.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:35.531" starttime="20170725 12:36:35.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:35.593" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:35.593" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.594" starttime="20170725 12:36:35.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:35.594" starttime="20170725 12:36:35.594"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:35.595" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:35.595" starttime="20170725 12:36:35.594"></status>
</kw>
<msg timestamp="20170725 12:36:35.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.595" starttime="20170725 12:36:35.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.596" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.596" starttime="20170725 12:36:35.595"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:35.596" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:35.596" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:35.596" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:36:35.596" starttime="20170725 12:36:35.596"></status>
</kw>
<msg timestamp="20170725 12:36:35.597" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:36:35.597" starttime="20170725 12:36:35.332"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.597" starttime="20170725 12:36:35.332"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:35.601" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:35.602" starttime="20170725 12:36:35.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:35.602" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:35.603" starttime="20170725 12:36:35.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:35.604" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:35.604" starttime="20170725 12:36:35.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:35.605" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:35.605" starttime="20170725 12:36:35.604"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:35.783" starttime="20170725 12:36:35.606"></status>
</kw>
<msg timestamp="20170725 12:36:35.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:35.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.783" starttime="20170725 12:36:35.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.784" starttime="20170725 12:36:35.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.784" starttime="20170725 12:36:35.784"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.785" starttime="20170725 12:36:35.600"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.785" starttime="20170725 12:36:35.599"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.785" starttime="20170725 12:36:35.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:35.785" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:36:35.785" starttime="20170725 12:36:35.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:35.786" starttime="20170725 12:36:35.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:35.854" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:36:35.854" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.854" starttime="20170725 12:36:35.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:35.854" starttime="20170725 12:36:35.854"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:35.855" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:35.855" starttime="20170725 12:36:35.855"></status>
</kw>
<msg timestamp="20170725 12:36:35.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.855" starttime="20170725 12:36:35.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:35.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:35.856" starttime="20170725 12:36:35.855"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:35.856" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:35.856" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:35.857" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:36:35.857" starttime="20170725 12:36:35.856"></status>
</kw>
<msg timestamp="20170725 12:36:35.857" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:36:35.857" starttime="20170725 12:36:35.598"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:35.857" starttime="20170725 12:36:35.597"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:35.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:35.861" starttime="20170725 12:36:35.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:35.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:35.862" starttime="20170725 12:36:35.861"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:35.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:35.862" starttime="20170725 12:36:35.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:35.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:35.863" starttime="20170725 12:36:35.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:36.051" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:36.051" starttime="20170725 12:36:35.864"></status>
</kw>
<msg timestamp="20170725 12:36:36.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:36.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:36.051" starttime="20170725 12:36:35.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:36.052" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:36.052" starttime="20170725 12:36:36.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:36.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:36.053" starttime="20170725 12:36:36.052"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:36.053" starttime="20170725 12:36:35.860"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:36.053" starttime="20170725 12:36:35.859"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:36.053" starttime="20170725 12:36:35.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:36.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:36:36.054" starttime="20170725 12:36:36.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:36.055" starttime="20170725 12:36:36.054"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:36.117" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:36.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:36.117" starttime="20170725 12:36:36.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:36.118" starttime="20170725 12:36:36.118"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:36.118" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:36.119" starttime="20170725 12:36:36.118"></status>
</kw>
<msg timestamp="20170725 12:36:36.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:36.119" starttime="20170725 12:36:35.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:36.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:36.120" starttime="20170725 12:36:36.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:36.120" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:36.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:36.120" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:36:36.120" starttime="20170725 12:36:36.120"></status>
</kw>
<msg timestamp="20170725 12:36:36.121" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:36:36.121" starttime="20170725 12:36:35.858"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:36.121" starttime="20170725 12:36:35.857"></status>
</kw>
<msg timestamp="20170725 12:36:36.122" level="FAIL">
#(UTC) 2017/07/25 12:36:36.121114 -   10.792299 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:36:36.122" starttime="20170725 12:36:35.330"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:46.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:46.128" starttime="20170725 12:36:46.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:46.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:46.129" starttime="20170725 12:36:46.128"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:46.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:46.129" starttime="20170725 12:36:46.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:46.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:46.130" starttime="20170725 12:36:46.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.311" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:46.311" starttime="20170725 12:36:46.131"></status>
</kw>
<msg timestamp="20170725 12:36:46.311" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:46.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.311" starttime="20170725 12:36:46.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.312" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.312" starttime="20170725 12:36:46.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.313" starttime="20170725 12:36:46.312"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.313" starttime="20170725 12:36:46.127"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.313" starttime="20170725 12:36:46.126"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.313" starttime="20170725 12:36:46.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:46.314" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:36:46.314" starttime="20170725 12:36:46.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:46.314" starttime="20170725 12:36:46.314"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:46.376" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:46.377" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.377" starttime="20170725 12:36:46.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:46.377" starttime="20170725 12:36:46.377"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:46.378" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:46.378" starttime="20170725 12:36:46.378"></status>
</kw>
<msg timestamp="20170725 12:36:46.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.378" starttime="20170725 12:36:46.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.379" starttime="20170725 12:36:46.378"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:46.379" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:46.379" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:46.380" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:36:46.380" starttime="20170725 12:36:46.379"></status>
</kw>
<msg timestamp="20170725 12:36:46.380" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:36:46.380" starttime="20170725 12:36:46.124"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.380" starttime="20170725 12:36:46.124"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:46.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:46.384" starttime="20170725 12:36:46.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:46.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:46.385" starttime="20170725 12:36:46.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:46.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:46.386" starttime="20170725 12:36:46.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:46.386" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:46.386" starttime="20170725 12:36:46.386"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:46.648" starttime="20170725 12:36:46.387"></status>
</kw>
<msg timestamp="20170725 12:36:46.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:46.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.648" starttime="20170725 12:36:46.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.649" starttime="20170725 12:36:46.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.650" starttime="20170725 12:36:46.650"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.650" starttime="20170725 12:36:46.383"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.650" starttime="20170725 12:36:46.383"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.650" starttime="20170725 12:36:46.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:46.651" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:36:46.651" starttime="20170725 12:36:46.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:46.652" starttime="20170725 12:36:46.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:46.720" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:36:46.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.720" starttime="20170725 12:36:46.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:46.721" starttime="20170725 12:36:46.721"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:46.722" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:46.722" starttime="20170725 12:36:46.722"></status>
</kw>
<msg timestamp="20170725 12:36:46.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.722" starttime="20170725 12:36:46.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.723" starttime="20170725 12:36:46.723"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:46.724" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:46.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:46.725" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:36:46.725" starttime="20170725 12:36:46.724"></status>
</kw>
<msg timestamp="20170725 12:36:46.725" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:36:46.725" starttime="20170725 12:36:46.381"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.725" starttime="20170725 12:36:46.380"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:46.729" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:46.730" starttime="20170725 12:36:46.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:46.730" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:46.730" starttime="20170725 12:36:46.730"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:46.731" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:46.731" starttime="20170725 12:36:46.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:46.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:46.732" starttime="20170725 12:36:46.731"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:46.941" starttime="20170725 12:36:46.732"></status>
</kw>
<msg timestamp="20170725 12:36:46.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:46.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.941" starttime="20170725 12:36:46.732"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.942" starttime="20170725 12:36:46.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:46.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:46.943" starttime="20170725 12:36:46.942"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.943" starttime="20170725 12:36:46.729"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.943" starttime="20170725 12:36:46.728"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:46.943" starttime="20170725 12:36:46.727"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:46.944" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:36:46.944" starttime="20170725 12:36:46.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:46.945" starttime="20170725 12:36:46.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:47.034" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:47.035" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:47.035" starttime="20170725 12:36:46.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:47.035" starttime="20170725 12:36:47.035"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:47.036" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:47.036" starttime="20170725 12:36:47.036"></status>
</kw>
<msg timestamp="20170725 12:36:47.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:47.036" starttime="20170725 12:36:46.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:47.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:47.037" starttime="20170725 12:36:47.036"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:47.037" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:47.037" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:47.038" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:36:47.038" starttime="20170725 12:36:47.037"></status>
</kw>
<msg timestamp="20170725 12:36:47.038" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:36:47.038" starttime="20170725 12:36:46.726"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:47.038" starttime="20170725 12:36:46.726"></status>
</kw>
<msg timestamp="20170725 12:36:47.039" level="FAIL">
#(UTC) 2017/07/25 12:36:47.038416 -   10.917302 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:36:47.039" starttime="20170725 12:36:46.122"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:57.045" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:57.045" starttime="20170725 12:36:57.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:57.046" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:57.046" starttime="20170725 12:36:57.046"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:57.047" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:57.047" starttime="20170725 12:36:57.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:57.047" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:57.047" starttime="20170725 12:36:57.047"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.370" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:57.370" starttime="20170725 12:36:57.048"></status>
</kw>
<msg timestamp="20170725 12:36:57.370" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:57.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.371" starttime="20170725 12:36:57.048"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.371" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.371" starttime="20170725 12:36:57.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.372" starttime="20170725 12:36:57.372"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.372" starttime="20170725 12:36:57.044"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.372" starttime="20170725 12:36:57.043"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.372" starttime="20170725 12:36:57.043"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:57.373" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:36:57.373" starttime="20170725 12:36:57.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:57.374" starttime="20170725 12:36:57.373"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:57.469" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:57.469" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.470" starttime="20170725 12:36:57.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:57.470" starttime="20170725 12:36:57.470"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:57.471" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:57.471" starttime="20170725 12:36:57.470"></status>
</kw>
<msg timestamp="20170725 12:36:57.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.471" starttime="20170725 12:36:57.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.472" starttime="20170725 12:36:57.471"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:57.472" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:57.472" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:57.472" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:36:57.472" starttime="20170725 12:36:57.472"></status>
</kw>
<msg timestamp="20170725 12:36:57.473" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:36:57.473" starttime="20170725 12:36:57.042"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.473" starttime="20170725 12:36:57.041"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:57.477" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:57.477" starttime="20170725 12:36:57.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:57.478" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:57.478" starttime="20170725 12:36:57.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:57.478" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:57.478" starttime="20170725 12:36:57.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:57.479" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:57.479" starttime="20170725 12:36:57.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.657" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:57.657" starttime="20170725 12:36:57.480"></status>
</kw>
<msg timestamp="20170725 12:36:57.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:57.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.658" starttime="20170725 12:36:57.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.658" starttime="20170725 12:36:57.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.659" starttime="20170725 12:36:57.659"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.659" starttime="20170725 12:36:57.476"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.659" starttime="20170725 12:36:57.476"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.659" starttime="20170725 12:36:57.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:57.660" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:36:57.660" starttime="20170725 12:36:57.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:57.661" starttime="20170725 12:36:57.660"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:57.736" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:36:57.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.736" starttime="20170725 12:36:57.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:57.737" starttime="20170725 12:36:57.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:57.737" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:57.738" starttime="20170725 12:36:57.737"></status>
</kw>
<msg timestamp="20170725 12:36:57.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.738" starttime="20170725 12:36:57.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.738" starttime="20170725 12:36:57.738"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:57.739" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:57.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:57.739" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:36:57.739" starttime="20170725 12:36:57.739"></status>
</kw>
<msg timestamp="20170725 12:36:57.739" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:36:57.740" starttime="20170725 12:36:57.474"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.740" starttime="20170725 12:36:57.473"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:36:57.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:36:57.746" starttime="20170725 12:36:57.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:36:57.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:36:57.747" starttime="20170725 12:36:57.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:36:57.748" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:36:57.748" starttime="20170725 12:36:57.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:36:57.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:36:57.749" starttime="20170725 12:36:57.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.928" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:36:57.928" starttime="20170725 12:36:57.750"></status>
</kw>
<msg timestamp="20170725 12:36:57.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:36:57.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.929" starttime="20170725 12:36:57.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.929" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.929" starttime="20170725 12:36:57.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.930" starttime="20170725 12:36:57.930"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.930" starttime="20170725 12:36:57.744"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.930" starttime="20170725 12:36:57.743"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.930" starttime="20170725 12:36:57.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:36:57.931" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:36:57.931" starttime="20170725 12:36:57.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:57.932" starttime="20170725 12:36:57.931"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:36:57.994" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:36:57.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.994" starttime="20170725 12:36:57.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:36:57.995" starttime="20170725 12:36:57.994"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:36:57.995" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:36:57.995" starttime="20170725 12:36:57.995"></status>
</kw>
<msg timestamp="20170725 12:36:57.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.996" starttime="20170725 12:36:57.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:36:57.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:36:57.996" starttime="20170725 12:36:57.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:36:57.997" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:36:57.997" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:36:57.997" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:36:57.997" starttime="20170725 12:36:57.996"></status>
</kw>
<msg timestamp="20170725 12:36:57.997" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:36:57.997" starttime="20170725 12:36:57.741"></status>
</kw>
<status status="PASS" endtime="20170725 12:36:57.998" starttime="20170725 12:36:57.740"></status>
</kw>
<msg timestamp="20170725 12:36:57.998" level="FAIL">
#(UTC) 2017/07/25 12:36:57.997788 -   10.959372 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:36:57.998" starttime="20170725 12:36:57.039"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:08.004" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:08.005" starttime="20170725 12:37:08.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:08.005" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:08.005" starttime="20170725 12:37:08.005"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:08.006" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:08.006" starttime="20170725 12:37:08.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:08.007" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:08.007" starttime="20170725 12:37:08.006"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:08.196" starttime="20170725 12:37:08.007"></status>
</kw>
<msg timestamp="20170725 12:37:08.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:08.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.196" starttime="20170725 12:37:08.007"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.197" starttime="20170725 12:37:08.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.198" starttime="20170725 12:37:08.197"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.198" starttime="20170725 12:37:08.003"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.198" starttime="20170725 12:37:08.003"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.198" starttime="20170725 12:37:08.002"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:08.199" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:37:08.199" starttime="20170725 12:37:08.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:08.199" starttime="20170725 12:37:08.199"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:08.262" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:08.262" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.262" starttime="20170725 12:37:08.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:08.263" starttime="20170725 12:37:08.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:08.263" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:08.263" starttime="20170725 12:37:08.263"></status>
</kw>
<msg timestamp="20170725 12:37:08.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.264" starttime="20170725 12:37:08.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.265" starttime="20170725 12:37:08.264"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:08.265" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:08.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:08.266" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:37:08.266" starttime="20170725 12:37:08.265"></status>
</kw>
<msg timestamp="20170725 12:37:08.266" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:37:08.266" starttime="20170725 12:37:08.001"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.266" starttime="20170725 12:37:08.001"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:08.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:08.272" starttime="20170725 12:37:08.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:08.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:08.273" starttime="20170725 12:37:08.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:08.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:08.274" starttime="20170725 12:37:08.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:08.274" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:08.274" starttime="20170725 12:37:08.274"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.452" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:08.452" starttime="20170725 12:37:08.275"></status>
</kw>
<msg timestamp="20170725 12:37:08.452" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:08.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.452" starttime="20170725 12:37:08.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.453" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.453" starttime="20170725 12:37:08.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.453" starttime="20170725 12:37:08.453"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.454" starttime="20170725 12:37:08.271"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.454" starttime="20170725 12:37:08.270"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.454" starttime="20170725 12:37:08.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:08.454" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:37:08.454" starttime="20170725 12:37:08.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:08.455" starttime="20170725 12:37:08.455"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:08.520" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:37:08.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.521" starttime="20170725 12:37:08.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:08.521" starttime="20170725 12:37:08.521"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:08.522" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:08.522" starttime="20170725 12:37:08.522"></status>
</kw>
<msg timestamp="20170725 12:37:08.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.522" starttime="20170725 12:37:08.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.523" starttime="20170725 12:37:08.522"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:08.523" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:08.523" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:08.523" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:37:08.523" starttime="20170725 12:37:08.523"></status>
</kw>
<msg timestamp="20170725 12:37:08.524" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:37:08.524" starttime="20170725 12:37:08.267"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.524" starttime="20170725 12:37:08.267"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:08.529" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:08.529" starttime="20170725 12:37:08.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:08.530" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:08.530" starttime="20170725 12:37:08.530"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:08.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:08.531" starttime="20170725 12:37:08.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:08.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:08.531" starttime="20170725 12:37:08.531"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.737" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:08.737" starttime="20170725 12:37:08.532"></status>
</kw>
<msg timestamp="20170725 12:37:08.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:08.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.738" starttime="20170725 12:37:08.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.738" starttime="20170725 12:37:08.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.739" starttime="20170725 12:37:08.739"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.739" starttime="20170725 12:37:08.528"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.739" starttime="20170725 12:37:08.527"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.739" starttime="20170725 12:37:08.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:08.740" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:37:08.740" starttime="20170725 12:37:08.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:08.741" starttime="20170725 12:37:08.740"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:08.818" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:08.818" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.818" starttime="20170725 12:37:08.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:08.818" starttime="20170725 12:37:08.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:08.819" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:08.819" starttime="20170725 12:37:08.819"></status>
</kw>
<msg timestamp="20170725 12:37:08.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.819" starttime="20170725 12:37:08.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:08.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:08.820" starttime="20170725 12:37:08.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:08.820" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:08.820" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:08.821" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:37:08.821" starttime="20170725 12:37:08.820"></status>
</kw>
<msg timestamp="20170725 12:37:08.821" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:37:08.821" starttime="20170725 12:37:08.525"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:08.821" starttime="20170725 12:37:08.524"></status>
</kw>
<msg timestamp="20170725 12:37:08.822" level="FAIL">
#(UTC) 2017/07/25 12:37:08.821515 -   10.823727 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:37:08.822" starttime="20170725 12:37:07.999"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:18.828" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:18.829" starttime="20170725 12:37:18.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:18.829" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:18.829" starttime="20170725 12:37:18.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:18.830" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:18.830" starttime="20170725 12:37:18.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:18.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:18.830" starttime="20170725 12:37:18.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.079" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:19.079" starttime="20170725 12:37:18.831"></status>
</kw>
<msg timestamp="20170725 12:37:19.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:19.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.079" starttime="20170725 12:37:18.831"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.080" starttime="20170725 12:37:19.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.080" starttime="20170725 12:37:19.080"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.081" starttime="20170725 12:37:18.827"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.081" starttime="20170725 12:37:18.827"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.081" starttime="20170725 12:37:18.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:19.081" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:37:19.081" starttime="20170725 12:37:19.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:19.082" starttime="20170725 12:37:19.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:19.175" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:19.175" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.175" starttime="20170725 12:37:19.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:19.176" starttime="20170725 12:37:19.176"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:19.176" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:19.176" starttime="20170725 12:37:19.176"></status>
</kw>
<msg timestamp="20170725 12:37:19.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.177" starttime="20170725 12:37:18.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.177" starttime="20170725 12:37:19.177"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:19.178" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:19.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:19.178" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:37:19.178" starttime="20170725 12:37:19.178"></status>
</kw>
<msg timestamp="20170725 12:37:19.178" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:37:19.178" starttime="20170725 12:37:18.825"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.179" starttime="20170725 12:37:18.824"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:19.182" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:19.183" starttime="20170725 12:37:19.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:19.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:19.183" starttime="20170725 12:37:19.183"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:19.184" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:19.184" starttime="20170725 12:37:19.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:19.185" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:19.185" starttime="20170725 12:37:19.184"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:19.365" starttime="20170725 12:37:19.185"></status>
</kw>
<msg timestamp="20170725 12:37:19.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:19.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.365" starttime="20170725 12:37:19.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.365" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.365" starttime="20170725 12:37:19.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.366" starttime="20170725 12:37:19.366"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.366" starttime="20170725 12:37:19.182"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.366" starttime="20170725 12:37:19.181"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.366" starttime="20170725 12:37:19.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:19.367" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:37:19.367" starttime="20170725 12:37:19.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:19.368" starttime="20170725 12:37:19.367"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:19.451" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:37:19.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.452" starttime="20170725 12:37:19.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:19.452" starttime="20170725 12:37:19.452"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:19.453" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:19.453" starttime="20170725 12:37:19.453"></status>
</kw>
<msg timestamp="20170725 12:37:19.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.453" starttime="20170725 12:37:19.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.454" starttime="20170725 12:37:19.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:19.454" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:19.454" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:19.454" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:37:19.455" starttime="20170725 12:37:19.454"></status>
</kw>
<msg timestamp="20170725 12:37:19.455" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:37:19.455" starttime="20170725 12:37:19.179"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.455" starttime="20170725 12:37:19.179"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:19.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:19.459" starttime="20170725 12:37:19.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:19.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:19.460" starttime="20170725 12:37:19.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:19.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:19.460" starttime="20170725 12:37:19.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:19.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:19.461" starttime="20170725 12:37:19.461"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:19.648" starttime="20170725 12:37:19.462"></status>
</kw>
<msg timestamp="20170725 12:37:19.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:19.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.649" starttime="20170725 12:37:19.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.649" starttime="20170725 12:37:19.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.650" starttime="20170725 12:37:19.650"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.650" starttime="20170725 12:37:19.458"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.650" starttime="20170725 12:37:19.457"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.650" starttime="20170725 12:37:19.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:19.651" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:37:19.651" starttime="20170725 12:37:19.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:19.652" starttime="20170725 12:37:19.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:19.716" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:19.716" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.716" starttime="20170725 12:37:19.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:19.717" starttime="20170725 12:37:19.716"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:19.717" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:19.717" starttime="20170725 12:37:19.717"></status>
</kw>
<msg timestamp="20170725 12:37:19.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.717" starttime="20170725 12:37:19.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:19.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:19.718" starttime="20170725 12:37:19.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:19.719" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:19.719" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:19.719" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:37:19.719" starttime="20170725 12:37:19.718"></status>
</kw>
<msg timestamp="20170725 12:37:19.719" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:37:19.719" starttime="20170725 12:37:19.456"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:19.719" starttime="20170725 12:37:19.455"></status>
</kw>
<msg timestamp="20170725 12:37:19.720" level="FAIL">
#(UTC) 2017/07/25 12:37:19.719666 -   10.898151 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:37:19.720" starttime="20170725 12:37:18.823"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:29.726" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:29.726" starttime="20170725 12:37:29.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:29.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:29.727" starttime="20170725 12:37:29.727"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:29.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:29.728" starttime="20170725 12:37:29.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:29.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:29.728" starttime="20170725 12:37:29.728"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:29.906" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:29.906" starttime="20170725 12:37:29.729"></status>
</kw>
<msg timestamp="20170725 12:37:29.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:29.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:29.907" starttime="20170725 12:37:29.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:29.907" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:29.907" starttime="20170725 12:37:29.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:29.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:29.908" starttime="20170725 12:37:29.908"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:29.908" starttime="20170725 12:37:29.725"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:29.908" starttime="20170725 12:37:29.725"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:29.908" starttime="20170725 12:37:29.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:29.909" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:37:29.909" starttime="20170725 12:37:29.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:29.910" starttime="20170725 12:37:29.909"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:29.984" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:29.984" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:29.984" starttime="20170725 12:37:29.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:29.985" starttime="20170725 12:37:29.985"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:29.985" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:29.985" starttime="20170725 12:37:29.985"></status>
</kw>
<msg timestamp="20170725 12:37:29.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:29.986" starttime="20170725 12:37:29.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:29.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:29.986" starttime="20170725 12:37:29.986"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:29.987" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:29.987" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:29.987" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:37:29.987" starttime="20170725 12:37:29.987"></status>
</kw>
<msg timestamp="20170725 12:37:29.987" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:37:29.987" starttime="20170725 12:37:29.723"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:29.988" starttime="20170725 12:37:29.722"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:29.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:29.992" starttime="20170725 12:37:29.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:29.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:29.992" starttime="20170725 12:37:29.992"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:29.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:29.993" starttime="20170725 12:37:29.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:29.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:29.994" starttime="20170725 12:37:29.993"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.171" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:30.171" starttime="20170725 12:37:29.995"></status>
</kw>
<msg timestamp="20170725 12:37:30.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:30.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.171" starttime="20170725 12:37:29.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.172" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.172" starttime="20170725 12:37:30.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.173" starttime="20170725 12:37:30.172"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.173" starttime="20170725 12:37:29.990"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.173" starttime="20170725 12:37:29.990"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.173" starttime="20170725 12:37:29.989"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:30.174" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:37:30.174" starttime="20170725 12:37:30.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:30.174" starttime="20170725 12:37:30.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:30.257" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:37:30.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.258" starttime="20170725 12:37:30.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:30.258" starttime="20170725 12:37:30.258"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:30.259" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:30.259" starttime="20170725 12:37:30.259"></status>
</kw>
<msg timestamp="20170725 12:37:30.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.259" starttime="20170725 12:37:29.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.260" starttime="20170725 12:37:30.259"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:30.260" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:30.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:30.260" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:37:30.260" starttime="20170725 12:37:30.260"></status>
</kw>
<msg timestamp="20170725 12:37:30.261" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:37:30.261" starttime="20170725 12:37:29.988"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.261" starttime="20170725 12:37:29.988"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:30.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:30.265" starttime="20170725 12:37:30.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:30.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:30.266" starttime="20170725 12:37:30.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:30.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:30.267" starttime="20170725 12:37:30.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:30.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:30.267" starttime="20170725 12:37:30.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.503" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:30.503" starttime="20170725 12:37:30.268"></status>
</kw>
<msg timestamp="20170725 12:37:30.503" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:30.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.503" starttime="20170725 12:37:30.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.504" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.504" starttime="20170725 12:37:30.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.505" starttime="20170725 12:37:30.504"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.505" starttime="20170725 12:37:30.264"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.505" starttime="20170725 12:37:30.263"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.505" starttime="20170725 12:37:30.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:30.506" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:37:30.506" starttime="20170725 12:37:30.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:30.506" starttime="20170725 12:37:30.506"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:30.618" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:30.619" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.619" starttime="20170725 12:37:30.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:30.619" starttime="20170725 12:37:30.619"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:30.620" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:30.620" starttime="20170725 12:37:30.620"></status>
</kw>
<msg timestamp="20170725 12:37:30.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.620" starttime="20170725 12:37:30.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:30.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:30.621" starttime="20170725 12:37:30.620"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:30.621" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:30.621" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:30.621" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:37:30.621" starttime="20170725 12:37:30.621"></status>
</kw>
<msg timestamp="20170725 12:37:30.622" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:37:30.622" starttime="20170725 12:37:30.262"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:30.622" starttime="20170725 12:37:30.261"></status>
</kw>
<msg timestamp="20170725 12:37:30.623" level="FAIL">
#(UTC) 2017/07/25 12:37:30.622352 -   10.902686 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:37:30.623" starttime="20170725 12:37:29.721"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:40.629" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:40.630" starttime="20170725 12:37:40.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:40.630" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:40.630" starttime="20170725 12:37:40.630"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:40.631" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:40.631" starttime="20170725 12:37:40.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:40.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:40.632" starttime="20170725 12:37:40.631"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:40.852" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:40.852" starttime="20170725 12:37:40.633"></status>
</kw>
<msg timestamp="20170725 12:37:40.852" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:40.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:40.852" starttime="20170725 12:37:40.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:40.853" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:40.853" starttime="20170725 12:37:40.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:40.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:40.854" starttime="20170725 12:37:40.853"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:40.854" starttime="20170725 12:37:40.628"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:40.854" starttime="20170725 12:37:40.628"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:40.854" starttime="20170725 12:37:40.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:40.855" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:37:40.855" starttime="20170725 12:37:40.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:40.855" starttime="20170725 12:37:40.855"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:40.918" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:40.918" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:40.918" starttime="20170725 12:37:40.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:40.919" starttime="20170725 12:37:40.919"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:40.919" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:40.919" starttime="20170725 12:37:40.919"></status>
</kw>
<msg timestamp="20170725 12:37:40.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:40.920" starttime="20170725 12:37:40.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:40.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:40.920" starttime="20170725 12:37:40.920"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:40.921" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:40.921" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:40.921" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:37:40.921" starttime="20170725 12:37:40.921"></status>
</kw>
<msg timestamp="20170725 12:37:40.921" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:37:40.922" starttime="20170725 12:37:40.626"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:40.922" starttime="20170725 12:37:40.625"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:40.926" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:40.926" starttime="20170725 12:37:40.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:40.926" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:40.927" starttime="20170725 12:37:40.926"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:40.927" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:40.927" starttime="20170725 12:37:40.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:40.928" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:40.928" starttime="20170725 12:37:40.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.267" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:41.267" starttime="20170725 12:37:40.929"></status>
</kw>
<msg timestamp="20170725 12:37:41.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:41.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.268" starttime="20170725 12:37:40.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.268" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.268" starttime="20170725 12:37:41.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.269" starttime="20170725 12:37:41.269"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.269" starttime="20170725 12:37:40.925"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.269" starttime="20170725 12:37:40.924"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.269" starttime="20170725 12:37:40.924"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:41.270" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:37:41.270" starttime="20170725 12:37:41.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:41.271" starttime="20170725 12:37:41.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:41.337" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:37:41.337" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.337" starttime="20170725 12:37:41.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:41.338" starttime="20170725 12:37:41.338"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:41.338" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:41.338" starttime="20170725 12:37:41.338"></status>
</kw>
<msg timestamp="20170725 12:37:41.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.339" starttime="20170725 12:37:40.923"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.339" starttime="20170725 12:37:41.339"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:41.340" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:41.340" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:41.340" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:37:41.340" starttime="20170725 12:37:41.340"></status>
</kw>
<msg timestamp="20170725 12:37:41.340" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:37:41.340" starttime="20170725 12:37:40.922"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.341" starttime="20170725 12:37:40.922"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:41.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:41.345" starttime="20170725 12:37:41.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:41.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:41.345" starttime="20170725 12:37:41.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:41.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:41.346" starttime="20170725 12:37:41.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:41.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:41.347" starttime="20170725 12:37:41.346"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.554" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:41.554" starttime="20170725 12:37:41.347"></status>
</kw>
<msg timestamp="20170725 12:37:41.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:41.555" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.555" starttime="20170725 12:37:41.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.555" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.555" starttime="20170725 12:37:41.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.556" starttime="20170725 12:37:41.556"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.556" starttime="20170725 12:37:41.343"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.556" starttime="20170725 12:37:41.343"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.556" starttime="20170725 12:37:41.342"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:41.557" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:37:41.557" starttime="20170725 12:37:41.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:41.558" starttime="20170725 12:37:41.557"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:41.638" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:41.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.639" starttime="20170725 12:37:41.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:41.639" starttime="20170725 12:37:41.639"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:41.640" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:41.640" starttime="20170725 12:37:41.640"></status>
</kw>
<msg timestamp="20170725 12:37:41.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.640" starttime="20170725 12:37:41.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:41.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:41.641" starttime="20170725 12:37:41.640"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:41.641" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:41.641" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:41.641" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:37:41.641" starttime="20170725 12:37:41.641"></status>
</kw>
<msg timestamp="20170725 12:37:41.642" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:37:41.642" starttime="20170725 12:37:41.341"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:41.642" starttime="20170725 12:37:41.341"></status>
</kw>
<msg timestamp="20170725 12:37:41.643" level="FAIL">
#(UTC) 2017/07/25 12:37:41.642207 -   11.019855 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:37:41.643" starttime="20170725 12:37:40.624"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:51.649" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:51.650" starttime="20170725 12:37:51.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:51.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:51.650" starttime="20170725 12:37:51.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:51.651" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:51.651" starttime="20170725 12:37:51.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:51.652" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:51.652" starttime="20170725 12:37:51.652"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:51.849" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:51.849" starttime="20170725 12:37:51.653"></status>
</kw>
<msg timestamp="20170725 12:37:51.849" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:51.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:51.849" starttime="20170725 12:37:51.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:51.850" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:51.850" starttime="20170725 12:37:51.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:51.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:51.851" starttime="20170725 12:37:51.850"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:51.851" starttime="20170725 12:37:51.648"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:51.851" starttime="20170725 12:37:51.648"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:51.851" starttime="20170725 12:37:51.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:51.852" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:37:51.852" starttime="20170725 12:37:51.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:51.852" starttime="20170725 12:37:51.852"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:51.932" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:51.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:51.933" starttime="20170725 12:37:51.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:51.933" starttime="20170725 12:37:51.933"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:51.934" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:51.934" starttime="20170725 12:37:51.934"></status>
</kw>
<msg timestamp="20170725 12:37:51.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:51.934" starttime="20170725 12:37:51.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:51.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:51.935" starttime="20170725 12:37:51.934"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:51.935" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:51.935" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:51.936" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:37:51.936" starttime="20170725 12:37:51.935"></status>
</kw>
<msg timestamp="20170725 12:37:51.936" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:37:51.936" starttime="20170725 12:37:51.646"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:51.936" starttime="20170725 12:37:51.645"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:51.940" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:51.941" starttime="20170725 12:37:51.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:51.941" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:51.941" starttime="20170725 12:37:51.941"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:51.942" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:51.942" starttime="20170725 12:37:51.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:51.943" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:51.943" starttime="20170725 12:37:51.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.120" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:52.120" starttime="20170725 12:37:51.943"></status>
</kw>
<msg timestamp="20170725 12:37:52.120" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:52.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.120" starttime="20170725 12:37:51.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.121" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.121" starttime="20170725 12:37:52.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.122" starttime="20170725 12:37:52.121"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.122" starttime="20170725 12:37:51.939"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.122" starttime="20170725 12:37:51.939"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.122" starttime="20170725 12:37:51.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:52.123" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:37:52.123" starttime="20170725 12:37:52.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:52.123" starttime="20170725 12:37:52.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:52.188" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:37:52.188" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.188" starttime="20170725 12:37:52.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:52.189" starttime="20170725 12:37:52.189"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:52.189" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:52.190" starttime="20170725 12:37:52.189"></status>
</kw>
<msg timestamp="20170725 12:37:52.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.190" starttime="20170725 12:37:51.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.191" starttime="20170725 12:37:52.190"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:52.191" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:52.191" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:52.191" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:37:52.191" starttime="20170725 12:37:52.191"></status>
</kw>
<msg timestamp="20170725 12:37:52.192" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:37:52.192" starttime="20170725 12:37:51.937"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.192" starttime="20170725 12:37:51.936"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:37:52.196" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:37:52.196" starttime="20170725 12:37:52.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:37:52.197" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:37:52.197" starttime="20170725 12:37:52.197"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:37:52.198" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:37:52.198" starttime="20170725 12:37:52.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:37:52.198" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:37:52.198" starttime="20170725 12:37:52.198"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.464" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:37:52.464" starttime="20170725 12:37:52.199"></status>
</kw>
<msg timestamp="20170725 12:37:52.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:37:52.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.464" starttime="20170725 12:37:52.199"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.465" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.465" starttime="20170725 12:37:52.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.466" starttime="20170725 12:37:52.465"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.466" starttime="20170725 12:37:52.195"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.466" starttime="20170725 12:37:52.194"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.466" starttime="20170725 12:37:52.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:37:52.467" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:37:52.467" starttime="20170725 12:37:52.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:52.468" starttime="20170725 12:37:52.467"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:37:52.529" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:37:52.529" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.529" starttime="20170725 12:37:52.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:37:52.530" starttime="20170725 12:37:52.530"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:37:52.530" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:37:52.531" starttime="20170725 12:37:52.530"></status>
</kw>
<msg timestamp="20170725 12:37:52.531" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.531" starttime="20170725 12:37:52.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:37:52.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:37:52.531" starttime="20170725 12:37:52.531"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:37:52.532" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:37:52.532" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:37:52.532" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:37:52.532" starttime="20170725 12:37:52.532"></status>
</kw>
<msg timestamp="20170725 12:37:52.532" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:37:52.533" starttime="20170725 12:37:52.192"></status>
</kw>
<status status="PASS" endtime="20170725 12:37:52.533" starttime="20170725 12:37:52.192"></status>
</kw>
<msg timestamp="20170725 12:37:52.534" level="FAIL">
#(UTC) 2017/07/25 12:37:52.533051 -   10.890844 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:37:52.534" starttime="20170725 12:37:51.644"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:02.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:02.541" starttime="20170725 12:38:02.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:02.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:02.541" starttime="20170725 12:38:02.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:02.542" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:02.542" starttime="20170725 12:38:02.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:02.543" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:02.543" starttime="20170725 12:38:02.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:02.719" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:02.719" starttime="20170725 12:38:02.544"></status>
</kw>
<msg timestamp="20170725 12:38:02.719" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:02.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:02.720" starttime="20170725 12:38:02.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:02.720" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:02.720" starttime="20170725 12:38:02.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:02.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:02.721" starttime="20170725 12:38:02.721"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:02.721" starttime="20170725 12:38:02.539"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:02.721" starttime="20170725 12:38:02.538"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:02.721" starttime="20170725 12:38:02.538"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:02.722" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:38:02.722" starttime="20170725 12:38:02.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:02.723" starttime="20170725 12:38:02.722"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:02.805" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:02.805" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:02.805" starttime="20170725 12:38:02.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:02.806" starttime="20170725 12:38:02.805"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:02.806" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:02.806" starttime="20170725 12:38:02.806"></status>
</kw>
<msg timestamp="20170725 12:38:02.806" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:02.807" starttime="20170725 12:38:02.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:02.807" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:02.807" starttime="20170725 12:38:02.807"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:02.808" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:02.808" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:02.808" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:38:02.808" starttime="20170725 12:38:02.807"></status>
</kw>
<msg timestamp="20170725 12:38:02.808" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:38:02.808" starttime="20170725 12:38:02.537"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:02.809" starttime="20170725 12:38:02.536"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:02.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:02.813" starttime="20170725 12:38:02.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:02.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:02.814" starttime="20170725 12:38:02.813"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:02.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:02.814" starttime="20170725 12:38:02.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:02.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:02.815" starttime="20170725 12:38:02.815"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.102" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:03.103" starttime="20170725 12:38:02.816"></status>
</kw>
<msg timestamp="20170725 12:38:03.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:03.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.103" starttime="20170725 12:38:02.815"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.103" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.104" starttime="20170725 12:38:03.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.104" starttime="20170725 12:38:03.104"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.104" starttime="20170725 12:38:02.812"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.104" starttime="20170725 12:38:02.811"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.105" starttime="20170725 12:38:02.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:03.105" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:38:03.105" starttime="20170725 12:38:03.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:03.106" starttime="20170725 12:38:03.106"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:03.175" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:38:03.175" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.175" starttime="20170725 12:38:03.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:03.176" starttime="20170725 12:38:03.175"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:03.176" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:03.176" starttime="20170725 12:38:03.176"></status>
</kw>
<msg timestamp="20170725 12:38:03.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.176" starttime="20170725 12:38:02.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.177" starttime="20170725 12:38:03.177"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:03.178" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:03.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:03.178" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:38:03.178" starttime="20170725 12:38:03.177"></status>
</kw>
<msg timestamp="20170725 12:38:03.178" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:38:03.178" starttime="20170725 12:38:02.809"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.178" starttime="20170725 12:38:02.809"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:03.182" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:03.183" starttime="20170725 12:38:03.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:03.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:03.183" starttime="20170725 12:38:03.183"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:03.184" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:03.184" starttime="20170725 12:38:03.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:03.185" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:03.185" starttime="20170725 12:38:03.184"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.380" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:03.380" starttime="20170725 12:38:03.185"></status>
</kw>
<msg timestamp="20170725 12:38:03.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:03.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.380" starttime="20170725 12:38:03.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.381" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.381" starttime="20170725 12:38:03.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.382" starttime="20170725 12:38:03.381"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.382" starttime="20170725 12:38:03.181"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.382" starttime="20170725 12:38:03.181"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.382" starttime="20170725 12:38:03.180"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:03.382" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:38:03.383" starttime="20170725 12:38:03.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:03.383" starttime="20170725 12:38:03.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:03.460" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:03.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.460" starttime="20170725 12:38:03.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:03.461" starttime="20170725 12:38:03.460"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:03.461" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:03.461" starttime="20170725 12:38:03.461"></status>
</kw>
<msg timestamp="20170725 12:38:03.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.461" starttime="20170725 12:38:03.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:03.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:03.462" starttime="20170725 12:38:03.462"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:03.463" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:03.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:03.463" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:38:03.463" starttime="20170725 12:38:03.462"></status>
</kw>
<msg timestamp="20170725 12:38:03.463" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:38:03.463" starttime="20170725 12:38:03.179"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:03.463" starttime="20170725 12:38:03.179"></status>
</kw>
<msg timestamp="20170725 12:38:03.464" level="FAIL">
#(UTC) 2017/07/25 12:38:03.463643 -   10.930592 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:38:03.464" starttime="20170725 12:38:02.534"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:13.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:13.472" starttime="20170725 12:38:13.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:13.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:13.473" starttime="20170725 12:38:13.472"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:13.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:13.473" starttime="20170725 12:38:13.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:13.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:13.474" starttime="20170725 12:38:13.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:13.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:13.669" starttime="20170725 12:38:13.475"></status>
</kw>
<msg timestamp="20170725 12:38:13.669" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:13.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.670" starttime="20170725 12:38:13.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:13.670" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.670" starttime="20170725 12:38:13.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:13.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.671" starttime="20170725 12:38:13.671"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:13.671" starttime="20170725 12:38:13.470"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:13.671" starttime="20170725 12:38:13.470"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:13.671" starttime="20170725 12:38:13.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:13.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:38:13.672" starttime="20170725 12:38:13.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:13.673" starttime="20170725 12:38:13.672"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:13.744" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:13.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.745" starttime="20170725 12:38:13.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:13.745" starttime="20170725 12:38:13.745"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:13.746" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:13.746" starttime="20170725 12:38:13.746"></status>
</kw>
<msg timestamp="20170725 12:38:13.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.746" starttime="20170725 12:38:13.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:13.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.747" starttime="20170725 12:38:13.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:13.747" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:13.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:13.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:38:13.748" starttime="20170725 12:38:13.747"></status>
</kw>
<msg timestamp="20170725 12:38:13.748" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:38:13.748" starttime="20170725 12:38:13.468"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:13.748" starttime="20170725 12:38:13.468"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:13.752" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:13.752" starttime="20170725 12:38:13.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:13.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:13.753" starttime="20170725 12:38:13.753"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:13.754" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:13.754" starttime="20170725 12:38:13.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:13.755" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:13.755" starttime="20170725 12:38:13.754"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:13.931" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:13.931" starttime="20170725 12:38:13.756"></status>
</kw>
<msg timestamp="20170725 12:38:13.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:13.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.932" starttime="20170725 12:38:13.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:13.932" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.932" starttime="20170725 12:38:13.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:13.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:13.933" starttime="20170725 12:38:13.933"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:13.933" starttime="20170725 12:38:13.751"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:13.933" starttime="20170725 12:38:13.750"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:13.933" starttime="20170725 12:38:13.750"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:13.934" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:38:13.934" starttime="20170725 12:38:13.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:13.935" starttime="20170725 12:38:13.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:14.000" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:38:14.000" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.000" starttime="20170725 12:38:13.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:14.001" starttime="20170725 12:38:14.001"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:14.001" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:14.002" starttime="20170725 12:38:14.001"></status>
</kw>
<msg timestamp="20170725 12:38:14.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.002" starttime="20170725 12:38:13.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:14.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.002" starttime="20170725 12:38:14.002"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:14.003" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:14.003" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:14.003" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:38:14.003" starttime="20170725 12:38:14.003"></status>
</kw>
<msg timestamp="20170725 12:38:14.003" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:38:14.003" starttime="20170725 12:38:13.749"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:14.004" starttime="20170725 12:38:13.748"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:14.008" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:14.008" starttime="20170725 12:38:14.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:14.009" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:14.009" starttime="20170725 12:38:14.008"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:14.009" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:14.009" starttime="20170725 12:38:14.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:14.010" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:14.010" starttime="20170725 12:38:14.010"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:14.201" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:14.202" starttime="20170725 12:38:14.011"></status>
</kw>
<msg timestamp="20170725 12:38:14.202" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:14.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.202" starttime="20170725 12:38:14.010"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:14.202" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.202" starttime="20170725 12:38:14.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:14.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.203" starttime="20170725 12:38:14.203"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:14.203" starttime="20170725 12:38:14.007"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:14.203" starttime="20170725 12:38:14.006"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:14.203" starttime="20170725 12:38:14.006"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:14.204" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:38:14.204" starttime="20170725 12:38:14.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:14.205" starttime="20170725 12:38:14.204"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:14.266" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:14.266" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.266" starttime="20170725 12:38:14.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:14.267" starttime="20170725 12:38:14.267"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:14.267" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:14.267" starttime="20170725 12:38:14.267"></status>
</kw>
<msg timestamp="20170725 12:38:14.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.268" starttime="20170725 12:38:14.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:14.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:14.268" starttime="20170725 12:38:14.268"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:14.269" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:14.269" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:14.269" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:38:14.269" starttime="20170725 12:38:14.269"></status>
</kw>
<msg timestamp="20170725 12:38:14.269" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:38:14.269" starttime="20170725 12:38:14.004"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:14.270" starttime="20170725 12:38:14.004"></status>
</kw>
<msg timestamp="20170725 12:38:14.270" level="FAIL">
#(UTC) 2017/07/25 12:38:14.269827 -   10.806184 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:38:14.270" starttime="20170725 12:38:13.465"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:24.277" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:24.278" starttime="20170725 12:38:24.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:24.278" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:24.278" starttime="20170725 12:38:24.278"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:24.279" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:24.279" starttime="20170725 12:38:24.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:24.279" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:24.279" starttime="20170725 12:38:24.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.471" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:24.471" starttime="20170725 12:38:24.280"></status>
</kw>
<msg timestamp="20170725 12:38:24.471" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:24.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.471" starttime="20170725 12:38:24.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.472" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.472" starttime="20170725 12:38:24.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.473" starttime="20170725 12:38:24.472"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.473" starttime="20170725 12:38:24.276"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.473" starttime="20170725 12:38:24.275"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.473" starttime="20170725 12:38:24.274"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:24.474" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:38:24.474" starttime="20170725 12:38:24.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:24.474" starttime="20170725 12:38:24.474"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:24.550" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:24.550" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.550" starttime="20170725 12:38:24.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:24.551" starttime="20170725 12:38:24.551"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:24.551" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:24.552" starttime="20170725 12:38:24.551"></status>
</kw>
<msg timestamp="20170725 12:38:24.552" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.552" starttime="20170725 12:38:24.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.553" starttime="20170725 12:38:24.552"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:24.553" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:24.553" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:24.553" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:38:24.553" starttime="20170725 12:38:24.553"></status>
</kw>
<msg timestamp="20170725 12:38:24.554" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:38:24.554" starttime="20170725 12:38:24.273"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.554" starttime="20170725 12:38:24.272"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:24.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:24.562" starttime="20170725 12:38:24.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:24.562" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:24.562" starttime="20170725 12:38:24.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:24.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:24.563" starttime="20170725 12:38:24.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:24.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:24.564" starttime="20170725 12:38:24.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.847" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:24.847" starttime="20170725 12:38:24.565"></status>
</kw>
<msg timestamp="20170725 12:38:24.848" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:24.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.848" starttime="20170725 12:38:24.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.848" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.848" starttime="20170725 12:38:24.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.849" starttime="20170725 12:38:24.849"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.849" starttime="20170725 12:38:24.557"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.849" starttime="20170725 12:38:24.556"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.849" starttime="20170725 12:38:24.556"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:24.850" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:38:24.850" starttime="20170725 12:38:24.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:24.851" starttime="20170725 12:38:24.850"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:24.928" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:38:24.928" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.928" starttime="20170725 12:38:24.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:24.929" starttime="20170725 12:38:24.928"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:24.929" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:24.929" starttime="20170725 12:38:24.929"></status>
</kw>
<msg timestamp="20170725 12:38:24.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.930" starttime="20170725 12:38:24.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:24.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:24.931" starttime="20170725 12:38:24.930"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:24.931" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:24.931" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:24.932" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:38:24.932" starttime="20170725 12:38:24.931"></status>
</kw>
<msg timestamp="20170725 12:38:24.932" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:38:24.932" starttime="20170725 12:38:24.555"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:24.932" starttime="20170725 12:38:24.554"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:24.936" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:24.937" starttime="20170725 12:38:24.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:24.937" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:24.937" starttime="20170725 12:38:24.937"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:24.938" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:24.938" starttime="20170725 12:38:24.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:24.939" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:24.939" starttime="20170725 12:38:24.938"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:25.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:25.129" starttime="20170725 12:38:24.939"></status>
</kw>
<msg timestamp="20170725 12:38:25.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:25.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:25.129" starttime="20170725 12:38:24.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:25.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:25.130" starttime="20170725 12:38:25.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:25.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:25.130" starttime="20170725 12:38:25.130"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:25.131" starttime="20170725 12:38:24.935"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:25.131" starttime="20170725 12:38:24.935"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:25.131" starttime="20170725 12:38:24.934"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:25.131" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:38:25.131" starttime="20170725 12:38:25.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:25.132" starttime="20170725 12:38:25.132"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:25.208" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:25.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:25.208" starttime="20170725 12:38:25.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:25.209" starttime="20170725 12:38:25.209"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:25.209" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:25.209" starttime="20170725 12:38:25.209"></status>
</kw>
<msg timestamp="20170725 12:38:25.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:25.210" starttime="20170725 12:38:24.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:25.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:25.210" starttime="20170725 12:38:25.210"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:25.211" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:25.211" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:25.211" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:38:25.211" starttime="20170725 12:38:25.211"></status>
</kw>
<msg timestamp="20170725 12:38:25.211" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:38:25.211" starttime="20170725 12:38:24.933"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:25.212" starttime="20170725 12:38:24.932"></status>
</kw>
<msg timestamp="20170725 12:38:25.212" level="FAIL">
#(UTC) 2017/07/25 12:38:25.211899 -   10.942072 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:38:25.212" starttime="20170725 12:38:24.271"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:35.218" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:35.219" starttime="20170725 12:38:35.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:35.219" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:35.219" starttime="20170725 12:38:35.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:35.220" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:35.220" starttime="20170725 12:38:35.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:35.221" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:35.221" starttime="20170725 12:38:35.220"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:35.474" starttime="20170725 12:38:35.222"></status>
</kw>
<msg timestamp="20170725 12:38:35.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:35.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.474" starttime="20170725 12:38:35.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.475" starttime="20170725 12:38:35.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.476" starttime="20170725 12:38:35.475"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.476" starttime="20170725 12:38:35.217"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.476" starttime="20170725 12:38:35.217"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.476" starttime="20170725 12:38:35.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:35.477" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:38:35.477" starttime="20170725 12:38:35.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:35.477" starttime="20170725 12:38:35.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:35.539" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:35.539" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.539" starttime="20170725 12:38:35.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:35.540" starttime="20170725 12:38:35.540"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:35.540" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:35.541" starttime="20170725 12:38:35.540"></status>
</kw>
<msg timestamp="20170725 12:38:35.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.541" starttime="20170725 12:38:35.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.541" starttime="20170725 12:38:35.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:35.542" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:35.542" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:35.542" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:38:35.542" starttime="20170725 12:38:35.542"></status>
</kw>
<msg timestamp="20170725 12:38:35.542" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:38:35.543" starttime="20170725 12:38:35.215"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.543" starttime="20170725 12:38:35.215"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:35.547" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:35.547" starttime="20170725 12:38:35.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:35.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:35.548" starttime="20170725 12:38:35.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:35.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:35.548" starttime="20170725 12:38:35.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:35.549" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:35.549" starttime="20170725 12:38:35.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:35.748" starttime="20170725 12:38:35.550"></status>
</kw>
<msg timestamp="20170725 12:38:35.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:35.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.748" starttime="20170725 12:38:35.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.749" starttime="20170725 12:38:35.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.750" starttime="20170725 12:38:35.749"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.750" starttime="20170725 12:38:35.546"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.750" starttime="20170725 12:38:35.545"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.750" starttime="20170725 12:38:35.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:35.751" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:38:35.751" starttime="20170725 12:38:35.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:35.751" starttime="20170725 12:38:35.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:35.833" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:38:35.833" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.833" starttime="20170725 12:38:35.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:35.834" starttime="20170725 12:38:35.833"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:35.834" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:35.834" starttime="20170725 12:38:35.834"></status>
</kw>
<msg timestamp="20170725 12:38:35.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.834" starttime="20170725 12:38:35.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:35.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:35.835" starttime="20170725 12:38:35.835"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:35.836" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:35.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:35.836" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:38:35.836" starttime="20170725 12:38:35.835"></status>
</kw>
<msg timestamp="20170725 12:38:35.836" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:38:35.836" starttime="20170725 12:38:35.543"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:35.836" starttime="20170725 12:38:35.543"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:35.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:35.841" starttime="20170725 12:38:35.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:35.841" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:35.841" starttime="20170725 12:38:35.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:35.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:35.842" starttime="20170725 12:38:35.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:35.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:35.843" starttime="20170725 12:38:35.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:36.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:36.026" starttime="20170725 12:38:35.843"></status>
</kw>
<msg timestamp="20170725 12:38:36.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:36.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:36.027" starttime="20170725 12:38:35.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:36.027" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:36.027" starttime="20170725 12:38:36.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:36.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:36.028" starttime="20170725 12:38:36.028"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:36.029" starttime="20170725 12:38:35.839"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:36.029" starttime="20170725 12:38:35.839"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:36.029" starttime="20170725 12:38:35.838"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:36.029" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:38:36.029" starttime="20170725 12:38:36.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:36.030" starttime="20170725 12:38:36.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:36.096" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:36.096" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:36.096" starttime="20170725 12:38:36.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:36.097" starttime="20170725 12:38:36.097"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:36.097" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:36.098" starttime="20170725 12:38:36.097"></status>
</kw>
<msg timestamp="20170725 12:38:36.098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:36.098" starttime="20170725 12:38:35.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:36.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:36.098" starttime="20170725 12:38:36.098"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:36.099" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:36.099" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:36.099" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:38:36.099" starttime="20170725 12:38:36.099"></status>
</kw>
<msg timestamp="20170725 12:38:36.099" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:38:36.099" starttime="20170725 12:38:35.837"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:36.100" starttime="20170725 12:38:35.837"></status>
</kw>
<msg timestamp="20170725 12:38:36.100" level="FAIL">
#(UTC) 2017/07/25 12:38:36.099948 -   10.888049 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:38:36.100" starttime="20170725 12:38:35.213"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:46.107" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:46.108" starttime="20170725 12:38:46.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:46.109" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:46.109" starttime="20170725 12:38:46.108"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:46.109" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:46.109" starttime="20170725 12:38:46.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:46.110" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:46.110" starttime="20170725 12:38:46.109"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.374" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:46.374" starttime="20170725 12:38:46.111"></status>
</kw>
<msg timestamp="20170725 12:38:46.374" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:46.374" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.374" starttime="20170725 12:38:46.110"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.375" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.375" starttime="20170725 12:38:46.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.376" starttime="20170725 12:38:46.375"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.376" starttime="20170725 12:38:46.105"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.376" starttime="20170725 12:38:46.105"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.376" starttime="20170725 12:38:46.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:46.377" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:38:46.377" starttime="20170725 12:38:46.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:46.377" starttime="20170725 12:38:46.377"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:46.443" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:46.443" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.443" starttime="20170725 12:38:46.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:46.444" starttime="20170725 12:38:46.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:46.444" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:46.444" starttime="20170725 12:38:46.444"></status>
</kw>
<msg timestamp="20170725 12:38:46.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.445" starttime="20170725 12:38:46.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.445" starttime="20170725 12:38:46.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:46.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:46.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:46.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:38:46.446" starttime="20170725 12:38:46.445"></status>
</kw>
<msg timestamp="20170725 12:38:46.446" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:38:46.446" starttime="20170725 12:38:46.103"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.447" starttime="20170725 12:38:46.103"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:46.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:46.451" starttime="20170725 12:38:46.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:46.452" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:46.452" starttime="20170725 12:38:46.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:46.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:46.452" starttime="20170725 12:38:46.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:46.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:46.453" starttime="20170725 12:38:46.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.632" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:46.632" starttime="20170725 12:38:46.454"></status>
</kw>
<msg timestamp="20170725 12:38:46.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:46.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.633" starttime="20170725 12:38:46.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.633" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.633" starttime="20170725 12:38:46.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.634" starttime="20170725 12:38:46.634"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.634" starttime="20170725 12:38:46.450"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.634" starttime="20170725 12:38:46.449"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.634" starttime="20170725 12:38:46.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:46.635" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:38:46.635" starttime="20170725 12:38:46.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:46.636" starttime="20170725 12:38:46.635"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:46.700" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:38:46.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.701" starttime="20170725 12:38:46.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:46.701" starttime="20170725 12:38:46.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:46.702" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:46.702" starttime="20170725 12:38:46.701"></status>
</kw>
<msg timestamp="20170725 12:38:46.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.702" starttime="20170725 12:38:46.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.703" starttime="20170725 12:38:46.702"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:46.703" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:46.703" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:46.703" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:38:46.703" starttime="20170725 12:38:46.703"></status>
</kw>
<msg timestamp="20170725 12:38:46.704" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:38:46.704" starttime="20170725 12:38:46.447"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.704" starttime="20170725 12:38:46.447"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:46.708" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:46.708" starttime="20170725 12:38:46.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:46.709" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:46.709" starttime="20170725 12:38:46.709"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:46.710" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:46.710" starttime="20170725 12:38:46.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:46.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:46.710" starttime="20170725 12:38:46.710"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.910" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:46.910" starttime="20170725 12:38:46.711"></status>
</kw>
<msg timestamp="20170725 12:38:46.910" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:46.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.910" starttime="20170725 12:38:46.711"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.911" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.911" starttime="20170725 12:38:46.911"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:46.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:46.912" starttime="20170725 12:38:46.911"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.912" starttime="20170725 12:38:46.707"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.912" starttime="20170725 12:38:46.706"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:46.912" starttime="20170725 12:38:46.706"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:46.913" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:38:46.913" starttime="20170725 12:38:46.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:46.913" starttime="20170725 12:38:46.913"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:47.067" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:47.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:47.067" starttime="20170725 12:38:46.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:47.068" starttime="20170725 12:38:47.068"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:47.069" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:47.069" starttime="20170725 12:38:47.069"></status>
</kw>
<msg timestamp="20170725 12:38:47.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:47.069" starttime="20170725 12:38:46.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:47.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:47.070" starttime="20170725 12:38:47.070"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:47.071" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:47.071" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:47.071" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:38:47.071" starttime="20170725 12:38:47.071"></status>
</kw>
<msg timestamp="20170725 12:38:47.072" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:38:47.072" starttime="20170725 12:38:46.705"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:47.072" starttime="20170725 12:38:46.704"></status>
</kw>
<msg timestamp="20170725 12:38:47.072" level="FAIL">
#(UTC) 2017/07/25 12:38:47.072078 -   10.972130 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:38:47.073" starttime="20170725 12:38:46.101"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:57.078" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:57.079" starttime="20170725 12:38:57.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:57.080" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:57.080" starttime="20170725 12:38:57.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:57.080" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:57.080" starttime="20170725 12:38:57.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:57.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:57.081" starttime="20170725 12:38:57.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:57.274" starttime="20170725 12:38:57.082"></status>
</kw>
<msg timestamp="20170725 12:38:57.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:57.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.274" starttime="20170725 12:38:57.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.275" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.275" starttime="20170725 12:38:57.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.276" starttime="20170725 12:38:57.275"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.276" starttime="20170725 12:38:57.077"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.276" starttime="20170725 12:38:57.077"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.276" starttime="20170725 12:38:57.076"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:57.277" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:38:57.277" starttime="20170725 12:38:57.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:57.277" starttime="20170725 12:38:57.277"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:57.344" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:57.344" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.344" starttime="20170725 12:38:57.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:57.345" starttime="20170725 12:38:57.344"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:57.345" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:57.345" starttime="20170725 12:38:57.345"></status>
</kw>
<msg timestamp="20170725 12:38:57.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.346" starttime="20170725 12:38:57.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.346" starttime="20170725 12:38:57.346"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:57.347" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:57.347" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:57.347" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:38:57.347" starttime="20170725 12:38:57.347"></status>
</kw>
<msg timestamp="20170725 12:38:57.347" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:38:57.347" starttime="20170725 12:38:57.075"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.348" starttime="20170725 12:38:57.075"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:57.351" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:57.352" starttime="20170725 12:38:57.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:57.353" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:57.353" starttime="20170725 12:38:57.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:57.353" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:57.353" starttime="20170725 12:38:57.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:57.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:57.354" starttime="20170725 12:38:57.353"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.562" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:57.563" starttime="20170725 12:38:57.355"></status>
</kw>
<msg timestamp="20170725 12:38:57.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:57.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.563" starttime="20170725 12:38:57.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.563" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.564" starttime="20170725 12:38:57.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.564" starttime="20170725 12:38:57.564"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.564" starttime="20170725 12:38:57.350"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.564" starttime="20170725 12:38:57.350"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.565" starttime="20170725 12:38:57.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:57.565" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:38:57.565" starttime="20170725 12:38:57.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:57.566" starttime="20170725 12:38:57.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:57.631" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:38:57.631" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.631" starttime="20170725 12:38:57.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:57.632" starttime="20170725 12:38:57.631"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:57.632" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:57.632" starttime="20170725 12:38:57.632"></status>
</kw>
<msg timestamp="20170725 12:38:57.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.632" starttime="20170725 12:38:57.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.633" starttime="20170725 12:38:57.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:57.634" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:57.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:57.634" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:38:57.634" starttime="20170725 12:38:57.633"></status>
</kw>
<msg timestamp="20170725 12:38:57.634" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:38:57.634" starttime="20170725 12:38:57.348"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.634" starttime="20170725 12:38:57.348"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:38:57.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:38:57.639" starttime="20170725 12:38:57.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:38:57.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:38:57.639" starttime="20170725 12:38:57.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:38:57.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:38:57.640" starttime="20170725 12:38:57.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:38:57.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:38:57.641" starttime="20170725 12:38:57.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.834" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:38:57.834" starttime="20170725 12:38:57.641"></status>
</kw>
<msg timestamp="20170725 12:38:57.834" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:38:57.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.834" starttime="20170725 12:38:57.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.835" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.835" starttime="20170725 12:38:57.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.835" starttime="20170725 12:38:57.835"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.836" starttime="20170725 12:38:57.637"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.836" starttime="20170725 12:38:57.637"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.836" starttime="20170725 12:38:57.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:38:57.836" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:38:57.836" starttime="20170725 12:38:57.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:57.837" starttime="20170725 12:38:57.837"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:38:57.899" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:38:57.899" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.899" starttime="20170725 12:38:57.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:38:57.899" starttime="20170725 12:38:57.899"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:38:57.900" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:38:57.900" starttime="20170725 12:38:57.900"></status>
</kw>
<msg timestamp="20170725 12:38:57.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.900" starttime="20170725 12:38:57.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:38:57.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:38:57.901" starttime="20170725 12:38:57.900"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:38:57.901" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:38:57.901" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:38:57.901" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:38:57.902" starttime="20170725 12:38:57.901"></status>
</kw>
<msg timestamp="20170725 12:38:57.902" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:38:57.902" starttime="20170725 12:38:57.635"></status>
</kw>
<status status="PASS" endtime="20170725 12:38:57.902" starttime="20170725 12:38:57.634"></status>
</kw>
<msg timestamp="20170725 12:38:57.903" level="FAIL">
#(UTC) 2017/07/25 12:38:57.902302 -   10.830224 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:38:57.903" starttime="20170725 12:38:57.073"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:07.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:07.911" starttime="20170725 12:39:07.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:07.912" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:07.912" starttime="20170725 12:39:07.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:07.913" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:07.913" starttime="20170725 12:39:07.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:07.914" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:07.914" starttime="20170725 12:39:07.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.098" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:08.098" starttime="20170725 12:39:07.914"></status>
</kw>
<msg timestamp="20170725 12:39:08.098" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:08.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.099" starttime="20170725 12:39:07.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.099" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.099" starttime="20170725 12:39:08.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.100" starttime="20170725 12:39:08.100"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.100" starttime="20170725 12:39:07.909"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.100" starttime="20170725 12:39:07.908"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.100" starttime="20170725 12:39:07.907"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:08.101" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:39:08.101" starttime="20170725 12:39:08.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:08.102" starttime="20170725 12:39:08.101"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:08.164" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:08.164" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.164" starttime="20170725 12:39:08.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:08.165" starttime="20170725 12:39:08.165"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:08.165" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:08.166" starttime="20170725 12:39:08.165"></status>
</kw>
<msg timestamp="20170725 12:39:08.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.166" starttime="20170725 12:39:07.906"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.167" starttime="20170725 12:39:08.166"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:08.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:08.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:08.167" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:39:08.167" starttime="20170725 12:39:08.167"></status>
</kw>
<msg timestamp="20170725 12:39:08.168" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:39:08.168" starttime="20170725 12:39:07.905"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.168" starttime="20170725 12:39:07.905"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:08.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:08.175" starttime="20170725 12:39:08.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:08.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:08.176" starttime="20170725 12:39:08.176"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:08.177" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:08.177" starttime="20170725 12:39:08.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:08.178" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:08.178" starttime="20170725 12:39:08.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.387" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:08.387" starttime="20170725 12:39:08.178"></status>
</kw>
<msg timestamp="20170725 12:39:08.387" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:08.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.387" starttime="20170725 12:39:08.178"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.388" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.388" starttime="20170725 12:39:08.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.389" starttime="20170725 12:39:08.388"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.389" starttime="20170725 12:39:08.171"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.389" starttime="20170725 12:39:08.170"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.389" starttime="20170725 12:39:08.170"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:08.389" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:39:08.390" starttime="20170725 12:39:08.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:08.390" starttime="20170725 12:39:08.390"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:08.456" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:39:08.456" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.456" starttime="20170725 12:39:08.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:08.457" starttime="20170725 12:39:08.457"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:08.457" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:08.457" starttime="20170725 12:39:08.457"></status>
</kw>
<msg timestamp="20170725 12:39:08.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.458" starttime="20170725 12:39:08.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.458" starttime="20170725 12:39:08.458"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:08.459" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:08.459" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:08.459" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:39:08.459" starttime="20170725 12:39:08.459"></status>
</kw>
<msg timestamp="20170725 12:39:08.459" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:39:08.459" starttime="20170725 12:39:08.169"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.460" starttime="20170725 12:39:08.168"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:08.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:08.464" starttime="20170725 12:39:08.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:08.465" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:08.465" starttime="20170725 12:39:08.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:08.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:08.465" starttime="20170725 12:39:08.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:08.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:08.466" starttime="20170725 12:39:08.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.755" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:08.755" starttime="20170725 12:39:08.467"></status>
</kw>
<msg timestamp="20170725 12:39:08.755" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:08.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.756" starttime="20170725 12:39:08.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.756" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.756" starttime="20170725 12:39:08.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.757" starttime="20170725 12:39:08.757"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.757" starttime="20170725 12:39:08.462"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.757" starttime="20170725 12:39:08.462"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.757" starttime="20170725 12:39:08.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:08.758" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:39:08.758" starttime="20170725 12:39:08.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:08.759" starttime="20170725 12:39:08.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:08.837" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:08.838" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.838" starttime="20170725 12:39:08.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:08.838" starttime="20170725 12:39:08.838"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:08.839" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:08.839" starttime="20170725 12:39:08.839"></status>
</kw>
<msg timestamp="20170725 12:39:08.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.839" starttime="20170725 12:39:08.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:08.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:08.840" starttime="20170725 12:39:08.839"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:08.840" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:08.840" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:08.840" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:39:08.840" starttime="20170725 12:39:08.840"></status>
</kw>
<msg timestamp="20170725 12:39:08.841" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:39:08.841" starttime="20170725 12:39:08.460"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:08.841" starttime="20170725 12:39:08.460"></status>
</kw>
<msg timestamp="20170725 12:39:08.842" level="FAIL">
#(UTC) 2017/07/25 12:39:08.841268 -   10.938966 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:39:08.842" starttime="20170725 12:39:07.903"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:18.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:18.848" starttime="20170725 12:39:18.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:18.849" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:18.849" starttime="20170725 12:39:18.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:18.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:18.849" starttime="20170725 12:39:18.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:18.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:18.850" starttime="20170725 12:39:18.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.030" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:19.030" starttime="20170725 12:39:18.852"></status>
</kw>
<msg timestamp="20170725 12:39:19.030" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:19.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.031" starttime="20170725 12:39:18.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.031" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.031" starttime="20170725 12:39:19.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.032" starttime="20170725 12:39:19.032"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.032" starttime="20170725 12:39:18.846"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.032" starttime="20170725 12:39:18.846"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.032" starttime="20170725 12:39:18.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:19.033" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:39:19.033" starttime="20170725 12:39:19.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:19.034" starttime="20170725 12:39:19.033"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:19.096" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:19.096" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.096" starttime="20170725 12:39:19.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:19.097" starttime="20170725 12:39:19.096"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:19.097" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:19.097" starttime="20170725 12:39:19.097"></status>
</kw>
<msg timestamp="20170725 12:39:19.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.097" starttime="20170725 12:39:18.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.098" starttime="20170725 12:39:19.098"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:19.099" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:19.099" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:19.099" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:39:19.099" starttime="20170725 12:39:19.098"></status>
</kw>
<msg timestamp="20170725 12:39:19.099" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:39:19.099" starttime="20170725 12:39:18.844"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.099" starttime="20170725 12:39:18.844"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:19.103" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:19.104" starttime="20170725 12:39:19.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:19.104" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:19.104" starttime="20170725 12:39:19.104"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:19.105" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:19.105" starttime="20170725 12:39:19.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:19.106" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:19.106" starttime="20170725 12:39:19.105"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.339" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:19.339" starttime="20170725 12:39:19.106"></status>
</kw>
<msg timestamp="20170725 12:39:19.339" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:19.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.339" starttime="20170725 12:39:19.106"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.340" starttime="20170725 12:39:19.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.340" starttime="20170725 12:39:19.340"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.340" starttime="20170725 12:39:19.102"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.340" starttime="20170725 12:39:19.102"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.341" starttime="20170725 12:39:19.101"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:19.341" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:39:19.341" starttime="20170725 12:39:19.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:19.342" starttime="20170725 12:39:19.341"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:19.422" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:39:19.422" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.422" starttime="20170725 12:39:19.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:19.422" starttime="20170725 12:39:19.422"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:19.423" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:19.423" starttime="20170725 12:39:19.423"></status>
</kw>
<msg timestamp="20170725 12:39:19.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.423" starttime="20170725 12:39:19.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.424" starttime="20170725 12:39:19.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:19.424" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:19.424" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:19.425" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:39:19.425" starttime="20170725 12:39:19.424"></status>
</kw>
<msg timestamp="20170725 12:39:19.425" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:39:19.425" starttime="20170725 12:39:19.100"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.425" starttime="20170725 12:39:19.100"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:19.429" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:19.430" starttime="20170725 12:39:19.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:19.431" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:19.431" starttime="20170725 12:39:19.430"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:19.431" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:19.431" starttime="20170725 12:39:19.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:19.432" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:19.432" starttime="20170725 12:39:19.432"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:19.608" starttime="20170725 12:39:19.433"></status>
</kw>
<msg timestamp="20170725 12:39:19.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:19.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.608" starttime="20170725 12:39:19.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.609" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.609" starttime="20170725 12:39:19.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.610" starttime="20170725 12:39:19.609"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.610" starttime="20170725 12:39:19.429"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.610" starttime="20170725 12:39:19.428"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.610" starttime="20170725 12:39:19.428"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:19.611" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:39:19.611" starttime="20170725 12:39:19.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:19.611" starttime="20170725 12:39:19.611"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:19.674" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:19.675" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.675" starttime="20170725 12:39:19.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:19.675" starttime="20170725 12:39:19.675"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:19.676" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:19.676" starttime="20170725 12:39:19.675"></status>
</kw>
<msg timestamp="20170725 12:39:19.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.676" starttime="20170725 12:39:19.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:19.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:19.677" starttime="20170725 12:39:19.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:19.677" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:19.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:19.677" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:39:19.677" starttime="20170725 12:39:19.677"></status>
</kw>
<msg timestamp="20170725 12:39:19.678" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:39:19.678" starttime="20170725 12:39:19.426"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:19.678" starttime="20170725 12:39:19.425"></status>
</kw>
<msg timestamp="20170725 12:39:19.679" level="FAIL">
#(UTC) 2017/07/25 12:39:19.678225 -   10.836957 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:39:19.679" starttime="20170725 12:39:18.842"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:29.684" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:29.685" starttime="20170725 12:39:29.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:29.686" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:29.686" starttime="20170725 12:39:29.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:29.686" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:29.686" starttime="20170725 12:39:29.686"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:29.687" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:29.687" starttime="20170725 12:39:29.687"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:29.891" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:29.891" starttime="20170725 12:39:29.688"></status>
</kw>
<msg timestamp="20170725 12:39:29.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:29.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:29.891" starttime="20170725 12:39:29.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:29.892" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:29.892" starttime="20170725 12:39:29.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:29.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:29.893" starttime="20170725 12:39:29.892"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:29.893" starttime="20170725 12:39:29.683"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:29.893" starttime="20170725 12:39:29.683"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:29.893" starttime="20170725 12:39:29.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:29.894" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:39:29.894" starttime="20170725 12:39:29.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:29.894" starttime="20170725 12:39:29.894"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:29.956" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:29.957" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:29.957" starttime="20170725 12:39:29.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:29.957" starttime="20170725 12:39:29.957"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:29.958" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:29.958" starttime="20170725 12:39:29.957"></status>
</kw>
<msg timestamp="20170725 12:39:29.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:29.958" starttime="20170725 12:39:29.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:29.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:29.959" starttime="20170725 12:39:29.958"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:29.959" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:29.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:29.959" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:39:29.959" starttime="20170725 12:39:29.959"></status>
</kw>
<msg timestamp="20170725 12:39:29.960" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:39:29.960" starttime="20170725 12:39:29.681"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:29.960" starttime="20170725 12:39:29.681"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:29.964" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:29.964" starttime="20170725 12:39:29.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:29.965" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:29.965" starttime="20170725 12:39:29.965"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:29.966" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:29.966" starttime="20170725 12:39:29.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:29.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:29.966" starttime="20170725 12:39:29.966"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.164" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:30.164" starttime="20170725 12:39:29.968"></status>
</kw>
<msg timestamp="20170725 12:39:30.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:30.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.164" starttime="20170725 12:39:29.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.165" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.165" starttime="20170725 12:39:30.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.165" starttime="20170725 12:39:30.165"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.165" starttime="20170725 12:39:29.963"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.166" starttime="20170725 12:39:29.962"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.166" starttime="20170725 12:39:29.962"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:30.166" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:39:30.166" starttime="20170725 12:39:30.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:30.167" starttime="20170725 12:39:30.167"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:30.231" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:39:30.232" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.232" starttime="20170725 12:39:30.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:30.232" starttime="20170725 12:39:30.232"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:30.233" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:30.233" starttime="20170725 12:39:30.232"></status>
</kw>
<msg timestamp="20170725 12:39:30.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.233" starttime="20170725 12:39:29.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.234" starttime="20170725 12:39:30.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:30.234" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:30.234" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:30.235" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:39:30.235" starttime="20170725 12:39:30.234"></status>
</kw>
<msg timestamp="20170725 12:39:30.235" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:39:30.235" starttime="20170725 12:39:29.961"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.235" starttime="20170725 12:39:29.960"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:30.241" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:30.242" starttime="20170725 12:39:30.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:30.243" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:30.243" starttime="20170725 12:39:30.242"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:30.243" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:30.243" starttime="20170725 12:39:30.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:30.244" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:30.244" starttime="20170725 12:39:30.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.499" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:30.499" starttime="20170725 12:39:30.245"></status>
</kw>
<msg timestamp="20170725 12:39:30.499" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:30.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.499" starttime="20170725 12:39:30.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.500" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.500" starttime="20170725 12:39:30.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.501" starttime="20170725 12:39:30.500"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.501" starttime="20170725 12:39:30.240"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.501" starttime="20170725 12:39:30.239"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.501" starttime="20170725 12:39:30.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:30.502" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:39:30.502" starttime="20170725 12:39:30.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:30.502" starttime="20170725 12:39:30.502"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:30.585" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:30.585" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.585" starttime="20170725 12:39:30.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:30.585" starttime="20170725 12:39:30.585"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:30.586" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:30.586" starttime="20170725 12:39:30.586"></status>
</kw>
<msg timestamp="20170725 12:39:30.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.586" starttime="20170725 12:39:30.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:30.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:30.587" starttime="20170725 12:39:30.586"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:30.587" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:30.587" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:30.587" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:39:30.588" starttime="20170725 12:39:30.587"></status>
</kw>
<msg timestamp="20170725 12:39:30.588" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:39:30.588" starttime="20170725 12:39:30.236"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:30.588" starttime="20170725 12:39:30.236"></status>
</kw>
<msg timestamp="20170725 12:39:30.589" level="FAIL">
#(UTC) 2017/07/25 12:39:30.588326 -   10.910101 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:39:30.589" starttime="20170725 12:39:29.679"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:40.594" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:40.595" starttime="20170725 12:39:40.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:40.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:40.596" starttime="20170725 12:39:40.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:40.597" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:40.597" starttime="20170725 12:39:40.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:40.597" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:40.597" starttime="20170725 12:39:40.597"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:40.775" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:40.775" starttime="20170725 12:39:40.598"></status>
</kw>
<msg timestamp="20170725 12:39:40.775" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:40.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:40.775" starttime="20170725 12:39:40.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:40.776" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:40.776" starttime="20170725 12:39:40.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:40.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:40.777" starttime="20170725 12:39:40.776"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:40.777" starttime="20170725 12:39:40.593"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:40.777" starttime="20170725 12:39:40.593"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:40.777" starttime="20170725 12:39:40.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:40.778" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:39:40.778" starttime="20170725 12:39:40.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:40.778" starttime="20170725 12:39:40.778"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:40.852" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:40.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:40.852" starttime="20170725 12:39:40.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:40.853" starttime="20170725 12:39:40.852"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:40.853" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:40.853" starttime="20170725 12:39:40.853"></status>
</kw>
<msg timestamp="20170725 12:39:40.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:40.853" starttime="20170725 12:39:40.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:40.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:40.854" starttime="20170725 12:39:40.854"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:40.855" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:40.855" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:40.855" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:39:40.855" starttime="20170725 12:39:40.854"></status>
</kw>
<msg timestamp="20170725 12:39:40.855" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:39:40.855" starttime="20170725 12:39:40.591"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:40.856" starttime="20170725 12:39:40.591"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:40.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:40.862" starttime="20170725 12:39:40.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:40.863" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:40.863" starttime="20170725 12:39:40.863"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:40.864" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:40.864" starttime="20170725 12:39:40.863"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:40.865" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:40.865" starttime="20170725 12:39:40.864"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:41.153" starttime="20170725 12:39:40.866"></status>
</kw>
<msg timestamp="20170725 12:39:41.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:41.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.153" starttime="20170725 12:39:40.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.154" starttime="20170725 12:39:41.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.155" starttime="20170725 12:39:41.154"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.155" starttime="20170725 12:39:40.860"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.155" starttime="20170725 12:39:40.859"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.155" starttime="20170725 12:39:40.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:41.156" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:39:41.156" starttime="20170725 12:39:41.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:41.156" starttime="20170725 12:39:41.156"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:41.240" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:39:41.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.241" starttime="20170725 12:39:41.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:41.241" starttime="20170725 12:39:41.241"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:41.242" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:41.242" starttime="20170725 12:39:41.241"></status>
</kw>
<msg timestamp="20170725 12:39:41.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.242" starttime="20170725 12:39:40.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.243" starttime="20170725 12:39:41.242"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:41.243" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:41.243" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:41.243" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:39:41.243" starttime="20170725 12:39:41.243"></status>
</kw>
<msg timestamp="20170725 12:39:41.244" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:39:41.244" starttime="20170725 12:39:40.857"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.244" starttime="20170725 12:39:40.856"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:41.247" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:41.248" starttime="20170725 12:39:41.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:41.249" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:41.249" starttime="20170725 12:39:41.248"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:41.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:41.249" starttime="20170725 12:39:41.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:41.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:41.250" starttime="20170725 12:39:41.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:41.437" starttime="20170725 12:39:41.251"></status>
</kw>
<msg timestamp="20170725 12:39:41.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:41.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.437" starttime="20170725 12:39:41.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.437" starttime="20170725 12:39:41.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.438" starttime="20170725 12:39:41.438"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.438" starttime="20170725 12:39:41.247"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.438" starttime="20170725 12:39:41.246"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.438" starttime="20170725 12:39:41.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:41.439" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:39:41.439" starttime="20170725 12:39:41.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:41.440" starttime="20170725 12:39:41.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:41.502" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:41.502" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.502" starttime="20170725 12:39:41.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:41.503" starttime="20170725 12:39:41.503"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:41.503" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:41.503" starttime="20170725 12:39:41.503"></status>
</kw>
<msg timestamp="20170725 12:39:41.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.504" starttime="20170725 12:39:41.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:41.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:41.504" starttime="20170725 12:39:41.504"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:41.505" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:41.505" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:41.505" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:39:41.505" starttime="20170725 12:39:41.504"></status>
</kw>
<msg timestamp="20170725 12:39:41.505" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:39:41.505" starttime="20170725 12:39:41.244"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:41.506" starttime="20170725 12:39:41.244"></status>
</kw>
<msg timestamp="20170725 12:39:41.506" level="FAIL">
#(UTC) 2017/07/25 12:39:41.505752 -   10.917426 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:39:41.506" starttime="20170725 12:39:40.589"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:51.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:51.513" starttime="20170725 12:39:51.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:51.514" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:51.514" starttime="20170725 12:39:51.513"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:51.514" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:51.514" starttime="20170725 12:39:51.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:51.515" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:51.515" starttime="20170725 12:39:51.515"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:51.716" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:51.716" starttime="20170725 12:39:51.516"></status>
</kw>
<msg timestamp="20170725 12:39:51.716" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:51.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:51.717" starttime="20170725 12:39:51.515"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:51.717" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:51.717" starttime="20170725 12:39:51.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:51.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:51.718" starttime="20170725 12:39:51.718"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:51.718" starttime="20170725 12:39:51.511"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:51.718" starttime="20170725 12:39:51.511"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:51.718" starttime="20170725 12:39:51.510"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:51.719" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:39:51.719" starttime="20170725 12:39:51.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:51.720" starttime="20170725 12:39:51.719"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:51.784" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:51.784" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:51.784" starttime="20170725 12:39:51.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:51.785" starttime="20170725 12:39:51.785"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:51.785" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:51.785" starttime="20170725 12:39:51.785"></status>
</kw>
<msg timestamp="20170725 12:39:51.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:51.786" starttime="20170725 12:39:51.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:51.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:51.786" starttime="20170725 12:39:51.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:51.787" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:51.787" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:51.787" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:39:51.787" starttime="20170725 12:39:51.787"></status>
</kw>
<msg timestamp="20170725 12:39:51.787" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:39:51.788" starttime="20170725 12:39:51.509"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:51.788" starttime="20170725 12:39:51.509"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:51.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:51.796" starttime="20170725 12:39:51.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:51.797" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:51.797" starttime="20170725 12:39:51.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:51.798" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:51.798" starttime="20170725 12:39:51.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:51.799" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:51.799" starttime="20170725 12:39:51.799"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.013" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:52.013" starttime="20170725 12:39:51.800"></status>
</kw>
<msg timestamp="20170725 12:39:52.013" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:52.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.013" starttime="20170725 12:39:51.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.014" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.014" starttime="20170725 12:39:52.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.015" starttime="20170725 12:39:52.014"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.015" starttime="20170725 12:39:51.791"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.015" starttime="20170725 12:39:51.790"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.015" starttime="20170725 12:39:51.790"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:52.016" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:39:52.016" starttime="20170725 12:39:52.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:52.016" starttime="20170725 12:39:52.016"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:52.082" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:39:52.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.082" starttime="20170725 12:39:52.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:52.083" starttime="20170725 12:39:52.082"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:52.083" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:52.084" starttime="20170725 12:39:52.083"></status>
</kw>
<msg timestamp="20170725 12:39:52.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.084" starttime="20170725 12:39:51.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.085" starttime="20170725 12:39:52.084"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:52.086" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:52.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:52.086" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:39:52.086" starttime="20170725 12:39:52.085"></status>
</kw>
<msg timestamp="20170725 12:39:52.086" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:39:52.086" starttime="20170725 12:39:51.788"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.087" starttime="20170725 12:39:51.788"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:39:52.092" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:39:52.093" starttime="20170725 12:39:52.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:39:52.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:39:52.094" starttime="20170725 12:39:52.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:39:52.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:39:52.095" starttime="20170725 12:39:52.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:39:52.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:39:52.096" starttime="20170725 12:39:52.095"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:39:52.346" starttime="20170725 12:39:52.096"></status>
</kw>
<msg timestamp="20170725 12:39:52.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:39:52.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.347" starttime="20170725 12:39:52.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.347" starttime="20170725 12:39:52.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.348" starttime="20170725 12:39:52.348"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.348" starttime="20170725 12:39:52.091"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.348" starttime="20170725 12:39:52.091"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.348" starttime="20170725 12:39:52.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:39:52.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:39:52.349" starttime="20170725 12:39:52.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:52.350" starttime="20170725 12:39:52.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:39:52.429" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:39:52.430" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.430" starttime="20170725 12:39:52.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:39:52.430" starttime="20170725 12:39:52.430"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:39:52.431" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:39:52.431" starttime="20170725 12:39:52.431"></status>
</kw>
<msg timestamp="20170725 12:39:52.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.431" starttime="20170725 12:39:52.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:39:52.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:39:52.432" starttime="20170725 12:39:52.431"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:39:52.432" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:39:52.432" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:39:52.432" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:39:52.432" starttime="20170725 12:39:52.432"></status>
</kw>
<msg timestamp="20170725 12:39:52.433" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:39:52.433" starttime="20170725 12:39:52.088"></status>
</kw>
<status status="PASS" endtime="20170725 12:39:52.433" starttime="20170725 12:39:52.087"></status>
</kw>
<msg timestamp="20170725 12:39:52.434" level="FAIL">
#(UTC) 2017/07/25 12:39:52.433248 -   10.927496 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:39:52.434" starttime="20170725 12:39:51.507"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:02.440" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:02.441" starttime="20170725 12:40:02.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:02.441" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:02.441" starttime="20170725 12:40:02.441"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:02.442" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:02.442" starttime="20170725 12:40:02.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:02.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:02.443" starttime="20170725 12:40:02.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:02.632" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:02.632" starttime="20170725 12:40:02.443"></status>
</kw>
<msg timestamp="20170725 12:40:02.632" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:02.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:02.632" starttime="20170725 12:40:02.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:02.633" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:02.633" starttime="20170725 12:40:02.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:02.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:02.634" starttime="20170725 12:40:02.633"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:02.634" starttime="20170725 12:40:02.439"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:02.634" starttime="20170725 12:40:02.439"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:02.634" starttime="20170725 12:40:02.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:02.635" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:40:02.635" starttime="20170725 12:40:02.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:02.635" starttime="20170725 12:40:02.635"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:02.700" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:02.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:02.700" starttime="20170725 12:40:02.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:02.701" starttime="20170725 12:40:02.700"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:02.701" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:02.701" starttime="20170725 12:40:02.701"></status>
</kw>
<msg timestamp="20170725 12:40:02.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:02.701" starttime="20170725 12:40:02.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:02.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:02.702" starttime="20170725 12:40:02.702"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:02.703" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:02.703" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:02.703" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:40:02.703" starttime="20170725 12:40:02.702"></status>
</kw>
<msg timestamp="20170725 12:40:02.703" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:40:02.703" starttime="20170725 12:40:02.437"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:02.704" starttime="20170725 12:40:02.436"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:02.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:02.708" starttime="20170725 12:40:02.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:02.709" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:02.709" starttime="20170725 12:40:02.708"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:02.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:02.709" starttime="20170725 12:40:02.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:02.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:02.710" starttime="20170725 12:40:02.710"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.034" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:03.034" starttime="20170725 12:40:02.711"></status>
</kw>
<msg timestamp="20170725 12:40:03.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:03.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.034" starttime="20170725 12:40:02.710"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.035" starttime="20170725 12:40:03.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.036" starttime="20170725 12:40:03.035"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.036" starttime="20170725 12:40:02.706"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.036" starttime="20170725 12:40:02.706"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.036" starttime="20170725 12:40:02.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:03.036" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:40:03.037" starttime="20170725 12:40:03.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:03.037" starttime="20170725 12:40:03.037"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:03.103" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:40:03.103" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.103" starttime="20170725 12:40:03.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:03.104" starttime="20170725 12:40:03.104"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:03.104" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:03.104" starttime="20170725 12:40:03.104"></status>
</kw>
<msg timestamp="20170725 12:40:03.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.105" starttime="20170725 12:40:02.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.105" starttime="20170725 12:40:03.105"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:03.106" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:03.106" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:03.106" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:40:03.106" starttime="20170725 12:40:03.106"></status>
</kw>
<msg timestamp="20170725 12:40:03.106" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:40:03.106" starttime="20170725 12:40:02.704"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.107" starttime="20170725 12:40:02.704"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:03.110" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:03.111" starttime="20170725 12:40:03.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:03.112" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:03.112" starttime="20170725 12:40:03.111"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:03.112" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:03.113" starttime="20170725 12:40:03.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:03.113" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:03.113" starttime="20170725 12:40:03.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.298" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:03.298" starttime="20170725 12:40:03.115"></status>
</kw>
<msg timestamp="20170725 12:40:03.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:03.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.298" starttime="20170725 12:40:03.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.299" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.299" starttime="20170725 12:40:03.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.300" starttime="20170725 12:40:03.299"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.300" starttime="20170725 12:40:03.110"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.300" starttime="20170725 12:40:03.109"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.300" starttime="20170725 12:40:03.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:03.301" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:40:03.301" starttime="20170725 12:40:03.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:03.301" starttime="20170725 12:40:03.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:03.364" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:03.364" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.364" starttime="20170725 12:40:03.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:03.364" starttime="20170725 12:40:03.364"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:03.365" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:03.365" starttime="20170725 12:40:03.365"></status>
</kw>
<msg timestamp="20170725 12:40:03.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.365" starttime="20170725 12:40:03.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:03.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:03.366" starttime="20170725 12:40:03.365"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:03.366" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:03.366" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:03.367" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:40:03.367" starttime="20170725 12:40:03.366"></status>
</kw>
<msg timestamp="20170725 12:40:03.367" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:40:03.367" starttime="20170725 12:40:03.107"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:03.367" starttime="20170725 12:40:03.107"></status>
</kw>
<msg timestamp="20170725 12:40:03.368" level="FAIL">
#(UTC) 2017/07/25 12:40:03.367458 -   10.934210 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:40:03.368" starttime="20170725 12:40:02.434"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:13.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:13.375" starttime="20170725 12:40:13.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:13.375" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:13.375" starttime="20170725 12:40:13.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:13.376" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:13.376" starttime="20170725 12:40:13.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:13.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:13.377" starttime="20170725 12:40:13.376"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.641" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:13.642" starttime="20170725 12:40:13.378"></status>
</kw>
<msg timestamp="20170725 12:40:13.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:13.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.642" starttime="20170725 12:40:13.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.642" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.642" starttime="20170725 12:40:13.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.643" starttime="20170725 12:40:13.643"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.643" starttime="20170725 12:40:13.373"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.643" starttime="20170725 12:40:13.373"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.644" starttime="20170725 12:40:13.372"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:13.644" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:40:13.644" starttime="20170725 12:40:13.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:13.645" starttime="20170725 12:40:13.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:13.708" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:13.708" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.708" starttime="20170725 12:40:13.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:13.709" starttime="20170725 12:40:13.709"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:13.710" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:13.710" starttime="20170725 12:40:13.709"></status>
</kw>
<msg timestamp="20170725 12:40:13.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.710" starttime="20170725 12:40:13.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.711" starttime="20170725 12:40:13.710"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:13.711" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:13.711" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:13.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:40:13.711" starttime="20170725 12:40:13.711"></status>
</kw>
<msg timestamp="20170725 12:40:13.712" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:40:13.712" starttime="20170725 12:40:13.371"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.712" starttime="20170725 12:40:13.370"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:13.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:13.716" starttime="20170725 12:40:13.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:13.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:13.717" starttime="20170725 12:40:13.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:13.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:13.718" starttime="20170725 12:40:13.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:13.718" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:13.718" starttime="20170725 12:40:13.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.918" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:13.918" starttime="20170725 12:40:13.719"></status>
</kw>
<msg timestamp="20170725 12:40:13.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:13.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.918" starttime="20170725 12:40:13.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.919" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.919" starttime="20170725 12:40:13.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.920" starttime="20170725 12:40:13.919"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.920" starttime="20170725 12:40:13.715"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.920" starttime="20170725 12:40:13.714"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.920" starttime="20170725 12:40:13.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:13.920" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:40:13.920" starttime="20170725 12:40:13.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:13.921" starttime="20170725 12:40:13.921"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:13.986" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:40:13.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.986" starttime="20170725 12:40:13.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:13.986" starttime="20170725 12:40:13.986"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:13.987" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:13.987" starttime="20170725 12:40:13.987"></status>
</kw>
<msg timestamp="20170725 12:40:13.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.987" starttime="20170725 12:40:13.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:13.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:13.988" starttime="20170725 12:40:13.988"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:13.988" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:13.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:13.989" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:40:13.989" starttime="20170725 12:40:13.988"></status>
</kw>
<msg timestamp="20170725 12:40:13.989" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:40:13.989" starttime="20170725 12:40:13.713"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:13.989" starttime="20170725 12:40:13.712"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:13.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:13.994" starttime="20170725 12:40:13.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:13.994" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:13.994" starttime="20170725 12:40:13.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:13.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:13.995" starttime="20170725 12:40:13.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:13.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:13.996" starttime="20170725 12:40:13.995"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:14.173" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:14.173" starttime="20170725 12:40:13.997"></status>
</kw>
<msg timestamp="20170725 12:40:14.173" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:14.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:14.173" starttime="20170725 12:40:13.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:14.174" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:14.174" starttime="20170725 12:40:14.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:14.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:14.175" starttime="20170725 12:40:14.174"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:14.175" starttime="20170725 12:40:13.992"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:14.175" starttime="20170725 12:40:13.992"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:14.175" starttime="20170725 12:40:13.991"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:14.175" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:40:14.175" starttime="20170725 12:40:14.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:14.176" starttime="20170725 12:40:14.176"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:14.353" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:14.353" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:14.353" starttime="20170725 12:40:14.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:14.354" starttime="20170725 12:40:14.354"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:14.354" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:14.354" starttime="20170725 12:40:14.354"></status>
</kw>
<msg timestamp="20170725 12:40:14.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:14.355" starttime="20170725 12:40:13.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:14.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:14.355" starttime="20170725 12:40:14.355"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:14.356" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:14.356" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:14.356" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:40:14.356" starttime="20170725 12:40:14.356"></status>
</kw>
<msg timestamp="20170725 12:40:14.356" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:40:14.356" starttime="20170725 12:40:13.990"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:14.357" starttime="20170725 12:40:13.989"></status>
</kw>
<msg timestamp="20170725 12:40:14.357" level="FAIL">
#(UTC) 2017/07/25 12:40:14.356907 -   10.989449 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:40:14.358" starttime="20170725 12:40:13.369"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:24.363" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:24.364" starttime="20170725 12:40:24.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:24.365" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:24.365" starttime="20170725 12:40:24.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:24.366" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:24.366" starttime="20170725 12:40:24.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:24.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:24.366" starttime="20170725 12:40:24.366"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:24.553" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:24.553" starttime="20170725 12:40:24.367"></status>
</kw>
<msg timestamp="20170725 12:40:24.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:24.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.553" starttime="20170725 12:40:24.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:24.554" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.554" starttime="20170725 12:40:24.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:24.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.555" starttime="20170725 12:40:24.554"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:24.555" starttime="20170725 12:40:24.363"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:24.555" starttime="20170725 12:40:24.362"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:24.555" starttime="20170725 12:40:24.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:24.555" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:40:24.555" starttime="20170725 12:40:24.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:24.556" starttime="20170725 12:40:24.556"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:24.717" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:24.717" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.717" starttime="20170725 12:40:24.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:24.718" starttime="20170725 12:40:24.718"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:24.718" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:24.718" starttime="20170725 12:40:24.718"></status>
</kw>
<msg timestamp="20170725 12:40:24.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.719" starttime="20170725 12:40:24.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:24.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.719" starttime="20170725 12:40:24.719"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:24.720" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:24.720" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:24.720" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:40:24.720" starttime="20170725 12:40:24.720"></status>
</kw>
<msg timestamp="20170725 12:40:24.721" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:40:24.721" starttime="20170725 12:40:24.360"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:24.721" starttime="20170725 12:40:24.360"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:24.725" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:24.726" starttime="20170725 12:40:24.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:24.726" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:24.726" starttime="20170725 12:40:24.726"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:24.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:24.727" starttime="20170725 12:40:24.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:24.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:24.728" starttime="20170725 12:40:24.727"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:24.925" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:24.925" starttime="20170725 12:40:24.728"></status>
</kw>
<msg timestamp="20170725 12:40:24.925" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:24.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.925" starttime="20170725 12:40:24.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:24.926" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.926" starttime="20170725 12:40:24.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:24.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:24.927" starttime="20170725 12:40:24.926"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:24.927" starttime="20170725 12:40:24.724"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:24.927" starttime="20170725 12:40:24.723"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:24.927" starttime="20170725 12:40:24.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:24.928" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:40:24.928" starttime="20170725 12:40:24.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:24.928" starttime="20170725 12:40:24.928"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:25.012" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:40:25.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.012" starttime="20170725 12:40:24.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:25.012" starttime="20170725 12:40:25.012"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:25.013" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:25.013" starttime="20170725 12:40:25.013"></status>
</kw>
<msg timestamp="20170725 12:40:25.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.013" starttime="20170725 12:40:24.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:25.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.014" starttime="20170725 12:40:25.013"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:25.014" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:25.015" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:25.015" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:40:25.015" starttime="20170725 12:40:25.014"></status>
</kw>
<msg timestamp="20170725 12:40:25.015" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:40:25.015" starttime="20170725 12:40:24.722"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:25.015" starttime="20170725 12:40:24.721"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:25.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:25.020" starttime="20170725 12:40:25.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:25.020" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:25.020" starttime="20170725 12:40:25.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:25.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:25.021" starttime="20170725 12:40:25.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:25.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:25.022" starttime="20170725 12:40:25.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:25.231" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:25.232" starttime="20170725 12:40:25.022"></status>
</kw>
<msg timestamp="20170725 12:40:25.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:25.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.232" starttime="20170725 12:40:25.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:25.232" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.233" starttime="20170725 12:40:25.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:25.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.233" starttime="20170725 12:40:25.233"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:25.233" starttime="20170725 12:40:25.018"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:25.233" starttime="20170725 12:40:25.018"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:25.234" starttime="20170725 12:40:25.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:25.234" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:40:25.234" starttime="20170725 12:40:25.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:25.235" starttime="20170725 12:40:25.234"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:25.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:25.297" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.297" starttime="20170725 12:40:25.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:25.298" starttime="20170725 12:40:25.297"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:25.298" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:25.298" starttime="20170725 12:40:25.298"></status>
</kw>
<msg timestamp="20170725 12:40:25.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.298" starttime="20170725 12:40:25.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:25.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:25.299" starttime="20170725 12:40:25.299"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:25.300" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:25.300" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:25.300" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:40:25.300" starttime="20170725 12:40:25.299"></status>
</kw>
<msg timestamp="20170725 12:40:25.300" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:40:25.300" starttime="20170725 12:40:25.016"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:25.300" starttime="20170725 12:40:25.015"></status>
</kw>
<msg timestamp="20170725 12:40:25.301" level="FAIL">
#(UTC) 2017/07/25 12:40:25.300658 -   10.943751 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:40:25.301" starttime="20170725 12:40:24.358"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:35.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:35.308" starttime="20170725 12:40:35.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:35.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:35.309" starttime="20170725 12:40:35.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:35.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:35.309" starttime="20170725 12:40:35.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:35.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:35.310" starttime="20170725 12:40:35.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:35.532" starttime="20170725 12:40:35.311"></status>
</kw>
<msg timestamp="20170725 12:40:35.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:35.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.532" starttime="20170725 12:40:35.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.533" starttime="20170725 12:40:35.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.534" starttime="20170725 12:40:35.533"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.534" starttime="20170725 12:40:35.306"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.534" starttime="20170725 12:40:35.306"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.534" starttime="20170725 12:40:35.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:35.535" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:40:35.535" starttime="20170725 12:40:35.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:35.535" starttime="20170725 12:40:35.535"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:35.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:35.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.597" starttime="20170725 12:40:35.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:35.598" starttime="20170725 12:40:35.598"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:35.598" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:35.599" starttime="20170725 12:40:35.598"></status>
</kw>
<msg timestamp="20170725 12:40:35.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.599" starttime="20170725 12:40:35.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.599" starttime="20170725 12:40:35.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:35.600" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:35.600" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:35.600" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:40:35.600" starttime="20170725 12:40:35.600"></status>
</kw>
<msg timestamp="20170725 12:40:35.600" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:40:35.601" starttime="20170725 12:40:35.304"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.601" starttime="20170725 12:40:35.303"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:35.604" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:35.608" starttime="20170725 12:40:35.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:35.609" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:35.609" starttime="20170725 12:40:35.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:35.610" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:35.610" starttime="20170725 12:40:35.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:35.610" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:35.611" starttime="20170725 12:40:35.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.824" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:35.824" starttime="20170725 12:40:35.611"></status>
</kw>
<msg timestamp="20170725 12:40:35.824" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:35.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.824" starttime="20170725 12:40:35.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.825" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.825" starttime="20170725 12:40:35.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.826" starttime="20170725 12:40:35.825"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.826" starttime="20170725 12:40:35.604"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.826" starttime="20170725 12:40:35.603"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.826" starttime="20170725 12:40:35.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:35.826" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:40:35.826" starttime="20170725 12:40:35.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:35.827" starttime="20170725 12:40:35.827"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:35.893" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:40:35.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.893" starttime="20170725 12:40:35.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:35.894" starttime="20170725 12:40:35.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:35.894" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:35.894" starttime="20170725 12:40:35.894"></status>
</kw>
<msg timestamp="20170725 12:40:35.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.894" starttime="20170725 12:40:35.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:35.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:35.895" starttime="20170725 12:40:35.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:35.896" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:35.896" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:35.896" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:40:35.896" starttime="20170725 12:40:35.895"></status>
</kw>
<msg timestamp="20170725 12:40:35.896" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:40:35.896" starttime="20170725 12:40:35.601"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:35.896" starttime="20170725 12:40:35.601"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:35.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:35.901" starttime="20170725 12:40:35.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:35.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:35.901" starttime="20170725 12:40:35.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:35.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:35.902" starttime="20170725 12:40:35.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:35.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:35.903" starttime="20170725 12:40:35.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:36.086" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:36.086" starttime="20170725 12:40:35.903"></status>
</kw>
<msg timestamp="20170725 12:40:36.086" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:36.086" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:36.086" starttime="20170725 12:40:35.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:36.087" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:36.087" starttime="20170725 12:40:36.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:36.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:36.088" starttime="20170725 12:40:36.087"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:36.088" starttime="20170725 12:40:35.899"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:36.088" starttime="20170725 12:40:35.899"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:36.088" starttime="20170725 12:40:35.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:36.089" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:40:36.089" starttime="20170725 12:40:36.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:36.090" starttime="20170725 12:40:36.089"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:36.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:36.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:36.155" starttime="20170725 12:40:36.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:36.155" starttime="20170725 12:40:36.155"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:36.156" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:36.156" starttime="20170725 12:40:36.156"></status>
</kw>
<msg timestamp="20170725 12:40:36.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:36.156" starttime="20170725 12:40:35.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:36.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:36.157" starttime="20170725 12:40:36.156"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:36.157" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:36.157" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:36.158" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:40:36.158" starttime="20170725 12:40:36.157"></status>
</kw>
<msg timestamp="20170725 12:40:36.158" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:40:36.158" starttime="20170725 12:40:35.897"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:36.158" starttime="20170725 12:40:35.896"></status>
</kw>
<msg timestamp="20170725 12:40:36.159" level="FAIL">
#(UTC) 2017/07/25 12:40:36.158631 -   10.857973 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:40:36.159" starttime="20170725 12:40:35.302"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:46.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:46.166" starttime="20170725 12:40:46.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:46.167" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:46.167" starttime="20170725 12:40:46.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:46.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:46.167" starttime="20170725 12:40:46.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:46.168" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:46.168" starttime="20170725 12:40:46.168"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:46.355" starttime="20170725 12:40:46.169"></status>
</kw>
<msg timestamp="20170725 12:40:46.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:46.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.355" starttime="20170725 12:40:46.169"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.355" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.356" starttime="20170725 12:40:46.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.356" starttime="20170725 12:40:46.356"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.356" starttime="20170725 12:40:46.164"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.356" starttime="20170725 12:40:46.164"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.357" starttime="20170725 12:40:46.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:46.357" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:40:46.357" starttime="20170725 12:40:46.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:46.358" starttime="20170725 12:40:46.358"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:46.421" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:46.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.422" starttime="20170725 12:40:46.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:46.422" starttime="20170725 12:40:46.422"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:46.423" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:46.423" starttime="20170725 12:40:46.422"></status>
</kw>
<msg timestamp="20170725 12:40:46.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.423" starttime="20170725 12:40:46.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.424" starttime="20170725 12:40:46.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:46.424" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:46.424" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:46.424" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:40:46.424" starttime="20170725 12:40:46.424"></status>
</kw>
<msg timestamp="20170725 12:40:46.425" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:40:46.425" starttime="20170725 12:40:46.162"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.425" starttime="20170725 12:40:46.162"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:46.429" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:46.430" starttime="20170725 12:40:46.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:46.431" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:46.431" starttime="20170725 12:40:46.430"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:46.431" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:46.431" starttime="20170725 12:40:46.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:46.432" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:46.432" starttime="20170725 12:40:46.432"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.617" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:46.617" starttime="20170725 12:40:46.433"></status>
</kw>
<msg timestamp="20170725 12:40:46.617" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:46.617" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.617" starttime="20170725 12:40:46.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.618" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.618" starttime="20170725 12:40:46.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.619" starttime="20170725 12:40:46.618"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.619" starttime="20170725 12:40:46.428"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.619" starttime="20170725 12:40:46.428"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.619" starttime="20170725 12:40:46.427"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:46.620" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:40:46.620" starttime="20170725 12:40:46.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:46.620" starttime="20170725 12:40:46.620"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:46.720" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:40:46.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.720" starttime="20170725 12:40:46.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:46.721" starttime="20170725 12:40:46.720"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:46.721" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:46.721" starttime="20170725 12:40:46.721"></status>
</kw>
<msg timestamp="20170725 12:40:46.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.722" starttime="20170725 12:40:46.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:46.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:46.722" starttime="20170725 12:40:46.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:46.723" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:46.723" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:46.723" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:40:46.723" starttime="20170725 12:40:46.722"></status>
</kw>
<msg timestamp="20170725 12:40:46.723" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:40:46.723" starttime="20170725 12:40:46.426"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:46.723" starttime="20170725 12:40:46.425"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:46.727" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:46.728" starttime="20170725 12:40:46.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:46.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:46.729" starttime="20170725 12:40:46.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:46.729" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:46.729" starttime="20170725 12:40:46.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:46.730" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:46.730" starttime="20170725 12:40:46.729"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:47.061" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:47.061" starttime="20170725 12:40:46.731"></status>
</kw>
<msg timestamp="20170725 12:40:47.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:47.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:47.061" starttime="20170725 12:40:46.730"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:47.062" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:47.062" starttime="20170725 12:40:47.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:47.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:47.063" starttime="20170725 12:40:47.062"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:47.063" starttime="20170725 12:40:46.726"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:47.063" starttime="20170725 12:40:46.726"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:47.063" starttime="20170725 12:40:46.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:47.064" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:40:47.064" starttime="20170725 12:40:47.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:47.064" starttime="20170725 12:40:47.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:47.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:47.128" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:47.128" starttime="20170725 12:40:47.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:47.129" starttime="20170725 12:40:47.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:47.129" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:47.129" starttime="20170725 12:40:47.129"></status>
</kw>
<msg timestamp="20170725 12:40:47.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:47.130" starttime="20170725 12:40:46.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:47.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:47.130" starttime="20170725 12:40:47.130"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:47.131" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:47.131" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:47.131" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:40:47.131" starttime="20170725 12:40:47.131"></status>
</kw>
<msg timestamp="20170725 12:40:47.131" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:40:47.131" starttime="20170725 12:40:46.724"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:47.132" starttime="20170725 12:40:46.724"></status>
</kw>
<msg timestamp="20170725 12:40:47.132" level="FAIL">
#(UTC) 2017/07/25 12:40:47.131850 -   10.973219 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:40:47.132" starttime="20170725 12:40:46.160"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:57.138" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:57.139" starttime="20170725 12:40:57.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:57.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:57.139" starttime="20170725 12:40:57.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:57.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:57.140" starttime="20170725 12:40:57.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:57.141" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:57.141" starttime="20170725 12:40:57.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.351" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:57.351" starttime="20170725 12:40:57.141"></status>
</kw>
<msg timestamp="20170725 12:40:57.351" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:57.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.351" starttime="20170725 12:40:57.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.352" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.352" starttime="20170725 12:40:57.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.353" starttime="20170725 12:40:57.352"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.353" starttime="20170725 12:40:57.137"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.353" starttime="20170725 12:40:57.137"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.353" starttime="20170725 12:40:57.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:57.353" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:40:57.353" starttime="20170725 12:40:57.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:57.354" starttime="20170725 12:40:57.354"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:57.446" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:57.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.446" starttime="20170725 12:40:57.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:57.447" starttime="20170725 12:40:57.446"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:57.447" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:57.447" starttime="20170725 12:40:57.447"></status>
</kw>
<msg timestamp="20170725 12:40:57.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.447" starttime="20170725 12:40:57.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.448" starttime="20170725 12:40:57.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:57.449" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:57.449" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:57.449" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:40:57.449" starttime="20170725 12:40:57.448"></status>
</kw>
<msg timestamp="20170725 12:40:57.449" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:40:57.449" starttime="20170725 12:40:57.135"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.449" starttime="20170725 12:40:57.134"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:57.453" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:57.454" starttime="20170725 12:40:57.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:57.454" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:57.454" starttime="20170725 12:40:57.454"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:57.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:57.455" starttime="20170725 12:40:57.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:57.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:57.456" starttime="20170725 12:40:57.455"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:57.648" starttime="20170725 12:40:57.456"></status>
</kw>
<msg timestamp="20170725 12:40:57.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:57.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.648" starttime="20170725 12:40:57.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.649" starttime="20170725 12:40:57.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.650" starttime="20170725 12:40:57.649"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.650" starttime="20170725 12:40:57.452"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.650" starttime="20170725 12:40:57.452"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.650" starttime="20170725 12:40:57.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:57.651" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:40:57.651" starttime="20170725 12:40:57.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:57.651" starttime="20170725 12:40:57.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:57.716" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:40:57.716" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.716" starttime="20170725 12:40:57.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:57.717" starttime="20170725 12:40:57.717"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:57.717" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:57.718" starttime="20170725 12:40:57.717"></status>
</kw>
<msg timestamp="20170725 12:40:57.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.718" starttime="20170725 12:40:57.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.719" starttime="20170725 12:40:57.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:57.719" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:57.719" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:57.719" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:40:57.719" starttime="20170725 12:40:57.719"></status>
</kw>
<msg timestamp="20170725 12:40:57.720" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:40:57.720" starttime="20170725 12:40:57.450"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.720" starttime="20170725 12:40:57.450"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:40:57.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:40:57.724" starttime="20170725 12:40:57.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:40:57.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:40:57.725" starttime="20170725 12:40:57.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:40:57.726" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:40:57.726" starttime="20170725 12:40:57.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:40:57.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:40:57.727" starttime="20170725 12:40:57.726"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:40:57.912" starttime="20170725 12:40:57.728"></status>
</kw>
<msg timestamp="20170725 12:40:57.912" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:40:57.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.912" starttime="20170725 12:40:57.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.913" starttime="20170725 12:40:57.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:57.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:57.913" starttime="20170725 12:40:57.913"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.914" starttime="20170725 12:40:57.723"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.914" starttime="20170725 12:40:57.722"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:57.914" starttime="20170725 12:40:57.722"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:40:57.914" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:40:57.914" starttime="20170725 12:40:57.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:57.915" starttime="20170725 12:40:57.915"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:40:58.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:40:58.066" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:58.066" starttime="20170725 12:40:57.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:40:58.066" starttime="20170725 12:40:58.066"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:40:58.067" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:40:58.067" starttime="20170725 12:40:58.067"></status>
</kw>
<msg timestamp="20170725 12:40:58.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:40:58.067" starttime="20170725 12:40:57.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:40:58.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:40:58.068" starttime="20170725 12:40:58.067"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:40:58.068" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:40:58.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:40:58.069" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:40:58.069" starttime="20170725 12:40:58.068"></status>
</kw>
<msg timestamp="20170725 12:40:58.069" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:40:58.069" starttime="20170725 12:40:57.720"></status>
</kw>
<status status="PASS" endtime="20170725 12:40:58.069" starttime="20170725 12:40:57.720"></status>
</kw>
<msg timestamp="20170725 12:40:58.070" level="FAIL">
#(UTC) 2017/07/25 12:40:58.069428 -   10.937578 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:40:58.070" starttime="20170725 12:40:57.133"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:08.075" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:08.076" starttime="20170725 12:41:08.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:08.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:08.077" starttime="20170725 12:41:08.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:08.077" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:08.077" starttime="20170725 12:41:08.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:08.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:08.078" starttime="20170725 12:41:08.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:08.262" starttime="20170725 12:41:08.079"></status>
</kw>
<msg timestamp="20170725 12:41:08.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:08.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.262" starttime="20170725 12:41:08.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.263" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.263" starttime="20170725 12:41:08.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.264" starttime="20170725 12:41:08.263"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.264" starttime="20170725 12:41:08.074"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.264" starttime="20170725 12:41:08.074"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.264" starttime="20170725 12:41:08.073"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:08.265" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:41:08.265" starttime="20170725 12:41:08.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:08.265" starttime="20170725 12:41:08.265"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:08.327" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:08.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.327" starttime="20170725 12:41:08.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:08.328" starttime="20170725 12:41:08.328"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:08.328" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:08.329" starttime="20170725 12:41:08.328"></status>
</kw>
<msg timestamp="20170725 12:41:08.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.329" starttime="20170725 12:41:08.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.330" starttime="20170725 12:41:08.329"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:08.330" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:08.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:08.330" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:41:08.330" starttime="20170725 12:41:08.330"></status>
</kw>
<msg timestamp="20170725 12:41:08.331" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:41:08.331" starttime="20170725 12:41:08.072"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.331" starttime="20170725 12:41:08.072"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:08.335" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:08.335" starttime="20170725 12:41:08.334"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:08.336" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:08.336" starttime="20170725 12:41:08.336"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:08.337" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:08.337" starttime="20170725 12:41:08.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:08.337" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:08.337" starttime="20170725 12:41:08.337"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.579" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:08.579" starttime="20170725 12:41:08.338"></status>
</kw>
<msg timestamp="20170725 12:41:08.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:08.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.579" starttime="20170725 12:41:08.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.580" starttime="20170725 12:41:08.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.581" starttime="20170725 12:41:08.580"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.581" starttime="20170725 12:41:08.334"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.581" starttime="20170725 12:41:08.333"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.581" starttime="20170725 12:41:08.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:08.582" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:41:08.582" starttime="20170725 12:41:08.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:08.582" starttime="20170725 12:41:08.582"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:08.657" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:41:08.657" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.657" starttime="20170725 12:41:08.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:08.658" starttime="20170725 12:41:08.657"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:08.658" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:08.658" starttime="20170725 12:41:08.658"></status>
</kw>
<msg timestamp="20170725 12:41:08.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.659" starttime="20170725 12:41:08.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.659" starttime="20170725 12:41:08.659"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:08.660" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:08.660" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:08.660" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:41:08.660" starttime="20170725 12:41:08.660"></status>
</kw>
<msg timestamp="20170725 12:41:08.660" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:41:08.660" starttime="20170725 12:41:08.332"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.660" starttime="20170725 12:41:08.331"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:08.664" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:08.665" starttime="20170725 12:41:08.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:08.665" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:08.666" starttime="20170725 12:41:08.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:08.666" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:08.666" starttime="20170725 12:41:08.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:08.667" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:08.667" starttime="20170725 12:41:08.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.886" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:08.886" starttime="20170725 12:41:08.668"></status>
</kw>
<msg timestamp="20170725 12:41:08.886" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:08.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.886" starttime="20170725 12:41:08.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.887" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.887" starttime="20170725 12:41:08.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.887" starttime="20170725 12:41:08.887"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.888" starttime="20170725 12:41:08.663"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.888" starttime="20170725 12:41:08.663"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.888" starttime="20170725 12:41:08.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:08.888" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:41:08.888" starttime="20170725 12:41:08.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:08.889" starttime="20170725 12:41:08.889"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:08.960" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:08.960" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.960" starttime="20170725 12:41:08.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:08.961" starttime="20170725 12:41:08.961"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:08.961" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:08.962" starttime="20170725 12:41:08.961"></status>
</kw>
<msg timestamp="20170725 12:41:08.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.962" starttime="20170725 12:41:08.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:08.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:08.963" starttime="20170725 12:41:08.962"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:08.963" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:08.963" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:08.963" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:41:08.963" starttime="20170725 12:41:08.963"></status>
</kw>
<msg timestamp="20170725 12:41:08.964" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:41:08.964" starttime="20170725 12:41:08.661"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:08.964" starttime="20170725 12:41:08.661"></status>
</kw>
<msg timestamp="20170725 12:41:08.964" level="FAIL">
#(UTC) 2017/07/25 12:41:08.964110 -   10.894682 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:41:08.965" starttime="20170725 12:41:08.070"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:18.970" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:18.971" starttime="20170725 12:41:18.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:18.972" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:18.972" starttime="20170725 12:41:18.971"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:18.972" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:18.972" starttime="20170725 12:41:18.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:18.973" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:18.973" starttime="20170725 12:41:18.972"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.152" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:19.152" starttime="20170725 12:41:18.974"></status>
</kw>
<msg timestamp="20170725 12:41:19.152" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:19.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.152" starttime="20170725 12:41:18.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.153" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.153" starttime="20170725 12:41:19.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.153" starttime="20170725 12:41:19.153"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.153" starttime="20170725 12:41:18.969"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.154" starttime="20170725 12:41:18.969"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.154" starttime="20170725 12:41:18.968"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:19.154" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:41:19.154" starttime="20170725 12:41:19.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:19.155" starttime="20170725 12:41:19.155"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:19.217" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:19.217" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.217" starttime="20170725 12:41:19.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:19.218" starttime="20170725 12:41:19.217"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:19.218" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:19.218" starttime="20170725 12:41:19.218"></status>
</kw>
<msg timestamp="20170725 12:41:19.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.218" starttime="20170725 12:41:18.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.219" starttime="20170725 12:41:19.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:19.220" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:19.220" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:19.220" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:41:19.220" starttime="20170725 12:41:19.219"></status>
</kw>
<msg timestamp="20170725 12:41:19.220" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:41:19.220" starttime="20170725 12:41:18.967"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.221" starttime="20170725 12:41:18.967"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:19.224" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:19.228" starttime="20170725 12:41:19.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:19.229" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:19.229" starttime="20170725 12:41:19.229"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:19.230" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:19.230" starttime="20170725 12:41:19.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:19.231" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:19.231" starttime="20170725 12:41:19.230"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.487" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:19.487" starttime="20170725 12:41:19.231"></status>
</kw>
<msg timestamp="20170725 12:41:19.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:19.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.487" starttime="20170725 12:41:19.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.488" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.488" starttime="20170725 12:41:19.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.489" starttime="20170725 12:41:19.488"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.489" starttime="20170725 12:41:19.223"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.489" starttime="20170725 12:41:19.223"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.489" starttime="20170725 12:41:19.222"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:19.490" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:41:19.490" starttime="20170725 12:41:19.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:19.490" starttime="20170725 12:41:19.490"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:19.566" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:41:19.566" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.566" starttime="20170725 12:41:19.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:19.567" starttime="20170725 12:41:19.567"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:19.567" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:19.567" starttime="20170725 12:41:19.567"></status>
</kw>
<msg timestamp="20170725 12:41:19.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.568" starttime="20170725 12:41:19.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.568" starttime="20170725 12:41:19.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:19.569" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:19.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:19.569" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:41:19.569" starttime="20170725 12:41:19.569"></status>
</kw>
<msg timestamp="20170725 12:41:19.569" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:41:19.570" starttime="20170725 12:41:19.221"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.570" starttime="20170725 12:41:19.221"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:19.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:19.574" starttime="20170725 12:41:19.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:19.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:19.575" starttime="20170725 12:41:19.574"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:19.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:19.575" starttime="20170725 12:41:19.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:19.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:19.576" starttime="20170725 12:41:19.576"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.809" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:19.809" starttime="20170725 12:41:19.577"></status>
</kw>
<msg timestamp="20170725 12:41:19.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:19.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.809" starttime="20170725 12:41:19.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.810" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.810" starttime="20170725 12:41:19.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.811" starttime="20170725 12:41:19.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.811" starttime="20170725 12:41:19.573"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.811" starttime="20170725 12:41:19.572"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.811" starttime="20170725 12:41:19.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:19.812" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:41:19.812" starttime="20170725 12:41:19.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:19.813" starttime="20170725 12:41:19.812"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:19.901" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:19.901" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.901" starttime="20170725 12:41:19.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:19.902" starttime="20170725 12:41:19.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:19.902" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:19.902" starttime="20170725 12:41:19.902"></status>
</kw>
<msg timestamp="20170725 12:41:19.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.902" starttime="20170725 12:41:19.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:19.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:19.903" starttime="20170725 12:41:19.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:19.904" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:19.904" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:19.904" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:41:19.904" starttime="20170725 12:41:19.903"></status>
</kw>
<msg timestamp="20170725 12:41:19.904" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:41:19.904" starttime="20170725 12:41:19.570"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:19.904" starttime="20170725 12:41:19.570"></status>
</kw>
<msg timestamp="20170725 12:41:19.905" level="FAIL">
#(UTC) 2017/07/25 12:41:19.904508 -   10.940398 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:41:19.905" starttime="20170725 12:41:18.965"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:29.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:29.913" starttime="20170725 12:41:29.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:29.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:29.913" starttime="20170725 12:41:29.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:29.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:29.914" starttime="20170725 12:41:29.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:29.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:29.915" starttime="20170725 12:41:29.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.098" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:30.098" starttime="20170725 12:41:29.915"></status>
</kw>
<msg timestamp="20170725 12:41:30.098" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:30.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.099" starttime="20170725 12:41:29.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.099" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.099" starttime="20170725 12:41:30.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.100" starttime="20170725 12:41:30.100"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.100" starttime="20170725 12:41:29.911"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.100" starttime="20170725 12:41:29.911"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.100" starttime="20170725 12:41:29.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:30.101" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:41:30.101" starttime="20170725 12:41:30.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:30.102" starttime="20170725 12:41:30.101"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:30.165" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:30.165" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.165" starttime="20170725 12:41:30.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:30.166" starttime="20170725 12:41:30.166"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:30.166" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:30.166" starttime="20170725 12:41:30.166"></status>
</kw>
<msg timestamp="20170725 12:41:30.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.167" starttime="20170725 12:41:29.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.167" starttime="20170725 12:41:30.167"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:30.168" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:30.168" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:30.168" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:41:30.168" starttime="20170725 12:41:30.168"></status>
</kw>
<msg timestamp="20170725 12:41:30.168" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:41:30.168" starttime="20170725 12:41:29.909"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.169" starttime="20170725 12:41:29.908"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:30.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:30.173" starttime="20170725 12:41:30.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:30.174" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:30.174" starttime="20170725 12:41:30.173"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:30.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:30.175" starttime="20170725 12:41:30.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:30.175" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:30.175" starttime="20170725 12:41:30.175"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.357" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:30.357" starttime="20170725 12:41:30.176"></status>
</kw>
<msg timestamp="20170725 12:41:30.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:30.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.357" starttime="20170725 12:41:30.176"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.358" starttime="20170725 12:41:30.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.359" starttime="20170725 12:41:30.359"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.359" starttime="20170725 12:41:30.172"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.359" starttime="20170725 12:41:30.171"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.359" starttime="20170725 12:41:30.171"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:30.360" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:41:30.360" starttime="20170725 12:41:30.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:30.361" starttime="20170725 12:41:30.360"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:30.474" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:41:30.474" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.474" starttime="20170725 12:41:30.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:30.475" starttime="20170725 12:41:30.475"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:30.475" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:30.475" starttime="20170725 12:41:30.475"></status>
</kw>
<msg timestamp="20170725 12:41:30.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.476" starttime="20170725 12:41:30.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.476" starttime="20170725 12:41:30.476"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:30.477" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:30.477" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:30.477" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:41:30.477" starttime="20170725 12:41:30.477"></status>
</kw>
<msg timestamp="20170725 12:41:30.477" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:41:30.477" starttime="20170725 12:41:30.169"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.478" starttime="20170725 12:41:30.169"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:30.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:30.483" starttime="20170725 12:41:30.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:30.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:30.483" starttime="20170725 12:41:30.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:30.484" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:30.484" starttime="20170725 12:41:30.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:30.485" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:30.485" starttime="20170725 12:41:30.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:30.717" starttime="20170725 12:41:30.486"></status>
</kw>
<msg timestamp="20170725 12:41:30.717" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:30.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.717" starttime="20170725 12:41:30.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.719" starttime="20170725 12:41:30.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.720" starttime="20170725 12:41:30.719"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.720" starttime="20170725 12:41:30.481"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.720" starttime="20170725 12:41:30.480"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.720" starttime="20170725 12:41:30.480"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:30.721" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:41:30.721" starttime="20170725 12:41:30.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:30.722" starttime="20170725 12:41:30.722"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:30.800" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:30.801" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.801" starttime="20170725 12:41:30.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:30.801" starttime="20170725 12:41:30.801"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:30.802" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:30.802" starttime="20170725 12:41:30.802"></status>
</kw>
<msg timestamp="20170725 12:41:30.802" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.802" starttime="20170725 12:41:30.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:30.803" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:30.803" starttime="20170725 12:41:30.802"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:30.803" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:30.803" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:30.803" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:41:30.804" starttime="20170725 12:41:30.803"></status>
</kw>
<msg timestamp="20170725 12:41:30.804" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:41:30.804" starttime="20170725 12:41:30.478"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:30.804" starttime="20170725 12:41:30.478"></status>
</kw>
<msg timestamp="20170725 12:41:30.805" level="FAIL">
#(UTC) 2017/07/25 12:41:30.804360 -   10.899852 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:41:30.805" starttime="20170725 12:41:29.906"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:40.814" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:40.815" starttime="20170725 12:41:40.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:40.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:40.815" starttime="20170725 12:41:40.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:40.816" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:40.816" starttime="20170725 12:41:40.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:40.817" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:40.817" starttime="20170725 12:41:40.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.007" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:41.008" starttime="20170725 12:41:40.818"></status>
</kw>
<msg timestamp="20170725 12:41:41.008" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:41.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.008" starttime="20170725 12:41:40.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.009" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.009" starttime="20170725 12:41:41.008"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.009" starttime="20170725 12:41:41.009"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.010" starttime="20170725 12:41:40.813"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.010" starttime="20170725 12:41:40.813"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.010" starttime="20170725 12:41:40.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:41.011" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:41:41.011" starttime="20170725 12:41:41.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:41.011" starttime="20170725 12:41:41.011"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:41.181" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:41.182" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.182" starttime="20170725 12:41:41.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:41.183" starttime="20170725 12:41:41.182"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:41.183" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:41.183" starttime="20170725 12:41:41.183"></status>
</kw>
<msg timestamp="20170725 12:41:41.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.183" starttime="20170725 12:41:40.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.184" starttime="20170725 12:41:41.184"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:41.185" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:41.185" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:41.185" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:41:41.185" starttime="20170725 12:41:41.184"></status>
</kw>
<msg timestamp="20170725 12:41:41.185" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:41:41.186" starttime="20170725 12:41:40.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.186" starttime="20170725 12:41:40.810"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:41.191" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:41.191" starttime="20170725 12:41:41.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:41.194" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:41.194" starttime="20170725 12:41:41.192"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:41.195" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:41.195" starttime="20170725 12:41:41.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:41.196" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:41.196" starttime="20170725 12:41:41.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.400" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:41.401" starttime="20170725 12:41:41.197"></status>
</kw>
<msg timestamp="20170725 12:41:41.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:41.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.401" starttime="20170725 12:41:41.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.402" starttime="20170725 12:41:41.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.402" starttime="20170725 12:41:41.402"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.403" starttime="20170725 12:41:41.190"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.403" starttime="20170725 12:41:41.189"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.403" starttime="20170725 12:41:41.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:41.404" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:41:41.404" starttime="20170725 12:41:41.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:41.405" starttime="20170725 12:41:41.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:41.471" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:41:41.471" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.471" starttime="20170725 12:41:41.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:41.472" starttime="20170725 12:41:41.471"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:41.472" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:41.472" starttime="20170725 12:41:41.472"></status>
</kw>
<msg timestamp="20170725 12:41:41.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.473" starttime="20170725 12:41:41.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.473" starttime="20170725 12:41:41.473"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:41.475" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:41.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:41.475" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:41:41.475" starttime="20170725 12:41:41.474"></status>
</kw>
<msg timestamp="20170725 12:41:41.475" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:41:41.475" starttime="20170725 12:41:41.187"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.475" starttime="20170725 12:41:41.186"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:41.480" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:41.481" starttime="20170725 12:41:41.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:41.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:41.482" starttime="20170725 12:41:41.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:41.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:41.483" starttime="20170725 12:41:41.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:41.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:41.483" starttime="20170725 12:41:41.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.667" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:41.668" starttime="20170725 12:41:41.484"></status>
</kw>
<msg timestamp="20170725 12:41:41.668" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:41.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.668" starttime="20170725 12:41:41.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.669" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.669" starttime="20170725 12:41:41.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.670" starttime="20170725 12:41:41.670"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.670" starttime="20170725 12:41:41.479"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.670" starttime="20170725 12:41:41.479"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.670" starttime="20170725 12:41:41.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:41.671" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:41:41.671" starttime="20170725 12:41:41.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:41.672" starttime="20170725 12:41:41.671"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:41.735" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:41.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.736" starttime="20170725 12:41:41.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:41.737" starttime="20170725 12:41:41.736"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:41.737" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:41.737" starttime="20170725 12:41:41.737"></status>
</kw>
<msg timestamp="20170725 12:41:41.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.737" starttime="20170725 12:41:41.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:41.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:41.738" starttime="20170725 12:41:41.738"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:41.739" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:41.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:41.739" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:41:41.739" starttime="20170725 12:41:41.738"></status>
</kw>
<msg timestamp="20170725 12:41:41.739" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:41:41.739" starttime="20170725 12:41:41.477"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:41.739" starttime="20170725 12:41:41.476"></status>
</kw>
<msg timestamp="20170725 12:41:41.740" level="FAIL">
#(UTC) 2017/07/25 12:41:41.739815 -   10.935455 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:41:41.741" starttime="20170725 12:41:40.807"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:51.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:51.750" starttime="20170725 12:41:51.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:51.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:51.751" starttime="20170725 12:41:51.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:51.752" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:51.752" starttime="20170725 12:41:51.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:51.753" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:51.753" starttime="20170725 12:41:51.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:51.964" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:51.964" starttime="20170725 12:41:51.754"></status>
</kw>
<msg timestamp="20170725 12:41:51.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:51.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:51.965" starttime="20170725 12:41:51.753"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:51.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:51.966" starttime="20170725 12:41:51.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:51.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:51.967" starttime="20170725 12:41:51.967"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:51.967" starttime="20170725 12:41:51.748"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:51.967" starttime="20170725 12:41:51.748"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:51.967" starttime="20170725 12:41:51.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:51.968" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:41:51.968" starttime="20170725 12:41:51.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:51.969" starttime="20170725 12:41:51.968"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:52.032" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:52.032" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.032" starttime="20170725 12:41:51.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:52.033" starttime="20170725 12:41:52.033"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:52.033" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:52.034" starttime="20170725 12:41:52.033"></status>
</kw>
<msg timestamp="20170725 12:41:52.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.034" starttime="20170725 12:41:51.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.034" starttime="20170725 12:41:52.034"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:52.035" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:52.035" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:52.036" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:41:52.036" starttime="20170725 12:41:52.035"></status>
</kw>
<msg timestamp="20170725 12:41:52.036" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:41:52.036" starttime="20170725 12:41:51.746"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.036" starttime="20170725 12:41:51.744"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:52.041" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:52.042" starttime="20170725 12:41:52.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:52.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:52.042" starttime="20170725 12:41:52.042"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:52.045" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:52.045" starttime="20170725 12:41:52.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:52.047" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:52.047" starttime="20170725 12:41:52.046"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.301" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:52.301" starttime="20170725 12:41:52.048"></status>
</kw>
<msg timestamp="20170725 12:41:52.301" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:52.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.302" starttime="20170725 12:41:52.048"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.302" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.302" starttime="20170725 12:41:52.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.303" starttime="20170725 12:41:52.303"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.303" starttime="20170725 12:41:52.040"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.303" starttime="20170725 12:41:52.039"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.304" starttime="20170725 12:41:52.038"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:52.307" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:41:52.307" starttime="20170725 12:41:52.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:52.309" starttime="20170725 12:41:52.308"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:52.375" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:41:52.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.375" starttime="20170725 12:41:52.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:52.376" starttime="20170725 12:41:52.376"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:52.377" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:52.377" starttime="20170725 12:41:52.377"></status>
</kw>
<msg timestamp="20170725 12:41:52.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.377" starttime="20170725 12:41:52.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.378" starttime="20170725 12:41:52.377"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:52.378" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:52.378" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:52.378" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:41:52.379" starttime="20170725 12:41:52.378"></status>
</kw>
<msg timestamp="20170725 12:41:52.379" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:41:52.379" starttime="20170725 12:41:52.037"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.379" starttime="20170725 12:41:52.036"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:41:52.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:41:52.384" starttime="20170725 12:41:52.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:41:52.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:41:52.385" starttime="20170725 12:41:52.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:41:52.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:41:52.386" starttime="20170725 12:41:52.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:41:52.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:41:52.387" starttime="20170725 12:41:52.386"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.568" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:41:52.568" starttime="20170725 12:41:52.388"></status>
</kw>
<msg timestamp="20170725 12:41:52.568" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:41:52.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.568" starttime="20170725 12:41:52.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.569" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.569" starttime="20170725 12:41:52.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.570" starttime="20170725 12:41:52.569"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.570" starttime="20170725 12:41:52.383"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.570" starttime="20170725 12:41:52.382"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.570" starttime="20170725 12:41:52.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:41:52.571" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:41:52.571" starttime="20170725 12:41:52.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:52.571" starttime="20170725 12:41:52.571"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:41:52.636" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:41:52.636" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.636" starttime="20170725 12:41:52.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:41:52.636" starttime="20170725 12:41:52.636"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:41:52.637" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:41:52.637" starttime="20170725 12:41:52.637"></status>
</kw>
<msg timestamp="20170725 12:41:52.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.637" starttime="20170725 12:41:52.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:41:52.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:41:52.639" starttime="20170725 12:41:52.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:41:52.640" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:41:52.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:41:52.640" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:41:52.640" starttime="20170725 12:41:52.640"></status>
</kw>
<msg timestamp="20170725 12:41:52.641" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:41:52.641" starttime="20170725 12:41:52.380"></status>
</kw>
<status status="PASS" endtime="20170725 12:41:52.642" starttime="20170725 12:41:52.379"></status>
</kw>
<msg timestamp="20170725 12:41:52.644" level="FAIL">
#(UTC) 2017/07/25 12:41:52.642956 -   10.903141 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:41:52.644" starttime="20170725 12:41:51.742"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:02.650" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:02.651" starttime="20170725 12:42:02.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:02.652" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:02.652" starttime="20170725 12:42:02.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:02.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:02.653" starttime="20170725 12:42:02.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:02.653" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:02.653" starttime="20170725 12:42:02.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:02.843" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:02.843" starttime="20170725 12:42:02.654"></status>
</kw>
<msg timestamp="20170725 12:42:02.843" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:02.844" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:02.844" starttime="20170725 12:42:02.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:02.844" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:02.844" starttime="20170725 12:42:02.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:02.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:02.845" starttime="20170725 12:42:02.845"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:02.845" starttime="20170725 12:42:02.649"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:02.845" starttime="20170725 12:42:02.649"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:02.845" starttime="20170725 12:42:02.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:02.846" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:42:02.846" starttime="20170725 12:42:02.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:02.847" starttime="20170725 12:42:02.846"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:02.909" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:02.909" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:02.909" starttime="20170725 12:42:02.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:02.909" starttime="20170725 12:42:02.909"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:02.910" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:02.910" starttime="20170725 12:42:02.910"></status>
</kw>
<msg timestamp="20170725 12:42:02.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:02.910" starttime="20170725 12:42:02.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:02.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:02.911" starttime="20170725 12:42:02.910"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:02.911" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:02.912" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:02.912" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:42:02.912" starttime="20170725 12:42:02.911"></status>
</kw>
<msg timestamp="20170725 12:42:02.912" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:42:02.912" starttime="20170725 12:42:02.647"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:02.912" starttime="20170725 12:42:02.646"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:02.916" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:02.926" starttime="20170725 12:42:02.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:02.927" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:02.927" starttime="20170725 12:42:02.926"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:02.928" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:02.928" starttime="20170725 12:42:02.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:02.929" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:02.929" starttime="20170725 12:42:02.928"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:03.248" starttime="20170725 12:42:02.929"></status>
</kw>
<msg timestamp="20170725 12:42:03.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:03.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.248" starttime="20170725 12:42:02.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.249" starttime="20170725 12:42:03.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.250" starttime="20170725 12:42:03.249"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.250" starttime="20170725 12:42:02.915"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.250" starttime="20170725 12:42:02.915"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.250" starttime="20170725 12:42:02.914"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:03.251" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:42:03.251" starttime="20170725 12:42:03.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:03.251" starttime="20170725 12:42:03.251"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:03.316" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:42:03.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.317" starttime="20170725 12:42:03.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:03.317" starttime="20170725 12:42:03.317"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:03.318" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:03.318" starttime="20170725 12:42:03.318"></status>
</kw>
<msg timestamp="20170725 12:42:03.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.318" starttime="20170725 12:42:02.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.319" starttime="20170725 12:42:03.318"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:03.319" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:03.319" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:03.320" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:42:03.320" starttime="20170725 12:42:03.319"></status>
</kw>
<msg timestamp="20170725 12:42:03.320" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:42:03.320" starttime="20170725 12:42:02.913"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.320" starttime="20170725 12:42:02.912"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:03.324" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:03.324" starttime="20170725 12:42:03.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:03.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:03.325" starttime="20170725 12:42:03.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:03.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:03.326" starttime="20170725 12:42:03.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:03.326" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:03.326" starttime="20170725 12:42:03.326"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.522" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:03.522" starttime="20170725 12:42:03.327"></status>
</kw>
<msg timestamp="20170725 12:42:03.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:03.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.522" starttime="20170725 12:42:03.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.523" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.523" starttime="20170725 12:42:03.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.524" starttime="20170725 12:42:03.523"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.524" starttime="20170725 12:42:03.323"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.524" starttime="20170725 12:42:03.322"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.524" starttime="20170725 12:42:03.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:03.525" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:42:03.525" starttime="20170725 12:42:03.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:03.525" starttime="20170725 12:42:03.525"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:03.589" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:03.589" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.589" starttime="20170725 12:42:03.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:03.589" starttime="20170725 12:42:03.589"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:03.590" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:03.590" starttime="20170725 12:42:03.590"></status>
</kw>
<msg timestamp="20170725 12:42:03.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.590" starttime="20170725 12:42:03.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:03.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:03.591" starttime="20170725 12:42:03.590"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:03.591" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:03.591" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:03.592" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:42:03.592" starttime="20170725 12:42:03.591"></status>
</kw>
<msg timestamp="20170725 12:42:03.592" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:42:03.592" starttime="20170725 12:42:03.321"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:03.592" starttime="20170725 12:42:03.320"></status>
</kw>
<msg timestamp="20170725 12:42:03.593" level="FAIL">
#(UTC) 2017/07/25 12:42:03.592514 -   10.949558 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:42:03.593" starttime="20170725 12:42:02.645"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:13.599" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:13.600" starttime="20170725 12:42:13.599"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:13.600" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:13.600" starttime="20170725 12:42:13.600"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:13.601" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:13.601" starttime="20170725 12:42:13.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:13.602" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:13.602" starttime="20170725 12:42:13.601"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:13.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:13.864" starttime="20170725 12:42:13.602"></status>
</kw>
<msg timestamp="20170725 12:42:13.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:13.864" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:13.864" starttime="20170725 12:42:13.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:13.865" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:13.865" starttime="20170725 12:42:13.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:13.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:13.865" starttime="20170725 12:42:13.865"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:13.866" starttime="20170725 12:42:13.598"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:13.866" starttime="20170725 12:42:13.598"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:13.866" starttime="20170725 12:42:13.597"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:13.866" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:42:13.866" starttime="20170725 12:42:13.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:13.867" starttime="20170725 12:42:13.867"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:13.956" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:13.956" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:13.956" starttime="20170725 12:42:13.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:13.957" starttime="20170725 12:42:13.957"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:13.957" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:13.958" starttime="20170725 12:42:13.957"></status>
</kw>
<msg timestamp="20170725 12:42:13.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:13.958" starttime="20170725 12:42:13.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:13.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:13.958" starttime="20170725 12:42:13.958"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:13.959" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:13.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:13.959" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:42:13.959" starttime="20170725 12:42:13.959"></status>
</kw>
<msg timestamp="20170725 12:42:13.960" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:42:13.960" starttime="20170725 12:42:13.596"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:13.960" starttime="20170725 12:42:13.595"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:13.963" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:13.964" starttime="20170725 12:42:13.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:13.965" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:13.965" starttime="20170725 12:42:13.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:13.965" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:13.965" starttime="20170725 12:42:13.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:13.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:13.966" starttime="20170725 12:42:13.966"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.150" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:14.150" starttime="20170725 12:42:13.967"></status>
</kw>
<msg timestamp="20170725 12:42:14.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:14.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.150" starttime="20170725 12:42:13.966"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.151" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.151" starttime="20170725 12:42:14.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.151" starttime="20170725 12:42:14.151"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.151" starttime="20170725 12:42:13.963"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.152" starttime="20170725 12:42:13.962"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.152" starttime="20170725 12:42:13.962"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:14.152" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:42:14.152" starttime="20170725 12:42:14.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:14.153" starttime="20170725 12:42:14.153"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:14.228" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:42:14.229" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.229" starttime="20170725 12:42:14.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:14.229" starttime="20170725 12:42:14.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:14.230" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:14.230" starttime="20170725 12:42:14.230"></status>
</kw>
<msg timestamp="20170725 12:42:14.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.230" starttime="20170725 12:42:13.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.231" starttime="20170725 12:42:14.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:14.231" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:14.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:14.231" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:42:14.232" starttime="20170725 12:42:14.231"></status>
</kw>
<msg timestamp="20170725 12:42:14.232" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:42:14.232" starttime="20170725 12:42:13.960"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.232" starttime="20170725 12:42:13.960"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:14.236" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:14.236" starttime="20170725 12:42:14.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:14.237" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:14.237" starttime="20170725 12:42:14.237"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:14.238" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:14.238" starttime="20170725 12:42:14.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:14.238" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:14.238" starttime="20170725 12:42:14.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.430" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:14.430" starttime="20170725 12:42:14.239"></status>
</kw>
<msg timestamp="20170725 12:42:14.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:14.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.430" starttime="20170725 12:42:14.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.431" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.431" starttime="20170725 12:42:14.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.431" starttime="20170725 12:42:14.431"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.432" starttime="20170725 12:42:14.235"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.432" starttime="20170725 12:42:14.234"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.432" starttime="20170725 12:42:14.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:14.432" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:42:14.432" starttime="20170725 12:42:14.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:14.433" starttime="20170725 12:42:14.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:14.495" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:14.495" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.495" starttime="20170725 12:42:14.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:14.496" starttime="20170725 12:42:14.496"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:14.497" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:14.497" starttime="20170725 12:42:14.496"></status>
</kw>
<msg timestamp="20170725 12:42:14.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.497" starttime="20170725 12:42:14.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:14.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:14.498" starttime="20170725 12:42:14.497"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:14.499" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:14.499" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:14.499" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:42:14.499" starttime="20170725 12:42:14.498"></status>
</kw>
<msg timestamp="20170725 12:42:14.500" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:42:14.500" starttime="20170725 12:42:14.233"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:14.500" starttime="20170725 12:42:14.232"></status>
</kw>
<msg timestamp="20170725 12:42:14.501" level="FAIL">
#(UTC) 2017/07/25 12:42:14.500223 -   10.907709 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:42:14.501" starttime="20170725 12:42:13.594"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:24.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:24.508" starttime="20170725 12:42:24.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:24.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:24.508" starttime="20170725 12:42:24.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:24.510" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:24.510" starttime="20170725 12:42:24.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:24.511" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:24.511" starttime="20170725 12:42:24.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:24.780" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:24.780" starttime="20170725 12:42:24.512"></status>
</kw>
<msg timestamp="20170725 12:42:24.780" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:24.780" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:24.780" starttime="20170725 12:42:24.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:24.781" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:24.781" starttime="20170725 12:42:24.780"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:24.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:24.782" starttime="20170725 12:42:24.781"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:24.782" starttime="20170725 12:42:24.506"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:24.782" starttime="20170725 12:42:24.505"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:24.782" starttime="20170725 12:42:24.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:24.782" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:42:24.782" starttime="20170725 12:42:24.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:24.783" starttime="20170725 12:42:24.783"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:24.845" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:24.846" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:24.846" starttime="20170725 12:42:24.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:24.846" starttime="20170725 12:42:24.846"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:24.847" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:24.847" starttime="20170725 12:42:24.847"></status>
</kw>
<msg timestamp="20170725 12:42:24.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:24.847" starttime="20170725 12:42:24.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:24.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:24.848" starttime="20170725 12:42:24.847"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:24.848" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:24.848" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:24.848" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:42:24.848" starttime="20170725 12:42:24.848"></status>
</kw>
<msg timestamp="20170725 12:42:24.849" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:42:24.849" starttime="20170725 12:42:24.503"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:24.849" starttime="20170725 12:42:24.503"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:24.853" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:24.854" starttime="20170725 12:42:24.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:24.854" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:24.854" starttime="20170725 12:42:24.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:24.855" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:24.855" starttime="20170725 12:42:24.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:24.855" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:24.855" starttime="20170725 12:42:24.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:25.053" starttime="20170725 12:42:24.856"></status>
</kw>
<msg timestamp="20170725 12:42:25.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:25.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.054" starttime="20170725 12:42:24.856"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.054" starttime="20170725 12:42:25.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.055" starttime="20170725 12:42:25.055"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.055" starttime="20170725 12:42:24.852"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.055" starttime="20170725 12:42:24.852"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.055" starttime="20170725 12:42:24.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:25.056" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:42:25.056" starttime="20170725 12:42:25.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:25.057" starttime="20170725 12:42:25.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:25.121" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:42:25.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.121" starttime="20170725 12:42:25.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:25.122" starttime="20170725 12:42:25.122"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:25.122" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:25.123" starttime="20170725 12:42:25.122"></status>
</kw>
<msg timestamp="20170725 12:42:25.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.123" starttime="20170725 12:42:24.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.123" starttime="20170725 12:42:25.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:25.124" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:25.124" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:25.125" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:42:25.125" starttime="20170725 12:42:25.124"></status>
</kw>
<msg timestamp="20170725 12:42:25.125" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:42:25.125" starttime="20170725 12:42:24.850"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.125" starttime="20170725 12:42:24.849"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:25.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:25.130" starttime="20170725 12:42:25.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:25.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:25.130" starttime="20170725 12:42:25.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:25.131" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:25.131" starttime="20170725 12:42:25.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:25.132" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:25.132" starttime="20170725 12:42:25.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:25.310" starttime="20170725 12:42:25.132"></status>
</kw>
<msg timestamp="20170725 12:42:25.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:25.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.310" starttime="20170725 12:42:25.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.311" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.311" starttime="20170725 12:42:25.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.312" starttime="20170725 12:42:25.311"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.312" starttime="20170725 12:42:25.128"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.312" starttime="20170725 12:42:25.128"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.312" starttime="20170725 12:42:25.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:25.313" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:42:25.313" starttime="20170725 12:42:25.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:25.313" starttime="20170725 12:42:25.313"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:25.385" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:25.385" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.385" starttime="20170725 12:42:25.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:25.386" starttime="20170725 12:42:25.385"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:25.386" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:25.386" starttime="20170725 12:42:25.386"></status>
</kw>
<msg timestamp="20170725 12:42:25.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.386" starttime="20170725 12:42:25.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:25.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:25.387" starttime="20170725 12:42:25.387"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:25.388" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:25.388" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:25.388" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:42:25.388" starttime="20170725 12:42:25.387"></status>
</kw>
<msg timestamp="20170725 12:42:25.388" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:42:25.388" starttime="20170725 12:42:25.126"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:25.388" starttime="20170725 12:42:25.125"></status>
</kw>
<msg timestamp="20170725 12:42:25.389" level="FAIL">
#(UTC) 2017/07/25 12:42:25.388625 -   10.888402 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:42:25.389" starttime="20170725 12:42:24.501"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:35.395" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:35.396" starttime="20170725 12:42:35.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:35.397" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:35.397" starttime="20170725 12:42:35.397"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:35.398" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:35.398" starttime="20170725 12:42:35.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:35.398" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:35.398" starttime="20170725 12:42:35.398"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.578" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:35.578" starttime="20170725 12:42:35.399"></status>
</kw>
<msg timestamp="20170725 12:42:35.578" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:35.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.578" starttime="20170725 12:42:35.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.579" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.579" starttime="20170725 12:42:35.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.580" starttime="20170725 12:42:35.579"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.580" starttime="20170725 12:42:35.395"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.580" starttime="20170725 12:42:35.394"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.580" starttime="20170725 12:42:35.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:35.581" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:42:35.581" starttime="20170725 12:42:35.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:35.581" starttime="20170725 12:42:35.581"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:35.674" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:35.674" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.674" starttime="20170725 12:42:35.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:35.675" starttime="20170725 12:42:35.674"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:35.675" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:35.675" starttime="20170725 12:42:35.675"></status>
</kw>
<msg timestamp="20170725 12:42:35.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.675" starttime="20170725 12:42:35.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.676" starttime="20170725 12:42:35.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:35.677" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:35.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:35.677" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:42:35.677" starttime="20170725 12:42:35.676"></status>
</kw>
<msg timestamp="20170725 12:42:35.677" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:42:35.677" starttime="20170725 12:42:35.392"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.677" starttime="20170725 12:42:35.392"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:35.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:35.682" starttime="20170725 12:42:35.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:35.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:35.683" starttime="20170725 12:42:35.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:35.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:35.683" starttime="20170725 12:42:35.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:35.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:35.684" starttime="20170725 12:42:35.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:35.863" starttime="20170725 12:42:35.685"></status>
</kw>
<msg timestamp="20170725 12:42:35.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:35.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.863" starttime="20170725 12:42:35.684"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.864" starttime="20170725 12:42:35.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.865" starttime="20170725 12:42:35.864"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.865" starttime="20170725 12:42:35.680"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.865" starttime="20170725 12:42:35.680"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.865" starttime="20170725 12:42:35.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:35.866" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:42:35.866" starttime="20170725 12:42:35.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:35.866" starttime="20170725 12:42:35.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:35.932" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:42:35.932" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.932" starttime="20170725 12:42:35.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:35.933" starttime="20170725 12:42:35.932"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:35.933" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:35.933" starttime="20170725 12:42:35.933"></status>
</kw>
<msg timestamp="20170725 12:42:35.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.933" starttime="20170725 12:42:35.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:35.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:35.934" starttime="20170725 12:42:35.934"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:35.935" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:35.935" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:35.935" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:42:35.935" starttime="20170725 12:42:35.934"></status>
</kw>
<msg timestamp="20170725 12:42:35.935" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:42:35.935" starttime="20170725 12:42:35.678"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:35.935" starttime="20170725 12:42:35.678"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:35.939" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:35.940" starttime="20170725 12:42:35.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:35.940" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:35.940" starttime="20170725 12:42:35.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:35.941" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:35.941" starttime="20170725 12:42:35.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:35.942" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:35.942" starttime="20170725 12:42:35.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:36.131" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:36.131" starttime="20170725 12:42:35.943"></status>
</kw>
<msg timestamp="20170725 12:42:36.132" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:36.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:36.132" starttime="20170725 12:42:35.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:36.132" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:36.132" starttime="20170725 12:42:36.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:36.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:36.133" starttime="20170725 12:42:36.133"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:36.133" starttime="20170725 12:42:35.938"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:36.133" starttime="20170725 12:42:35.938"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:36.133" starttime="20170725 12:42:35.937"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:36.134" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:42:36.134" starttime="20170725 12:42:36.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:36.135" starttime="20170725 12:42:36.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:36.196" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:36.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:36.196" starttime="20170725 12:42:36.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:36.197" starttime="20170725 12:42:36.197"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:36.198" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:36.198" starttime="20170725 12:42:36.197"></status>
</kw>
<msg timestamp="20170725 12:42:36.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:36.198" starttime="20170725 12:42:35.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:36.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:36.199" starttime="20170725 12:42:36.198"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:36.199" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:36.199" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:36.199" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:42:36.199" starttime="20170725 12:42:36.199"></status>
</kw>
<msg timestamp="20170725 12:42:36.200" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:42:36.200" starttime="20170725 12:42:35.936"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:36.200" starttime="20170725 12:42:35.936"></status>
</kw>
<msg timestamp="20170725 12:42:36.201" level="FAIL">
#(UTC) 2017/07/25 12:42:36.200210 -   10.811585 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:42:36.201" starttime="20170725 12:42:35.390"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:46.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:46.207" starttime="20170725 12:42:46.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:46.208" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:46.208" starttime="20170725 12:42:46.208"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:46.209" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:46.209" starttime="20170725 12:42:46.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:46.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:46.209" starttime="20170725 12:42:46.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.389" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:46.389" starttime="20170725 12:42:46.210"></status>
</kw>
<msg timestamp="20170725 12:42:46.389" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:46.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.389" starttime="20170725 12:42:46.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.390" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.390" starttime="20170725 12:42:46.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.391" starttime="20170725 12:42:46.390"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.391" starttime="20170725 12:42:46.206"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.391" starttime="20170725 12:42:46.205"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.391" starttime="20170725 12:42:46.205"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:46.392" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:42:46.392" starttime="20170725 12:42:46.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:46.392" starttime="20170725 12:42:46.392"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:46.455" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:46.455" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.455" starttime="20170725 12:42:46.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:46.456" starttime="20170725 12:42:46.456"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:46.456" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:46.456" starttime="20170725 12:42:46.456"></status>
</kw>
<msg timestamp="20170725 12:42:46.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.457" starttime="20170725 12:42:46.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.457" starttime="20170725 12:42:46.457"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:46.458" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:46.458" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:46.458" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:42:46.458" starttime="20170725 12:42:46.458"></status>
</kw>
<msg timestamp="20170725 12:42:46.458" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:42:46.458" starttime="20170725 12:42:46.203"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.459" starttime="20170725 12:42:46.203"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:46.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:46.466" starttime="20170725 12:42:46.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:46.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:46.467" starttime="20170725 12:42:46.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:46.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:46.468" starttime="20170725 12:42:46.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:46.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:46.469" starttime="20170725 12:42:46.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.708" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:46.709" starttime="20170725 12:42:46.469"></status>
</kw>
<msg timestamp="20170725 12:42:46.709" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:46.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.709" starttime="20170725 12:42:46.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.709" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.709" starttime="20170725 12:42:46.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.710" starttime="20170725 12:42:46.710"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.710" starttime="20170725 12:42:46.462"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.710" starttime="20170725 12:42:46.461"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.711" starttime="20170725 12:42:46.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:46.711" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:42:46.711" starttime="20170725 12:42:46.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:46.712" starttime="20170725 12:42:46.711"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:46.795" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:42:46.795" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.795" starttime="20170725 12:42:46.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:46.796" starttime="20170725 12:42:46.795"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:46.796" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:46.796" starttime="20170725 12:42:46.796"></status>
</kw>
<msg timestamp="20170725 12:42:46.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.796" starttime="20170725 12:42:46.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:46.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:46.797" starttime="20170725 12:42:46.797"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:46.798" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:46.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:46.798" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:42:46.798" starttime="20170725 12:42:46.797"></status>
</kw>
<msg timestamp="20170725 12:42:46.798" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:42:46.798" starttime="20170725 12:42:46.459"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:46.798" starttime="20170725 12:42:46.459"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:46.802" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:46.803" starttime="20170725 12:42:46.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:46.803" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:46.803" starttime="20170725 12:42:46.803"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:46.804" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:46.804" starttime="20170725 12:42:46.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:46.805" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:46.805" starttime="20170725 12:42:46.804"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:47.071" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:47.072" starttime="20170725 12:42:46.805"></status>
</kw>
<msg timestamp="20170725 12:42:47.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:47.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:47.072" starttime="20170725 12:42:46.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:47.072" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:47.073" starttime="20170725 12:42:47.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:47.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:47.073" starttime="20170725 12:42:47.073"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:47.073" starttime="20170725 12:42:46.801"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:47.073" starttime="20170725 12:42:46.801"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:47.074" starttime="20170725 12:42:46.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:47.074" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:42:47.074" starttime="20170725 12:42:47.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:47.075" starttime="20170725 12:42:47.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:47.137" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:47.137" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:47.137" starttime="20170725 12:42:47.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:47.138" starttime="20170725 12:42:47.137"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:47.138" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:47.138" starttime="20170725 12:42:47.138"></status>
</kw>
<msg timestamp="20170725 12:42:47.138" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:47.138" starttime="20170725 12:42:46.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:47.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:47.139" starttime="20170725 12:42:47.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:47.140" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:47.140" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:47.140" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:42:47.140" starttime="20170725 12:42:47.139"></status>
</kw>
<msg timestamp="20170725 12:42:47.140" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:42:47.140" starttime="20170725 12:42:46.799"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:47.141" starttime="20170725 12:42:46.799"></status>
</kw>
<msg timestamp="20170725 12:42:47.141" level="FAIL">
#(UTC) 2017/07/25 12:42:47.140892 -   10.940682 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:42:47.141" starttime="20170725 12:42:46.201"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:57.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:57.148" starttime="20170725 12:42:57.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:57.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:57.148" starttime="20170725 12:42:57.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:57.149" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:57.149" starttime="20170725 12:42:57.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:57.149" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:57.149" starttime="20170725 12:42:57.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:57.332" starttime="20170725 12:42:57.150"></status>
</kw>
<msg timestamp="20170725 12:42:57.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:57.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.332" starttime="20170725 12:42:57.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.333" starttime="20170725 12:42:57.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.334" starttime="20170725 12:42:57.333"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.334" starttime="20170725 12:42:57.146"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.334" starttime="20170725 12:42:57.146"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.334" starttime="20170725 12:42:57.145"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:57.335" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:42:57.335" starttime="20170725 12:42:57.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:57.335" starttime="20170725 12:42:57.335"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:57.422" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:57.422" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.422" starttime="20170725 12:42:57.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:57.423" starttime="20170725 12:42:57.423"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:57.425" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:57.425" starttime="20170725 12:42:57.425"></status>
</kw>
<msg timestamp="20170725 12:42:57.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.425" starttime="20170725 12:42:57.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.426" starttime="20170725 12:42:57.425"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:57.426" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:57.426" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:57.426" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:42:57.426" starttime="20170725 12:42:57.426"></status>
</kw>
<msg timestamp="20170725 12:42:57.427" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:42:57.427" starttime="20170725 12:42:57.144"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.427" starttime="20170725 12:42:57.143"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:57.431" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:57.431" starttime="20170725 12:42:57.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:57.432" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:57.432" starttime="20170725 12:42:57.432"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:57.433" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:57.433" starttime="20170725 12:42:57.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:57.433" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:57.433" starttime="20170725 12:42:57.433"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.626" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:57.626" starttime="20170725 12:42:57.434"></status>
</kw>
<msg timestamp="20170725 12:42:57.626" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:57.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.626" starttime="20170725 12:42:57.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.627" starttime="20170725 12:42:57.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.628" starttime="20170725 12:42:57.627"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.628" starttime="20170725 12:42:57.430"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.628" starttime="20170725 12:42:57.429"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.628" starttime="20170725 12:42:57.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:57.629" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:42:57.629" starttime="20170725 12:42:57.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:57.629" starttime="20170725 12:42:57.629"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:57.694" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:42:57.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.694" starttime="20170725 12:42:57.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:57.695" starttime="20170725 12:42:57.694"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:57.695" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:57.695" starttime="20170725 12:42:57.695"></status>
</kw>
<msg timestamp="20170725 12:42:57.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.695" starttime="20170725 12:42:57.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.696" starttime="20170725 12:42:57.696"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:57.697" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:57.697" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:57.697" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:42:57.697" starttime="20170725 12:42:57.696"></status>
</kw>
<msg timestamp="20170725 12:42:57.697" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:42:57.697" starttime="20170725 12:42:57.428"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.697" starttime="20170725 12:42:57.427"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:42:57.701" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:42:57.702" starttime="20170725 12:42:57.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:42:57.703" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:42:57.703" starttime="20170725 12:42:57.702"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:42:57.703" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:42:57.703" starttime="20170725 12:42:57.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:42:57.704" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:42:57.704" starttime="20170725 12:42:57.704"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.888" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:42:57.889" starttime="20170725 12:42:57.705"></status>
</kw>
<msg timestamp="20170725 12:42:57.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:42:57.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.889" starttime="20170725 12:42:57.704"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.889" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.890" starttime="20170725 12:42:57.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.890" starttime="20170725 12:42:57.890"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.890" starttime="20170725 12:42:57.700"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.890" starttime="20170725 12:42:57.700"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.891" starttime="20170725 12:42:57.699"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:42:57.891" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:42:57.891" starttime="20170725 12:42:57.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:57.892" starttime="20170725 12:42:57.891"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:42:57.956" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:42:57.956" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.956" starttime="20170725 12:42:57.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:42:57.956" starttime="20170725 12:42:57.956"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:42:57.957" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:42:57.957" starttime="20170725 12:42:57.957"></status>
</kw>
<msg timestamp="20170725 12:42:57.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.957" starttime="20170725 12:42:57.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:42:57.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:42:57.958" starttime="20170725 12:42:57.958"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:42:57.959" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:42:57.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:42:57.959" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:42:57.960" starttime="20170725 12:42:57.959"></status>
</kw>
<msg timestamp="20170725 12:42:57.960" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:42:57.960" starttime="20170725 12:42:57.698"></status>
</kw>
<status status="PASS" endtime="20170725 12:42:57.960" starttime="20170725 12:42:57.698"></status>
</kw>
<msg timestamp="20170725 12:42:57.961" level="FAIL">
#(UTC) 2017/07/25 12:42:57.960656 -   10.819764 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:42:57.961" starttime="20170725 12:42:57.142"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:07.967" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:07.967" starttime="20170725 12:43:07.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:07.968" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:07.968" starttime="20170725 12:43:07.968"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:07.969" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:07.969" starttime="20170725 12:43:07.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:07.970" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:07.970" starttime="20170725 12:43:07.969"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:08.154" starttime="20170725 12:43:07.970"></status>
</kw>
<msg timestamp="20170725 12:43:08.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:08.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.154" starttime="20170725 12:43:07.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.155" starttime="20170725 12:43:08.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.156" starttime="20170725 12:43:08.155"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.156" starttime="20170725 12:43:07.966"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.156" starttime="20170725 12:43:07.965"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.156" starttime="20170725 12:43:07.965"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:08.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:43:08.157" starttime="20170725 12:43:08.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:08.157" starttime="20170725 12:43:08.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:08.220" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:08.220" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.220" starttime="20170725 12:43:08.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:08.220" starttime="20170725 12:43:08.220"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:08.221" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:08.221" starttime="20170725 12:43:08.221"></status>
</kw>
<msg timestamp="20170725 12:43:08.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.221" starttime="20170725 12:43:07.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.222" starttime="20170725 12:43:08.221"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:08.222" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:08.222" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:08.223" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:43:08.223" starttime="20170725 12:43:08.222"></status>
</kw>
<msg timestamp="20170725 12:43:08.223" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:43:08.223" starttime="20170725 12:43:07.964"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.223" starttime="20170725 12:43:07.963"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:08.228" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:08.229" starttime="20170725 12:43:08.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:08.230" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:08.230" starttime="20170725 12:43:08.229"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:08.230" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:08.230" starttime="20170725 12:43:08.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:08.231" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:08.231" starttime="20170725 12:43:08.231"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.441" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:08.442" starttime="20170725 12:43:08.232"></status>
</kw>
<msg timestamp="20170725 12:43:08.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:08.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.442" starttime="20170725 12:43:08.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.442" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.442" starttime="20170725 12:43:08.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.443" starttime="20170725 12:43:08.443"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.443" starttime="20170725 12:43:08.228"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.443" starttime="20170725 12:43:08.227"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.443" starttime="20170725 12:43:08.227"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:08.444" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:43:08.444" starttime="20170725 12:43:08.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:08.445" starttime="20170725 12:43:08.444"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:08.527" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:43:08.527" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.527" starttime="20170725 12:43:08.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:08.528" starttime="20170725 12:43:08.527"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:08.528" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:08.528" starttime="20170725 12:43:08.528"></status>
</kw>
<msg timestamp="20170725 12:43:08.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.529" starttime="20170725 12:43:08.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.529" starttime="20170725 12:43:08.529"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:08.530" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:08.530" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:08.530" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:43:08.530" starttime="20170725 12:43:08.529"></status>
</kw>
<msg timestamp="20170725 12:43:08.530" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:43:08.530" starttime="20170725 12:43:08.225"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.530" starttime="20170725 12:43:08.223"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:08.534" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:08.535" starttime="20170725 12:43:08.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:08.535" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:08.536" starttime="20170725 12:43:08.535"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:08.536" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:08.536" starttime="20170725 12:43:08.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:08.537" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:08.537" starttime="20170725 12:43:08.536"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.820" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:08.820" starttime="20170725 12:43:08.538"></status>
</kw>
<msg timestamp="20170725 12:43:08.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:08.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.821" starttime="20170725 12:43:08.537"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.821" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.821" starttime="20170725 12:43:08.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.822" starttime="20170725 12:43:08.822"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.822" starttime="20170725 12:43:08.533"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.822" starttime="20170725 12:43:08.533"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.822" starttime="20170725 12:43:08.532"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:08.823" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:43:08.823" starttime="20170725 12:43:08.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:08.824" starttime="20170725 12:43:08.823"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:08.887" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:08.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.888" starttime="20170725 12:43:08.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:08.888" starttime="20170725 12:43:08.888"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:08.889" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:08.889" starttime="20170725 12:43:08.889"></status>
</kw>
<msg timestamp="20170725 12:43:08.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.889" starttime="20170725 12:43:08.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:08.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:08.890" starttime="20170725 12:43:08.889"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:08.890" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:08.890" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:08.890" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:43:08.891" starttime="20170725 12:43:08.890"></status>
</kw>
<msg timestamp="20170725 12:43:08.891" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:43:08.891" starttime="20170725 12:43:08.531"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:08.891" starttime="20170725 12:43:08.531"></status>
</kw>
<msg timestamp="20170725 12:43:08.892" level="FAIL">
#(UTC) 2017/07/25 12:43:08.891395 -   10.930739 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:43:08.892" starttime="20170725 12:43:07.962"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:18.898" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:18.898" starttime="20170725 12:43:18.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:18.899" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:18.899" starttime="20170725 12:43:18.899"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:18.900" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:18.900" starttime="20170725 12:43:18.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:18.900" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:18.900" starttime="20170725 12:43:18.900"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.079" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:19.079" starttime="20170725 12:43:18.901"></status>
</kw>
<msg timestamp="20170725 12:43:19.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:19.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.079" starttime="20170725 12:43:18.901"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.080" starttime="20170725 12:43:19.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.081" starttime="20170725 12:43:19.080"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.081" starttime="20170725 12:43:18.897"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.081" starttime="20170725 12:43:18.896"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.081" starttime="20170725 12:43:18.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:19.082" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:43:19.082" starttime="20170725 12:43:19.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:19.082" starttime="20170725 12:43:19.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:19.159" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:19.159" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.159" starttime="20170725 12:43:19.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:19.160" starttime="20170725 12:43:19.159"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:19.160" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:19.160" starttime="20170725 12:43:19.160"></status>
</kw>
<msg timestamp="20170725 12:43:19.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.161" starttime="20170725 12:43:18.895"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.161" starttime="20170725 12:43:19.161"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:19.162" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:19.162" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:19.162" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:43:19.162" starttime="20170725 12:43:19.162"></status>
</kw>
<msg timestamp="20170725 12:43:19.162" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:43:19.162" starttime="20170725 12:43:18.895"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.163" starttime="20170725 12:43:18.894"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:19.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:19.167" starttime="20170725 12:43:19.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:19.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:19.168" starttime="20170725 12:43:19.167"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:19.168" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:19.168" starttime="20170725 12:43:19.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:19.169" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:19.169" starttime="20170725 12:43:19.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.361" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:19.361" starttime="20170725 12:43:19.170"></status>
</kw>
<msg timestamp="20170725 12:43:19.361" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:19.361" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.361" starttime="20170725 12:43:19.169"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.362" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.362" starttime="20170725 12:43:19.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.362" starttime="20170725 12:43:19.362"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.363" starttime="20170725 12:43:19.165"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.363" starttime="20170725 12:43:19.165"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.363" starttime="20170725 12:43:19.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:19.363" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:43:19.363" starttime="20170725 12:43:19.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:19.364" starttime="20170725 12:43:19.364"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:19.497" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:43:19.497" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.497" starttime="20170725 12:43:19.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:19.498" starttime="20170725 12:43:19.498"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:19.498" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:19.499" starttime="20170725 12:43:19.498"></status>
</kw>
<msg timestamp="20170725 12:43:19.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.499" starttime="20170725 12:43:19.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.500" starttime="20170725 12:43:19.499"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:19.500" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:19.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:19.500" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:43:19.500" starttime="20170725 12:43:19.500"></status>
</kw>
<msg timestamp="20170725 12:43:19.501" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:43:19.501" starttime="20170725 12:43:19.163"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.501" starttime="20170725 12:43:19.163"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:19.504" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:19.505" starttime="20170725 12:43:19.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:19.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:19.506" starttime="20170725 12:43:19.505"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:19.506" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:19.506" starttime="20170725 12:43:19.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:19.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:19.507" starttime="20170725 12:43:19.507"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:19.758" starttime="20170725 12:43:19.508"></status>
</kw>
<msg timestamp="20170725 12:43:19.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:19.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.758" starttime="20170725 12:43:19.507"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.759" starttime="20170725 12:43:19.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.760" starttime="20170725 12:43:19.759"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.760" starttime="20170725 12:43:19.504"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.760" starttime="20170725 12:43:19.503"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.760" starttime="20170725 12:43:19.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:19.761" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:43:19.761" starttime="20170725 12:43:19.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:19.761" starttime="20170725 12:43:19.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:19.862" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:19.862" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.862" starttime="20170725 12:43:19.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:19.863" starttime="20170725 12:43:19.863"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:19.863" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:19.864" starttime="20170725 12:43:19.863"></status>
</kw>
<msg timestamp="20170725 12:43:19.864" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.864" starttime="20170725 12:43:19.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:19.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:19.864" starttime="20170725 12:43:19.864"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:19.865" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:19.865" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:19.865" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:43:19.865" starttime="20170725 12:43:19.865"></status>
</kw>
<msg timestamp="20170725 12:43:19.866" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:43:19.866" starttime="20170725 12:43:19.501"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:19.866" starttime="20170725 12:43:19.501"></status>
</kw>
<msg timestamp="20170725 12:43:19.866" level="FAIL">
#(UTC) 2017/07/25 12:43:19.866053 -   10.974658 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:43:19.867" starttime="20170725 12:43:18.893"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:29.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:29.873" starttime="20170725 12:43:29.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:29.874" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:29.874" starttime="20170725 12:43:29.873"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:29.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:29.874" starttime="20170725 12:43:29.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:29.875" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:29.875" starttime="20170725 12:43:29.875"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:30.055" starttime="20170725 12:43:29.876"></status>
</kw>
<msg timestamp="20170725 12:43:30.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:30.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.055" starttime="20170725 12:43:29.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.056" starttime="20170725 12:43:30.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.056" starttime="20170725 12:43:30.056"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.057" starttime="20170725 12:43:29.871"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.057" starttime="20170725 12:43:29.871"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.057" starttime="20170725 12:43:29.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:30.057" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:43:30.057" starttime="20170725 12:43:30.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:30.058" starttime="20170725 12:43:30.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:30.123" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:30.123" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.123" starttime="20170725 12:43:30.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:30.124" starttime="20170725 12:43:30.123"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:30.124" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:30.124" starttime="20170725 12:43:30.124"></status>
</kw>
<msg timestamp="20170725 12:43:30.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.125" starttime="20170725 12:43:29.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.125" starttime="20170725 12:43:30.125"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:30.126" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:30.126" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:30.126" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:43:30.126" starttime="20170725 12:43:30.126"></status>
</kw>
<msg timestamp="20170725 12:43:30.126" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:43:30.127" starttime="20170725 12:43:29.869"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.127" starttime="20170725 12:43:29.869"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:30.130" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:30.134" starttime="20170725 12:43:30.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:30.135" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:30.135" starttime="20170725 12:43:30.134"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:30.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:30.136" starttime="20170725 12:43:30.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:30.136" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:30.136" starttime="20170725 12:43:30.136"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.357" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:30.358" starttime="20170725 12:43:30.137"></status>
</kw>
<msg timestamp="20170725 12:43:30.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:30.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.358" starttime="20170725 12:43:30.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.359" starttime="20170725 12:43:30.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.359" starttime="20170725 12:43:30.359"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.359" starttime="20170725 12:43:30.130"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.359" starttime="20170725 12:43:30.129"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.360" starttime="20170725 12:43:30.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:30.360" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:43:30.360" starttime="20170725 12:43:30.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:30.361" starttime="20170725 12:43:30.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:30.427" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:43:30.427" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.427" starttime="20170725 12:43:30.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:30.428" starttime="20170725 12:43:30.428"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:30.428" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:30.428" starttime="20170725 12:43:30.428"></status>
</kw>
<msg timestamp="20170725 12:43:30.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.429" starttime="20170725 12:43:30.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.429" starttime="20170725 12:43:30.429"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:30.430" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:30.430" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:30.430" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:43:30.430" starttime="20170725 12:43:30.430"></status>
</kw>
<msg timestamp="20170725 12:43:30.430" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:43:30.431" starttime="20170725 12:43:30.127"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.431" starttime="20170725 12:43:30.127"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:30.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:30.435" starttime="20170725 12:43:30.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:30.436" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:30.436" starttime="20170725 12:43:30.435"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:30.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:30.436" starttime="20170725 12:43:30.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:30.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:30.437" starttime="20170725 12:43:30.437"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.772" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:30.773" starttime="20170725 12:43:30.438"></status>
</kw>
<msg timestamp="20170725 12:43:30.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:30.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.773" starttime="20170725 12:43:30.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.773" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.774" starttime="20170725 12:43:30.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.774" starttime="20170725 12:43:30.774"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.774" starttime="20170725 12:43:30.434"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.774" starttime="20170725 12:43:30.433"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.775" starttime="20170725 12:43:30.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:30.775" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:43:30.775" starttime="20170725 12:43:30.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:30.776" starttime="20170725 12:43:30.775"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:30.840" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:30.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.840" starttime="20170725 12:43:30.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:30.841" starttime="20170725 12:43:30.841"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:30.841" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:30.842" starttime="20170725 12:43:30.841"></status>
</kw>
<msg timestamp="20170725 12:43:30.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.842" starttime="20170725 12:43:30.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:30.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:30.842" starttime="20170725 12:43:30.842"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:30.843" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:30.843" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:30.843" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:43:30.843" starttime="20170725 12:43:30.843"></status>
</kw>
<msg timestamp="20170725 12:43:30.843" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:43:30.843" starttime="20170725 12:43:30.431"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:30.844" starttime="20170725 12:43:30.431"></status>
</kw>
<msg timestamp="20170725 12:43:30.844" level="FAIL">
#(UTC) 2017/07/25 12:43:30.843957 -   10.977904 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:43:30.845" starttime="20170725 12:43:29.867"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:40.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:40.852" starttime="20170725 12:43:40.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:40.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:40.852" starttime="20170725 12:43:40.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:40.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:40.853" starttime="20170725 12:43:40.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:40.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:40.854" starttime="20170725 12:43:40.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:41.037" starttime="20170725 12:43:40.854"></status>
</kw>
<msg timestamp="20170725 12:43:41.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:41.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.037" starttime="20170725 12:43:40.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.038" starttime="20170725 12:43:41.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.038" starttime="20170725 12:43:41.038"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.038" starttime="20170725 12:43:40.850"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.038" starttime="20170725 12:43:40.849"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.039" starttime="20170725 12:43:40.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:41.039" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:43:41.039" starttime="20170725 12:43:41.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:41.040" starttime="20170725 12:43:41.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:41.198" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:41.199" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.199" starttime="20170725 12:43:41.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:41.199" starttime="20170725 12:43:41.199"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:41.200" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:41.200" starttime="20170725 12:43:41.200"></status>
</kw>
<msg timestamp="20170725 12:43:41.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.200" starttime="20170725 12:43:40.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.201" starttime="20170725 12:43:41.200"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:41.201" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:41.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:41.202" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:43:41.202" starttime="20170725 12:43:41.201"></status>
</kw>
<msg timestamp="20170725 12:43:41.202" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:43:41.202" starttime="20170725 12:43:40.847"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.202" starttime="20170725 12:43:40.847"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:41.206" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:41.207" starttime="20170725 12:43:41.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:41.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:41.208" starttime="20170725 12:43:41.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:41.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:41.208" starttime="20170725 12:43:41.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:41.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:41.209" starttime="20170725 12:43:41.208"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.429" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:41.429" starttime="20170725 12:43:41.210"></status>
</kw>
<msg timestamp="20170725 12:43:41.429" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:41.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.430" starttime="20170725 12:43:41.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.430" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.430" starttime="20170725 12:43:41.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.431" starttime="20170725 12:43:41.431"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.431" starttime="20170725 12:43:41.205"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.431" starttime="20170725 12:43:41.205"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.431" starttime="20170725 12:43:41.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:41.432" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:43:41.432" starttime="20170725 12:43:41.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:41.433" starttime="20170725 12:43:41.432"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:41.497" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:43:41.497" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.497" starttime="20170725 12:43:41.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:41.498" starttime="20170725 12:43:41.498"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:41.498" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:41.498" starttime="20170725 12:43:41.498"></status>
</kw>
<msg timestamp="20170725 12:43:41.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.499" starttime="20170725 12:43:41.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.499" starttime="20170725 12:43:41.499"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:41.500" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:41.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:41.500" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:43:41.500" starttime="20170725 12:43:41.500"></status>
</kw>
<msg timestamp="20170725 12:43:41.500" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:43:41.501" starttime="20170725 12:43:41.203"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.501" starttime="20170725 12:43:41.202"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:41.504" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:41.505" starttime="20170725 12:43:41.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:41.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:41.506" starttime="20170725 12:43:41.505"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:41.506" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:41.506" starttime="20170725 12:43:41.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:41.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:41.507" starttime="20170725 12:43:41.507"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:41.687" starttime="20170725 12:43:41.508"></status>
</kw>
<msg timestamp="20170725 12:43:41.688" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:41.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.688" starttime="20170725 12:43:41.507"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.688" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.688" starttime="20170725 12:43:41.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.689" starttime="20170725 12:43:41.689"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.689" starttime="20170725 12:43:41.504"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.689" starttime="20170725 12:43:41.503"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.689" starttime="20170725 12:43:41.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:41.690" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:43:41.690" starttime="20170725 12:43:41.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:41.691" starttime="20170725 12:43:41.690"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:41.761" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:41.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.762" starttime="20170725 12:43:41.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:41.762" starttime="20170725 12:43:41.762"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:41.763" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:41.763" starttime="20170725 12:43:41.762"></status>
</kw>
<msg timestamp="20170725 12:43:41.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.763" starttime="20170725 12:43:41.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:41.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:41.764" starttime="20170725 12:43:41.763"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:41.764" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:41.764" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:41.764" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:43:41.764" starttime="20170725 12:43:41.764"></status>
</kw>
<msg timestamp="20170725 12:43:41.765" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:43:41.765" starttime="20170725 12:43:41.501"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:41.765" starttime="20170725 12:43:41.501"></status>
</kw>
<msg timestamp="20170725 12:43:41.766" level="FAIL">
#(UTC) 2017/07/25 12:43:41.765219 -   10.921262 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:43:41.766" starttime="20170725 12:43:40.845"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:51.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:51.772" starttime="20170725 12:43:51.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:51.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:51.773" starttime="20170725 12:43:51.773"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:51.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:51.774" starttime="20170725 12:43:51.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:51.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:51.774" starttime="20170725 12:43:51.774"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:51.986" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:51.986" starttime="20170725 12:43:51.775"></status>
</kw>
<msg timestamp="20170725 12:43:51.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:51.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:51.987" starttime="20170725 12:43:51.775"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:51.987" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:51.987" starttime="20170725 12:43:51.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:51.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:51.988" starttime="20170725 12:43:51.988"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:51.988" starttime="20170725 12:43:51.771"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:51.988" starttime="20170725 12:43:51.770"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:51.988" starttime="20170725 12:43:51.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:51.989" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:43:51.989" starttime="20170725 12:43:51.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:51.990" starttime="20170725 12:43:51.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:52.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:52.065" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.065" starttime="20170725 12:43:51.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:52.065" starttime="20170725 12:43:52.065"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:52.066" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:52.066" starttime="20170725 12:43:52.066"></status>
</kw>
<msg timestamp="20170725 12:43:52.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.066" starttime="20170725 12:43:51.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.067" starttime="20170725 12:43:52.066"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:52.067" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:52.067" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:52.068" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:43:52.068" starttime="20170725 12:43:52.067"></status>
</kw>
<msg timestamp="20170725 12:43:52.068" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:43:52.068" starttime="20170725 12:43:51.768"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.068" starttime="20170725 12:43:51.768"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:52.072" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:52.073" starttime="20170725 12:43:52.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:52.073" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:52.073" starttime="20170725 12:43:52.073"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:52.074" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:52.074" starttime="20170725 12:43:52.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:52.075" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:52.075" starttime="20170725 12:43:52.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.348" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:52.348" starttime="20170725 12:43:52.075"></status>
</kw>
<msg timestamp="20170725 12:43:52.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:52.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.349" starttime="20170725 12:43:52.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.349" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.349" starttime="20170725 12:43:52.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.350" starttime="20170725 12:43:52.350"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.350" starttime="20170725 12:43:52.071"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.350" starttime="20170725 12:43:52.071"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.350" starttime="20170725 12:43:52.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:52.351" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:43:52.351" starttime="20170725 12:43:52.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:52.352" starttime="20170725 12:43:52.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:52.416" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:43:52.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.416" starttime="20170725 12:43:52.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:52.416" starttime="20170725 12:43:52.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:52.417" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:52.417" starttime="20170725 12:43:52.417"></status>
</kw>
<msg timestamp="20170725 12:43:52.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.417" starttime="20170725 12:43:52.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.418" starttime="20170725 12:43:52.417"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:52.418" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:52.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:52.419" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:43:52.419" starttime="20170725 12:43:52.418"></status>
</kw>
<msg timestamp="20170725 12:43:52.419" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:43:52.419" starttime="20170725 12:43:52.069"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.419" starttime="20170725 12:43:52.068"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:43:52.423" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:43:52.423" starttime="20170725 12:43:52.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:43:52.424" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:43:52.424" starttime="20170725 12:43:52.424"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:43:52.425" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:43:52.425" starttime="20170725 12:43:52.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:43:52.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:43:52.426" starttime="20170725 12:43:52.425"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:43:52.629" starttime="20170725 12:43:52.427"></status>
</kw>
<msg timestamp="20170725 12:43:52.629" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:43:52.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.629" starttime="20170725 12:43:52.426"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.630" starttime="20170725 12:43:52.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.631" starttime="20170725 12:43:52.630"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.631" starttime="20170725 12:43:52.422"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.631" starttime="20170725 12:43:52.422"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.631" starttime="20170725 12:43:52.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:43:52.631" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:43:52.632" starttime="20170725 12:43:52.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:52.632" starttime="20170725 12:43:52.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:43:52.694" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:43:52.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.694" starttime="20170725 12:43:52.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:43:52.695" starttime="20170725 12:43:52.695"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:43:52.695" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:43:52.695" starttime="20170725 12:43:52.695"></status>
</kw>
<msg timestamp="20170725 12:43:52.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.696" starttime="20170725 12:43:52.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:43:52.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:43:52.696" starttime="20170725 12:43:52.696"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:43:52.697" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:43:52.697" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:43:52.697" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:43:52.697" starttime="20170725 12:43:52.697"></status>
</kw>
<msg timestamp="20170725 12:43:52.697" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:43:52.697" starttime="20170725 12:43:52.420"></status>
</kw>
<status status="PASS" endtime="20170725 12:43:52.698" starttime="20170725 12:43:52.419"></status>
</kw>
<msg timestamp="20170725 12:43:52.698" level="FAIL">
#(UTC) 2017/07/25 12:43:52.697826 -   10.932607 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:43:52.698" starttime="20170725 12:43:51.766"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:02.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:02.705" starttime="20170725 12:44:02.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:02.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:02.706" starttime="20170725 12:44:02.705"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:02.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:02.706" starttime="20170725 12:44:02.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:02.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:02.707" starttime="20170725 12:44:02.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:02.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:02.907" starttime="20170725 12:44:02.708"></status>
</kw>
<msg timestamp="20170725 12:44:02.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:02.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:02.907" starttime="20170725 12:44:02.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:02.907" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:02.908" starttime="20170725 12:44:02.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:02.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:02.908" starttime="20170725 12:44:02.908"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:02.908" starttime="20170725 12:44:02.703"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:02.908" starttime="20170725 12:44:02.703"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:02.909" starttime="20170725 12:44:02.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:02.909" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:44:02.909" starttime="20170725 12:44:02.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:02.910" starttime="20170725 12:44:02.910"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:03.014" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:03.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.015" starttime="20170725 12:44:02.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:03.015" starttime="20170725 12:44:03.015"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:03.016" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:03.016" starttime="20170725 12:44:03.015"></status>
</kw>
<msg timestamp="20170725 12:44:03.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.016" starttime="20170725 12:44:02.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.017" starttime="20170725 12:44:03.016"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:03.017" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:03.017" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:03.018" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:44:03.018" starttime="20170725 12:44:03.017"></status>
</kw>
<msg timestamp="20170725 12:44:03.018" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:44:03.018" starttime="20170725 12:44:02.701"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.018" starttime="20170725 12:44:02.701"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:03.022" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:03.023" starttime="20170725 12:44:03.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:03.023" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:03.023" starttime="20170725 12:44:03.023"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:03.024" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:03.024" starttime="20170725 12:44:03.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:03.025" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:03.025" starttime="20170725 12:44:03.024"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:03.207" starttime="20170725 12:44:03.026"></status>
</kw>
<msg timestamp="20170725 12:44:03.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:03.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.207" starttime="20170725 12:44:03.025"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.208" starttime="20170725 12:44:03.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.208" starttime="20170725 12:44:03.208"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.209" starttime="20170725 12:44:03.021"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.209" starttime="20170725 12:44:03.021"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.209" starttime="20170725 12:44:03.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:03.209" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:44:03.209" starttime="20170725 12:44:03.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:03.210" starttime="20170725 12:44:03.210"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:03.275" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:44:03.275" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.275" starttime="20170725 12:44:03.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:03.276" starttime="20170725 12:44:03.275"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:03.276" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:03.276" starttime="20170725 12:44:03.276"></status>
</kw>
<msg timestamp="20170725 12:44:03.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.276" starttime="20170725 12:44:03.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.277" starttime="20170725 12:44:03.277"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:03.278" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:03.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:03.278" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:44:03.278" starttime="20170725 12:44:03.277"></status>
</kw>
<msg timestamp="20170725 12:44:03.278" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:44:03.278" starttime="20170725 12:44:03.019"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.278" starttime="20170725 12:44:03.018"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:03.282" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:03.283" starttime="20170725 12:44:03.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:03.283" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:03.283" starttime="20170725 12:44:03.283"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:03.284" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:03.284" starttime="20170725 12:44:03.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:03.285" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:03.285" starttime="20170725 12:44:03.284"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.468" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:03.468" starttime="20170725 12:44:03.285"></status>
</kw>
<msg timestamp="20170725 12:44:03.468" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:03.468" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.468" starttime="20170725 12:44:03.285"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.469" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.469" starttime="20170725 12:44:03.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.469" starttime="20170725 12:44:03.469"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.470" starttime="20170725 12:44:03.281"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.470" starttime="20170725 12:44:03.281"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.470" starttime="20170725 12:44:03.280"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:03.470" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:44:03.470" starttime="20170725 12:44:03.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:03.471" starttime="20170725 12:44:03.471"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:03.574" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:03.574" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.574" starttime="20170725 12:44:03.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:03.575" starttime="20170725 12:44:03.575"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:03.575" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:03.575" starttime="20170725 12:44:03.575"></status>
</kw>
<msg timestamp="20170725 12:44:03.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.576" starttime="20170725 12:44:03.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:03.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:03.576" starttime="20170725 12:44:03.576"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:03.577" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:03.577" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:03.577" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:44:03.577" starttime="20170725 12:44:03.577"></status>
</kw>
<msg timestamp="20170725 12:44:03.577" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:44:03.577" starttime="20170725 12:44:03.279"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:03.578" starttime="20170725 12:44:03.279"></status>
</kw>
<msg timestamp="20170725 12:44:03.578" level="FAIL">
#(UTC) 2017/07/25 12:44:03.577857 -   10.880031 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:44:03.578" starttime="20170725 12:44:02.699"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:13.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:13.585" starttime="20170725 12:44:13.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:13.586" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:13.586" starttime="20170725 12:44:13.586"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:13.587" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:13.587" starttime="20170725 12:44:13.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:13.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:13.587" starttime="20170725 12:44:13.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:13.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:13.790" starttime="20170725 12:44:13.588"></status>
</kw>
<msg timestamp="20170725 12:44:13.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:13.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:13.790" starttime="20170725 12:44:13.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:13.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:13.791" starttime="20170725 12:44:13.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:13.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:13.792" starttime="20170725 12:44:13.791"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:13.792" starttime="20170725 12:44:13.583"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:13.792" starttime="20170725 12:44:13.583"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:13.792" starttime="20170725 12:44:13.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:13.793" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:44:13.793" starttime="20170725 12:44:13.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:13.793" starttime="20170725 12:44:13.793"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:13.856" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:13.856" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:13.856" starttime="20170725 12:44:13.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:13.857" starttime="20170725 12:44:13.857"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:13.857" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:13.857" starttime="20170725 12:44:13.857"></status>
</kw>
<msg timestamp="20170725 12:44:13.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:13.858" starttime="20170725 12:44:13.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:13.858" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:13.858" starttime="20170725 12:44:13.858"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:13.859" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:13.859" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:13.859" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:44:13.859" starttime="20170725 12:44:13.859"></status>
</kw>
<msg timestamp="20170725 12:44:13.859" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:44:13.859" starttime="20170725 12:44:13.581"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:13.860" starttime="20170725 12:44:13.581"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:13.863" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:13.867" starttime="20170725 12:44:13.863"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:13.868" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:13.868" starttime="20170725 12:44:13.868"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:13.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:13.869" starttime="20170725 12:44:13.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:13.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:13.870" starttime="20170725 12:44:13.870"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:14.127" starttime="20170725 12:44:13.872"></status>
</kw>
<msg timestamp="20170725 12:44:14.128" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:14.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.128" starttime="20170725 12:44:13.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.129" starttime="20170725 12:44:14.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.129" starttime="20170725 12:44:14.129"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.129" starttime="20170725 12:44:13.863"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.129" starttime="20170725 12:44:13.862"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.130" starttime="20170725 12:44:13.862"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:14.130" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:44:14.130" starttime="20170725 12:44:14.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:14.131" starttime="20170725 12:44:14.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:14.211" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:44:14.211" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.211" starttime="20170725 12:44:14.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:14.212" starttime="20170725 12:44:14.212"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:14.213" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:14.213" starttime="20170725 12:44:14.212"></status>
</kw>
<msg timestamp="20170725 12:44:14.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.213" starttime="20170725 12:44:13.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.214" starttime="20170725 12:44:14.213"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:14.214" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:14.214" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:14.214" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:44:14.214" starttime="20170725 12:44:14.214"></status>
</kw>
<msg timestamp="20170725 12:44:14.215" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:44:14.215" starttime="20170725 12:44:13.860"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.215" starttime="20170725 12:44:13.860"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:14.218" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:14.219" starttime="20170725 12:44:14.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:14.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:14.220" starttime="20170725 12:44:14.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:14.220" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:14.220" starttime="20170725 12:44:14.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:14.221" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:14.221" starttime="20170725 12:44:14.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.409" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:14.409" starttime="20170725 12:44:14.222"></status>
</kw>
<msg timestamp="20170725 12:44:14.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:14.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.409" starttime="20170725 12:44:14.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.410" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.410" starttime="20170725 12:44:14.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.411" starttime="20170725 12:44:14.410"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.411" starttime="20170725 12:44:14.218"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.411" starttime="20170725 12:44:14.217"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.411" starttime="20170725 12:44:14.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:14.412" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:44:14.412" starttime="20170725 12:44:14.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:14.412" starttime="20170725 12:44:14.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:14.475" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:14.475" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.475" starttime="20170725 12:44:14.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:14.476" starttime="20170725 12:44:14.476"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:14.476" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:14.476" starttime="20170725 12:44:14.476"></status>
</kw>
<msg timestamp="20170725 12:44:14.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.477" starttime="20170725 12:44:14.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:14.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:14.477" starttime="20170725 12:44:14.477"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:14.478" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:14.478" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:14.478" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:44:14.478" starttime="20170725 12:44:14.478"></status>
</kw>
<msg timestamp="20170725 12:44:14.478" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:44:14.478" starttime="20170725 12:44:14.215"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:14.479" starttime="20170725 12:44:14.215"></status>
</kw>
<msg timestamp="20170725 12:44:14.479" level="FAIL">
#(UTC) 2017/07/25 12:44:14.478884 -   10.901027 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:44:14.479" starttime="20170725 12:44:13.579"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:24.485" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:24.486" starttime="20170725 12:44:24.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:24.486" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:24.486" starttime="20170725 12:44:24.486"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:24.487" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:24.487" starttime="20170725 12:44:24.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:24.488" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:24.488" starttime="20170725 12:44:24.487"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:24.734" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:24.734" starttime="20170725 12:44:24.489"></status>
</kw>
<msg timestamp="20170725 12:44:24.734" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:24.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.734" starttime="20170725 12:44:24.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:24.735" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.735" starttime="20170725 12:44:24.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:24.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.735" starttime="20170725 12:44:24.735"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:24.736" starttime="20170725 12:44:24.484"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:24.736" starttime="20170725 12:44:24.484"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:24.736" starttime="20170725 12:44:24.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:24.736" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:44:24.736" starttime="20170725 12:44:24.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:24.737" starttime="20170725 12:44:24.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:24.800" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:24.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.800" starttime="20170725 12:44:24.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:24.801" starttime="20170725 12:44:24.800"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:24.801" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:24.801" starttime="20170725 12:44:24.801"></status>
</kw>
<msg timestamp="20170725 12:44:24.801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.801" starttime="20170725 12:44:24.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:24.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.802" starttime="20170725 12:44:24.802"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:24.803" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:24.803" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:24.803" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:44:24.803" starttime="20170725 12:44:24.802"></status>
</kw>
<msg timestamp="20170725 12:44:24.803" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:44:24.803" starttime="20170725 12:44:24.482"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:24.803" starttime="20170725 12:44:24.481"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:24.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:24.808" starttime="20170725 12:44:24.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:24.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:24.808" starttime="20170725 12:44:24.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:24.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:24.809" starttime="20170725 12:44:24.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:24.810" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:24.810" starttime="20170725 12:44:24.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:24.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:24.990" starttime="20170725 12:44:24.810"></status>
</kw>
<msg timestamp="20170725 12:44:24.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:24.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.990" starttime="20170725 12:44:24.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:24.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.991" starttime="20170725 12:44:24.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:24.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:24.991" starttime="20170725 12:44:24.991"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:24.991" starttime="20170725 12:44:24.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:24.991" starttime="20170725 12:44:24.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:24.992" starttime="20170725 12:44:24.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:24.992" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:44:24.992" starttime="20170725 12:44:24.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:24.993" starttime="20170725 12:44:24.993"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:25.058" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:44:25.059" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.059" starttime="20170725 12:44:24.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:25.059" starttime="20170725 12:44:25.059"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:25.060" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:25.060" starttime="20170725 12:44:25.059"></status>
</kw>
<msg timestamp="20170725 12:44:25.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.060" starttime="20170725 12:44:24.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:25.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.061" starttime="20170725 12:44:25.060"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:25.061" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:25.061" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:25.061" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:44:25.062" starttime="20170725 12:44:25.061"></status>
</kw>
<msg timestamp="20170725 12:44:25.062" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:44:25.062" starttime="20170725 12:44:24.804"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:25.062" starttime="20170725 12:44:24.804"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:25.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:25.066" starttime="20170725 12:44:25.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:25.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:25.067" starttime="20170725 12:44:25.067"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:25.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:25.068" starttime="20170725 12:44:25.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:25.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:25.068" starttime="20170725 12:44:25.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:25.246" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:25.246" starttime="20170725 12:44:25.069"></status>
</kw>
<msg timestamp="20170725 12:44:25.246" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:25.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.246" starttime="20170725 12:44:25.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:25.247" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.247" starttime="20170725 12:44:25.246"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:25.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.247" starttime="20170725 12:44:25.247"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:25.248" starttime="20170725 12:44:25.065"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:25.248" starttime="20170725 12:44:25.064"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:25.248" starttime="20170725 12:44:25.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:25.248" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:44:25.248" starttime="20170725 12:44:25.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:25.249" starttime="20170725 12:44:25.249"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:25.313" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:25.314" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.314" starttime="20170725 12:44:25.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:25.314" starttime="20170725 12:44:25.314"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:25.315" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:25.315" starttime="20170725 12:44:25.315"></status>
</kw>
<msg timestamp="20170725 12:44:25.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.315" starttime="20170725 12:44:25.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:25.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:25.316" starttime="20170725 12:44:25.315"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:25.316" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:25.316" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:25.317" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:44:25.317" starttime="20170725 12:44:25.316"></status>
</kw>
<msg timestamp="20170725 12:44:25.317" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:44:25.317" starttime="20170725 12:44:25.063"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:25.317" starttime="20170725 12:44:25.062"></status>
</kw>
<msg timestamp="20170725 12:44:25.318" level="FAIL">
#(UTC) 2017/07/25 12:44:25.317372 -   10.838488 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:44:25.318" starttime="20170725 12:44:24.480"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:35.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:35.326" starttime="20170725 12:44:35.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:35.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:35.327" starttime="20170725 12:44:35.327"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:35.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:35.328" starttime="20170725 12:44:35.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:35.328" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:35.328" starttime="20170725 12:44:35.328"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.508" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:35.508" starttime="20170725 12:44:35.329"></status>
</kw>
<msg timestamp="20170725 12:44:35.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:35.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.509" starttime="20170725 12:44:35.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.509" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.509" starttime="20170725 12:44:35.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.510" starttime="20170725 12:44:35.510"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.510" starttime="20170725 12:44:35.325"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.511" starttime="20170725 12:44:35.324"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.511" starttime="20170725 12:44:35.323"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:35.512" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:44:35.512" starttime="20170725 12:44:35.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:35.513" starttime="20170725 12:44:35.513"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:35.602" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:35.602" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.602" starttime="20170725 12:44:35.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:35.602" starttime="20170725 12:44:35.602"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:35.603" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:35.603" starttime="20170725 12:44:35.603"></status>
</kw>
<msg timestamp="20170725 12:44:35.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.604" starttime="20170725 12:44:35.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.605" starttime="20170725 12:44:35.604"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:35.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:35.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:35.606" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:44:35.606" starttime="20170725 12:44:35.606"></status>
</kw>
<msg timestamp="20170725 12:44:35.607" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:44:35.607" starttime="20170725 12:44:35.322"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.607" starttime="20170725 12:44:35.321"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:35.614" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:35.614" starttime="20170725 12:44:35.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:35.616" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:35.616" starttime="20170725 12:44:35.615"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:35.617" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:35.617" starttime="20170725 12:44:35.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:35.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:35.618" starttime="20170725 12:44:35.617"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:35.816" starttime="20170725 12:44:35.619"></status>
</kw>
<msg timestamp="20170725 12:44:35.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:35.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.817" starttime="20170725 12:44:35.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.818" starttime="20170725 12:44:35.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.819" starttime="20170725 12:44:35.818"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.819" starttime="20170725 12:44:35.612"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.819" starttime="20170725 12:44:35.612"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.819" starttime="20170725 12:44:35.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:35.820" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:44:35.820" starttime="20170725 12:44:35.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:35.820" starttime="20170725 12:44:35.820"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:35.897" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:44:35.898" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.898" starttime="20170725 12:44:35.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:35.898" starttime="20170725 12:44:35.898"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:35.899" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:35.899" starttime="20170725 12:44:35.899"></status>
</kw>
<msg timestamp="20170725 12:44:35.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.899" starttime="20170725 12:44:35.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:35.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:35.901" starttime="20170725 12:44:35.900"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:35.901" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:35.901" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:35.901" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:44:35.901" starttime="20170725 12:44:35.901"></status>
</kw>
<msg timestamp="20170725 12:44:35.902" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:44:35.902" starttime="20170725 12:44:35.609"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:35.902" starttime="20170725 12:44:35.608"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:35.907" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:35.908" starttime="20170725 12:44:35.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:35.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:35.909" starttime="20170725 12:44:35.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:35.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:35.910" starttime="20170725 12:44:35.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:35.911" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:35.911" starttime="20170725 12:44:35.911"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:36.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:36.218" starttime="20170725 12:44:35.913"></status>
</kw>
<msg timestamp="20170725 12:44:36.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:36.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:36.218" starttime="20170725 12:44:35.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:36.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:36.219" starttime="20170725 12:44:36.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:36.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:36.219" starttime="20170725 12:44:36.219"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:36.220" starttime="20170725 12:44:35.905"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:36.220" starttime="20170725 12:44:35.905"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:36.220" starttime="20170725 12:44:35.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:36.220" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:44:36.220" starttime="20170725 12:44:36.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:36.221" starttime="20170725 12:44:36.221"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:36.290" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:36.290" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:36.290" starttime="20170725 12:44:36.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:36.291" starttime="20170725 12:44:36.291"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:36.292" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:36.292" starttime="20170725 12:44:36.292"></status>
</kw>
<msg timestamp="20170725 12:44:36.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:36.292" starttime="20170725 12:44:35.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:36.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:36.293" starttime="20170725 12:44:36.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:36.294" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:36.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:36.294" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:44:36.294" starttime="20170725 12:44:36.293"></status>
</kw>
<msg timestamp="20170725 12:44:36.294" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:44:36.294" starttime="20170725 12:44:35.903"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:36.295" starttime="20170725 12:44:35.902"></status>
</kw>
<msg timestamp="20170725 12:44:36.296" level="FAIL">
#(UTC) 2017/07/25 12:44:36.294813 -   10.977441 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:44:36.296" starttime="20170725 12:44:35.318"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:46.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:46.302" starttime="20170725 12:44:46.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:46.303" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:46.303" starttime="20170725 12:44:46.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:46.304" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:46.304" starttime="20170725 12:44:46.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:46.304" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:46.304" starttime="20170725 12:44:46.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:46.492" starttime="20170725 12:44:46.305"></status>
</kw>
<msg timestamp="20170725 12:44:46.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:46.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.492" starttime="20170725 12:44:46.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.493" starttime="20170725 12:44:46.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.494" starttime="20170725 12:44:46.493"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.494" starttime="20170725 12:44:46.300"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.494" starttime="20170725 12:44:46.300"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.494" starttime="20170725 12:44:46.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:46.495" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:44:46.495" starttime="20170725 12:44:46.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:46.495" starttime="20170725 12:44:46.495"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:46.558" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:46.558" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.558" starttime="20170725 12:44:46.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:46.559" starttime="20170725 12:44:46.558"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:46.559" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:46.559" starttime="20170725 12:44:46.559"></status>
</kw>
<msg timestamp="20170725 12:44:46.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.559" starttime="20170725 12:44:46.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.560" starttime="20170725 12:44:46.560"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:46.560" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:46.561" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:46.561" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:44:46.561" starttime="20170725 12:44:46.560"></status>
</kw>
<msg timestamp="20170725 12:44:46.561" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:44:46.561" starttime="20170725 12:44:46.298"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.561" starttime="20170725 12:44:46.298"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:46.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:46.566" starttime="20170725 12:44:46.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:46.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:46.566" starttime="20170725 12:44:46.566"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:46.567" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:46.567" starttime="20170725 12:44:46.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:46.568" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:46.568" starttime="20170725 12:44:46.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.745" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:46.746" starttime="20170725 12:44:46.568"></status>
</kw>
<msg timestamp="20170725 12:44:46.746" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:46.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.746" starttime="20170725 12:44:46.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.747" starttime="20170725 12:44:46.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.747" starttime="20170725 12:44:46.747"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.747" starttime="20170725 12:44:46.564"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.747" starttime="20170725 12:44:46.564"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.748" starttime="20170725 12:44:46.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:46.748" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:44:46.748" starttime="20170725 12:44:46.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:46.749" starttime="20170725 12:44:46.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:46.894" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:44:46.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.894" starttime="20170725 12:44:46.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:46.894" starttime="20170725 12:44:46.894"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:46.895" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:46.895" starttime="20170725 12:44:46.895"></status>
</kw>
<msg timestamp="20170725 12:44:46.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.895" starttime="20170725 12:44:46.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:46.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:46.896" starttime="20170725 12:44:46.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:46.896" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:46.896" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:46.896" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:44:46.896" starttime="20170725 12:44:46.896"></status>
</kw>
<msg timestamp="20170725 12:44:46.897" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:44:46.897" starttime="20170725 12:44:46.562"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:46.897" starttime="20170725 12:44:46.561"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:46.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:46.901" starttime="20170725 12:44:46.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:46.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:46.902" starttime="20170725 12:44:46.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:46.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:46.903" starttime="20170725 12:44:46.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:46.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:46.903" starttime="20170725 12:44:46.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:47.080" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:47.080" starttime="20170725 12:44:46.904"></status>
</kw>
<msg timestamp="20170725 12:44:47.080" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:47.080" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:47.080" starttime="20170725 12:44:46.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:47.081" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:47.081" starttime="20170725 12:44:47.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:47.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:47.082" starttime="20170725 12:44:47.081"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:47.082" starttime="20170725 12:44:46.900"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:47.082" starttime="20170725 12:44:46.899"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:47.082" starttime="20170725 12:44:46.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:47.082" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:44:47.083" starttime="20170725 12:44:47.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:47.083" starttime="20170725 12:44:47.083"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:47.146" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:47.146" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:47.146" starttime="20170725 12:44:47.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:47.146" starttime="20170725 12:44:47.146"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:47.147" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:47.147" starttime="20170725 12:44:47.147"></status>
</kw>
<msg timestamp="20170725 12:44:47.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:47.147" starttime="20170725 12:44:46.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:47.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:47.148" starttime="20170725 12:44:47.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:47.148" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:47.149" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:47.149" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:44:47.149" starttime="20170725 12:44:47.148"></status>
</kw>
<msg timestamp="20170725 12:44:47.149" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:44:47.149" starttime="20170725 12:44:46.898"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:47.149" starttime="20170725 12:44:46.897"></status>
</kw>
<msg timestamp="20170725 12:44:47.150" level="FAIL">
#(UTC) 2017/07/25 12:44:47.149487 -   10.854674 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:44:47.150" starttime="20170725 12:44:46.296"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:57.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:57.159" starttime="20170725 12:44:57.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:57.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:57.159" starttime="20170725 12:44:57.159"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:57.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:57.160" starttime="20170725 12:44:57.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:57.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:57.161" starttime="20170725 12:44:57.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:57.341" starttime="20170725 12:44:57.163"></status>
</kw>
<msg timestamp="20170725 12:44:57.341" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:57.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.341" starttime="20170725 12:44:57.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.342" starttime="20170725 12:44:57.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.342" starttime="20170725 12:44:57.342"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.343" starttime="20170725 12:44:57.156"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.343" starttime="20170725 12:44:57.156"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.343" starttime="20170725 12:44:57.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:57.343" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:44:57.343" starttime="20170725 12:44:57.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:57.344" starttime="20170725 12:44:57.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:57.406" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:57.406" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.406" starttime="20170725 12:44:57.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:57.406" starttime="20170725 12:44:57.406"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:57.407" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:57.407" starttime="20170725 12:44:57.407"></status>
</kw>
<msg timestamp="20170725 12:44:57.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.407" starttime="20170725 12:44:57.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.408" starttime="20170725 12:44:57.408"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:57.409" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:57.409" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:57.409" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:44:57.409" starttime="20170725 12:44:57.408"></status>
</kw>
<msg timestamp="20170725 12:44:57.409" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:44:57.409" starttime="20170725 12:44:57.153"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.409" starttime="20170725 12:44:57.152"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:57.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:57.417" starttime="20170725 12:44:57.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:57.418" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:57.418" starttime="20170725 12:44:57.417"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:57.419" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:57.419" starttime="20170725 12:44:57.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:57.419" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:57.419" starttime="20170725 12:44:57.419"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.656" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:57.656" starttime="20170725 12:44:57.420"></status>
</kw>
<msg timestamp="20170725 12:44:57.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:57.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.656" starttime="20170725 12:44:57.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.657" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.657" starttime="20170725 12:44:57.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.658" starttime="20170725 12:44:57.657"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.658" starttime="20170725 12:44:57.412"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.658" starttime="20170725 12:44:57.412"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.658" starttime="20170725 12:44:57.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:57.659" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:44:57.659" starttime="20170725 12:44:57.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:57.659" starttime="20170725 12:44:57.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:57.838" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:44:57.838" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.838" starttime="20170725 12:44:57.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:57.839" starttime="20170725 12:44:57.838"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:57.839" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:57.839" starttime="20170725 12:44:57.839"></status>
</kw>
<msg timestamp="20170725 12:44:57.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.839" starttime="20170725 12:44:57.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:57.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:57.840" starttime="20170725 12:44:57.840"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:57.841" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:57.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:57.841" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:44:57.841" starttime="20170725 12:44:57.841"></status>
</kw>
<msg timestamp="20170725 12:44:57.841" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:44:57.841" starttime="20170725 12:44:57.410"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:57.841" starttime="20170725 12:44:57.410"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:44:57.846" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:44:57.847" starttime="20170725 12:44:57.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:44:57.848" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:44:57.848" starttime="20170725 12:44:57.847"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:44:57.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:44:57.849" starttime="20170725 12:44:57.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:44:57.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:44:57.850" starttime="20170725 12:44:57.849"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:44:58.046" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:44:58.046" starttime="20170725 12:44:57.851"></status>
</kw>
<msg timestamp="20170725 12:44:58.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:44:58.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:58.047" starttime="20170725 12:44:57.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:44:58.047" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:58.047" starttime="20170725 12:44:58.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:58.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:58.048" starttime="20170725 12:44:58.048"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:58.048" starttime="20170725 12:44:57.845"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:58.048" starttime="20170725 12:44:57.844"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:58.048" starttime="20170725 12:44:57.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:44:58.049" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:44:58.049" starttime="20170725 12:44:58.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:58.050" starttime="20170725 12:44:58.049"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:44:58.112" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:44:58.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:58.112" starttime="20170725 12:44:58.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:44:58.113" starttime="20170725 12:44:58.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:44:58.113" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:44:58.113" starttime="20170725 12:44:58.113"></status>
</kw>
<msg timestamp="20170725 12:44:58.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:44:58.113" starttime="20170725 12:44:57.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:44:58.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:44:58.114" starttime="20170725 12:44:58.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:44:58.115" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:44:58.115" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:44:58.115" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:44:58.115" starttime="20170725 12:44:58.114"></status>
</kw>
<msg timestamp="20170725 12:44:58.115" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:44:58.115" starttime="20170725 12:44:57.842"></status>
</kw>
<status status="PASS" endtime="20170725 12:44:58.115" starttime="20170725 12:44:57.842"></status>
</kw>
<msg timestamp="20170725 12:44:58.116" level="FAIL">
#(UTC) 2017/07/25 12:44:58.115673 -   10.966186 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:44:58.116" starttime="20170725 12:44:57.150"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:08.122" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:08.123" starttime="20170725 12:45:08.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:08.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:08.124" starttime="20170725 12:45:08.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:08.124" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:08.124" starttime="20170725 12:45:08.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:08.125" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:08.125" starttime="20170725 12:45:08.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.306" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:08.306" starttime="20170725 12:45:08.126"></status>
</kw>
<msg timestamp="20170725 12:45:08.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:08.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.306" starttime="20170725 12:45:08.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.307" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.307" starttime="20170725 12:45:08.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.307" starttime="20170725 12:45:08.307"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.308" starttime="20170725 12:45:08.121"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.308" starttime="20170725 12:45:08.120"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.308" starttime="20170725 12:45:08.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:08.308" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:45:08.308" starttime="20170725 12:45:08.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:08.309" starttime="20170725 12:45:08.309"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:08.383" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:08.383" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.383" starttime="20170725 12:45:08.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:08.384" starttime="20170725 12:45:08.384"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:08.384" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:08.384" starttime="20170725 12:45:08.384"></status>
</kw>
<msg timestamp="20170725 12:45:08.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.385" starttime="20170725 12:45:08.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.385" starttime="20170725 12:45:08.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:08.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:08.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:08.386" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:45:08.386" starttime="20170725 12:45:08.386"></status>
</kw>
<msg timestamp="20170725 12:45:08.386" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:45:08.386" starttime="20170725 12:45:08.119"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.387" starttime="20170725 12:45:08.118"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:08.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:08.391" starttime="20170725 12:45:08.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:08.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:08.392" starttime="20170725 12:45:08.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:08.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:08.392" starttime="20170725 12:45:08.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:08.393" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:08.393" starttime="20170725 12:45:08.393"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.675" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:08.675" starttime="20170725 12:45:08.394"></status>
</kw>
<msg timestamp="20170725 12:45:08.675" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:08.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.676" starttime="20170725 12:45:08.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.676" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.676" starttime="20170725 12:45:08.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.677" starttime="20170725 12:45:08.677"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.677" starttime="20170725 12:45:08.389"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.677" starttime="20170725 12:45:08.389"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.677" starttime="20170725 12:45:08.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:08.678" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:45:08.678" starttime="20170725 12:45:08.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:08.679" starttime="20170725 12:45:08.678"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:08.744" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:45:08.744" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.744" starttime="20170725 12:45:08.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:08.744" starttime="20170725 12:45:08.744"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:08.745" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:08.745" starttime="20170725 12:45:08.745"></status>
</kw>
<msg timestamp="20170725 12:45:08.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.745" starttime="20170725 12:45:08.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.746" starttime="20170725 12:45:08.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:08.746" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:08.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:08.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:45:08.747" starttime="20170725 12:45:08.746"></status>
</kw>
<msg timestamp="20170725 12:45:08.747" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:45:08.747" starttime="20170725 12:45:08.387"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.747" starttime="20170725 12:45:08.387"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:08.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:08.752" starttime="20170725 12:45:08.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:08.752" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:08.752" starttime="20170725 12:45:08.752"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:08.753" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:08.753" starttime="20170725 12:45:08.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:08.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:08.754" starttime="20170725 12:45:08.753"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.931" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:08.932" starttime="20170725 12:45:08.754"></status>
</kw>
<msg timestamp="20170725 12:45:08.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:08.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.932" starttime="20170725 12:45:08.754"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.932" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.932" starttime="20170725 12:45:08.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:08.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:08.933" starttime="20170725 12:45:08.933"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.933" starttime="20170725 12:45:08.750"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.933" starttime="20170725 12:45:08.750"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:08.933" starttime="20170725 12:45:08.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:08.934" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:45:08.934" starttime="20170725 12:45:08.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:08.935" starttime="20170725 12:45:08.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:09.007" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:09.007" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:09.007" starttime="20170725 12:45:08.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:09.008" starttime="20170725 12:45:09.007"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:09.008" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:09.008" starttime="20170725 12:45:09.008"></status>
</kw>
<msg timestamp="20170725 12:45:09.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:09.009" starttime="20170725 12:45:08.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:09.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:09.009" starttime="20170725 12:45:09.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:09.010" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:09.010" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:09.010" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:45:09.010" starttime="20170725 12:45:09.010"></status>
</kw>
<msg timestamp="20170725 12:45:09.010" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:45:09.010" starttime="20170725 12:45:08.748"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:09.011" starttime="20170725 12:45:08.747"></status>
</kw>
<msg timestamp="20170725 12:45:09.011" level="FAIL">
#(UTC) 2017/07/25 12:45:09.010847 -   10.895174 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:45:09.011" starttime="20170725 12:45:08.117"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:19.017" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:19.018" starttime="20170725 12:45:19.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:19.018" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:19.018" starttime="20170725 12:45:19.018"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:19.019" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:19.019" starttime="20170725 12:45:19.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:19.020" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:19.020" starttime="20170725 12:45:19.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:19.267" starttime="20170725 12:45:19.020"></status>
</kw>
<msg timestamp="20170725 12:45:19.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:19.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.267" starttime="20170725 12:45:19.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.268" starttime="20170725 12:45:19.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.268" starttime="20170725 12:45:19.268"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.268" starttime="20170725 12:45:19.016"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.268" starttime="20170725 12:45:19.016"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.269" starttime="20170725 12:45:19.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:19.269" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:45:19.269" starttime="20170725 12:45:19.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:19.270" starttime="20170725 12:45:19.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:19.333" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:19.333" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.333" starttime="20170725 12:45:19.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:19.334" starttime="20170725 12:45:19.333"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:19.334" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:19.334" starttime="20170725 12:45:19.334"></status>
</kw>
<msg timestamp="20170725 12:45:19.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.334" starttime="20170725 12:45:19.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.335" starttime="20170725 12:45:19.335"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:19.336" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:19.336" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:19.336" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:45:19.336" starttime="20170725 12:45:19.335"></status>
</kw>
<msg timestamp="20170725 12:45:19.336" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:45:19.336" starttime="20170725 12:45:19.014"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.336" starttime="20170725 12:45:19.013"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:19.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:19.341" starttime="20170725 12:45:19.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:19.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:19.341" starttime="20170725 12:45:19.341"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:19.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:19.342" starttime="20170725 12:45:19.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:19.343" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:19.343" starttime="20170725 12:45:19.342"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.612" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:19.612" starttime="20170725 12:45:19.343"></status>
</kw>
<msg timestamp="20170725 12:45:19.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:19.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.613" starttime="20170725 12:45:19.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.613" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.613" starttime="20170725 12:45:19.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.614" starttime="20170725 12:45:19.614"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.614" starttime="20170725 12:45:19.339"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.614" starttime="20170725 12:45:19.339"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.614" starttime="20170725 12:45:19.338"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:19.615" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:45:19.615" starttime="20170725 12:45:19.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:19.616" starttime="20170725 12:45:19.615"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:19.680" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:45:19.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.681" starttime="20170725 12:45:19.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:19.681" starttime="20170725 12:45:19.681"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:19.682" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:19.682" starttime="20170725 12:45:19.681"></status>
</kw>
<msg timestamp="20170725 12:45:19.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.682" starttime="20170725 12:45:19.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.683" starttime="20170725 12:45:19.682"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:19.683" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:19.683" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:19.683" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:45:19.683" starttime="20170725 12:45:19.683"></status>
</kw>
<msg timestamp="20170725 12:45:19.684" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:45:19.684" starttime="20170725 12:45:19.337"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.684" starttime="20170725 12:45:19.337"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:19.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:19.688" starttime="20170725 12:45:19.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:19.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:19.689" starttime="20170725 12:45:19.688"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:19.689" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:19.689" starttime="20170725 12:45:19.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:19.690" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:19.690" starttime="20170725 12:45:19.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.868" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:19.868" starttime="20170725 12:45:19.691"></status>
</kw>
<msg timestamp="20170725 12:45:19.868" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:19.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.868" starttime="20170725 12:45:19.690"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.869" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.869" starttime="20170725 12:45:19.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:19.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:19.869" starttime="20170725 12:45:19.869"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.870" starttime="20170725 12:45:19.687"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.870" starttime="20170725 12:45:19.686"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:19.870" starttime="20170725 12:45:19.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:19.870" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:45:19.870" starttime="20170725 12:45:19.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:19.871" starttime="20170725 12:45:19.871"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:20.032" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:20.032" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:20.032" starttime="20170725 12:45:19.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:20.033" starttime="20170725 12:45:20.032"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:20.033" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:20.033" starttime="20170725 12:45:20.033"></status>
</kw>
<msg timestamp="20170725 12:45:20.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:20.033" starttime="20170725 12:45:19.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:20.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:20.034" starttime="20170725 12:45:20.034"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:20.035" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:20.035" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:20.035" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:45:20.035" starttime="20170725 12:45:20.034"></status>
</kw>
<msg timestamp="20170725 12:45:20.035" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:45:20.035" starttime="20170725 12:45:19.685"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:20.035" starttime="20170725 12:45:19.684"></status>
</kw>
<msg timestamp="20170725 12:45:20.036" level="FAIL">
#(UTC) 2017/07/25 12:45:20.035708 -   11.024861 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:45:20.036" starttime="20170725 12:45:19.012"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:30.042" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:30.043" starttime="20170725 12:45:30.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:30.043" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:30.043" starttime="20170725 12:45:30.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:30.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:30.044" starttime="20170725 12:45:30.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:30.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:30.045" starttime="20170725 12:45:30.044"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.312" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:30.312" starttime="20170725 12:45:30.045"></status>
</kw>
<msg timestamp="20170725 12:45:30.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:30.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.313" starttime="20170725 12:45:30.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.313" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.313" starttime="20170725 12:45:30.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.314" starttime="20170725 12:45:30.314"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.314" starttime="20170725 12:45:30.041"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.314" starttime="20170725 12:45:30.040"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.314" starttime="20170725 12:45:30.040"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:30.315" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:45:30.315" starttime="20170725 12:45:30.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:30.316" starttime="20170725 12:45:30.315"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:30.377" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:30.377" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.377" starttime="20170725 12:45:30.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:30.378" starttime="20170725 12:45:30.377"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:30.378" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:30.378" starttime="20170725 12:45:30.378"></status>
</kw>
<msg timestamp="20170725 12:45:30.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.378" starttime="20170725 12:45:30.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.379" starttime="20170725 12:45:30.379"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:30.380" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:30.380" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:30.380" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:45:30.380" starttime="20170725 12:45:30.379"></status>
</kw>
<msg timestamp="20170725 12:45:30.380" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:45:30.380" starttime="20170725 12:45:30.039"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.380" starttime="20170725 12:45:30.038"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:30.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:30.385" starttime="20170725 12:45:30.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:30.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:30.386" starttime="20170725 12:45:30.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:30.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:30.386" starttime="20170725 12:45:30.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:30.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:30.387" starttime="20170725 12:45:30.386"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.600" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:30.600" starttime="20170725 12:45:30.388"></status>
</kw>
<msg timestamp="20170725 12:45:30.600" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:30.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.601" starttime="20170725 12:45:30.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.601" starttime="20170725 12:45:30.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.602" starttime="20170725 12:45:30.601"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.602" starttime="20170725 12:45:30.383"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.602" starttime="20170725 12:45:30.383"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.602" starttime="20170725 12:45:30.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:30.603" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:45:30.603" starttime="20170725 12:45:30.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:30.604" starttime="20170725 12:45:30.603"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:30.696" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:45:30.696" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.696" starttime="20170725 12:45:30.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:30.696" starttime="20170725 12:45:30.696"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:30.697" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:30.697" starttime="20170725 12:45:30.697"></status>
</kw>
<msg timestamp="20170725 12:45:30.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.697" starttime="20170725 12:45:30.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.698" starttime="20170725 12:45:30.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:30.698" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:30.698" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:30.699" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:45:30.699" starttime="20170725 12:45:30.698"></status>
</kw>
<msg timestamp="20170725 12:45:30.699" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:45:30.699" starttime="20170725 12:45:30.381"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.699" starttime="20170725 12:45:30.381"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:30.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:30.704" starttime="20170725 12:45:30.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:30.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:30.704" starttime="20170725 12:45:30.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:30.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:30.705" starttime="20170725 12:45:30.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:30.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:30.706" starttime="20170725 12:45:30.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:30.901" starttime="20170725 12:45:30.706"></status>
</kw>
<msg timestamp="20170725 12:45:30.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:30.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.901" starttime="20170725 12:45:30.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.902" starttime="20170725 12:45:30.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.903" starttime="20170725 12:45:30.902"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.903" starttime="20170725 12:45:30.702"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.903" starttime="20170725 12:45:30.702"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.903" starttime="20170725 12:45:30.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:30.904" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:45:30.904" starttime="20170725 12:45:30.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:30.904" starttime="20170725 12:45:30.904"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:30.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:30.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.967" starttime="20170725 12:45:30.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:30.968" starttime="20170725 12:45:30.967"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:30.968" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:30.968" starttime="20170725 12:45:30.968"></status>
</kw>
<msg timestamp="20170725 12:45:30.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.968" starttime="20170725 12:45:30.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:30.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:30.969" starttime="20170725 12:45:30.969"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:30.970" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:30.970" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:30.970" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:45:30.970" starttime="20170725 12:45:30.969"></status>
</kw>
<msg timestamp="20170725 12:45:30.970" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:45:30.970" starttime="20170725 12:45:30.700"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:30.970" starttime="20170725 12:45:30.699"></status>
</kw>
<msg timestamp="20170725 12:45:30.971" level="FAIL">
#(UTC) 2017/07/25 12:45:30.970682 -   10.934974 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:45:30.971" starttime="20170725 12:45:30.037"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:40.977" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:40.978" starttime="20170725 12:45:40.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:40.978" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:40.978" starttime="20170725 12:45:40.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:40.979" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:40.979" starttime="20170725 12:45:40.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:40.980" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:40.980" starttime="20170725 12:45:40.979"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.206" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:41.206" starttime="20170725 12:45:40.980"></status>
</kw>
<msg timestamp="20170725 12:45:41.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:41.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.206" starttime="20170725 12:45:40.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.207" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.207" starttime="20170725 12:45:41.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.207" starttime="20170725 12:45:41.207"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.208" starttime="20170725 12:45:40.976"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.208" starttime="20170725 12:45:40.976"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.208" starttime="20170725 12:45:40.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:41.208" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:45:41.208" starttime="20170725 12:45:41.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:41.209" starttime="20170725 12:45:41.209"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:41.270" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:41.271" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.271" starttime="20170725 12:45:41.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:41.271" starttime="20170725 12:45:41.271"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:41.272" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:41.272" starttime="20170725 12:45:41.271"></status>
</kw>
<msg timestamp="20170725 12:45:41.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.272" starttime="20170725 12:45:40.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.273" starttime="20170725 12:45:41.272"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:41.273" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:41.273" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:41.273" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:45:41.274" starttime="20170725 12:45:41.273"></status>
</kw>
<msg timestamp="20170725 12:45:41.274" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:45:41.274" starttime="20170725 12:45:40.974"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.274" starttime="20170725 12:45:40.973"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:41.278" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:41.281" starttime="20170725 12:45:41.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:41.282" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:41.282" starttime="20170725 12:45:41.282"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:41.283" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:41.283" starttime="20170725 12:45:41.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:41.284" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:41.284" starttime="20170725 12:45:41.283"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.512" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:41.513" starttime="20170725 12:45:41.284"></status>
</kw>
<msg timestamp="20170725 12:45:41.513" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:41.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.513" starttime="20170725 12:45:41.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.513" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.514" starttime="20170725 12:45:41.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.514" starttime="20170725 12:45:41.514"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.514" starttime="20170725 12:45:41.277"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.514" starttime="20170725 12:45:41.277"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.515" starttime="20170725 12:45:41.276"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:41.515" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:45:41.515" starttime="20170725 12:45:41.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:41.516" starttime="20170725 12:45:41.515"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:41.580" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:45:41.580" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.581" starttime="20170725 12:45:41.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:41.581" starttime="20170725 12:45:41.581"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:41.582" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:41.582" starttime="20170725 12:45:41.581"></status>
</kw>
<msg timestamp="20170725 12:45:41.582" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.582" starttime="20170725 12:45:41.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.583" starttime="20170725 12:45:41.582"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:41.583" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:41.583" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:41.583" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:45:41.583" starttime="20170725 12:45:41.583"></status>
</kw>
<msg timestamp="20170725 12:45:41.584" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:45:41.584" starttime="20170725 12:45:41.275"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.584" starttime="20170725 12:45:41.274"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:41.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:41.588" starttime="20170725 12:45:41.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:41.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:41.589" starttime="20170725 12:45:41.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:41.589" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:41.590" starttime="20170725 12:45:41.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:41.590" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:41.590" starttime="20170725 12:45:41.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.842" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:41.842" starttime="20170725 12:45:41.591"></status>
</kw>
<msg timestamp="20170725 12:45:41.843" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:41.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.843" starttime="20170725 12:45:41.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.843" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.843" starttime="20170725 12:45:41.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.844" starttime="20170725 12:45:41.844"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.844" starttime="20170725 12:45:41.587"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.844" starttime="20170725 12:45:41.586"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.844" starttime="20170725 12:45:41.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:41.845" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:45:41.845" starttime="20170725 12:45:41.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:41.846" starttime="20170725 12:45:41.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:41.908" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:41.908" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.908" starttime="20170725 12:45:41.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:41.909" starttime="20170725 12:45:41.908"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:41.909" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:41.909" starttime="20170725 12:45:41.909"></status>
</kw>
<msg timestamp="20170725 12:45:41.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.909" starttime="20170725 12:45:41.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:41.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:41.910" starttime="20170725 12:45:41.910"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:41.910" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:41.911" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:41.911" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:45:41.911" starttime="20170725 12:45:41.910"></status>
</kw>
<msg timestamp="20170725 12:45:41.911" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:45:41.911" starttime="20170725 12:45:41.585"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:41.911" starttime="20170725 12:45:41.584"></status>
</kw>
<msg timestamp="20170725 12:45:41.912" level="FAIL">
#(UTC) 2017/07/25 12:45:41.911580 -   10.940898 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:45:41.912" starttime="20170725 12:45:40.972"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:51.918" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:51.919" starttime="20170725 12:45:51.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:51.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:51.920" starttime="20170725 12:45:51.919"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:51.920" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:51.920" starttime="20170725 12:45:51.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:51.921" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:51.921" starttime="20170725 12:45:51.921"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.108" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:52.108" starttime="20170725 12:45:51.922"></status>
</kw>
<msg timestamp="20170725 12:45:52.108" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:52.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.108" starttime="20170725 12:45:51.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.109" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.109" starttime="20170725 12:45:52.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.110" starttime="20170725 12:45:52.109"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.110" starttime="20170725 12:45:51.917"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.110" starttime="20170725 12:45:51.916"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.110" starttime="20170725 12:45:51.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:52.111" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:45:52.111" starttime="20170725 12:45:52.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:52.111" starttime="20170725 12:45:52.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:52.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:52.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.174" starttime="20170725 12:45:52.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:52.174" starttime="20170725 12:45:52.174"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:52.175" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:52.175" starttime="20170725 12:45:52.175"></status>
</kw>
<msg timestamp="20170725 12:45:52.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.175" starttime="20170725 12:45:51.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.176" starttime="20170725 12:45:52.175"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:52.176" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:52.176" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:52.177" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:45:52.177" starttime="20170725 12:45:52.176"></status>
</kw>
<msg timestamp="20170725 12:45:52.177" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:45:52.177" starttime="20170725 12:45:51.915"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.177" starttime="20170725 12:45:51.914"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:52.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:52.182" starttime="20170725 12:45:52.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:52.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:52.182" starttime="20170725 12:45:52.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:52.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:52.183" starttime="20170725 12:45:52.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:52.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:52.184" starttime="20170725 12:45:52.183"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.370" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:52.370" starttime="20170725 12:45:52.184"></status>
</kw>
<msg timestamp="20170725 12:45:52.370" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:52.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.371" starttime="20170725 12:45:52.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.371" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.371" starttime="20170725 12:45:52.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.372" starttime="20170725 12:45:52.372"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.372" starttime="20170725 12:45:52.180"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.372" starttime="20170725 12:45:52.180"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.372" starttime="20170725 12:45:52.179"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:52.373" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:45:52.373" starttime="20170725 12:45:52.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:52.374" starttime="20170725 12:45:52.373"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:52.454" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:45:52.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.454" starttime="20170725 12:45:52.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:52.455" starttime="20170725 12:45:52.454"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:52.455" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:52.455" starttime="20170725 12:45:52.455"></status>
</kw>
<msg timestamp="20170725 12:45:52.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.455" starttime="20170725 12:45:52.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.456" starttime="20170725 12:45:52.456"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:52.456" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:52.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:52.457" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:45:52.457" starttime="20170725 12:45:52.456"></status>
</kw>
<msg timestamp="20170725 12:45:52.457" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:45:52.457" starttime="20170725 12:45:52.178"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.457" starttime="20170725 12:45:52.177"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:45:52.461" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:45:52.462" starttime="20170725 12:45:52.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:45:52.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:45:52.462" starttime="20170725 12:45:52.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:45:52.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:45:52.463" starttime="20170725 12:45:52.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:45:52.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:45:52.464" starttime="20170725 12:45:52.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.757" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:45:52.757" starttime="20170725 12:45:52.464"></status>
</kw>
<msg timestamp="20170725 12:45:52.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:45:52.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.757" starttime="20170725 12:45:52.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.758" starttime="20170725 12:45:52.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.759" starttime="20170725 12:45:52.758"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.759" starttime="20170725 12:45:52.460"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.759" starttime="20170725 12:45:52.460"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.759" starttime="20170725 12:45:52.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:45:52.760" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:45:52.760" starttime="20170725 12:45:52.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:52.760" starttime="20170725 12:45:52.760"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:45:52.860" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:45:52.860" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.860" starttime="20170725 12:45:52.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:45:52.860" starttime="20170725 12:45:52.860"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:45:52.861" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:45:52.861" starttime="20170725 12:45:52.861"></status>
</kw>
<msg timestamp="20170725 12:45:52.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.861" starttime="20170725 12:45:52.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:45:52.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:45:52.862" starttime="20170725 12:45:52.861"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:45:52.862" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:45:52.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:45:52.862" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:45:52.863" starttime="20170725 12:45:52.862"></status>
</kw>
<msg timestamp="20170725 12:45:52.863" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:45:52.863" starttime="20170725 12:45:52.458"></status>
</kw>
<status status="PASS" endtime="20170725 12:45:52.863" starttime="20170725 12:45:52.457"></status>
</kw>
<msg timestamp="20170725 12:45:52.864" level="FAIL">
#(UTC) 2017/07/25 12:45:52.863370 -   10.951790 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:45:52.864" starttime="20170725 12:45:51.913"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:02.870" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:02.871" starttime="20170725 12:46:02.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:02.872" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:02.872" starttime="20170725 12:46:02.871"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:02.872" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:02.872" starttime="20170725 12:46:02.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:02.873" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:02.873" starttime="20170725 12:46:02.873"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.064" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:03.064" starttime="20170725 12:46:02.874"></status>
</kw>
<msg timestamp="20170725 12:46:03.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:03.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.064" starttime="20170725 12:46:02.873"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.065" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.065" starttime="20170725 12:46:03.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.066" starttime="20170725 12:46:03.065"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.066" starttime="20170725 12:46:02.869"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.066" starttime="20170725 12:46:02.869"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.066" starttime="20170725 12:46:02.868"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:03.067" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:46:03.067" starttime="20170725 12:46:03.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:03.068" starttime="20170725 12:46:03.067"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:03.130" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:03.130" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.130" starttime="20170725 12:46:03.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:03.131" starttime="20170725 12:46:03.130"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:03.131" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:03.131" starttime="20170725 12:46:03.131"></status>
</kw>
<msg timestamp="20170725 12:46:03.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.131" starttime="20170725 12:46:02.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.132" starttime="20170725 12:46:03.132"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:03.133" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:03.133" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:03.133" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:46:03.133" starttime="20170725 12:46:03.132"></status>
</kw>
<msg timestamp="20170725 12:46:03.133" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:46:03.133" starttime="20170725 12:46:02.867"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.134" starttime="20170725 12:46:02.866"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:03.137" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:03.138" starttime="20170725 12:46:03.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:03.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:03.139" starttime="20170725 12:46:03.138"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:03.139" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:03.139" starttime="20170725 12:46:03.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:03.140" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:03.140" starttime="20170725 12:46:03.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.405" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:03.405" starttime="20170725 12:46:03.141"></status>
</kw>
<msg timestamp="20170725 12:46:03.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:03.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.405" starttime="20170725 12:46:03.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.406" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.406" starttime="20170725 12:46:03.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.407" starttime="20170725 12:46:03.406"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.407" starttime="20170725 12:46:03.136"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.407" starttime="20170725 12:46:03.136"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.407" starttime="20170725 12:46:03.135"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:03.407" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:46:03.407" starttime="20170725 12:46:03.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:03.408" starttime="20170725 12:46:03.408"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:03.491" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:46:03.491" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.491" starttime="20170725 12:46:03.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:03.492" starttime="20170725 12:46:03.491"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:03.492" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:03.492" starttime="20170725 12:46:03.492"></status>
</kw>
<msg timestamp="20170725 12:46:03.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.493" starttime="20170725 12:46:03.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.493" starttime="20170725 12:46:03.493"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:03.494" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:03.494" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:03.494" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:46:03.494" starttime="20170725 12:46:03.494"></status>
</kw>
<msg timestamp="20170725 12:46:03.494" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:46:03.494" starttime="20170725 12:46:03.134"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.495" starttime="20170725 12:46:03.134"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:03.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:03.499" starttime="20170725 12:46:03.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:03.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:03.500" starttime="20170725 12:46:03.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:03.501" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:03.501" starttime="20170725 12:46:03.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:03.501" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:03.501" starttime="20170725 12:46:03.501"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:03.686" starttime="20170725 12:46:03.502"></status>
</kw>
<msg timestamp="20170725 12:46:03.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:03.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.686" starttime="20170725 12:46:03.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.687" starttime="20170725 12:46:03.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.688" starttime="20170725 12:46:03.687"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.688" starttime="20170725 12:46:03.498"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.688" starttime="20170725 12:46:03.497"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.688" starttime="20170725 12:46:03.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:03.689" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:46:03.689" starttime="20170725 12:46:03.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:03.690" starttime="20170725 12:46:03.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:03.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:03.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.754" starttime="20170725 12:46:03.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:03.755" starttime="20170725 12:46:03.754"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:03.755" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:03.755" starttime="20170725 12:46:03.755"></status>
</kw>
<msg timestamp="20170725 12:46:03.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.755" starttime="20170725 12:46:03.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:03.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:03.756" starttime="20170725 12:46:03.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:03.757" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:03.757" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:03.757" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:46:03.757" starttime="20170725 12:46:03.756"></status>
</kw>
<msg timestamp="20170725 12:46:03.757" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:46:03.757" starttime="20170725 12:46:03.495"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:03.757" starttime="20170725 12:46:03.495"></status>
</kw>
<msg timestamp="20170725 12:46:03.758" level="FAIL">
#(UTC) 2017/07/25 12:46:03.757661 -   10.894291 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:46:03.758" starttime="20170725 12:46:02.865"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:13.765" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:13.766" starttime="20170725 12:46:13.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:13.766" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:13.766" starttime="20170725 12:46:13.766"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:13.767" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:13.767" starttime="20170725 12:46:13.767"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:13.768" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:13.768" starttime="20170725 12:46:13.767"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:13.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:13.963" starttime="20170725 12:46:13.768"></status>
</kw>
<msg timestamp="20170725 12:46:13.963" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:13.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:13.964" starttime="20170725 12:46:13.768"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:13.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:13.964" starttime="20170725 12:46:13.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:13.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:13.965" starttime="20170725 12:46:13.965"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:13.965" starttime="20170725 12:46:13.764"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:13.965" starttime="20170725 12:46:13.763"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:13.966" starttime="20170725 12:46:13.762"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:13.966" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:46:13.966" starttime="20170725 12:46:13.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:13.967" starttime="20170725 12:46:13.966"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:14.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:14.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.115" starttime="20170725 12:46:13.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:14.116" starttime="20170725 12:46:14.115"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:14.116" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:14.116" starttime="20170725 12:46:14.116"></status>
</kw>
<msg timestamp="20170725 12:46:14.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.117" starttime="20170725 12:46:13.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.117" starttime="20170725 12:46:14.117"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:14.118" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:14.118" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:14.118" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:46:14.118" starttime="20170725 12:46:14.118"></status>
</kw>
<msg timestamp="20170725 12:46:14.118" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:46:14.118" starttime="20170725 12:46:13.761"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.119" starttime="20170725 12:46:13.760"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:14.122" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:14.123" starttime="20170725 12:46:14.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:14.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:14.124" starttime="20170725 12:46:14.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:14.124" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:14.124" starttime="20170725 12:46:14.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:14.125" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:14.125" starttime="20170725 12:46:14.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:14.320" starttime="20170725 12:46:14.126"></status>
</kw>
<msg timestamp="20170725 12:46:14.320" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:14.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.320" starttime="20170725 12:46:14.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.321" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.321" starttime="20170725 12:46:14.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.322" starttime="20170725 12:46:14.321"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.322" starttime="20170725 12:46:14.121"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.322" starttime="20170725 12:46:14.121"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.322" starttime="20170725 12:46:14.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:14.323" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:46:14.323" starttime="20170725 12:46:14.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:14.323" starttime="20170725 12:46:14.323"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:14.397" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:46:14.397" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.397" starttime="20170725 12:46:14.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:14.398" starttime="20170725 12:46:14.397"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:14.398" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:14.399" starttime="20170725 12:46:14.398"></status>
</kw>
<msg timestamp="20170725 12:46:14.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.399" starttime="20170725 12:46:14.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.399" starttime="20170725 12:46:14.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:14.400" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:14.400" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:14.400" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:46:14.400" starttime="20170725 12:46:14.400"></status>
</kw>
<msg timestamp="20170725 12:46:14.400" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:46:14.401" starttime="20170725 12:46:14.119"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.401" starttime="20170725 12:46:14.119"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:14.404" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:14.405" starttime="20170725 12:46:14.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:14.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:14.406" starttime="20170725 12:46:14.405"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:14.406" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:14.406" starttime="20170725 12:46:14.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:14.407" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:14.407" starttime="20170725 12:46:14.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.641" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:14.642" starttime="20170725 12:46:14.408"></status>
</kw>
<msg timestamp="20170725 12:46:14.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:14.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.642" starttime="20170725 12:46:14.407"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.642" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.643" starttime="20170725 12:46:14.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.643" starttime="20170725 12:46:14.643"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.643" starttime="20170725 12:46:14.404"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.643" starttime="20170725 12:46:14.403"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.644" starttime="20170725 12:46:14.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:14.644" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:46:14.644" starttime="20170725 12:46:14.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:14.645" starttime="20170725 12:46:14.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:14.708" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:14.708" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.708" starttime="20170725 12:46:14.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:14.709" starttime="20170725 12:46:14.709"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:14.710" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:14.710" starttime="20170725 12:46:14.709"></status>
</kw>
<msg timestamp="20170725 12:46:14.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.710" starttime="20170725 12:46:14.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:14.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:14.711" starttime="20170725 12:46:14.710"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:14.711" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:14.711" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:14.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:46:14.711" starttime="20170725 12:46:14.711"></status>
</kw>
<msg timestamp="20170725 12:46:14.712" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:46:14.712" starttime="20170725 12:46:14.401"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:14.712" starttime="20170725 12:46:14.401"></status>
</kw>
<msg timestamp="20170725 12:46:14.713" level="FAIL">
#(UTC) 2017/07/25 12:46:14.712094 -   10.954433 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:46:14.713" starttime="20170725 12:46:13.759"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:24.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:24.720" starttime="20170725 12:46:24.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:24.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:24.721" starttime="20170725 12:46:24.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:24.721" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:24.721" starttime="20170725 12:46:24.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:24.722" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:24.722" starttime="20170725 12:46:24.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:24.999" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:24.999" starttime="20170725 12:46:24.723"></status>
</kw>
<msg timestamp="20170725 12:46:25.000" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:25.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.000" starttime="20170725 12:46:24.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.000" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.001" starttime="20170725 12:46:25.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.001" starttime="20170725 12:46:25.001"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.001" starttime="20170725 12:46:24.718"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.001" starttime="20170725 12:46:24.717"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.002" starttime="20170725 12:46:24.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:25.002" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:46:25.002" starttime="20170725 12:46:25.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:25.003" starttime="20170725 12:46:25.002"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:25.083" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:25.083" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.084" starttime="20170725 12:46:25.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:25.084" starttime="20170725 12:46:25.084"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:25.085" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:25.085" starttime="20170725 12:46:25.084"></status>
</kw>
<msg timestamp="20170725 12:46:25.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.085" starttime="20170725 12:46:24.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.086" starttime="20170725 12:46:25.085"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:25.086" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:25.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:25.086" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:46:25.086" starttime="20170725 12:46:25.086"></status>
</kw>
<msg timestamp="20170725 12:46:25.087" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:46:25.087" starttime="20170725 12:46:24.715"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.087" starttime="20170725 12:46:24.715"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:25.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:25.095" starttime="20170725 12:46:25.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:25.096" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:25.096" starttime="20170725 12:46:25.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:25.097" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:25.097" starttime="20170725 12:46:25.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:25.098" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:25.098" starttime="20170725 12:46:25.097"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.307" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:25.307" starttime="20170725 12:46:25.098"></status>
</kw>
<msg timestamp="20170725 12:46:25.307" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:25.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.308" starttime="20170725 12:46:25.098"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.308" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.308" starttime="20170725 12:46:25.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.309" starttime="20170725 12:46:25.309"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.309" starttime="20170725 12:46:25.090"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.309" starttime="20170725 12:46:25.090"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.309" starttime="20170725 12:46:25.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:25.310" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:46:25.310" starttime="20170725 12:46:25.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:25.311" starttime="20170725 12:46:25.310"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:25.379" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:46:25.379" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.379" starttime="20170725 12:46:25.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:25.380" starttime="20170725 12:46:25.379"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:25.380" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:25.380" starttime="20170725 12:46:25.380"></status>
</kw>
<msg timestamp="20170725 12:46:25.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.381" starttime="20170725 12:46:25.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.382" starttime="20170725 12:46:25.381"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:25.383" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:25.383" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:25.383" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:46:25.383" starttime="20170725 12:46:25.382"></status>
</kw>
<msg timestamp="20170725 12:46:25.383" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:46:25.383" starttime="20170725 12:46:25.088"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.383" starttime="20170725 12:46:25.087"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:25.387" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:25.388" starttime="20170725 12:46:25.387"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:25.388" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:25.388" starttime="20170725 12:46:25.388"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:25.389" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:25.389" starttime="20170725 12:46:25.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:25.390" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:25.390" starttime="20170725 12:46:25.389"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:25.594" starttime="20170725 12:46:25.390"></status>
</kw>
<msg timestamp="20170725 12:46:25.594" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:25.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.594" starttime="20170725 12:46:25.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.594" starttime="20170725 12:46:25.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.595" starttime="20170725 12:46:25.595"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.595" starttime="20170725 12:46:25.386"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.595" starttime="20170725 12:46:25.386"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.596" starttime="20170725 12:46:25.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:25.596" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:46:25.596" starttime="20170725 12:46:25.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:25.597" starttime="20170725 12:46:25.596"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:25.669" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:25.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.669" starttime="20170725 12:46:25.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:25.670" starttime="20170725 12:46:25.669"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:25.670" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:25.670" starttime="20170725 12:46:25.670"></status>
</kw>
<msg timestamp="20170725 12:46:25.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.670" starttime="20170725 12:46:25.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:25.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:25.671" starttime="20170725 12:46:25.671"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:25.672" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:25.672" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:25.672" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:46:25.672" starttime="20170725 12:46:25.671"></status>
</kw>
<msg timestamp="20170725 12:46:25.672" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:46:25.672" starttime="20170725 12:46:25.384"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:25.673" starttime="20170725 12:46:25.384"></status>
</kw>
<msg timestamp="20170725 12:46:25.674" level="FAIL">
#(UTC) 2017/07/25 12:46:25.672978 -   10.960884 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:46:25.674" starttime="20170725 12:46:24.713"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:35.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:35.680" starttime="20170725 12:46:35.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:35.681" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:35.681" starttime="20170725 12:46:35.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:35.682" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:35.682" starttime="20170725 12:46:35.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:35.682" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:35.682" starttime="20170725 12:46:35.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:35.932" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:35.932" starttime="20170725 12:46:35.683"></status>
</kw>
<msg timestamp="20170725 12:46:35.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:35.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:35.932" starttime="20170725 12:46:35.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:35.933" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:35.933" starttime="20170725 12:46:35.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:35.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:35.934" starttime="20170725 12:46:35.933"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:35.934" starttime="20170725 12:46:35.679"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:35.934" starttime="20170725 12:46:35.678"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:35.934" starttime="20170725 12:46:35.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:35.935" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:46:35.935" starttime="20170725 12:46:35.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:35.935" starttime="20170725 12:46:35.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:35.997" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:35.998" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:35.998" starttime="20170725 12:46:35.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:35.998" starttime="20170725 12:46:35.998"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:35.999" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:35.999" starttime="20170725 12:46:35.999"></status>
</kw>
<msg timestamp="20170725 12:46:35.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:35.999" starttime="20170725 12:46:35.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.000" starttime="20170725 12:46:35.999"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:36.001" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:36.001" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:36.001" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:46:36.001" starttime="20170725 12:46:36.000"></status>
</kw>
<msg timestamp="20170725 12:46:36.001" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:46:36.001" starttime="20170725 12:46:35.676"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.001" starttime="20170725 12:46:35.676"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:36.005" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:36.006" starttime="20170725 12:46:36.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:36.006" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:36.006" starttime="20170725 12:46:36.006"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:36.007" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:36.007" starttime="20170725 12:46:36.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:36.008" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:36.008" starttime="20170725 12:46:36.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.201" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:36.202" starttime="20170725 12:46:36.008"></status>
</kw>
<msg timestamp="20170725 12:46:36.202" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:36.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.202" starttime="20170725 12:46:36.008"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.203" starttime="20170725 12:46:36.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.203" starttime="20170725 12:46:36.203"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.204" starttime="20170725 12:46:36.004"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.204" starttime="20170725 12:46:36.004"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.204" starttime="20170725 12:46:36.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:36.204" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:46:36.204" starttime="20170725 12:46:36.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:36.205" starttime="20170725 12:46:36.205"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:36.287" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:46:36.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.288" starttime="20170725 12:46:36.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:36.288" starttime="20170725 12:46:36.288"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:36.289" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:36.289" starttime="20170725 12:46:36.289"></status>
</kw>
<msg timestamp="20170725 12:46:36.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.289" starttime="20170725 12:46:36.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.290" starttime="20170725 12:46:36.290"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:36.291" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:36.291" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:36.291" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:46:36.291" starttime="20170725 12:46:36.291"></status>
</kw>
<msg timestamp="20170725 12:46:36.292" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:46:36.292" starttime="20170725 12:46:36.002"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.292" starttime="20170725 12:46:36.002"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:36.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:36.298" starttime="20170725 12:46:36.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:36.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:36.299" starttime="20170725 12:46:36.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:36.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:36.300" starttime="20170725 12:46:36.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:36.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:36.301" starttime="20170725 12:46:36.301"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.510" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:36.510" starttime="20170725 12:46:36.303"></status>
</kw>
<msg timestamp="20170725 12:46:36.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:36.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.511" starttime="20170725 12:46:36.302"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.511" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.511" starttime="20170725 12:46:36.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.512" starttime="20170725 12:46:36.512"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.512" starttime="20170725 12:46:36.296"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.512" starttime="20170725 12:46:36.296"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.512" starttime="20170725 12:46:36.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:36.513" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:46:36.513" starttime="20170725 12:46:36.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:36.514" starttime="20170725 12:46:36.513"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:36.576" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:36.576" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.576" starttime="20170725 12:46:36.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:36.577" starttime="20170725 12:46:36.577"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:36.578" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:36.578" starttime="20170725 12:46:36.577"></status>
</kw>
<msg timestamp="20170725 12:46:36.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.578" starttime="20170725 12:46:36.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:36.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:36.579" starttime="20170725 12:46:36.578"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:36.579" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:36.579" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:36.579" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:46:36.579" starttime="20170725 12:46:36.579"></status>
</kw>
<msg timestamp="20170725 12:46:36.580" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:46:36.580" starttime="20170725 12:46:36.293"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:36.580" starttime="20170725 12:46:36.292"></status>
</kw>
<msg timestamp="20170725 12:46:36.581" level="FAIL">
#(UTC) 2017/07/25 12:46:36.580214 -   10.907236 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:46:36.581" starttime="20170725 12:46:35.674"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:46.587" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:46.588" starttime="20170725 12:46:46.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:46.588" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:46.589" starttime="20170725 12:46:46.588"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:46.589" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:46.589" starttime="20170725 12:46:46.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:46.590" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:46.590" starttime="20170725 12:46:46.589"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:46.796" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:46.796" starttime="20170725 12:46:46.591"></status>
</kw>
<msg timestamp="20170725 12:46:46.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:46.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:46.796" starttime="20170725 12:46:46.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:46.797" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:46.797" starttime="20170725 12:46:46.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:46.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:46.798" starttime="20170725 12:46:46.797"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:46.798" starttime="20170725 12:46:46.586"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:46.798" starttime="20170725 12:46:46.585"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:46.798" starttime="20170725 12:46:46.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:46.798" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:46:46.798" starttime="20170725 12:46:46.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:46.799" starttime="20170725 12:46:46.799"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:46.880" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:46.880" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:46.880" starttime="20170725 12:46:46.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:46.881" starttime="20170725 12:46:46.880"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:46.881" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:46.881" starttime="20170725 12:46:46.881"></status>
</kw>
<msg timestamp="20170725 12:46:46.881" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:46.881" starttime="20170725 12:46:46.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:46.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:46.882" starttime="20170725 12:46:46.882"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:46.883" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:46.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:46.883" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:46:46.883" starttime="20170725 12:46:46.882"></status>
</kw>
<msg timestamp="20170725 12:46:46.883" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:46:46.883" starttime="20170725 12:46:46.584"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:46.883" starttime="20170725 12:46:46.583"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:46.887" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:46.888" starttime="20170725 12:46:46.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:46.888" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:46.889" starttime="20170725 12:46:46.888"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:46.889" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:46.889" starttime="20170725 12:46:46.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:46.890" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:46.890" starttime="20170725 12:46:46.889"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.075" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:47.075" starttime="20170725 12:46:46.891"></status>
</kw>
<msg timestamp="20170725 12:46:47.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:47.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.075" starttime="20170725 12:46:46.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.076" starttime="20170725 12:46:47.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.077" starttime="20170725 12:46:47.076"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.077" starttime="20170725 12:46:46.886"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.077" starttime="20170725 12:46:46.886"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.077" starttime="20170725 12:46:46.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:47.078" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:46:47.078" starttime="20170725 12:46:47.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:47.078" starttime="20170725 12:46:47.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:47.143" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:46:47.143" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.143" starttime="20170725 12:46:47.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:47.144" starttime="20170725 12:46:47.144"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:47.145" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:47.145" starttime="20170725 12:46:47.144"></status>
</kw>
<msg timestamp="20170725 12:46:47.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.145" starttime="20170725 12:46:46.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.146" starttime="20170725 12:46:47.145"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:47.146" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:47.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:47.146" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:46:47.146" starttime="20170725 12:46:47.146"></status>
</kw>
<msg timestamp="20170725 12:46:47.147" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:46:47.147" starttime="20170725 12:46:46.884"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.147" starttime="20170725 12:46:46.884"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:47.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:47.151" starttime="20170725 12:46:47.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:47.152" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:47.152" starttime="20170725 12:46:47.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:47.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:47.153" starttime="20170725 12:46:47.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:47.153" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:47.153" starttime="20170725 12:46:47.153"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.439" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:47.439" starttime="20170725 12:46:47.154"></status>
</kw>
<msg timestamp="20170725 12:46:47.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:47.440" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.440" starttime="20170725 12:46:47.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.440" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.440" starttime="20170725 12:46:47.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.441" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.441" starttime="20170725 12:46:47.441"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.441" starttime="20170725 12:46:47.150"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.441" starttime="20170725 12:46:47.149"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.441" starttime="20170725 12:46:47.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:47.442" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:46:47.442" starttime="20170725 12:46:47.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:47.443" starttime="20170725 12:46:47.442"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:47.504" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:47.504" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.504" starttime="20170725 12:46:47.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:47.505" starttime="20170725 12:46:47.504"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:47.505" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:47.505" starttime="20170725 12:46:47.505"></status>
</kw>
<msg timestamp="20170725 12:46:47.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.506" starttime="20170725 12:46:47.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:47.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:47.507" starttime="20170725 12:46:47.506"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:47.508" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:47.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:47.508" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:46:47.508" starttime="20170725 12:46:47.507"></status>
</kw>
<msg timestamp="20170725 12:46:47.508" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:46:47.508" starttime="20170725 12:46:47.148"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:47.508" starttime="20170725 12:46:47.147"></status>
</kw>
<msg timestamp="20170725 12:46:47.509" level="FAIL">
#(UTC) 2017/07/25 12:46:47.508665 -   10.928451 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:46:47.509" starttime="20170725 12:46:46.581"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:57.515" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:57.516" starttime="20170725 12:46:57.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:57.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:57.517" starttime="20170725 12:46:57.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:57.517" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:57.517" starttime="20170725 12:46:57.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:57.518" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:57.518" starttime="20170725 12:46:57.518"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:57.731" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:57.731" starttime="20170725 12:46:57.519"></status>
</kw>
<msg timestamp="20170725 12:46:57.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:57.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.731" starttime="20170725 12:46:57.518"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:57.731" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.732" starttime="20170725 12:46:57.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:57.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.732" starttime="20170725 12:46:57.732"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:57.733" starttime="20170725 12:46:57.514"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:57.733" starttime="20170725 12:46:57.514"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:57.733" starttime="20170725 12:46:57.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:57.734" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:46:57.734" starttime="20170725 12:46:57.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:57.735" starttime="20170725 12:46:57.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:57.799" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:57.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.800" starttime="20170725 12:46:57.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:57.800" starttime="20170725 12:46:57.800"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:57.801" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:57.801" starttime="20170725 12:46:57.801"></status>
</kw>
<msg timestamp="20170725 12:46:57.801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.801" starttime="20170725 12:46:57.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:57.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.802" starttime="20170725 12:46:57.801"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:57.802" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:57.802" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:57.802" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:46:57.802" starttime="20170725 12:46:57.802"></status>
</kw>
<msg timestamp="20170725 12:46:57.803" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:46:57.803" starttime="20170725 12:46:57.512"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:57.803" starttime="20170725 12:46:57.511"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:57.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:57.807" starttime="20170725 12:46:57.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:57.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:57.808" starttime="20170725 12:46:57.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:57.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:57.809" starttime="20170725 12:46:57.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:57.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:57.809" starttime="20170725 12:46:57.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:57.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:57.992" starttime="20170725 12:46:57.810"></status>
</kw>
<msg timestamp="20170725 12:46:57.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:57.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.992" starttime="20170725 12:46:57.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:57.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.993" starttime="20170725 12:46:57.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:57.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:57.993" starttime="20170725 12:46:57.993"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:57.993" starttime="20170725 12:46:57.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:57.993" starttime="20170725 12:46:57.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:57.994" starttime="20170725 12:46:57.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:57.994" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:46:57.994" starttime="20170725 12:46:57.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:57.995" starttime="20170725 12:46:57.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:58.061" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:46:58.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.061" starttime="20170725 12:46:57.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:58.062" starttime="20170725 12:46:58.061"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:58.062" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:58.062" starttime="20170725 12:46:58.062"></status>
</kw>
<msg timestamp="20170725 12:46:58.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.062" starttime="20170725 12:46:57.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:58.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.063" starttime="20170725 12:46:58.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:58.064" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:58.064" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:58.064" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:46:58.064" starttime="20170725 12:46:58.063"></status>
</kw>
<msg timestamp="20170725 12:46:58.064" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:46:58.064" starttime="20170725 12:46:57.804"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:58.064" starttime="20170725 12:46:57.803"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:46:58.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:46:58.069" starttime="20170725 12:46:58.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:46:58.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:46:58.069" starttime="20170725 12:46:58.069"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:46:58.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:46:58.070" starttime="20170725 12:46:58.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:46:58.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:46:58.071" starttime="20170725 12:46:58.070"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:46:58.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:46:58.366" starttime="20170725 12:46:58.071"></status>
</kw>
<msg timestamp="20170725 12:46:58.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:46:58.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.367" starttime="20170725 12:46:58.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:46:58.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.367" starttime="20170725 12:46:58.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:58.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.368" starttime="20170725 12:46:58.368"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:58.368" starttime="20170725 12:46:58.067"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:58.368" starttime="20170725 12:46:58.067"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:58.368" starttime="20170725 12:46:58.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:46:58.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:46:58.369" starttime="20170725 12:46:58.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:58.370" starttime="20170725 12:46:58.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:46:58.432" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:46:58.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.432" starttime="20170725 12:46:58.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:46:58.432" starttime="20170725 12:46:58.432"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:46:58.433" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:46:58.433" starttime="20170725 12:46:58.433"></status>
</kw>
<msg timestamp="20170725 12:46:58.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.433" starttime="20170725 12:46:58.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:46:58.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:46:58.434" starttime="20170725 12:46:58.433"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:46:58.435" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:46:58.435" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:46:58.435" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:46:58.435" starttime="20170725 12:46:58.434"></status>
</kw>
<msg timestamp="20170725 12:46:58.435" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:46:58.435" starttime="20170725 12:46:58.065"></status>
</kw>
<status status="PASS" endtime="20170725 12:46:58.435" starttime="20170725 12:46:58.065"></status>
</kw>
<msg timestamp="20170725 12:46:58.436" level="FAIL">
#(UTC) 2017/07/25 12:46:58.435499 -   10.926834 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:46:58.436" starttime="20170725 12:46:57.510"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:08.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:08.443" starttime="20170725 12:47:08.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:08.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:08.443" starttime="20170725 12:47:08.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:08.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:08.444" starttime="20170725 12:47:08.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:08.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:08.445" starttime="20170725 12:47:08.444"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:08.628" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:08.628" starttime="20170725 12:47:08.446"></status>
</kw>
<msg timestamp="20170725 12:47:08.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:08.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:08.628" starttime="20170725 12:47:08.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:08.629" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:08.629" starttime="20170725 12:47:08.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:08.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:08.630" starttime="20170725 12:47:08.629"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:08.630" starttime="20170725 12:47:08.441"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:08.630" starttime="20170725 12:47:08.441"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:08.630" starttime="20170725 12:47:08.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:08.631" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:47:08.631" starttime="20170725 12:47:08.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:08.631" starttime="20170725 12:47:08.631"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:08.803" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:08.803" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:08.804" starttime="20170725 12:47:08.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:08.804" starttime="20170725 12:47:08.804"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:08.805" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:08.805" starttime="20170725 12:47:08.805"></status>
</kw>
<msg timestamp="20170725 12:47:08.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:08.805" starttime="20170725 12:47:08.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:08.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:08.806" starttime="20170725 12:47:08.805"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:08.806" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:08.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:08.806" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:47:08.806" starttime="20170725 12:47:08.806"></status>
</kw>
<msg timestamp="20170725 12:47:08.807" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:47:08.807" starttime="20170725 12:47:08.439"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:08.807" starttime="20170725 12:47:08.438"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:08.811" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:08.815" starttime="20170725 12:47:08.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:08.816" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:08.816" starttime="20170725 12:47:08.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:08.816" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:08.816" starttime="20170725 12:47:08.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:08.817" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:08.817" starttime="20170725 12:47:08.817"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:09.053" starttime="20170725 12:47:08.818"></status>
</kw>
<msg timestamp="20170725 12:47:09.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:09.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.053" starttime="20170725 12:47:08.818"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.054" starttime="20170725 12:47:09.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.055" starttime="20170725 12:47:09.054"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.055" starttime="20170725 12:47:08.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.055" starttime="20170725 12:47:08.809"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.055" starttime="20170725 12:47:08.809"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:09.055" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:47:09.056" starttime="20170725 12:47:09.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:09.056" starttime="20170725 12:47:09.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:09.146" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:47:09.146" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.146" starttime="20170725 12:47:09.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:09.146" starttime="20170725 12:47:09.146"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:09.147" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:09.147" starttime="20170725 12:47:09.147"></status>
</kw>
<msg timestamp="20170725 12:47:09.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.147" starttime="20170725 12:47:08.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.148" starttime="20170725 12:47:09.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:09.148" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:09.149" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:09.149" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:47:09.149" starttime="20170725 12:47:09.148"></status>
</kw>
<msg timestamp="20170725 12:47:09.149" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:47:09.149" starttime="20170725 12:47:08.808"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.149" starttime="20170725 12:47:08.807"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:09.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:09.155" starttime="20170725 12:47:09.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:09.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:09.155" starttime="20170725 12:47:09.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:09.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:09.156" starttime="20170725 12:47:09.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:09.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:09.157" starttime="20170725 12:47:09.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:09.336" starttime="20170725 12:47:09.157"></status>
</kw>
<msg timestamp="20170725 12:47:09.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:09.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.336" starttime="20170725 12:47:09.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.337" starttime="20170725 12:47:09.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.338" starttime="20170725 12:47:09.338"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.338" starttime="20170725 12:47:09.153"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.338" starttime="20170725 12:47:09.152"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.338" starttime="20170725 12:47:09.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:09.339" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:47:09.339" starttime="20170725 12:47:09.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:09.340" starttime="20170725 12:47:09.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:09.403" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:09.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.403" starttime="20170725 12:47:09.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:09.404" starttime="20170725 12:47:09.404"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:09.405" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:09.405" starttime="20170725 12:47:09.404"></status>
</kw>
<msg timestamp="20170725 12:47:09.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.405" starttime="20170725 12:47:09.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:09.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:09.406" starttime="20170725 12:47:09.405"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:09.406" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:09.406" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:09.406" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:47:09.406" starttime="20170725 12:47:09.406"></status>
</kw>
<msg timestamp="20170725 12:47:09.407" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:47:09.407" starttime="20170725 12:47:09.150"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:09.407" starttime="20170725 12:47:09.149"></status>
</kw>
<msg timestamp="20170725 12:47:09.408" level="FAIL">
#(UTC) 2017/07/25 12:47:09.407274 -   10.971775 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:47:09.408" starttime="20170725 12:47:08.437"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:19.414" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:19.414" starttime="20170725 12:47:19.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:19.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:19.415" starttime="20170725 12:47:19.415"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:19.416" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:19.416" starttime="20170725 12:47:19.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:19.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:19.416" starttime="20170725 12:47:19.416"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:19.621" starttime="20170725 12:47:19.417"></status>
</kw>
<msg timestamp="20170725 12:47:19.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:19.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.621" starttime="20170725 12:47:19.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.622" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.622" starttime="20170725 12:47:19.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.623" starttime="20170725 12:47:19.622"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.623" starttime="20170725 12:47:19.413"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.623" starttime="20170725 12:47:19.412"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.623" starttime="20170725 12:47:19.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:19.624" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:47:19.624" starttime="20170725 12:47:19.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:19.625" starttime="20170725 12:47:19.624"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:19.687" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:19.687" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.687" starttime="20170725 12:47:19.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:19.688" starttime="20170725 12:47:19.688"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:19.689" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:19.689" starttime="20170725 12:47:19.688"></status>
</kw>
<msg timestamp="20170725 12:47:19.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.689" starttime="20170725 12:47:19.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.690" starttime="20170725 12:47:19.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:19.690" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:19.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:19.690" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:47:19.690" starttime="20170725 12:47:19.690"></status>
</kw>
<msg timestamp="20170725 12:47:19.691" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:47:19.691" starttime="20170725 12:47:19.410"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.691" starttime="20170725 12:47:19.410"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:19.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:19.696" starttime="20170725 12:47:19.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:19.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:19.696" starttime="20170725 12:47:19.696"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:19.697" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:19.697" starttime="20170725 12:47:19.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:19.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:19.698" starttime="20170725 12:47:19.697"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.875" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:19.876" starttime="20170725 12:47:19.698"></status>
</kw>
<msg timestamp="20170725 12:47:19.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:19.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.876" starttime="20170725 12:47:19.698"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.876" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.876" starttime="20170725 12:47:19.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.877" starttime="20170725 12:47:19.877"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.877" starttime="20170725 12:47:19.694"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.877" starttime="20170725 12:47:19.693"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.878" starttime="20170725 12:47:19.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:19.878" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:47:19.878" starttime="20170725 12:47:19.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:19.879" starttime="20170725 12:47:19.878"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:19.944" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:47:19.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.944" starttime="20170725 12:47:19.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:19.947" starttime="20170725 12:47:19.945"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:19.947" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:19.948" starttime="20170725 12:47:19.947"></status>
</kw>
<msg timestamp="20170725 12:47:19.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.948" starttime="20170725 12:47:19.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:19.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:19.949" starttime="20170725 12:47:19.949"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:19.950" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:19.950" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:19.951" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:47:19.951" starttime="20170725 12:47:19.950"></status>
</kw>
<msg timestamp="20170725 12:47:19.951" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:47:19.951" starttime="20170725 12:47:19.692"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:19.951" starttime="20170725 12:47:19.691"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:19.955" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:19.956" starttime="20170725 12:47:19.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:19.957" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:19.957" starttime="20170725 12:47:19.957"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:19.958" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:19.958" starttime="20170725 12:47:19.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:19.959" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:19.959" starttime="20170725 12:47:19.959"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:20.143" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:20.143" starttime="20170725 12:47:19.960"></status>
</kw>
<msg timestamp="20170725 12:47:20.144" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:20.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:20.144" starttime="20170725 12:47:19.960"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:20.144" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:20.144" starttime="20170725 12:47:20.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:20.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:20.145" starttime="20170725 12:47:20.145"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:20.145" starttime="20170725 12:47:19.954"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:20.145" starttime="20170725 12:47:19.954"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:20.146" starttime="20170725 12:47:19.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:20.146" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:47:20.146" starttime="20170725 12:47:20.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:20.147" starttime="20170725 12:47:20.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:20.209" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:20.209" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:20.209" starttime="20170725 12:47:20.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:20.209" starttime="20170725 12:47:20.209"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:20.210" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:20.210" starttime="20170725 12:47:20.210"></status>
</kw>
<msg timestamp="20170725 12:47:20.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:20.210" starttime="20170725 12:47:19.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:20.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:20.211" starttime="20170725 12:47:20.210"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:20.211" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:20.211" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:20.212" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:47:20.212" starttime="20170725 12:47:20.211"></status>
</kw>
<msg timestamp="20170725 12:47:20.212" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:47:20.212" starttime="20170725 12:47:19.952"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:20.212" starttime="20170725 12:47:19.951"></status>
</kw>
<msg timestamp="20170725 12:47:20.213" level="FAIL">
#(UTC) 2017/07/25 12:47:20.212457 -   10.805183 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:47:20.213" starttime="20170725 12:47:19.408"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:30.219" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:30.220" starttime="20170725 12:47:30.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:30.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:30.220" starttime="20170725 12:47:30.220"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:30.221" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:30.221" starttime="20170725 12:47:30.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:30.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:30.222" starttime="20170725 12:47:30.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:30.403" starttime="20170725 12:47:30.223"></status>
</kw>
<msg timestamp="20170725 12:47:30.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:30.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.403" starttime="20170725 12:47:30.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.404" starttime="20170725 12:47:30.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.405" starttime="20170725 12:47:30.404"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.405" starttime="20170725 12:47:30.218"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.405" starttime="20170725 12:47:30.218"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.405" starttime="20170725 12:47:30.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:30.406" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:47:30.406" starttime="20170725 12:47:30.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:30.406" starttime="20170725 12:47:30.406"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:30.539" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:30.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.540" starttime="20170725 12:47:30.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:30.540" starttime="20170725 12:47:30.540"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:30.541" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:30.541" starttime="20170725 12:47:30.541"></status>
</kw>
<msg timestamp="20170725 12:47:30.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.541" starttime="20170725 12:47:30.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.542" starttime="20170725 12:47:30.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:30.542" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:30.542" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:30.543" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:47:30.543" starttime="20170725 12:47:30.542"></status>
</kw>
<msg timestamp="20170725 12:47:30.543" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:47:30.543" starttime="20170725 12:47:30.216"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.543" starttime="20170725 12:47:30.215"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:30.547" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:30.548" starttime="20170725 12:47:30.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:30.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:30.548" starttime="20170725 12:47:30.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:30.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:30.549" starttime="20170725 12:47:30.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:30.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:30.550" starttime="20170725 12:47:30.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.772" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:30.773" starttime="20170725 12:47:30.550"></status>
</kw>
<msg timestamp="20170725 12:47:30.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:30.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.773" starttime="20170725 12:47:30.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.774" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.774" starttime="20170725 12:47:30.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.774" starttime="20170725 12:47:30.774"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.774" starttime="20170725 12:47:30.546"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.775" starttime="20170725 12:47:30.546"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.775" starttime="20170725 12:47:30.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:30.775" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:47:30.776" starttime="20170725 12:47:30.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:30.776" starttime="20170725 12:47:30.776"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:30.859" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:47:30.859" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.859" starttime="20170725 12:47:30.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:30.859" starttime="20170725 12:47:30.859"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:30.860" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:30.860" starttime="20170725 12:47:30.860"></status>
</kw>
<msg timestamp="20170725 12:47:30.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.860" starttime="20170725 12:47:30.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:30.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:30.861" starttime="20170725 12:47:30.861"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:30.861" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:30.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:30.862" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:47:30.862" starttime="20170725 12:47:30.861"></status>
</kw>
<msg timestamp="20170725 12:47:30.862" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:47:30.862" starttime="20170725 12:47:30.544"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:30.862" starttime="20170725 12:47:30.543"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:30.866" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:30.867" starttime="20170725 12:47:30.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:30.867" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:30.867" starttime="20170725 12:47:30.867"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:30.868" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:30.868" starttime="20170725 12:47:30.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:30.869" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:30.869" starttime="20170725 12:47:30.868"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:31.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:31.063" starttime="20170725 12:47:30.869"></status>
</kw>
<msg timestamp="20170725 12:47:31.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:31.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:31.063" starttime="20170725 12:47:30.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:31.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:31.064" starttime="20170725 12:47:31.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:31.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:31.064" starttime="20170725 12:47:31.064"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:31.064" starttime="20170725 12:47:30.865"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:31.065" starttime="20170725 12:47:30.865"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:31.065" starttime="20170725 12:47:30.864"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:31.065" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:47:31.065" starttime="20170725 12:47:31.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:31.066" starttime="20170725 12:47:31.066"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:31.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:31.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:31.129" starttime="20170725 12:47:31.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:31.129" starttime="20170725 12:47:31.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:31.130" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:31.130" starttime="20170725 12:47:31.130"></status>
</kw>
<msg timestamp="20170725 12:47:31.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:31.130" starttime="20170725 12:47:30.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:31.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:31.131" starttime="20170725 12:47:31.130"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:31.131" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:31.131" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:31.131" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:47:31.132" starttime="20170725 12:47:31.131"></status>
</kw>
<msg timestamp="20170725 12:47:31.132" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:47:31.132" starttime="20170725 12:47:30.863"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:31.132" starttime="20170725 12:47:30.862"></status>
</kw>
<msg timestamp="20170725 12:47:31.133" level="FAIL">
#(UTC) 2017/07/25 12:47:31.132336 -   10.919879 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:47:31.133" starttime="20170725 12:47:30.214"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:41.139" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:41.140" starttime="20170725 12:47:41.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:41.141" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:41.141" starttime="20170725 12:47:41.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:41.142" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:41.142" starttime="20170725 12:47:41.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:41.142" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:41.142" starttime="20170725 12:47:41.142"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:41.338" starttime="20170725 12:47:41.143"></status>
</kw>
<msg timestamp="20170725 12:47:41.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:41.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.338" starttime="20170725 12:47:41.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.339" starttime="20170725 12:47:41.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.340" starttime="20170725 12:47:41.339"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.340" starttime="20170725 12:47:41.138"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.340" starttime="20170725 12:47:41.138"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.340" starttime="20170725 12:47:41.137"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:41.341" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:47:41.341" starttime="20170725 12:47:41.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:41.341" starttime="20170725 12:47:41.341"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:41.405" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:41.405" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.405" starttime="20170725 12:47:41.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:41.406" starttime="20170725 12:47:41.406"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:41.406" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:41.406" starttime="20170725 12:47:41.406"></status>
</kw>
<msg timestamp="20170725 12:47:41.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.407" starttime="20170725 12:47:41.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.408" starttime="20170725 12:47:41.407"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:41.408" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:41.408" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:41.408" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:47:41.408" starttime="20170725 12:47:41.408"></status>
</kw>
<msg timestamp="20170725 12:47:41.409" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:47:41.409" starttime="20170725 12:47:41.136"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.409" starttime="20170725 12:47:41.136"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:41.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:41.413" starttime="20170725 12:47:41.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:41.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:41.414" starttime="20170725 12:47:41.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:41.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:41.415" starttime="20170725 12:47:41.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:41.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:41.415" starttime="20170725 12:47:41.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.592" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:41.592" starttime="20170725 12:47:41.416"></status>
</kw>
<msg timestamp="20170725 12:47:41.592" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:41.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.592" starttime="20170725 12:47:41.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.593" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.593" starttime="20170725 12:47:41.593"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.594" starttime="20170725 12:47:41.593"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.594" starttime="20170725 12:47:41.412"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.594" starttime="20170725 12:47:41.411"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.595" starttime="20170725 12:47:41.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:41.596" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:47:41.596" starttime="20170725 12:47:41.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:41.597" starttime="20170725 12:47:41.596"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:41.662" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:47:41.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.662" starttime="20170725 12:47:41.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:41.663" starttime="20170725 12:47:41.663"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:41.663" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:41.663" starttime="20170725 12:47:41.663"></status>
</kw>
<msg timestamp="20170725 12:47:41.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.664" starttime="20170725 12:47:41.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.664" starttime="20170725 12:47:41.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:41.665" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:41.665" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:41.665" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:47:41.665" starttime="20170725 12:47:41.665"></status>
</kw>
<msg timestamp="20170725 12:47:41.665" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:47:41.666" starttime="20170725 12:47:41.410"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.666" starttime="20170725 12:47:41.409"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:41.669" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:41.670" starttime="20170725 12:47:41.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:41.671" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:41.671" starttime="20170725 12:47:41.670"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:41.671" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:41.671" starttime="20170725 12:47:41.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:41.672" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:41.672" starttime="20170725 12:47:41.672"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.851" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:41.851" starttime="20170725 12:47:41.673"></status>
</kw>
<msg timestamp="20170725 12:47:41.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:41.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.851" starttime="20170725 12:47:41.672"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.852" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.852" starttime="20170725 12:47:41.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.853" starttime="20170725 12:47:41.852"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.853" starttime="20170725 12:47:41.669"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.853" starttime="20170725 12:47:41.668"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.853" starttime="20170725 12:47:41.668"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:41.854" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:47:41.854" starttime="20170725 12:47:41.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:41.855" starttime="20170725 12:47:41.854"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:41.917" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:41.917" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.917" starttime="20170725 12:47:41.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:41.918" starttime="20170725 12:47:41.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:41.918" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:41.918" starttime="20170725 12:47:41.918"></status>
</kw>
<msg timestamp="20170725 12:47:41.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.919" starttime="20170725 12:47:41.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:41.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:41.919" starttime="20170725 12:47:41.919"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:41.920" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:41.920" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:41.920" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:47:41.920" starttime="20170725 12:47:41.920"></status>
</kw>
<msg timestamp="20170725 12:47:41.920" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:47:41.920" starttime="20170725 12:47:41.666"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:41.921" starttime="20170725 12:47:41.666"></status>
</kw>
<msg timestamp="20170725 12:47:41.921" level="FAIL">
#(UTC) 2017/07/25 12:47:41.920970 -   10.788634 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:47:41.921" starttime="20170725 12:47:41.134"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:51.929" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:51.930" starttime="20170725 12:47:51.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:51.931" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:51.931" starttime="20170725 12:47:51.931"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:51.932" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:51.932" starttime="20170725 12:47:51.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:51.932" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:51.933" starttime="20170725 12:47:51.932"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:52.113" starttime="20170725 12:47:51.934"></status>
</kw>
<msg timestamp="20170725 12:47:52.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:52.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.114" starttime="20170725 12:47:51.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.114" starttime="20170725 12:47:52.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.115" starttime="20170725 12:47:52.115"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.116" starttime="20170725 12:47:51.927"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.116" starttime="20170725 12:47:51.927"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.116" starttime="20170725 12:47:51.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:52.117" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:47:52.117" starttime="20170725 12:47:52.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:52.118" starttime="20170725 12:47:52.118"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:52.183" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:52.184" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.184" starttime="20170725 12:47:52.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:52.185" starttime="20170725 12:47:52.184"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:52.185" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:52.185" starttime="20170725 12:47:52.185"></status>
</kw>
<msg timestamp="20170725 12:47:52.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.185" starttime="20170725 12:47:51.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.186" starttime="20170725 12:47:52.186"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:52.187" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:52.187" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:52.187" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:47:52.187" starttime="20170725 12:47:52.186"></status>
</kw>
<msg timestamp="20170725 12:47:52.187" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:47:52.187" starttime="20170725 12:47:51.925"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.187" starttime="20170725 12:47:51.925"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:52.191" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:52.195" starttime="20170725 12:47:52.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:52.196" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:52.196" starttime="20170725 12:47:52.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:52.197" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:52.197" starttime="20170725 12:47:52.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:52.197" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:52.197" starttime="20170725 12:47:52.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.477" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:52.477" starttime="20170725 12:47:52.198"></status>
</kw>
<msg timestamp="20170725 12:47:52.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:52.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.478" starttime="20170725 12:47:52.198"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.478" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.478" starttime="20170725 12:47:52.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.479" starttime="20170725 12:47:52.479"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.479" starttime="20170725 12:47:52.190"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.479" starttime="20170725 12:47:52.190"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.479" starttime="20170725 12:47:52.189"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:52.480" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:47:52.480" starttime="20170725 12:47:52.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:52.481" starttime="20170725 12:47:52.480"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:52.545" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:47:52.545" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.545" starttime="20170725 12:47:52.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:52.546" starttime="20170725 12:47:52.546"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:52.547" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:52.547" starttime="20170725 12:47:52.546"></status>
</kw>
<msg timestamp="20170725 12:47:52.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.547" starttime="20170725 12:47:52.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.548" starttime="20170725 12:47:52.547"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:52.548" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:52.548" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:52.548" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:47:52.548" starttime="20170725 12:47:52.548"></status>
</kw>
<msg timestamp="20170725 12:47:52.549" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:47:52.549" starttime="20170725 12:47:52.188"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.549" starttime="20170725 12:47:52.188"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:47:52.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:47:52.553" starttime="20170725 12:47:52.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:47:52.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:47:52.554" starttime="20170725 12:47:52.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:47:52.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:47:52.555" starttime="20170725 12:47:52.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:47:52.555" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:47:52.555" starttime="20170725 12:47:52.555"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.777" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:47:52.777" starttime="20170725 12:47:52.556"></status>
</kw>
<msg timestamp="20170725 12:47:52.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:47:52.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.777" starttime="20170725 12:47:52.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.778" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.778" starttime="20170725 12:47:52.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.778" starttime="20170725 12:47:52.778"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.778" starttime="20170725 12:47:52.552"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.779" starttime="20170725 12:47:52.551"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.779" starttime="20170725 12:47:52.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:47:52.779" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:47:52.779" starttime="20170725 12:47:52.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:52.780" starttime="20170725 12:47:52.780"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:47:52.866" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:47:52.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.866" starttime="20170725 12:47:52.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:47:52.867" starttime="20170725 12:47:52.866"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:47:52.867" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:47:52.867" starttime="20170725 12:47:52.867"></status>
</kw>
<msg timestamp="20170725 12:47:52.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.868" starttime="20170725 12:47:52.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:47:52.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:47:52.868" starttime="20170725 12:47:52.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:47:52.869" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:47:52.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:47:52.869" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:47:52.869" starttime="20170725 12:47:52.868"></status>
</kw>
<msg timestamp="20170725 12:47:52.869" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:47:52.869" starttime="20170725 12:47:52.549"></status>
</kw>
<status status="PASS" endtime="20170725 12:47:52.870" starttime="20170725 12:47:52.549"></status>
</kw>
<msg timestamp="20170725 12:47:52.870" level="FAIL">
#(UTC) 2017/07/25 12:47:52.869778 -   10.948808 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:47:52.870" starttime="20170725 12:47:51.923"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:02.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:02.877" starttime="20170725 12:48:02.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:02.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:02.878" starttime="20170725 12:48:02.877"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:02.878" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:02.878" starttime="20170725 12:48:02.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:02.879" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:02.879" starttime="20170725 12:48:02.879"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:03.062" starttime="20170725 12:48:02.880"></status>
</kw>
<msg timestamp="20170725 12:48:03.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:03.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.062" starttime="20170725 12:48:02.879"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.063" starttime="20170725 12:48:03.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.064" starttime="20170725 12:48:03.063"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.064" starttime="20170725 12:48:02.875"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.064" starttime="20170725 12:48:02.875"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.064" starttime="20170725 12:48:02.874"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:03.065" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:48:03.065" starttime="20170725 12:48:03.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:03.065" starttime="20170725 12:48:03.065"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:03.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:03.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.145" starttime="20170725 12:48:03.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:03.146" starttime="20170725 12:48:03.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:03.146" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:03.146" starttime="20170725 12:48:03.146"></status>
</kw>
<msg timestamp="20170725 12:48:03.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.146" starttime="20170725 12:48:02.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.147" starttime="20170725 12:48:03.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:03.148" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:03.148" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:03.148" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:48:03.148" starttime="20170725 12:48:03.147"></status>
</kw>
<msg timestamp="20170725 12:48:03.148" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:48:03.148" starttime="20170725 12:48:02.873"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.148" starttime="20170725 12:48:02.872"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:03.152" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:03.153" starttime="20170725 12:48:03.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:03.154" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:03.154" starttime="20170725 12:48:03.153"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:03.154" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:03.154" starttime="20170725 12:48:03.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:03.155" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:03.155" starttime="20170725 12:48:03.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.358" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:03.358" starttime="20170725 12:48:03.156"></status>
</kw>
<msg timestamp="20170725 12:48:03.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:03.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.358" starttime="20170725 12:48:03.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.359" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.359" starttime="20170725 12:48:03.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.359" starttime="20170725 12:48:03.359"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.360" starttime="20170725 12:48:03.151"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.360" starttime="20170725 12:48:03.151"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.360" starttime="20170725 12:48:03.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:03.360" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:48:03.360" starttime="20170725 12:48:03.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:03.361" starttime="20170725 12:48:03.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:03.442" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:48:03.443" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.443" starttime="20170725 12:48:03.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:03.443" starttime="20170725 12:48:03.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:03.444" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:03.444" starttime="20170725 12:48:03.444"></status>
</kw>
<msg timestamp="20170725 12:48:03.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.444" starttime="20170725 12:48:03.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.445" starttime="20170725 12:48:03.444"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:03.445" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:03.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:03.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:48:03.446" starttime="20170725 12:48:03.445"></status>
</kw>
<msg timestamp="20170725 12:48:03.446" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:48:03.446" starttime="20170725 12:48:03.149"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.446" starttime="20170725 12:48:03.149"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:03.450" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:03.451" starttime="20170725 12:48:03.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:03.451" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:03.451" starttime="20170725 12:48:03.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:03.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:03.452" starttime="20170725 12:48:03.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:03.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:03.453" starttime="20170725 12:48:03.452"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.642" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:03.642" starttime="20170725 12:48:03.453"></status>
</kw>
<msg timestamp="20170725 12:48:03.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:03.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.642" starttime="20170725 12:48:03.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.643" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.643" starttime="20170725 12:48:03.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.644" starttime="20170725 12:48:03.643"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.644" starttime="20170725 12:48:03.449"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.644" starttime="20170725 12:48:03.449"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.644" starttime="20170725 12:48:03.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:03.645" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:48:03.645" starttime="20170725 12:48:03.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:03.646" starttime="20170725 12:48:03.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:03.708" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:03.708" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.708" starttime="20170725 12:48:03.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:03.709" starttime="20170725 12:48:03.708"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:03.709" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:03.709" starttime="20170725 12:48:03.709"></status>
</kw>
<msg timestamp="20170725 12:48:03.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.709" starttime="20170725 12:48:03.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:03.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:03.710" starttime="20170725 12:48:03.710"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:03.711" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:03.711" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:03.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:48:03.711" starttime="20170725 12:48:03.710"></status>
</kw>
<msg timestamp="20170725 12:48:03.711" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:48:03.711" starttime="20170725 12:48:03.447"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:03.711" starttime="20170725 12:48:03.446"></status>
</kw>
<msg timestamp="20170725 12:48:03.712" level="FAIL">
#(UTC) 2017/07/25 12:48:03.711715 -   10.841937 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:48:03.712" starttime="20170725 12:48:02.871"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:13.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:13.719" starttime="20170725 12:48:13.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:13.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:13.720" starttime="20170725 12:48:13.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:13.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:13.720" starttime="20170725 12:48:13.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:13.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:13.721" starttime="20170725 12:48:13.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:13.910" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:13.910" starttime="20170725 12:48:13.722"></status>
</kw>
<msg timestamp="20170725 12:48:13.910" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:13.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:13.910" starttime="20170725 12:48:13.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:13.911" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:13.911" starttime="20170725 12:48:13.911"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:13.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:13.912" starttime="20170725 12:48:13.911"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:13.912" starttime="20170725 12:48:13.717"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:13.912" starttime="20170725 12:48:13.717"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:13.912" starttime="20170725 12:48:13.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:13.913" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:48:13.913" starttime="20170725 12:48:13.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:13.913" starttime="20170725 12:48:13.913"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:13.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:13.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:13.977" starttime="20170725 12:48:13.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:13.977" starttime="20170725 12:48:13.977"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:13.978" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:13.978" starttime="20170725 12:48:13.978"></status>
</kw>
<msg timestamp="20170725 12:48:13.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:13.978" starttime="20170725 12:48:13.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:13.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:13.979" starttime="20170725 12:48:13.978"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:13.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:13.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:13.980" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:48:13.980" starttime="20170725 12:48:13.979"></status>
</kw>
<msg timestamp="20170725 12:48:13.980" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:48:13.980" starttime="20170725 12:48:13.715"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:13.980" starttime="20170725 12:48:13.715"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:13.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:13.985" starttime="20170725 12:48:13.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:13.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:13.985" starttime="20170725 12:48:13.985"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:13.986" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:13.986" starttime="20170725 12:48:13.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:13.987" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:13.987" starttime="20170725 12:48:13.986"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:14.166" starttime="20170725 12:48:13.987"></status>
</kw>
<msg timestamp="20170725 12:48:14.167" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:14.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.167" starttime="20170725 12:48:13.987"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.167" starttime="20170725 12:48:14.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.168" starttime="20170725 12:48:14.168"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.168" starttime="20170725 12:48:13.983"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.168" starttime="20170725 12:48:13.983"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.168" starttime="20170725 12:48:13.982"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:14.169" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:48:14.169" starttime="20170725 12:48:14.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:14.170" starttime="20170725 12:48:14.169"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:14.235" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:48:14.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.235" starttime="20170725 12:48:14.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:14.236" starttime="20170725 12:48:14.236"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:14.236" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:14.236" starttime="20170725 12:48:14.236"></status>
</kw>
<msg timestamp="20170725 12:48:14.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.237" starttime="20170725 12:48:13.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.237" starttime="20170725 12:48:14.237"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:14.238" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:14.238" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:14.238" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:48:14.238" starttime="20170725 12:48:14.238"></status>
</kw>
<msg timestamp="20170725 12:48:14.238" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:48:14.238" starttime="20170725 12:48:13.981"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.239" starttime="20170725 12:48:13.980"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:14.243" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:14.244" starttime="20170725 12:48:14.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:14.245" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:14.245" starttime="20170725 12:48:14.245"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:14.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:14.246" starttime="20170725 12:48:14.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:14.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:14.247" starttime="20170725 12:48:14.247"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.429" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:14.429" starttime="20170725 12:48:14.248"></status>
</kw>
<msg timestamp="20170725 12:48:14.429" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:14.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.429" starttime="20170725 12:48:14.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.430" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.430" starttime="20170725 12:48:14.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.431" starttime="20170725 12:48:14.430"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.431" starttime="20170725 12:48:14.242"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.431" starttime="20170725 12:48:14.241"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.431" starttime="20170725 12:48:14.241"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:14.431" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:48:14.432" starttime="20170725 12:48:14.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:14.432" starttime="20170725 12:48:14.432"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:14.594" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:14.594" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.594" starttime="20170725 12:48:14.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:14.595" starttime="20170725 12:48:14.595"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:14.595" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:14.595" starttime="20170725 12:48:14.595"></status>
</kw>
<msg timestamp="20170725 12:48:14.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.596" starttime="20170725 12:48:14.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:14.596" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:14.596" starttime="20170725 12:48:14.596"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:14.597" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:14.597" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:14.597" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:48:14.597" starttime="20170725 12:48:14.597"></status>
</kw>
<msg timestamp="20170725 12:48:14.597" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:48:14.598" starttime="20170725 12:48:14.239"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:14.598" starttime="20170725 12:48:14.239"></status>
</kw>
<msg timestamp="20170725 12:48:14.598" level="FAIL">
#(UTC) 2017/07/25 12:48:14.598024 -   10.886309 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:48:14.599" starttime="20170725 12:48:13.713"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:24.605" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:24.606" starttime="20170725 12:48:24.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:24.606" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:24.606" starttime="20170725 12:48:24.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:24.607" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:24.607" starttime="20170725 12:48:24.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:24.608" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:24.608" starttime="20170725 12:48:24.607"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:24.861" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:24.862" starttime="20170725 12:48:24.608"></status>
</kw>
<msg timestamp="20170725 12:48:24.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:24.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:24.862" starttime="20170725 12:48:24.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:24.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:24.863" starttime="20170725 12:48:24.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:24.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:24.864" starttime="20170725 12:48:24.863"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:24.864" starttime="20170725 12:48:24.604"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:24.864" starttime="20170725 12:48:24.603"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:24.865" starttime="20170725 12:48:24.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:24.865" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:48:24.866" starttime="20170725 12:48:24.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:24.866" starttime="20170725 12:48:24.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:24.938" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:24.938" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:24.938" starttime="20170725 12:48:24.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:24.939" starttime="20170725 12:48:24.938"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:24.939" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:24.939" starttime="20170725 12:48:24.939"></status>
</kw>
<msg timestamp="20170725 12:48:24.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:24.940" starttime="20170725 12:48:24.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:24.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:24.940" starttime="20170725 12:48:24.940"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:24.941" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:24.941" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:24.941" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:48:24.941" starttime="20170725 12:48:24.941"></status>
</kw>
<msg timestamp="20170725 12:48:24.941" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:48:24.941" starttime="20170725 12:48:24.601"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:24.942" starttime="20170725 12:48:24.601"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:24.946" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:24.947" starttime="20170725 12:48:24.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:24.947" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:24.947" starttime="20170725 12:48:24.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:24.948" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:24.948" starttime="20170725 12:48:24.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:24.948" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:24.949" starttime="20170725 12:48:24.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:25.161" starttime="20170725 12:48:24.949"></status>
</kw>
<msg timestamp="20170725 12:48:25.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:25.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.161" starttime="20170725 12:48:24.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.162" starttime="20170725 12:48:25.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.163" starttime="20170725 12:48:25.162"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.163" starttime="20170725 12:48:24.945"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.163" starttime="20170725 12:48:24.944"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.163" starttime="20170725 12:48:24.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:25.164" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:48:25.164" starttime="20170725 12:48:25.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:25.165" starttime="20170725 12:48:25.165"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:25.257" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:48:25.257" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.257" starttime="20170725 12:48:25.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:25.258" starttime="20170725 12:48:25.258"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:25.258" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:25.258" starttime="20170725 12:48:25.258"></status>
</kw>
<msg timestamp="20170725 12:48:25.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.259" starttime="20170725 12:48:24.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.259" starttime="20170725 12:48:25.259"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:25.260" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:25.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:25.260" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:48:25.260" starttime="20170725 12:48:25.260"></status>
</kw>
<msg timestamp="20170725 12:48:25.261" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:48:25.261" starttime="20170725 12:48:24.943"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.261" starttime="20170725 12:48:24.942"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:25.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:25.265" starttime="20170725 12:48:25.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:25.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:25.266" starttime="20170725 12:48:25.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:25.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:25.267" starttime="20170725 12:48:25.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:25.268" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:25.268" starttime="20170725 12:48:25.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:25.445" starttime="20170725 12:48:25.269"></status>
</kw>
<msg timestamp="20170725 12:48:25.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:25.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.446" starttime="20170725 12:48:25.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.446" starttime="20170725 12:48:25.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.447" starttime="20170725 12:48:25.447"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.447" starttime="20170725 12:48:25.264"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.447" starttime="20170725 12:48:25.263"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.447" starttime="20170725 12:48:25.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:25.448" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:48:25.448" starttime="20170725 12:48:25.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:25.449" starttime="20170725 12:48:25.448"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:25.511" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:25.511" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.511" starttime="20170725 12:48:25.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:25.512" starttime="20170725 12:48:25.511"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:25.512" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:25.512" starttime="20170725 12:48:25.512"></status>
</kw>
<msg timestamp="20170725 12:48:25.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.513" starttime="20170725 12:48:25.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:25.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:25.513" starttime="20170725 12:48:25.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:25.514" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:25.514" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:25.514" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:48:25.514" starttime="20170725 12:48:25.514"></status>
</kw>
<msg timestamp="20170725 12:48:25.514" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:48:25.515" starttime="20170725 12:48:25.261"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:25.515" starttime="20170725 12:48:25.261"></status>
</kw>
<msg timestamp="20170725 12:48:25.516" level="FAIL">
#(UTC) 2017/07/25 12:48:25.515040 -   10.917016 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:48:25.516" starttime="20170725 12:48:24.599"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:35.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:35.523" starttime="20170725 12:48:35.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:35.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:35.524" starttime="20170725 12:48:35.523"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:35.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:35.524" starttime="20170725 12:48:35.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:35.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:35.525" starttime="20170725 12:48:35.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:35.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:35.705" starttime="20170725 12:48:35.526"></status>
</kw>
<msg timestamp="20170725 12:48:35.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:35.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.705" starttime="20170725 12:48:35.525"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:35.706" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.706" starttime="20170725 12:48:35.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:35.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.707" starttime="20170725 12:48:35.707"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:35.707" starttime="20170725 12:48:35.521"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:35.707" starttime="20170725 12:48:35.521"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:35.707" starttime="20170725 12:48:35.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:35.708" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:48:35.708" starttime="20170725 12:48:35.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:35.709" starttime="20170725 12:48:35.708"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:35.771" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:35.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.771" starttime="20170725 12:48:35.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:35.772" starttime="20170725 12:48:35.772"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:35.772" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:35.772" starttime="20170725 12:48:35.772"></status>
</kw>
<msg timestamp="20170725 12:48:35.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.773" starttime="20170725 12:48:35.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:35.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.773" starttime="20170725 12:48:35.773"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:35.774" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:35.774" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:35.774" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:48:35.774" starttime="20170725 12:48:35.774"></status>
</kw>
<msg timestamp="20170725 12:48:35.774" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:48:35.774" starttime="20170725 12:48:35.519"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:35.775" starttime="20170725 12:48:35.518"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:35.778" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:35.783" starttime="20170725 12:48:35.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:35.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:35.784" starttime="20170725 12:48:35.783"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:35.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:35.785" starttime="20170725 12:48:35.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:35.786" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:35.786" starttime="20170725 12:48:35.786"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:35.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:35.996" starttime="20170725 12:48:35.788"></status>
</kw>
<msg timestamp="20170725 12:48:35.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:35.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.997" starttime="20170725 12:48:35.787"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:35.997" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.997" starttime="20170725 12:48:35.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:35.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:35.998" starttime="20170725 12:48:35.998"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:35.998" starttime="20170725 12:48:35.778"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:35.998" starttime="20170725 12:48:35.777"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:35.998" starttime="20170725 12:48:35.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:35.999" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:48:35.999" starttime="20170725 12:48:35.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:36.000" starttime="20170725 12:48:35.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:36.068" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:48:36.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.068" starttime="20170725 12:48:36.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:36.069" starttime="20170725 12:48:36.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:36.069" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:36.070" starttime="20170725 12:48:36.069"></status>
</kw>
<msg timestamp="20170725 12:48:36.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.070" starttime="20170725 12:48:35.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:36.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.070" starttime="20170725 12:48:36.070"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:36.071" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:36.071" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:36.071" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:48:36.071" starttime="20170725 12:48:36.071"></status>
</kw>
<msg timestamp="20170725 12:48:36.071" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:48:36.072" starttime="20170725 12:48:35.775"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:36.072" starttime="20170725 12:48:35.775"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:36.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:36.076" starttime="20170725 12:48:36.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:36.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:36.077" starttime="20170725 12:48:36.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:36.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:36.078" starttime="20170725 12:48:36.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:36.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:36.078" starttime="20170725 12:48:36.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:36.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:36.332" starttime="20170725 12:48:36.079"></status>
</kw>
<msg timestamp="20170725 12:48:36.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:36.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.332" starttime="20170725 12:48:36.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:36.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.333" starttime="20170725 12:48:36.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:36.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.334" starttime="20170725 12:48:36.333"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:36.334" starttime="20170725 12:48:36.075"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:36.334" starttime="20170725 12:48:36.074"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:36.334" starttime="20170725 12:48:36.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:36.335" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:48:36.335" starttime="20170725 12:48:36.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:36.335" starttime="20170725 12:48:36.335"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:36.397" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:36.397" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.397" starttime="20170725 12:48:36.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:36.398" starttime="20170725 12:48:36.398"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:36.398" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:36.398" starttime="20170725 12:48:36.398"></status>
</kw>
<msg timestamp="20170725 12:48:36.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.399" starttime="20170725 12:48:36.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:36.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:36.399" starttime="20170725 12:48:36.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:36.400" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:36.400" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:36.400" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:48:36.400" starttime="20170725 12:48:36.400"></status>
</kw>
<msg timestamp="20170725 12:48:36.400" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:48:36.400" starttime="20170725 12:48:36.072"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:36.401" starttime="20170725 12:48:36.072"></status>
</kw>
<msg timestamp="20170725 12:48:36.401" level="FAIL">
#(UTC) 2017/07/25 12:48:36.400965 -   10.885925 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:48:36.401" starttime="20170725 12:48:35.516"></status>
</kw>
<msg timestamp="20170725 12:48:36.402" level="FAIL">Keyword 'Check State' failed after retrying for 14 minutes. The last error was: 
#(UTC) 2017/07/25 12:48:36.400965 -   10.885925 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Quiesced
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 12:48:36.402" starttime="20170725 12:34:12.900"></status>
</kw>
<msg timestamp="20170725 12:48:36.409" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 12:48:36.413" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170725 12:48:36.425" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.41.166.169.170725.124836.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170725 12:48:36.452" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170725 12:48:36.452" starttime="20170725 12:48:36.452"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:48:36.457" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:48:39.459" level="INFO">${RC} = 0</msg>
<msg timestamp="20170725 12:48:39.459" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.711 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.590 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170725 12:48:39.459" starttime="20170725 12:48:36.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.463" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.711 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.590 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.593 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.676 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.590/0.642/0.711/0.058 ms</msg>
<status status="PASS" endtime="20170725 12:48:39.463" starttime="20170725 12:48:39.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:39.466" starttime="20170725 12:48:39.463"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.466" starttime="20170725 12:48:36.451"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:48:39.486" level="INFO">${cur_time} = 2017-07-25 12:48:39:486216</msg>
<status status="PASS" endtime="20170725 12:48:39.487" starttime="20170725 12:48:39.486"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:48:39.487" level="INFO">${cur_time} = 20170725124839486216</msg>
<status status="PASS" endtime="20170725 12:48:39.487" starttime="20170725 12:48:39.487"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.487" starttime="20170725 12:48:39.485"></status>
</kw>
<msg timestamp="20170725 12:48:39.493" level="INFO">${FFDC_TIME} = 20170725124839486216</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 12:48:39.495" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 12:48:39.495" starttime="20170725 12:48:39.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 12:48:39.496" level="INFO">${suite_name} = 20170725124839486216_TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 12:48:39.496" starttime="20170725 12:48:39.495"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 12:48:39.497" level="INFO">${test_name} = HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 12:48:39.497" starttime="20170725 12:48:39.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 12:48:39.498" level="INFO">${test_name} = 20170725124839486216_HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 12:48:39.498" starttime="20170725 12:48:39.497"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.498" starttime="20170725 12:48:39.494"></status>
</kw>
<msg timestamp="20170725 12:48:39.499" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/</msg>
<msg timestamp="20170725 12:48:39.499" level="INFO">${FFDC_PREFIX} = 9.41.166.169.170725.124836.</msg>
<msg timestamp="20170725 12:48:39.530" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/</arg>
</arguments>
<msg timestamp="20170725 12:48:39.532" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.532" starttime="20170725 12:48:39.531"></status>
</kw>
<msg timestamp="20170725 12:48:39.537" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.556" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.556" starttime="20170725 12:48:39.555"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.556" starttime="20170725 12:48:39.555"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.557" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.557" starttime="20170725 12:48:39.557"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.557" starttime="20170725 12:48:39.556"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.558" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.559" starttime="20170725 12:48:39.558"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.559" starttime="20170725 12:48:39.558"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.560" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.560" starttime="20170725 12:48:39.560"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.560" starttime="20170725 12:48:39.559"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.561" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.562" starttime="20170725 12:48:39.561"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.562" starttime="20170725 12:48:39.560"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.563" starttime="20170725 12:48:39.562"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.563" starttime="20170725 12:48:39.562"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.564" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.564" starttime="20170725 12:48:39.564"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.564" starttime="20170725 12:48:39.563"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.565" starttime="20170725 12:48:39.565"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.566" starttime="20170725 12:48:39.564"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.567" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.567" starttime="20170725 12:48:39.566"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.567" starttime="20170725 12:48:39.566"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.568" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.568" starttime="20170725 12:48:39.568"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.569" starttime="20170725 12:48:39.567"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.570" starttime="20170725 12:48:39.569"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.570" starttime="20170725 12:48:39.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.571" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.571" starttime="20170725 12:48:39.571"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.571" starttime="20170725 12:48:39.570"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.574" starttime="20170725 12:48:39.572"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.575" starttime="20170725 12:48:39.571"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 12:48:39.603" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:39.604" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170725 12:48:39.706" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 12:48:39.720" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170725 12:48:39.720" level="INFO">${stderr} = </msg>
<msg timestamp="20170725 12:48:39.720" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170725 12:48:39.720" starttime="20170725 12:48:39.575"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.720" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 12:48:39.720" starttime="20170725 12:48:39.720"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.721" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170725 12:48:39.721" starttime="20170725 12:48:39.721"></status>
</kw>
<msg timestamp="20170725 12:48:39.721" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170725 12:48:39.721" starttime="20170725 12:48:39.575"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.723" starttime="20170725 12:48:39.722"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.723" starttime="20170725 12:48:39.721"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.723" starttime="20170725 12:48:39.567"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.724" starttime="20170725 12:48:39.724"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.724" starttime="20170725 12:48:39.723"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:39.725" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 12:48:39.725" starttime="20170725 12:48:39.725"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.727" starttime="20170725 12:48:39.726"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.727" starttime="20170725 12:48:39.725"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.728" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.728" starttime="20170725 12:48:39.727"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.728" starttime="20170725 12:48:39.727"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.728" starttime="20170725 12:48:39.725"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.731" starttime="20170725 12:48:39.730"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.731" starttime="20170725 12:48:39.730"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.732" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.732" starttime="20170725 12:48:39.732"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.732" starttime="20170725 12:48:39.731"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.732" starttime="20170725 12:48:39.729"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.734" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.734" starttime="20170725 12:48:39.733"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.734" starttime="20170725 12:48:39.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.735" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.735" starttime="20170725 12:48:39.734"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.735" starttime="20170725 12:48:39.734"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.735" starttime="20170725 12:48:39.732"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.735" starttime="20170725 12:48:39.725"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.736" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.736" starttime="20170725 12:48:39.736"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.736" starttime="20170725 12:48:39.735"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.737" starttime="20170725 12:48:39.554"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:39.746" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170725 12:48:39.746" starttime="20170725 12:48:39.746"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170725 12:48:39.748" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170725 12:48:39.748" starttime="20170725 12:48:39.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:39.749" starttime="20170725 12:48:39.749"></status>
</kw>
<msg timestamp="20170725 12:48:39.749" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170725 12:48:39.749" starttime="20170725 12:48:39.748"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:39.751" starttime="20170725 12:48:39.751"></status>
</kw>
<msg timestamp="20170725 12:48:39.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:39.751" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:39.751" starttime="20170725 12:48:39.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:39.752" starttime="20170725 12:48:39.751"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:39.778" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 12:48:39.778" starttime="20170725 12:48:39.777"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:39.779" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170725 12:48:39.779" starttime="20170725 12:48:39.778"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.785" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170725 12:48:39.785" starttime="20170725 12:48:39.779"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.788" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.788" starttime="20170725 12:48:39.788"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.788" starttime="20170725 12:48:39.787"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.789" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.790" starttime="20170725 12:48:39.789"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.790" starttime="20170725 12:48:39.788"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.791" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.791" starttime="20170725 12:48:39.790"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.791" starttime="20170725 12:48:39.790"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:39.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:39.792" starttime="20170725 12:48:39.792"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.792" starttime="20170725 12:48:39.791"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.792" starttime="20170725 12:48:39.786"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:39.792" starttime="20170725 12:48:39.786"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:39.793" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:39.793" starttime="20170725 12:48:39.793"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:39.865" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:39.865" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170725 12:48:41.242" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:41.243" starttime="20170725 12:48:39.827"></status>
</kw>
<msg timestamp="20170725 12:48:41.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:41.243" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status status="PASS" endtime="20170725 12:48:41.243" starttime="20170725 12:48:39.794"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:41.244" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status status="PASS" endtime="20170725 12:48:41.244" starttime="20170725 12:48:41.243"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:41.244" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:41.244" starttime="20170725 12:48:41.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.252" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:41.251"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:41.250"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:41.245"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:39.785"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:39.785"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:39.785"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:39.778"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.252" starttime="20170725 12:48:39.778"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:41.253" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170725 12:48:41.253" starttime="20170725 12:48:41.253"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.254" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170725 12:48:41.254" starttime="20170725 12:48:41.254"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.258" starttime="20170725 12:48:41.257"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.258" starttime="20170725 12:48:41.257"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.259" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.259" starttime="20170725 12:48:41.259"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.259" starttime="20170725 12:48:41.258"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.260" starttime="20170725 12:48:41.260"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.260" starttime="20170725 12:48:41.259"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.262" starttime="20170725 12:48:41.261"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.262" starttime="20170725 12:48:41.261"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.262" starttime="20170725 12:48:41.256"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.262" starttime="20170725 12:48:41.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:41.263" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:41.263" starttime="20170725 12:48:41.262"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:41.335" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:41.336" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170725 12:48:41.384" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:41.384" starttime="20170725 12:48:41.295"></status>
</kw>
<msg timestamp="20170725 12:48:41.385" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:41.385" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-80"\nVERSION_ID="v1.99.8-80-gba19344"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170725 12:48:41.385" starttime="20170725 12:48:41.263"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:41.385" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-80"
VERSION_ID="v1.99.8-80-gba19344"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170725 12:48:41.385" starttime="20170725 12:48:41.385"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:41.386" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:41.386" starttime="20170725 12:48:41.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.393" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.393" starttime="20170725 12:48:41.393"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.393" starttime="20170725 12:48:41.392"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.393" starttime="20170725 12:48:41.386"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.393" starttime="20170725 12:48:41.254"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.393" starttime="20170725 12:48:41.254"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.393" starttime="20170725 12:48:41.254"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.394" starttime="20170725 12:48:41.252"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.394" starttime="20170725 12:48:41.252"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:41.395" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170725 12:48:41.395" starttime="20170725 12:48:41.394"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.395" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170725 12:48:41.396" starttime="20170725 12:48:41.395"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.399" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.399" starttime="20170725 12:48:41.399"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.399" starttime="20170725 12:48:41.398"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.400" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.401" starttime="20170725 12:48:41.400"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.401" starttime="20170725 12:48:41.399"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.402" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.402" starttime="20170725 12:48:41.401"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.402" starttime="20170725 12:48:41.401"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.403" starttime="20170725 12:48:41.403"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.403" starttime="20170725 12:48:41.402"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.403" starttime="20170725 12:48:41.397"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.403" starttime="20170725 12:48:41.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:41.404" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:41.404" starttime="20170725 12:48:41.404"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:41.477" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:41.477" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170725 12:48:41.534" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:41.534" starttime="20170725 12:48:41.435"></status>
</kw>
<msg timestamp="20170725 12:48:41.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:41.534" level="INFO">${ret_values} = (u' 17:50:10 up 21 min,  load average: 0.54, 0.58, 0.65', u'', 0)</msg>
<status status="PASS" endtime="20170725 12:48:41.535" starttime="20170725 12:48:41.404"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:41.535" level="INFO">${stdout} =  17:50:10 up 21 min,  load average: 0.54, 0.58, 0.65</msg>
<status status="PASS" endtime="20170725 12:48:41.535" starttime="20170725 12:48:41.535"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:41.536" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:41.536" starttime="20170725 12:48:41.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.543" starttime="20170725 12:48:41.542"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.543" starttime="20170725 12:48:41.542"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.543" starttime="20170725 12:48:41.536"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.543" starttime="20170725 12:48:41.396"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.543" starttime="20170725 12:48:41.396"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.546" starttime="20170725 12:48:41.546"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.546" starttime="20170725 12:48:41.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.548" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.548" starttime="20170725 12:48:41.547"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.548" starttime="20170725 12:48:41.547"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.549" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.549" starttime="20170725 12:48:41.549"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.549" starttime="20170725 12:48:41.548"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.550" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.551" starttime="20170725 12:48:41.550"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.551" starttime="20170725 12:48:41.550"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.551" starttime="20170725 12:48:41.545"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.551" starttime="20170725 12:48:41.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:41.552" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:41.552" starttime="20170725 12:48:41.551"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:41.625" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:41.626" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170725 12:48:41.714" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:41.715" starttime="20170725 12:48:41.583"></status>
</kw>
<msg timestamp="20170725 12:48:41.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:41.715" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170725 12:48:41.715" starttime="20170725 12:48:41.552"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:41.716" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170725 12:48:41.716" starttime="20170725 12:48:41.715"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:41.716" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:41.716" starttime="20170725 12:48:41.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.724" starttime="20170725 12:48:41.723"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.724" starttime="20170725 12:48:41.722"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.724" starttime="20170725 12:48:41.717"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.724" starttime="20170725 12:48:41.544"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.724" starttime="20170725 12:48:41.543"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.727" starttime="20170725 12:48:41.727"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.727" starttime="20170725 12:48:41.726"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.728" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.728" starttime="20170725 12:48:41.728"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.729" starttime="20170725 12:48:41.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.730" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.730" starttime="20170725 12:48:41.729"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.730" starttime="20170725 12:48:41.729"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.731" starttime="20170725 12:48:41.731"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.731" starttime="20170725 12:48:41.730"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.731" starttime="20170725 12:48:41.726"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.731" starttime="20170725 12:48:41.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:41.732" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:41.732" starttime="20170725 12:48:41.732"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:41.805" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:41.806" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170725 12:48:41.864" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:41.864" starttime="20170725 12:48:41.764"></status>
</kw>
<msg timestamp="20170725 12:48:41.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:41.864" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 12:13:24 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170725 12:48:41.864" starttime="20170725 12:48:41.732"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:41.865" level="INFO">${stdout} = Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 12:13:24 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170725 12:48:41.865" starttime="20170725 12:48:41.865"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:41.866" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:41.866" starttime="20170725 12:48:41.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:41.873" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.872"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.872"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.866"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.724"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.724"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.396"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.394"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:41.394"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:39.778"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.873" starttime="20170725 12:48:39.777"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.874" starttime="20170725 12:48:39.752"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.874" starttime="20170725 12:48:39.749"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:41.874" starttime="20170725 12:48:39.749"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:41.876" starttime="20170725 12:48:41.875"></status>
</kw>
<msg timestamp="20170725 12:48:41.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:41.876" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:41.876" starttime="20170725 12:48:41.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:41.876" starttime="20170725 12:48:41.876"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:41.903" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170725 12:48:41.903" starttime="20170725 12:48:41.903"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:41.906" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170725 12:48:41.906" starttime="20170725 12:48:41.904"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:41.907" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_elog.txt</msg>
<status status="PASS" endtime="20170725 12:48:41.907" starttime="20170725 12:48:41.906"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:41.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:41.913" starttime="20170725 12:48:41.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:41.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:41.914" starttime="20170725 12:48:41.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:41.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:41.915" starttime="20170725 12:48:41.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:41.916" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:41.916" starttime="20170725 12:48:41.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:42.122" starttime="20170725 12:48:41.917"></status>
</kw>
<msg timestamp="20170725 12:48:42.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:42.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.122" starttime="20170725 12:48:41.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.123" starttime="20170725 12:48:42.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.124" starttime="20170725 12:48:42.123"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.124" starttime="20170725 12:48:41.909"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.124" starttime="20170725 12:48:41.908"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.124" starttime="20170725 12:48:41.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:42.125" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:42.125" starttime="20170725 12:48:42.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:42.125" starttime="20170725 12:48:42.125"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:42.249" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:42.249" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.249" starttime="20170725 12:48:42.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:42.250" starttime="20170725 12:48:42.250"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:42.251" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:42.251" starttime="20170725 12:48:42.250"></status>
</kw>
<msg timestamp="20170725 12:48:42.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.251" starttime="20170725 12:48:41.907"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.252" starttime="20170725 12:48:42.252"></status>
</kw>
<msg timestamp="20170725 12:48:42.252" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:42.252" starttime="20170725 12:48:42.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:42.253" starttime="20170725 12:48:42.252"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 12:48:42.253" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1492709793584, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:42.254" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 12:48:42.254" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/3": {
            "AdditionalData": [],
            "Id": 3,
            "Message": "org.open_power.Host.Error.WatchdogTimedOut",
          ...</msg>
<status status="PASS" endtime="20170725 12:48:42.254" starttime="20170725 12:48:42.253"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_elog.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:42.255" starttime="20170725 12:48:42.255"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.255" starttime="20170725 12:48:42.254"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.255" starttime="20170725 12:48:41.906"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:42.256" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170725 12:48:42.256" starttime="20170725 12:48:42.256"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:42.259" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:42.293" starttime="20170725 12:48:42.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:42.294" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:42.294" starttime="20170725 12:48:42.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:42.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:42.295" starttime="20170725 12:48:42.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:42.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:42.296" starttime="20170725 12:48:42.296"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:42.527" starttime="20170725 12:48:42.297"></status>
</kw>
<msg timestamp="20170725 12:48:42.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:42.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.527" starttime="20170725 12:48:42.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.528" starttime="20170725 12:48:42.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.528" starttime="20170725 12:48:42.528"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.528" starttime="20170725 12:48:42.258"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.529" starttime="20170725 12:48:42.258"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.529" starttime="20170725 12:48:42.257"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:42.529" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:42.529" starttime="20170725 12:48:42.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:42.530" starttime="20170725 12:48:42.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:42.798" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:42.798" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.798" starttime="20170725 12:48:42.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:42.799" starttime="20170725 12:48:42.799"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:42.799" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:42.800" starttime="20170725 12:48:42.799"></status>
</kw>
<msg timestamp="20170725 12:48:42.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.800" starttime="20170725 12:48:42.256"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:42.802" starttime="20170725 12:48:42.801"></status>
</kw>
<msg timestamp="20170725 12:48:42.802" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:42.802" starttime="20170725 12:48:42.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:42.803" starttime="20170725 12:48:42.803"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 12:48:42.804" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:42.804" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 12:48:42.804" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170725 12:48:42.804" starttime="20170725 12:48:42.803"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:42.806" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:42.807" starttime="20170725 12:48:42.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.807" starttime="20170725 12:48:42.805"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:42.807" starttime="20170725 12:48:42.256"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:42.808" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_inventory.txt</msg>
<status status="PASS" endtime="20170725 12:48:42.808" starttime="20170725 12:48:42.807"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:42.811" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:42.811" starttime="20170725 12:48:42.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:42.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:42.812" starttime="20170725 12:48:42.812"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:42.813" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:42.813" starttime="20170725 12:48:42.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:42.813" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:42.813" starttime="20170725 12:48:42.813"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.039" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:43.040" starttime="20170725 12:48:42.814"></status>
</kw>
<msg timestamp="20170725 12:48:43.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:43.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.040" starttime="20170725 12:48:42.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.041" starttime="20170725 12:48:43.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.041" starttime="20170725 12:48:43.041"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.041" starttime="20170725 12:48:42.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.042" starttime="20170725 12:48:42.809"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.042" starttime="20170725 12:48:42.808"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:43.042" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:43.042" starttime="20170725 12:48:43.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.043" starttime="20170725 12:48:43.043"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:43.249" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:43.249" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.249" starttime="20170725 12:48:43.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.250" starttime="20170725 12:48:43.249"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:43.250" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:43.250" starttime="20170725 12:48:43.250"></status>
</kw>
<msg timestamp="20170725 12:48:43.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.250" starttime="20170725 12:48:42.808"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.252" starttime="20170725 12:48:43.251"></status>
</kw>
<msg timestamp="20170725 12:48:43.252" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:43.252" starttime="20170725 12:48:43.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.252" starttime="20170725 12:48:43.252"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 12:48:43.253" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:43.253" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 12:48:43.253" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170725 12:48:43.253" starttime="20170725 12:48:43.253"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_inventory.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:43.255" starttime="20170725 12:48:43.254"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.255" starttime="20170725 12:48:43.254"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.255" starttime="20170725 12:48:42.807"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:43.256" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_led.txt</msg>
<status status="PASS" endtime="20170725 12:48:43.256" starttime="20170725 12:48:43.255"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:43.259" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:43.260" starttime="20170725 12:48:43.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:43.260" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:43.260" starttime="20170725 12:48:43.260"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:43.261" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:43.261" starttime="20170725 12:48:43.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:43.262" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:43.262" starttime="20170725 12:48:43.261"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:43.443" starttime="20170725 12:48:43.262"></status>
</kw>
<msg timestamp="20170725 12:48:43.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:43.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.443" starttime="20170725 12:48:43.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.444" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.444" starttime="20170725 12:48:43.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.445" starttime="20170725 12:48:43.444"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.445" starttime="20170725 12:48:43.258"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.445" starttime="20170725 12:48:43.258"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.445" starttime="20170725 12:48:43.257"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:43.446" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:43.446" starttime="20170725 12:48:43.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.446" starttime="20170725 12:48:43.446"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:43.488" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:43.489" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.489" starttime="20170725 12:48:43.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.489" starttime="20170725 12:48:43.489"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:43.490" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:43.490" starttime="20170725 12:48:43.490"></status>
</kw>
<msg timestamp="20170725 12:48:43.490" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.490" starttime="20170725 12:48:43.256"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 12:48:43.491" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 12:48:43.491" starttime="20170725 12:48:43.491"></status>
</kw>
<msg timestamp="20170725 12:48:43.492" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:48:43.492" starttime="20170725 12:48:43.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 12:48:43.493" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 12:48:43.493" starttime="20170725 12:48:43.492"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.493" starttime="20170725 12:48:43.492"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.493" starttime="20170725 12:48:43.255"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:43.494" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_record_log.txt</msg>
<status status="PASS" endtime="20170725 12:48:43.494" starttime="20170725 12:48:43.493"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:43.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:43.497" starttime="20170725 12:48:43.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:43.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:43.498" starttime="20170725 12:48:43.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:43.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:43.498" starttime="20170725 12:48:43.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:43.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:43.499" starttime="20170725 12:48:43.499"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:43.687" starttime="20170725 12:48:43.500"></status>
</kw>
<msg timestamp="20170725 12:48:43.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:43.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.687" starttime="20170725 12:48:43.499"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.687" starttime="20170725 12:48:43.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.688" starttime="20170725 12:48:43.688"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.688" starttime="20170725 12:48:43.496"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.688" starttime="20170725 12:48:43.495"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.689" starttime="20170725 12:48:43.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:43.689" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:43.689" starttime="20170725 12:48:43.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.690" starttime="20170725 12:48:43.690"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:43.810" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:43.810" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.810" starttime="20170725 12:48:43.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.811" starttime="20170725 12:48:43.810"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:43.811" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:43.811" starttime="20170725 12:48:43.811"></status>
</kw>
<msg timestamp="20170725 12:48:43.812" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:43.812" starttime="20170725 12:48:43.494"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:43.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 12:48:43.813" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 12:48:43.813" starttime="20170725 12:48:43.812"></status>
</kw>
<msg timestamp="20170725 12:48:43.813" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:48:43.813" starttime="20170725 12:48:43.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 12:48:43.814" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 12:48:43.814" starttime="20170725 12:48:43.814"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.814" starttime="20170725 12:48:43.813"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.814" starttime="20170725 12:48:43.493"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.814" starttime="20170725 12:48:41.906"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.814" starttime="20170725 12:48:41.903"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.814" starttime="20170725 12:48:41.903"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.814" starttime="20170725 12:48:41.903"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.815" starttime="20170725 12:48:41.902"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.815" starttime="20170725 12:48:41.877"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.815" starttime="20170725 12:48:41.874"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.815" starttime="20170725 12:48:41.874"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.817" starttime="20170725 12:48:43.816"></status>
</kw>
<msg timestamp="20170725 12:48:43.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:43.817" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:43.817" starttime="20170725 12:48:43.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.817" starttime="20170725 12:48:43.817"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 12:48:43.878" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:43.878" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170725 12:48:43.946" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170725 12:48:43.962" level="FAIL">#(UTC) 2017/07/25 12:48:43.960501 -    4.241338 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170725 12:48:43.962" starttime="20170725 12:48:43.844"></status>
</kw>
<status status="FAIL" endtime="20170725 12:48:43.962" starttime="20170725 12:48:43.843"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.962" starttime="20170725 12:48:43.818"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.962" starttime="20170725 12:48:43.815"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:43.963" starttime="20170725 12:48:43.815"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.965" starttime="20170725 12:48:43.964"></status>
</kw>
<msg timestamp="20170725 12:48:43.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:43.965" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:43.965" starttime="20170725 12:48:43.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.965" starttime="20170725 12:48:43.965"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:43.990" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170725 12:48:43.990" starttime="20170725 12:48:43.990"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:43.992" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170725 12:48:43.992" starttime="20170725 12:48:43.991"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:43.993" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170725 12:48:43.993" starttime="20170725 12:48:43.992"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:43.994" starttime="20170725 12:48:43.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:43.995" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:43.995" starttime="20170725 12:48:43.994"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:44.067" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:44.068" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170725 12:48:44.581" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:44.581" starttime="20170725 12:48:44.029"></status>
</kw>
<msg timestamp="20170725 12:48:44.582" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:44.583" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Apr 20 17:50 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Apr 20 17:50 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170725 12:48:44.583" starttime="20170725 12:48:43.995"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:44.584" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Apr 20 17:50 0 -&gt; /dev/null
lrwx------    1 root     root            64 Apr 20 17:50 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170725 12:48:44.584" starttime="20170725 12:48:44.583"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:44.584" level="INFO">${stderr} = ls: /proc/1505/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170725 12:48:44.584" starttime="20170725 12:48:44.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:44.592" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:44.592" starttime="20170725 12:48:44.591"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.592" starttime="20170725 12:48:44.590"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.592" starttime="20170725 12:48:44.585"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.592" starttime="20170725 12:48:43.993"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.592" starttime="20170725 12:48:43.992"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:44.593" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170725 12:48:44.593" starttime="20170725 12:48:44.593"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:44.594" starttime="20170725 12:48:44.594"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:44.595" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:44.595" starttime="20170725 12:48:44.595"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:44.665" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:44.665" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170725 12:48:44.712" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:44.712" starttime="20170725 12:48:44.627"></status>
</kw>
<msg timestamp="20170725 12:48:44.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:44.712" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170725 12:48:44.712" starttime="20170725 12:48:44.596"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:44.713" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170725 12:48:44.713" starttime="20170725 12:48:44.713"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:44.714" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:44.714" starttime="20170725 12:48:44.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:44.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:44.721" starttime="20170725 12:48:44.720"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.722" starttime="20170725 12:48:44.720"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.722" starttime="20170725 12:48:44.714"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.722" starttime="20170725 12:48:44.593"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.722" starttime="20170725 12:48:44.592"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:44.723" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170725 12:48:44.723" starttime="20170725 12:48:44.722"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:44.725" starttime="20170725 12:48:44.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:44.725" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:44.725" starttime="20170725 12:48:44.725"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:44.796" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:44.797" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170725 12:48:44.894" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:44.894" starttime="20170725 12:48:44.755"></status>
</kw>
<msg timestamp="20170725 12:48:44.894" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:44.894" level="INFO">${ret_values} = (u'MemTotal:         432280 kB\nMemFree:          275780 kB\nMemAvailable:     322488 kB\nBuffers:           11320 kB\nCached:            52204 kB\nSwapCached:            0 kB\nActive:           10171...</msg>
<status status="PASS" endtime="20170725 12:48:44.894" starttime="20170725 12:48:44.726"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:44.895" level="INFO">${stdout} = MemTotal:         432280 kB
MemFree:          275780 kB
MemAvailable:     322488 kB
Buffers:           11320 kB
Cached:            52204 kB
SwapCached:            0 kB
Active:           101716 kB
Inac...</msg>
<status status="PASS" endtime="20170725 12:48:44.895" starttime="20170725 12:48:44.895"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:44.896" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:44.896" starttime="20170725 12:48:44.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:44.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:44.903" starttime="20170725 12:48:44.902"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.903" starttime="20170725 12:48:44.902"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.903" starttime="20170725 12:48:44.896"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.903" starttime="20170725 12:48:44.723"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:44.903" starttime="20170725 12:48:44.722"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:44.904" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170725 12:48:44.904" starttime="20170725 12:48:44.904"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:44.905" starttime="20170725 12:48:44.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:44.906" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:44.906" starttime="20170725 12:48:44.906"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:44.977" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:44.977" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170725 12:48:45.286" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:45.286" starttime="20170725 12:48:44.937"></status>
</kw>
<msg timestamp="20170725 12:48:45.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:45.287" level="INFO">${ret_values} = (u'Mem: 156624K used, 275656K free, 14652K shrd, 11320K buff, 52208K cached\nCPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 0.66 0.61 0.66 2/147 1508\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170725 12:48:45.287" starttime="20170725 12:48:44.906"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:45.287" level="INFO">${stdout} = Mem: 156624K used, 275656K free, 14652K shrd, 11320K buff, 52208K cached
CPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 0.66 0.61 0.66 2/147 1508
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170725 12:48:45.288" starttime="20170725 12:48:45.287"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:45.288" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:45.288" starttime="20170725 12:48:45.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:45.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:45.296" starttime="20170725 12:48:45.295"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.296" starttime="20170725 12:48:45.294"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.296" starttime="20170725 12:48:45.289"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.296" starttime="20170725 12:48:44.904"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.296" starttime="20170725 12:48:44.903"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:45.297" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170725 12:48:45.297" starttime="20170725 12:48:45.296"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:45.298" starttime="20170725 12:48:45.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:45.299" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:45.299" starttime="20170725 12:48:45.299"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:45.369" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:45.369" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170725 12:48:45.426" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:45.426" starttime="20170725 12:48:45.331"></status>
</kw>
<msg timestamp="20170725 12:48:45.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:45.427" level="INFO">${ret_values} = (u'[    0.240000] TCP bind hash table entries: 4096 (order: 2, 16384 bytes)\n[    0.240000] TCP: Hash tables configured (established 4096 bind 4096)\n[    0.240000] UDP hash table entries: 256 (order:...</msg>
<status status="PASS" endtime="20170725 12:48:45.427" starttime="20170725 12:48:45.299"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:45.427" level="INFO">${stdout} = [    0.240000] TCP bind hash table entries: 4096 (order: 2, 16384 bytes)
[    0.240000] TCP: Hash tables configured (established 4096 bind 4096)
[    0.240000] UDP hash table entries: 256 (order: 0, 4...</msg>
<status status="PASS" endtime="20170725 12:48:45.427" starttime="20170725 12:48:45.427"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:45.428" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:45.428" starttime="20170725 12:48:45.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:45.435" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:45.435" starttime="20170725 12:48:45.434"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.435" starttime="20170725 12:48:45.434"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.435" starttime="20170725 12:48:45.428"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.435" starttime="20170725 12:48:45.297"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:45.435" starttime="20170725 12:48:45.296"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:45.436" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170725 12:48:45.436" starttime="20170725 12:48:45.436"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:45.438" starttime="20170725 12:48:45.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:45.438" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:45.438" starttime="20170725 12:48:45.438"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:45.505" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:45.506" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170725 12:48:47.727" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:47.727" starttime="20170725 12:48:45.469"></status>
</kw>
<msg timestamp="20170725 12:48:47.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:47.731" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-04-20 17:29:22 UTC, end at Thu 2017-04-20 17:50:12 UTC. --\nApr 20 17:29:22 witherspoon kernel: Booting Linux on physical CPU 0x0\nApr 20 17:29:22 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170725 12:48:47.731" starttime="20170725 12:48:45.439"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:47.733" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:22 UTC, end at Thu 2017-04-20 17:50:12 UTC. --
Apr 20 17:29:22 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:22 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170725 12:48:47.733" starttime="20170725 12:48:47.732"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:47.734" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:47.734" starttime="20170725 12:48:47.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:47.745" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:47.745" starttime="20170725 12:48:47.744"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.745" starttime="20170725 12:48:47.742"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.745" starttime="20170725 12:48:47.735"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:45.437"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:45.436"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.992"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.991"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.991"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.990"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.989"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.966"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.963"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:47.746" starttime="20170725 12:48:43.963"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:47.748" starttime="20170725 12:48:47.748"></status>
</kw>
<msg timestamp="20170725 12:48:47.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:47.748" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:47.748" starttime="20170725 12:48:47.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:47.749" starttime="20170725 12:48:47.749"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:47.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:47.776" starttime="20170725 12:48:47.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:47.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:47.778" starttime="20170725 12:48:47.777"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:47.778" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:47.778" starttime="20170725 12:48:47.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:47.779" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:47.779" starttime="20170725 12:48:47.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.043" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:48.043" starttime="20170725 12:48:47.780"></status>
</kw>
<msg timestamp="20170725 12:48:48.044" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:48.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.044" starttime="20170725 12:48:47.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.044" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.045" starttime="20170725 12:48:48.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.045" starttime="20170725 12:48:48.045"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.045" starttime="20170725 12:48:47.774"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.045" starttime="20170725 12:48:47.774"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.046" starttime="20170725 12:48:47.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:48.046" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170725 12:48:48.046" starttime="20170725 12:48:48.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.047" starttime="20170725 12:48:48.047"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:48.193" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:48.194" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.194" starttime="20170725 12:48:48.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.194" starttime="20170725 12:48:48.194"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:48.195" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:48.195" starttime="20170725 12:48:48.195"></status>
</kw>
<msg timestamp="20170725 12:48:48.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.195" starttime="20170725 12:48:47.773"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.196" starttime="20170725 12:48:48.196"></status>
</kw>
<msg timestamp="20170725 12:48:48.196" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:48.197" starttime="20170725 12:48:48.195"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.197" starttime="20170725 12:48:48.197"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:48.198" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1492709793584, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:48.198" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:48.198" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170725 12:48:48.198" starttime="20170725 12:48:48.197"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170725 12:48:48.198" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" endtime="20170725 12:48:48.198" starttime="20170725 12:48:48.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:48.199" level="INFO">${logpath} = /home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.esel</msg>
<status status="PASS" endtime="20170725 12:48:48.199" starttime="20170725 12:48:48.199"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.200" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.esel"&gt;/home/fspcibld/logs/20170725124839486216_TestBiosUpdate/20170725124839486216_HostBIOSPowerOn/9.41.166.169.170725.124836.esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:48.200" starttime="20170725 12:48:48.199"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:48.203" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:48.204" starttime="20170725 12:48:48.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:48.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:48.204" starttime="20170725 12:48:48.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:48.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:48.205" starttime="20170725 12:48:48.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:48.206" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:48.206" starttime="20170725 12:48:48.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.393" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:48.393" starttime="20170725 12:48:48.206"></status>
</kw>
<msg timestamp="20170725 12:48:48.393" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:48.393" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.393" starttime="20170725 12:48:48.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.394" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.394" starttime="20170725 12:48:48.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.395" starttime="20170725 12:48:48.394"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.395" starttime="20170725 12:48:48.202"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.395" starttime="20170725 12:48:48.202"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.395" starttime="20170725 12:48:48.201"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:48.396" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" endtime="20170725 12:48:48.396" starttime="20170725 12:48:48.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.397" starttime="20170725 12:48:48.396"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:48.477" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170725 12:48:48.478" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.478" starttime="20170725 12:48:48.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.478" starttime="20170725 12:48:48.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:48.479" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:48.479" starttime="20170725 12:48:48.479"></status>
</kw>
<msg timestamp="20170725 12:48:48.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.479" starttime="20170725 12:48:48.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.480" starttime="20170725 12:48:48.479"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:48.480" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:48.480" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:48.480" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170725 12:48:48.480" starttime="20170725 12:48:48.480"></status>
</kw>
<msg timestamp="20170725 12:48:48.481" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170725 12:48:48.481" starttime="20170725 12:48:48.200"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170725 12:48:48.481" level="INFO">Length is 0</msg>
<msg timestamp="20170725 12:48:48.481" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170725 12:48:48.481" starttime="20170725 12:48:48.481"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.482" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 12:48:48.482" starttime="20170725 12:48:48.482"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.482" starttime="20170725 12:48:48.200"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.482" starttime="20170725 12:48:48.200"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170725 12:48:48.494" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:48:48.509" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170725 12:48:48.510" starttime="20170725 12:48:48.482"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170725 12:48:48.532" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170725 12:48:48.532" starttime="20170725 12:48:48.527"></status>
</kw>
<msg timestamp="20170725 12:48:48.532" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:48:48.532" starttime="20170725 12:48:48.524"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170725 12:48:48.534" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 12:48:48.535" starttime="20170725 12:48:48.533"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.535" starttime="20170725 12:48:47.772"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.536" starttime="20170725 12:48:47.749"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.537" starttime="20170725 12:48:47.747"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.537" starttime="20170725 12:48:47.746"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.543" starttime="20170725 12:48:48.542"></status>
</kw>
<msg timestamp="20170725 12:48:48.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:48.544" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:48.544" starttime="20170725 12:48:48.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.545" starttime="20170725 12:48:48.545"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170725 12:48:48.574" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:48.573"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:48.571"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:48.545"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:48.539"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:48.537"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:39.749"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:39.746"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:39.746"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.574" starttime="20170725 12:48:39.746"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170725 12:48:48.593" starttime="20170725 12:48:48.585"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.593" starttime="20170725 12:48:48.575"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.593" starttime="20170725 12:48:39.745"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.594" starttime="20170725 12:48:36.433"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:48.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:48.641" starttime="20170725 12:48:48.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:48.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:48.641" starttime="20170725 12:48:48.641"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:48.642" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:48.642" starttime="20170725 12:48:48.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:48.643" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:48.643" starttime="20170725 12:48:48.642"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:48.828" starttime="20170725 12:48:48.643"></status>
</kw>
<msg timestamp="20170725 12:48:48.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:48.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.828" starttime="20170725 12:48:48.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.829" starttime="20170725 12:48:48.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.829" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.830" starttime="20170725 12:48:48.829"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.830" starttime="20170725 12:48:48.637"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.830" starttime="20170725 12:48:48.636"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.830" starttime="20170725 12:48:48.635"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:48.831" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 12:48:48.831" starttime="20170725 12:48:48.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.831" starttime="20170725 12:48:48.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:48.895" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:48.895" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.895" starttime="20170725 12:48:48.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:48.896" starttime="20170725 12:48:48.896"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:48.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:48.897" starttime="20170725 12:48:48.896"></status>
</kw>
<msg timestamp="20170725 12:48:48.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.897" starttime="20170725 12:48:48.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:48.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:48.897" starttime="20170725 12:48:48.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:48.898" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:48.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:48.898" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 12:48:48.898" starttime="20170725 12:48:48.898"></status>
</kw>
<msg timestamp="20170725 12:48:48.898" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 12:48:48.899" starttime="20170725 12:48:48.633"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:48.899" starttime="20170725 12:48:48.631"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:48.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:48.907" starttime="20170725 12:48:48.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:48.908" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:48.908" starttime="20170725 12:48:48.907"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:48.908" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:48.908" starttime="20170725 12:48:48.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:48.909" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:48.909" starttime="20170725 12:48:48.909"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.120" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:49.120" starttime="20170725 12:48:48.910"></status>
</kw>
<msg timestamp="20170725 12:48:49.120" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:49.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.120" starttime="20170725 12:48:48.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.121" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.121" starttime="20170725 12:48:49.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.122" starttime="20170725 12:48:49.121"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.122" starttime="20170725 12:48:48.902"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.122" starttime="20170725 12:48:48.901"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.122" starttime="20170725 12:48:48.901"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:49.123" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 12:48:49.123" starttime="20170725 12:48:49.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:49.123" starttime="20170725 12:48:49.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:49.266" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:49.266" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.267" starttime="20170725 12:48:49.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:49.267" starttime="20170725 12:48:49.267"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:49.268" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:49.268" starttime="20170725 12:48:49.267"></status>
</kw>
<msg timestamp="20170725 12:48:49.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.268" starttime="20170725 12:48:48.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.269" starttime="20170725 12:48:49.268"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:49.269" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:49.269" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:49.269" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 12:48:49.269" starttime="20170725 12:48:49.269"></status>
</kw>
<msg timestamp="20170725 12:48:49.270" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 12:48:49.270" starttime="20170725 12:48:48.900"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.270" starttime="20170725 12:48:48.899"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:49.274" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:49.274" starttime="20170725 12:48:49.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:49.275" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:49.275" starttime="20170725 12:48:49.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:49.276" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:49.276" starttime="20170725 12:48:49.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:49.277" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:49.277" starttime="20170725 12:48:49.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:49.465" starttime="20170725 12:48:49.277"></status>
</kw>
<msg timestamp="20170725 12:48:49.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:49.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.465" starttime="20170725 12:48:49.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.466" starttime="20170725 12:48:49.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.467" starttime="20170725 12:48:49.466"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.467" starttime="20170725 12:48:49.273"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.467" starttime="20170725 12:48:49.272"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.467" starttime="20170725 12:48:49.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:49.467" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 12:48:49.467" starttime="20170725 12:48:49.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:49.468" starttime="20170725 12:48:49.468"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:49.534" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 12:48:49.534" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.534" starttime="20170725 12:48:49.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:49.534" starttime="20170725 12:48:49.534"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:49.535" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:49.535" starttime="20170725 12:48:49.535"></status>
</kw>
<msg timestamp="20170725 12:48:49.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.535" starttime="20170725 12:48:49.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.536" starttime="20170725 12:48:49.535"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:49.536" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:49.536" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:49.537" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 12:48:49.537" starttime="20170725 12:48:49.536"></status>
</kw>
<msg timestamp="20170725 12:48:49.537" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 12:48:49.537" starttime="20170725 12:48:49.271"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.537" starttime="20170725 12:48:49.270"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:49.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:49.542" starttime="20170725 12:48:49.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:49.542" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:49.542" starttime="20170725 12:48:49.542"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:49.543" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:49.543" starttime="20170725 12:48:49.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:49.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:49.544" starttime="20170725 12:48:49.543"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.763" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:49.763" starttime="20170725 12:48:49.544"></status>
</kw>
<msg timestamp="20170725 12:48:49.764" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:49.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.764" starttime="20170725 12:48:49.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.764" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.764" starttime="20170725 12:48:49.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.765" starttime="20170725 12:48:49.765"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.765" starttime="20170725 12:48:49.540"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.765" starttime="20170725 12:48:49.540"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.765" starttime="20170725 12:48:49.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:49.766" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:48:49.766" starttime="20170725 12:48:49.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:49.767" starttime="20170725 12:48:49.766"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:49.831" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:49.831" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.831" starttime="20170725 12:48:49.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:49.832" starttime="20170725 12:48:49.831"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:49.832" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:49.832" starttime="20170725 12:48:49.832"></status>
</kw>
<msg timestamp="20170725 12:48:49.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.833" starttime="20170725 12:48:49.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:49.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:49.833" starttime="20170725 12:48:49.833"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:49.834" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:49.834" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:49.834" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:48:49.834" starttime="20170725 12:48:49.833"></status>
</kw>
<msg timestamp="20170725 12:48:49.834" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:48:49.834" starttime="20170725 12:48:49.538"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.835" starttime="20170725 12:48:49.537"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:49.903" starttime="20170725 12:48:36.420"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:49.922" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:49.924" starttime="20170725 12:48:49.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:49.925" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:49.925" starttime="20170725 12:48:49.924"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:49.926" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:49.926" starttime="20170725 12:48:49.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:49.926" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:49.926" starttime="20170725 12:48:49.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.107" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:50.107" starttime="20170725 12:48:49.927"></status>
</kw>
<msg timestamp="20170725 12:48:50.108" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:50.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.108" starttime="20170725 12:48:49.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.108" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.109" starttime="20170725 12:48:50.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.109" starttime="20170725 12:48:50.109"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.109" starttime="20170725 12:48:49.921"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.109" starttime="20170725 12:48:49.921"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.110" starttime="20170725 12:48:49.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:50.110" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170725 12:48:50.110" starttime="20170725 12:48:50.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.111" starttime="20170725 12:48:50.110"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:50.266" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170725 12:48:50.266" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.266" starttime="20170725 12:48:50.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.267" starttime="20170725 12:48:50.267"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:50.267" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:50.267" starttime="20170725 12:48:50.267"></status>
</kw>
<msg timestamp="20170725 12:48:50.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.268" starttime="20170725 12:48:49.919"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.268" starttime="20170725 12:48:50.268"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:50.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:50.273" starttime="20170725 12:48:50.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:50.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:50.273" starttime="20170725 12:48:50.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:50.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:50.274" starttime="20170725 12:48:50.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:50.275" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:50.275" starttime="20170725 12:48:50.274"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.488" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:50.488" starttime="20170725 12:48:50.276"></status>
</kw>
<msg timestamp="20170725 12:48:50.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:50.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.489" starttime="20170725 12:48:50.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.489" starttime="20170725 12:48:50.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.490" starttime="20170725 12:48:50.490"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.490" starttime="20170725 12:48:50.271"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.490" starttime="20170725 12:48:50.271"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.490" starttime="20170725 12:48:50.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:50.491" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170725 12:48:50.491" starttime="20170725 12:48:50.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.492" starttime="20170725 12:48:50.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:50.543" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170725 12:48:50.543" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.543" starttime="20170725 12:48:50.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.544" starttime="20170725 12:48:50.543"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:50.544" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:50.544" starttime="20170725 12:48:50.544"></status>
</kw>
<msg timestamp="20170725 12:48:50.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.544" starttime="20170725 12:48:50.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.545" starttime="20170725 12:48:50.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:50.546" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:50.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:50.546" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/3']}</msg>
<status status="PASS" endtime="20170725 12:48:50.546" starttime="20170725 12:48:50.545"></status>
</kw>
<msg timestamp="20170725 12:48:50.546" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" endtime="20170725 12:48:50.546" starttime="20170725 12:48:50.269"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.547" starttime="20170725 12:48:50.547"></status>
</kw>
<msg timestamp="20170725 12:48:50.547" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" endtime="20170725 12:48:50.547" starttime="20170725 12:48:50.269"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.548" starttime="20170725 12:48:50.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:50.549" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170725 12:48:50.549" starttime="20170725 12:48:50.549"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:50.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:50.554" starttime="20170725 12:48:50.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:50.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:50.555" starttime="20170725 12:48:50.554"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:50.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:50.556" starttime="20170725 12:48:50.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:50.557" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:50.557" starttime="20170725 12:48:50.556"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.764" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:50.764" starttime="20170725 12:48:50.558"></status>
</kw>
<msg timestamp="20170725 12:48:50.764" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:50.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.765" starttime="20170725 12:48:50.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.765" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.765" starttime="20170725 12:48:50.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.766" starttime="20170725 12:48:50.765"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.766" starttime="20170725 12:48:50.552"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.766" starttime="20170725 12:48:50.551"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.766" starttime="20170725 12:48:50.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:50.767" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status status="PASS" endtime="20170725 12:48:50.767" starttime="20170725 12:48:50.767"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:48:50.769" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170725 12:48:50.769" starttime="20170725 12:48:50.768"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:48:50.769" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170725 12:48:50.770" starttime="20170725 12:48:50.769"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.770" starttime="20170725 12:48:50.769"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.770" starttime="20170725 12:48:50.767"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:50.884" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170725 12:48:50.884" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.884" starttime="20170725 12:48:50.770"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:48:50.886" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:48:50.886" starttime="20170725 12:48:50.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:48:50.887" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:48:50.887" starttime="20170725 12:48:50.887"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.887" starttime="20170725 12:48:50.886"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.887" starttime="20170725 12:48:50.885"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:50.888" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:50.889" starttime="20170725 12:48:50.888"></status>
</kw>
<msg timestamp="20170725 12:48:50.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.889" starttime="20170725 12:48:50.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:50.890" starttime="20170725 12:48:50.889"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.890" starttime="20170725 12:48:50.547"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.890" starttime="20170725 12:48:50.547"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.890" starttime="20170725 12:48:50.547"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.890" starttime="20170725 12:48:49.918"></status>
</kw>
<msg timestamp="20170725 12:48:50.896" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170725 12:48:50.903" starttime="20170725 12:48:50.902"></status>
</kw>
<msg timestamp="20170725 12:48:50.918" level="FAIL">#(UTC) 2017/07/25 12:48:50.917498 -    2.324035 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170725 12:48:50.918" starttime="20170725 12:34:10.362"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170725 12:48:50.924" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170725 12:48:50.926" starttime="20170725 12:48:50.919"></status>
</kw>
<status status="FAIL" endtime="20170725 12:48:50.926" starttime="20170725 12:34:10.360"></status>
</kw>
<msg timestamp="20170725 12:48:50.927" level="FAIL">#(UTC) 2017/07/25 12:48:50.917498 -    2.324035 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170725 12:48:50.927" starttime="20170725 12:34:10.350"></status>
</kw>
<kw type="teardown" name="Validate Power On Teardown">
<doc>Teardown after Validate Power On.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Stop SOL Console Logging</arg>
<arg>\ targ_file_path=${EXECDIR}${/}logs${/}SOL.log</arg>
</arguments>
<assign>
<var>${keyword_buf}</var>
</assign>
<msg timestamp="20170725 12:48:50.929" level="INFO">${keyword_buf} = Stop SOL Console Logging  targ_file_path=/home/fspcibld/logs/SOL.log</msg>
<status status="PASS" endtime="20170725 12:48:50.929" starttime="20170725 12:48:50.928"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_buf}</arg>
</arguments>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>targ_file_path=/home/fspcibld/logs/SOL.log</arg>
</arguments>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170725 12:48:50.942" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:48:50.942" starttime="20170725 12:48:50.942"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170725 12:48:50.943" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:48:50.943" starttime="20170725 12:48:50.942"></status>
</kw>
<msg timestamp="20170725 12:48:50.943" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 12:48:50.943" starttime="20170725 12:48:50.941"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:50.944" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170725 12:48:50.944" starttime="20170725 12:48:50.944"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.945" starttime="20170725 12:48:50.944"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:48:50.949" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:48:50.953" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 12:48:50.953" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170725 12:48:50.953" starttime="20170725 12:48:50.945"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.957" starttime="20170725 12:48:50.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.958" starttime="20170725 12:48:50.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:50.959" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 12:48:50.959" starttime="20170725 12:48:50.958"></status>
</kw>
<msg timestamp="20170725 12:48:50.960" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 12:48:50.960" starttime="20170725 12:48:50.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:50.961" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170725 12:48:50.961" starttime="20170725 12:48:50.960"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.962" starttime="20170725 12:48:50.961"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170725 12:48:50.967" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:48:50.974" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 12:48:50.974" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170725 12:48:50.975" starttime="20170725 12:48:50.962"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.978" starttime="20170725 12:48:50.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:50.978" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170725 12:48:50.979" starttime="20170725 12:48:50.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.980" starttime="20170725 12:48:50.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:48:50.981" level="INFO">${rc} = None</msg>
<msg timestamp="20170725 12:48:50.981" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170725 12:48:50.981" starttime="20170725 12:48:50.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:50.982" starttime="20170725 12:48:50.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170725 12:48:50.985" html="yes" level="INFO">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///home/fspcibld/logs/SOL.log"&gt;/home/fspcibld/logs/SOL.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:50.986" starttime="20170725 12:48:50.983"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.986" starttime="20170725 12:48:50.983"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:50.986" starttime="20170725 12:48:50.982"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:48:50.986" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170725 12:48:50.986" starttime="20170725 12:48:50.986"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170725 12:48:50.987" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170725 12:48:50.987" starttime="20170725 12:48:50.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:51.031" starttime="20170725 12:48:50.988"></status>
</kw>
<msg timestamp="20170725 12:48:51.038" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 12:48:51.040" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
root@9.41.166.169's password: 
</msg>
<status status="PASS" endtime="20170725 12:48:51.040" starttime="20170725 12:48:50.987"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:51.045" starttime="20170725 12:48:50.940"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:51.046" starttime="20170725 12:48:50.929"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:51.047" starttime="20170725 12:48:50.927"></status>
</kw>
<status status="FAIL" endtime="20170725 12:48:51.047" starttime="20170725 12:34:10.195"></status>
</kw>
<status status="FAIL" endtime="20170725 12:48:51.048" starttime="20170725 12:34:10.194"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170725 12:48:51.061" starttime="20170725 12:48:51.060"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:51.077" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:51.078" starttime="20170725 12:48:51.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:51.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:51.079" starttime="20170725 12:48:51.078"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:51.079" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:51.079" starttime="20170725 12:48:51.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:51.080" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:51.080" starttime="20170725 12:48:51.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:51.439" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:51.440" starttime="20170725 12:48:51.081"></status>
</kw>
<msg timestamp="20170725 12:48:51.440" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:51.440" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:51.440" starttime="20170725 12:48:51.080"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:51.441" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:51.441" starttime="20170725 12:48:51.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:51.441" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:51.441" starttime="20170725 12:48:51.441"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:51.441" starttime="20170725 12:48:51.076"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:51.442" starttime="20170725 12:48:51.076"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:51.442" starttime="20170725 12:48:51.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:51.442" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:48:51.442" starttime="20170725 12:48:51.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:51.443" starttime="20170725 12:48:51.443"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:51.523" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:48:51.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:51.523" starttime="20170725 12:48:51.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:51.524" starttime="20170725 12:48:51.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:51.524" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:51.524" starttime="20170725 12:48:51.524"></status>
</kw>
<msg timestamp="20170725 12:48:51.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:51.524" starttime="20170725 12:48:51.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:51.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:51.525" starttime="20170725 12:48:51.525"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:48:51.526" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:51.526" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:48:51.526" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:48:51.526" starttime="20170725 12:48:51.526"></status>
</kw>
<msg timestamp="20170725 12:48:51.527" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:48:51.527" starttime="20170725 12:48:51.073"></status>
</kw>
<msg timestamp="20170725 12:48:51.527" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170725 12:48:51.527" starttime="20170725 12:48:51.073"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:51.528" starttime="20170725 12:48:51.528"></status>
</kw>
<msg timestamp="20170725 12:48:51.528" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:51.528" starttime="20170725 12:48:51.527"></status>
</kw>
<msg timestamp="20170725 12:48:51.528" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:51.529" starttime="20170725 12:48:51.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170725 12:48:51.543" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170725 12:48:51.543" starttime="20170725 12:48:51.543"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 12:48:51.547" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 12:48:54.551" level="INFO">${RC} = 0</msg>
<msg timestamp="20170725 12:48:54.551" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.789 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.657 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170725 12:48:54.551" starttime="20170725 12:48:51.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.555" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.789 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.657 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.604 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.620 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.604/0.667/0.789/0.077 ms</msg>
<status status="PASS" endtime="20170725 12:48:54.555" starttime="20170725 12:48:54.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:54.556" starttime="20170725 12:48:54.555"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.556" starttime="20170725 12:48:51.542"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:48:54.574" level="INFO">${cur_time} = 2017-07-25 12:48:54:573763</msg>
<status status="PASS" endtime="20170725 12:48:54.574" starttime="20170725 12:48:54.574"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:48:54.575" level="INFO">${cur_time} = 20170725124854573763</msg>
<status status="PASS" endtime="20170725 12:48:54.575" starttime="20170725 12:48:54.574"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.575" starttime="20170725 12:48:54.572"></status>
</kw>
<msg timestamp="20170725 12:48:54.575" level="INFO">${FFDC_TIME} = 20170725124854573763</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 12:48:54.577" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 12:48:54.577" starttime="20170725 12:48:54.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 12:48:54.578" level="INFO">${suite_name} = 20170725124854573763_TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 12:48:54.578" starttime="20170725 12:48:54.577"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 12:48:54.578" level="INFO">${test_name} = HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 12:48:54.578" starttime="20170725 12:48:54.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 12:48:54.579" level="INFO">${test_name} = 20170725124854573763_HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 12:48:54.579" starttime="20170725 12:48:54.579"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.579" starttime="20170725 12:48:54.576"></status>
</kw>
<msg timestamp="20170725 12:48:54.580" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/</msg>
<msg timestamp="20170725 12:48:54.580" level="INFO">${FFDC_PREFIX} = 20170725124854573763_</msg>
<msg timestamp="20170725 12:48:54.599" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/</arg>
</arguments>
<msg timestamp="20170725 12:48:54.601" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.601" starttime="20170725 12:48:54.600"></status>
</kw>
<msg timestamp="20170725 12:48:54.601" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.617" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.618" starttime="20170725 12:48:54.617"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.618" starttime="20170725 12:48:54.616"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.619" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.619" starttime="20170725 12:48:54.618"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.619" starttime="20170725 12:48:54.618"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.620" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.620" starttime="20170725 12:48:54.620"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.621" starttime="20170725 12:48:54.619"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.622" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.622" starttime="20170725 12:48:54.622"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.622" starttime="20170725 12:48:54.621"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.624" starttime="20170725 12:48:54.623"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.624" starttime="20170725 12:48:54.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.625" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.625" starttime="20170725 12:48:54.624"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.625" starttime="20170725 12:48:54.624"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.626" starttime="20170725 12:48:54.626"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.626" starttime="20170725 12:48:54.625"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.628" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.628" starttime="20170725 12:48:54.627"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.628" starttime="20170725 12:48:54.627"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.631" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.631" starttime="20170725 12:48:54.631"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.631" starttime="20170725 12:48:54.628"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.633" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.633" starttime="20170725 12:48:54.633"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.633" starttime="20170725 12:48:54.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.634" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.634" starttime="20170725 12:48:54.634"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.634" starttime="20170725 12:48:54.633"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.636" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.636" starttime="20170725 12:48:54.635"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.636" starttime="20170725 12:48:54.635"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.637" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.637" starttime="20170725 12:48:54.637"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.637" starttime="20170725 12:48:54.636"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 12:48:54.660" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:54.661" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170725 12:48:54.738" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 12:48:54.750" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170725 12:48:54.750" level="INFO">${stderr} = </msg>
<msg timestamp="20170725 12:48:54.750" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170725 12:48:54.750" starttime="20170725 12:48:54.638"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.751" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 12:48:54.751" starttime="20170725 12:48:54.750"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.751" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170725 12:48:54.751" starttime="20170725 12:48:54.751"></status>
</kw>
<msg timestamp="20170725 12:48:54.751" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170725 12:48:54.751" starttime="20170725 12:48:54.637"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.754" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.754" starttime="20170725 12:48:54.754"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.754" starttime="20170725 12:48:54.752"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.754" starttime="20170725 12:48:54.631"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.756" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.756" starttime="20170725 12:48:54.755"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.756" starttime="20170725 12:48:54.755"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:54.756" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 12:48:54.756" starttime="20170725 12:48:54.756"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.758" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.758" starttime="20170725 12:48:54.758"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.758" starttime="20170725 12:48:54.757"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.759" starttime="20170725 12:48:54.759"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.759" starttime="20170725 12:48:54.758"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.759" starttime="20170725 12:48:54.757"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.766" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.766" starttime="20170725 12:48:54.760"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.767" starttime="20170725 12:48:54.760"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.768" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.768" starttime="20170725 12:48:54.767"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.768" starttime="20170725 12:48:54.767"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.768" starttime="20170725 12:48:54.759"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.769" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.770" starttime="20170725 12:48:54.769"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.770" starttime="20170725 12:48:54.768"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.771" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.771" starttime="20170725 12:48:54.770"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.771" starttime="20170725 12:48:54.770"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.771" starttime="20170725 12:48:54.768"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.771" starttime="20170725 12:48:54.756"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.772" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.773" starttime="20170725 12:48:54.772"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.773" starttime="20170725 12:48:54.772"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.773" starttime="20170725 12:48:54.616"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:54.780" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170725 12:48:54.781" starttime="20170725 12:48:54.780"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170725 12:48:54.782" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170725 12:48:54.782" starttime="20170725 12:48:54.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:54.783" starttime="20170725 12:48:54.783"></status>
</kw>
<msg timestamp="20170725 12:48:54.783" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170725 12:48:54.783" starttime="20170725 12:48:54.782"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:54.785" starttime="20170725 12:48:54.785"></status>
</kw>
<msg timestamp="20170725 12:48:54.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:54.785" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:54.785" starttime="20170725 12:48:54.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:54.786" starttime="20170725 12:48:54.786"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:54.807" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 12:48:54.807" starttime="20170725 12:48:54.806"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:54.809" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170725 12:48:54.809" starttime="20170725 12:48:54.808"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.810" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170725 12:48:54.810" starttime="20170725 12:48:54.810"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.813" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.813" starttime="20170725 12:48:54.813"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.814" starttime="20170725 12:48:54.812"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.815" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.815" starttime="20170725 12:48:54.815"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.815" starttime="20170725 12:48:54.814"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.818" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.818" starttime="20170725 12:48:54.817"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.818" starttime="20170725 12:48:54.815"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:54.819" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:54.819" starttime="20170725 12:48:54.819"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.819" starttime="20170725 12:48:54.818"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.819" starttime="20170725 12:48:54.812"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:54.820" starttime="20170725 12:48:54.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:54.821" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:54.821" starttime="20170725 12:48:54.820"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:54.884" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:54.885" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170725 12:48:56.277" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:56.277" starttime="20170725 12:48:54.849"></status>
</kw>
<msg timestamp="20170725 12:48:56.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:56.277" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status status="PASS" endtime="20170725 12:48:56.277" starttime="20170725 12:48:54.821"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:56.278" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status status="PASS" endtime="20170725 12:48:56.279" starttime="20170725 12:48:56.278"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:56.279" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:56.279" starttime="20170725 12:48:56.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.290" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.290" starttime="20170725 12:48:56.289"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.290" starttime="20170725 12:48:56.288"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.290" starttime="20170725 12:48:56.280"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.290" starttime="20170725 12:48:54.811"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.290" starttime="20170725 12:48:54.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.290" starttime="20170725 12:48:54.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.291" starttime="20170725 12:48:54.807"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.291" starttime="20170725 12:48:54.807"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:56.292" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170725 12:48:56.292" starttime="20170725 12:48:56.291"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.293" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170725 12:48:56.293" starttime="20170725 12:48:56.292"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.296" starttime="20170725 12:48:56.295"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.296" starttime="20170725 12:48:56.295"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.297" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.297" starttime="20170725 12:48:56.297"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.298" starttime="20170725 12:48:56.296"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.299" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.299" starttime="20170725 12:48:56.298"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.299" starttime="20170725 12:48:56.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.300" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.300" starttime="20170725 12:48:56.300"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.300" starttime="20170725 12:48:56.299"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.300" starttime="20170725 12:48:56.294"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.300" starttime="20170725 12:48:56.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:56.301" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:56.301" starttime="20170725 12:48:56.300"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:56.364" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:56.365" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170725 12:48:56.412" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:56.412" starttime="20170725 12:48:56.328"></status>
</kw>
<msg timestamp="20170725 12:48:56.413" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:56.413" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-80"\nVERSION_ID="v1.99.8-80-gba19344"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170725 12:48:56.413" starttime="20170725 12:48:56.301"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:56.413" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-80"
VERSION_ID="v1.99.8-80-gba19344"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170725 12:48:56.413" starttime="20170725 12:48:56.413"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:56.414" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:56.414" starttime="20170725 12:48:56.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.421" starttime="20170725 12:48:56.421"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.421" starttime="20170725 12:48:56.420"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.421" starttime="20170725 12:48:56.414"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.422" starttime="20170725 12:48:56.293"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.422" starttime="20170725 12:48:56.293"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.422" starttime="20170725 12:48:56.293"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.422" starttime="20170725 12:48:56.291"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.422" starttime="20170725 12:48:56.291"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:56.423" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170725 12:48:56.423" starttime="20170725 12:48:56.423"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.424" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170725 12:48:56.424" starttime="20170725 12:48:56.423"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.427" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.427" starttime="20170725 12:48:56.426"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.427" starttime="20170725 12:48:56.426"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.428" starttime="20170725 12:48:56.428"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.428" starttime="20170725 12:48:56.427"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.429" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.430" starttime="20170725 12:48:56.429"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.430" starttime="20170725 12:48:56.429"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.431" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.431" starttime="20170725 12:48:56.430"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.431" starttime="20170725 12:48:56.430"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.431" starttime="20170725 12:48:56.425"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.431" starttime="20170725 12:48:56.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:56.432" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:56.432" starttime="20170725 12:48:56.431"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:56.495" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:56.496" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170725 12:48:56.553" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:56.553" starttime="20170725 12:48:56.458"></status>
</kw>
<msg timestamp="20170725 12:48:56.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:56.553" level="INFO">${ret_values} = (u' 17:50:25 up 21 min,  load average: 0.70, 0.61, 0.66', u'', 0)</msg>
<status status="PASS" endtime="20170725 12:48:56.553" starttime="20170725 12:48:56.432"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:56.554" level="INFO">${stdout} =  17:50:25 up 21 min,  load average: 0.70, 0.61, 0.66</msg>
<status status="PASS" endtime="20170725 12:48:56.554" starttime="20170725 12:48:56.553"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:56.554" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:56.554" starttime="20170725 12:48:56.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.561" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.561" starttime="20170725 12:48:56.561"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.562" starttime="20170725 12:48:56.560"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.562" starttime="20170725 12:48:56.555"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.562" starttime="20170725 12:48:56.424"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.562" starttime="20170725 12:48:56.424"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.565" starttime="20170725 12:48:56.564"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.565" starttime="20170725 12:48:56.564"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.566" starttime="20170725 12:48:56.566"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.566" starttime="20170725 12:48:56.565"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.568" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.568" starttime="20170725 12:48:56.567"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.568" starttime="20170725 12:48:56.567"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.569" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.569" starttime="20170725 12:48:56.569"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.569" starttime="20170725 12:48:56.568"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.569" starttime="20170725 12:48:56.563"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.569" starttime="20170725 12:48:56.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:56.570" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:56.570" starttime="20170725 12:48:56.570"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:56.630" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:56.631" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170725 12:48:56.707" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:56.708" starttime="20170725 12:48:56.598"></status>
</kw>
<msg timestamp="20170725 12:48:56.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:56.708" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170725 12:48:56.708" starttime="20170725 12:48:56.570"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:56.709" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170725 12:48:56.709" starttime="20170725 12:48:56.708"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:56.709" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:56.709" starttime="20170725 12:48:56.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.717" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.717" starttime="20170725 12:48:56.716"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.717" starttime="20170725 12:48:56.715"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.717" starttime="20170725 12:48:56.710"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.717" starttime="20170725 12:48:56.562"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.717" starttime="20170725 12:48:56.562"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.720" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.720" starttime="20170725 12:48:56.720"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.720" starttime="20170725 12:48:56.719"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.722" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.722" starttime="20170725 12:48:56.721"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.722" starttime="20170725 12:48:56.721"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.723" starttime="20170725 12:48:56.723"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.723" starttime="20170725 12:48:56.722"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.724" starttime="20170725 12:48:56.724"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.725" starttime="20170725 12:48:56.723"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.725" starttime="20170725 12:48:56.719"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.725" starttime="20170725 12:48:56.718"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:56.725" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:56.725" starttime="20170725 12:48:56.725"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:56.789" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:56.790" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170725 12:48:56.834" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:48:56.834" starttime="20170725 12:48:56.751"></status>
</kw>
<msg timestamp="20170725 12:48:56.835" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:56.835" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 12:13:24 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170725 12:48:56.835" starttime="20170725 12:48:56.726"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:48:56.835" level="INFO">${stdout} = Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 12:13:24 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170725 12:48:56.835" starttime="20170725 12:48:56.835"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:48:56.836" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:48:56.836" starttime="20170725 12:48:56.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:56.843" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:56.843" starttime="20170725 12:48:56.842"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.843" starttime="20170725 12:48:56.842"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.843" starttime="20170725 12:48:56.836"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.843" starttime="20170725 12:48:56.717"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.843" starttime="20170725 12:48:56.717"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.843" starttime="20170725 12:48:56.424"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.844" starttime="20170725 12:48:56.422"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.844" starttime="20170725 12:48:56.422"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.844" starttime="20170725 12:48:54.807"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.844" starttime="20170725 12:48:54.806"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.844" starttime="20170725 12:48:54.786"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.844" starttime="20170725 12:48:54.784"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:56.844" starttime="20170725 12:48:54.783"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:56.846" starttime="20170725 12:48:56.846"></status>
</kw>
<msg timestamp="20170725 12:48:56.846" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:56.846" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:56.846" starttime="20170725 12:48:56.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:56.847" starttime="20170725 12:48:56.846"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:56.869" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170725 12:48:56.869" starttime="20170725 12:48:56.868"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:56.870" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170725 12:48:56.870" starttime="20170725 12:48:56.870"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:56.871" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_elog.txt</msg>
<status status="PASS" endtime="20170725 12:48:56.871" starttime="20170725 12:48:56.871"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:56.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:56.875" starttime="20170725 12:48:56.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:56.875" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:56.876" starttime="20170725 12:48:56.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:56.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:56.876" starttime="20170725 12:48:56.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:56.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:56.877" starttime="20170725 12:48:56.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.138" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:57.138" starttime="20170725 12:48:56.878"></status>
</kw>
<msg timestamp="20170725 12:48:57.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:57.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.139" starttime="20170725 12:48:56.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.139" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.139" starttime="20170725 12:48:57.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.140" starttime="20170725 12:48:57.140"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.140" starttime="20170725 12:48:56.874"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.140" starttime="20170725 12:48:56.873"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.141" starttime="20170725 12:48:56.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:57.141" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:57.141" starttime="20170725 12:48:57.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:57.142" starttime="20170725 12:48:57.141"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:57.207" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:57.208" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.208" starttime="20170725 12:48:57.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:57.208" starttime="20170725 12:48:57.208"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:57.209" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:57.209" starttime="20170725 12:48:57.209"></status>
</kw>
<msg timestamp="20170725 12:48:57.209" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.209" starttime="20170725 12:48:56.871"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 12:48:57.210" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 12:48:57.210" starttime="20170725 12:48:57.210"></status>
</kw>
<msg timestamp="20170725 12:48:57.210" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:48:57.211" starttime="20170725 12:48:57.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 12:48:57.211" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 12:48:57.212" starttime="20170725 12:48:57.211"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.212" starttime="20170725 12:48:57.211"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.212" starttime="20170725 12:48:56.870"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:57.212" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170725 12:48:57.213" starttime="20170725 12:48:57.212"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:57.215" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:57.216" starttime="20170725 12:48:57.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:57.216" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:57.216" starttime="20170725 12:48:57.216"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:57.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:57.217" starttime="20170725 12:48:57.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:57.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:57.218" starttime="20170725 12:48:57.217"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:57.406" starttime="20170725 12:48:57.218"></status>
</kw>
<msg timestamp="20170725 12:48:57.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:57.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.406" starttime="20170725 12:48:57.218"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.407" starttime="20170725 12:48:57.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.408" starttime="20170725 12:48:57.407"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.408" starttime="20170725 12:48:57.214"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.408" starttime="20170725 12:48:57.214"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.408" starttime="20170725 12:48:57.213"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:57.409" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:57.409" starttime="20170725 12:48:57.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:57.409" starttime="20170725 12:48:57.409"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:57.581" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:57.582" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.582" starttime="20170725 12:48:57.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:57.583" starttime="20170725 12:48:57.582"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:57.583" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:57.583" starttime="20170725 12:48:57.583"></status>
</kw>
<msg timestamp="20170725 12:48:57.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.583" starttime="20170725 12:48:57.213"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.584" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.584" starttime="20170725 12:48:57.584"></status>
</kw>
<msg timestamp="20170725 12:48:57.585" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:57.585" starttime="20170725 12:48:57.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:57.585" starttime="20170725 12:48:57.585"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 12:48:57.586" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:57.586" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 12:48:57.586" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170725 12:48:57.586" starttime="20170725 12:48:57.585"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.588" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:57.588" starttime="20170725 12:48:57.587"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.588" starttime="20170725 12:48:57.586"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.588" starttime="20170725 12:48:57.212"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:57.589" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170725 12:48:57.589" starttime="20170725 12:48:57.588"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:57.591" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:57.592" starttime="20170725 12:48:57.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:57.592" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:57.593" starttime="20170725 12:48:57.592"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:57.593" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:57.593" starttime="20170725 12:48:57.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:57.594" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:57.594" starttime="20170725 12:48:57.593"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:57.808" starttime="20170725 12:48:57.595"></status>
</kw>
<msg timestamp="20170725 12:48:57.808" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:57.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.809" starttime="20170725 12:48:57.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.809" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.809" starttime="20170725 12:48:57.809"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:57.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:57.810" starttime="20170725 12:48:57.810"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.810" starttime="20170725 12:48:57.591"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.810" starttime="20170725 12:48:57.590"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:57.811" starttime="20170725 12:48:57.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:57.811" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:57.811" starttime="20170725 12:48:57.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:57.812" starttime="20170725 12:48:57.812"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:58.012" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:58.013" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.013" starttime="20170725 12:48:57.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.014" starttime="20170725 12:48:58.013"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:58.014" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:58.014" starttime="20170725 12:48:58.014"></status>
</kw>
<msg timestamp="20170725 12:48:58.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.014" starttime="20170725 12:48:57.589"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.015" starttime="20170725 12:48:58.015"></status>
</kw>
<msg timestamp="20170725 12:48:58.015" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:48:58.016" starttime="20170725 12:48:58.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.016" starttime="20170725 12:48:58.016"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 12:48:58.017" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:48:58.017" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 12:48:58.017" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170725 12:48:58.017" starttime="20170725 12:48:58.016"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.019" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:48:58.019" starttime="20170725 12:48:58.018"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.019" starttime="20170725 12:48:58.018"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.019" starttime="20170725 12:48:57.588"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:58.020" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_led.txt</msg>
<status status="PASS" endtime="20170725 12:48:58.020" starttime="20170725 12:48:58.019"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:58.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:58.023" starttime="20170725 12:48:58.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:58.024" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:58.024" starttime="20170725 12:48:58.023"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:58.024" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:58.024" starttime="20170725 12:48:58.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:58.025" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:58.025" starttime="20170725 12:48:58.025"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.305" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:58.305" starttime="20170725 12:48:58.026"></status>
</kw>
<msg timestamp="20170725 12:48:58.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:58.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.306" starttime="20170725 12:48:58.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.306" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.306" starttime="20170725 12:48:58.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.307" starttime="20170725 12:48:58.307"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.307" starttime="20170725 12:48:58.022"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.307" starttime="20170725 12:48:58.022"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.307" starttime="20170725 12:48:58.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:58.308" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:58.308" starttime="20170725 12:48:58.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.309" starttime="20170725 12:48:58.308"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:58.395" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:58.395" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.395" starttime="20170725 12:48:58.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.395" starttime="20170725 12:48:58.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:58.396" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:58.396" starttime="20170725 12:48:58.396"></status>
</kw>
<msg timestamp="20170725 12:48:58.396" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.396" starttime="20170725 12:48:58.020"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 12:48:58.398" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 12:48:58.398" starttime="20170725 12:48:58.397"></status>
</kw>
<msg timestamp="20170725 12:48:58.398" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:48:58.398" starttime="20170725 12:48:58.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 12:48:58.399" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 12:48:58.399" starttime="20170725 12:48:58.399"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.399" starttime="20170725 12:48:58.398"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.399" starttime="20170725 12:48:58.019"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:58.400" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170725 12:48:58.400" starttime="20170725 12:48:58.399"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:48:58.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:48:58.403" starttime="20170725 12:48:58.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:48:58.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:48:58.403" starttime="20170725 12:48:58.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:48:58.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:48:58.404" starttime="20170725 12:48:58.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:48:58.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:48:58.405" starttime="20170725 12:48:58.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:48:58.598" starttime="20170725 12:48:58.405"></status>
</kw>
<msg timestamp="20170725 12:48:58.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:58.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.598" starttime="20170725 12:48:58.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.599" starttime="20170725 12:48:58.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.599" starttime="20170725 12:48:58.599"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.599" starttime="20170725 12:48:58.402"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.600" starttime="20170725 12:48:58.401"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.600" starttime="20170725 12:48:58.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:48:58.600" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170725 12:48:58.600" starttime="20170725 12:48:58.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.601" starttime="20170725 12:48:58.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:48:58.643" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:48:58.643" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.643" starttime="20170725 12:48:58.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.644" starttime="20170725 12:48:58.644"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:48:58.645" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:48:58.645" starttime="20170725 12:48:58.644"></status>
</kw>
<msg timestamp="20170725 12:48:58.645" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:48:58.645" starttime="20170725 12:48:58.400"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:48:58.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 12:48:58.646" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 12:48:58.646" starttime="20170725 12:48:58.646"></status>
</kw>
<msg timestamp="20170725 12:48:58.646" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:48:58.646" starttime="20170725 12:48:58.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 12:48:58.647" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:58.647"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:58.647"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:58.399"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.870"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.869"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.869"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.869"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.867"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.847"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.844"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:58.648" starttime="20170725 12:48:56.844"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.650" starttime="20170725 12:48:58.650"></status>
</kw>
<msg timestamp="20170725 12:48:58.650" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:58.650" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:58.650" starttime="20170725 12:48:58.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.651" starttime="20170725 12:48:58.651"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 12:48:58.700" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:58.701" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170725 12:48:58.774" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170725 12:48:58.789" level="INFO">${core_files} = None</msg>
<msg timestamp="20170725 12:48:58.789" level="INFO">${stderr} = None</msg>
<msg timestamp="20170725 12:48:58.789" level="INFO">${rc} = None</msg>
<msg timestamp="20170725 12:48:58.789" level="FAIL">#(UTC) 2017/07/25 12:48:58.787911 -    4.038660 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170725 12:48:58.789" starttime="20170725 12:48:58.670"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170725 12:48:58.790" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170725 12:48:58.790" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170725 12:48:58.790" starttime="20170725 12:48:58.790"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:58.804" starttime="20170725 12:48:58.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:59.539" starttime="20170725 12:48:58.805"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:59.539" starttime="20170725 12:48:58.805"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:59.539" starttime="20170725 12:48:58.803"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:59.539" starttime="20170725 12:48:58.791"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170725 12:48:59.539" starttime="20170725 12:48:59.539"></status>
</kw>
<status status="FAIL" endtime="20170725 12:48:59.540" starttime="20170725 12:48:58.670"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:59.540" starttime="20170725 12:48:58.651"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:59.540" starttime="20170725 12:48:58.649"></status>
</kw>
<status status="PASS" endtime="20170725 12:48:59.540" starttime="20170725 12:48:58.648"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:59.542" starttime="20170725 12:48:59.542"></status>
</kw>
<msg timestamp="20170725 12:48:59.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:48:59.542" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:48:59.542" starttime="20170725 12:48:59.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:59.543" starttime="20170725 12:48:59.542"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 12:48:59.564" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170725 12:48:59.564" starttime="20170725 12:48:59.564"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 12:48:59.566" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170725 12:48:59.566" starttime="20170725 12:48:59.565"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:48:59.567" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170725 12:48:59.567" starttime="20170725 12:48:59.566"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:48:59.569" starttime="20170725 12:48:59.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:48:59.569" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:48:59.569" starttime="20170725 12:48:59.569"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:48:59.633" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:48:59.634" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170725 12:49:00.155" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:49:00.156" starttime="20170725 12:48:59.596"></status>
</kw>
<msg timestamp="20170725 12:49:00.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:00.157" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Apr 20 17:50 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Apr 20 17:50 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170725 12:49:00.157" starttime="20170725 12:48:59.570"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:49:00.158" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Apr 20 17:50 0 -&gt; /dev/null
lrwx------    1 root     root            64 Apr 20 17:50 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170725 12:49:00.158" starttime="20170725 12:49:00.157"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:49:00.158" level="INFO">${stderr} = ls: /proc/1521/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170725 12:49:00.159" starttime="20170725 12:49:00.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:49:00.167" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:49:00.167" starttime="20170725 12:49:00.166"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.167" starttime="20170725 12:49:00.164"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.167" starttime="20170725 12:49:00.159"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.167" starttime="20170725 12:48:59.567"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.167" starttime="20170725 12:48:59.566"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:49:00.168" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170725 12:49:00.168" starttime="20170725 12:49:00.167"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:00.169" starttime="20170725 12:49:00.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:49:00.170" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:49:00.170" starttime="20170725 12:49:00.170"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:49:00.233" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:49:00.234" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170725 12:49:00.324" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:49:00.324" starttime="20170725 12:49:00.195"></status>
</kw>
<msg timestamp="20170725 12:49:00.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:00.324" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170725 12:49:00.324" starttime="20170725 12:49:00.170"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:49:00.325" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170725 12:49:00.325" starttime="20170725 12:49:00.325"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:49:00.326" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:49:00.326" starttime="20170725 12:49:00.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:49:00.333" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:49:00.333" starttime="20170725 12:49:00.332"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.333" starttime="20170725 12:49:00.332"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.333" starttime="20170725 12:49:00.326"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.333" starttime="20170725 12:49:00.168"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.333" starttime="20170725 12:49:00.167"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:49:00.334" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170725 12:49:00.334" starttime="20170725 12:49:00.334"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:00.335" starttime="20170725 12:49:00.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:49:00.336" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:49:00.336" starttime="20170725 12:49:00.336"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:49:00.399" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:49:00.400" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170725 12:49:00.447" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:49:00.447" starttime="20170725 12:49:00.364"></status>
</kw>
<msg timestamp="20170725 12:49:00.447" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:00.447" level="INFO">${ret_values} = (u'MemTotal:         432280 kB\nMemFree:          275540 kB\nMemAvailable:     322384 kB\nBuffers:           11320 kB\nCached:            52212 kB\nSwapCached:            0 kB\nActive:           10426...</msg>
<status status="PASS" endtime="20170725 12:49:00.447" starttime="20170725 12:49:00.336"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:49:00.448" level="INFO">${stdout} = MemTotal:         432280 kB
MemFree:          275540 kB
MemAvailable:     322384 kB
Buffers:           11320 kB
Cached:            52212 kB
SwapCached:            0 kB
Active:           104268 kB
Inac...</msg>
<status status="PASS" endtime="20170725 12:49:00.448" starttime="20170725 12:49:00.447"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:49:00.448" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:49:00.448" starttime="20170725 12:49:00.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:49:00.456" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:49:00.456" starttime="20170725 12:49:00.455"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.456" starttime="20170725 12:49:00.454"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.456" starttime="20170725 12:49:00.449"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.456" starttime="20170725 12:49:00.334"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.456" starttime="20170725 12:49:00.333"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:49:00.457" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170725 12:49:00.457" starttime="20170725 12:49:00.457"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:00.458" starttime="20170725 12:49:00.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:49:00.459" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:49:00.459" starttime="20170725 12:49:00.459"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:49:00.523" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:49:00.524" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170725 12:49:00.792" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:49:00.792" starttime="20170725 12:49:00.486"></status>
</kw>
<msg timestamp="20170725 12:49:00.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:00.793" level="INFO">${ret_values} = (u'Mem: 156740K used, 275540K free, 14656K shrd, 11320K buff, 52212K cached\nCPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.65 0.61 0.66 1/147 1524\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170725 12:49:00.793" starttime="20170725 12:49:00.459"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:49:00.793" level="INFO">${stdout} = Mem: 156740K used, 275540K free, 14656K shrd, 11320K buff, 52212K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.65 0.61 0.66 1/147 1524
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170725 12:49:00.793" starttime="20170725 12:49:00.793"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:49:00.794" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:49:00.794" starttime="20170725 12:49:00.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:49:00.801" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:49:00.801" starttime="20170725 12:49:00.801"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.801" starttime="20170725 12:49:00.800"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.802" starttime="20170725 12:49:00.794"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.802" starttime="20170725 12:49:00.457"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.802" starttime="20170725 12:49:00.456"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:49:00.802" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170725 12:49:00.802" starttime="20170725 12:49:00.802"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:00.804" starttime="20170725 12:49:00.803"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:49:00.805" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:49:00.805" starttime="20170725 12:49:00.804"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:49:00.868" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:49:00.868" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170725 12:49:00.946" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:49:00.946" starttime="20170725 12:49:00.830"></status>
</kw>
<msg timestamp="20170725 12:49:00.946" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:00.946" level="INFO">${ret_values} = (u'[    0.240000] TCP bind hash table entries: 4096 (order: 2, 16384 bytes)\n[    0.240000] TCP: Hash tables configured (established 4096 bind 4096)\n[    0.240000] UDP hash table entries: 256 (order:...</msg>
<status status="PASS" endtime="20170725 12:49:00.946" starttime="20170725 12:49:00.805"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:49:00.947" level="INFO">${stdout} = [    0.240000] TCP bind hash table entries: 4096 (order: 2, 16384 bytes)
[    0.240000] TCP: Hash tables configured (established 4096 bind 4096)
[    0.240000] UDP hash table entries: 256 (order: 0, 4...</msg>
<status status="PASS" endtime="20170725 12:49:00.947" starttime="20170725 12:49:00.947"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:49:00.948" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:49:00.948" starttime="20170725 12:49:00.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:49:00.955" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:49:00.955" starttime="20170725 12:49:00.955"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.955" starttime="20170725 12:49:00.953"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.955" starttime="20170725 12:49:00.948"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.956" starttime="20170725 12:49:00.803"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:00.956" starttime="20170725 12:49:00.802"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 12:49:00.956" level="INFO">${logpath} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170725 12:49:00.956" starttime="20170725 12:49:00.956"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:00.958" starttime="20170725 12:49:00.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 12:49:00.959" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170725 12:49:00.959" starttime="20170725 12:49:00.958"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 12:49:01.020" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 12:49:01.023" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170725 12:49:03.145" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 12:49:03.147" starttime="20170725 12:49:00.985"></status>
</kw>
<msg timestamp="20170725 12:49:03.147" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:03.151" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-04-20 17:29:22 UTC, end at Thu 2017-04-20 17:50:28 UTC. --\nApr 20 17:29:22 witherspoon kernel: Booting Linux on physical CPU 0x0\nApr 20 17:29:22 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170725 12:49:03.151" starttime="20170725 12:49:00.959"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 12:49:03.152" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:22 UTC, end at Thu 2017-04-20 17:50:28 UTC. --
Apr 20 17:29:22 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:22 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170725 12:49:03.152" starttime="20170725 12:49:03.151"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 12:49:03.153" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 12:49:03.153" starttime="20170725 12:49:03.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/20170725124854573763_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:49:03.166" starttime="20170725 12:49:03.161"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:49:03.159"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:49:03.153"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:49:00.957"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:49:00.956"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:48:59.566"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:48:59.565"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:48:59.565"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:48:59.564"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:48:59.563"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:48:59.543"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.167" starttime="20170725 12:48:59.540"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.168" starttime="20170725 12:48:59.540"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.169" starttime="20170725 12:49:03.169"></status>
</kw>
<msg timestamp="20170725 12:49:03.170" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:03.170" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:49:03.170" starttime="20170725 12:49:03.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.170" starttime="20170725 12:49:03.170"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:49:03.196" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:49:03.197" starttime="20170725 12:49:03.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:49:03.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:49:03.198" starttime="20170725 12:49:03.198"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:49:03.199" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:49:03.199" starttime="20170725 12:49:03.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:49:03.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:49:03.200" starttime="20170725 12:49:03.199"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.391" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:49:03.391" starttime="20170725 12:49:03.201"></status>
</kw>
<msg timestamp="20170725 12:49:03.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:03.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.391" starttime="20170725 12:49:03.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.392" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.392" starttime="20170725 12:49:03.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.393" starttime="20170725 12:49:03.393"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.393" starttime="20170725 12:49:03.195"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.393" starttime="20170725 12:49:03.194"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.393" starttime="20170725 12:49:03.193"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:49:03.394" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170725 12:49:03.394" starttime="20170725 12:49:03.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.395" starttime="20170725 12:49:03.394"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:49:03.437" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170725 12:49:03.437" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.437" starttime="20170725 12:49:03.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.438" starttime="20170725 12:49:03.437"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:49:03.438" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:49:03.438" starttime="20170725 12:49:03.438"></status>
</kw>
<msg timestamp="20170725 12:49:03.438" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.438" starttime="20170725 12:49:03.191"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 12:49:03.440" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 12:49:03.440" starttime="20170725 12:49:03.439"></status>
</kw>
<msg timestamp="20170725 12:49:03.440" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 12:49:03.440" starttime="20170725 12:49:03.439"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170725 12:49:03.440" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 12:49:03.441" starttime="20170725 12:49:03.440"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.441" starttime="20170725 12:49:03.191"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.441" starttime="20170725 12:49:03.170"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.441" starttime="20170725 12:49:03.168"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.441" starttime="20170725 12:49:03.168"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.443" starttime="20170725 12:49:03.443"></status>
</kw>
<msg timestamp="20170725 12:49:03.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:03.443" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 12:49:03.443" starttime="20170725 12:49:03.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.444" starttime="20170725 12:49:03.443"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170725 12:49:03.465" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 12:49:03.465" starttime="20170725 12:49:03.465"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.465" starttime="20170725 12:49:03.464"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.465" starttime="20170725 12:49:03.444"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.466" starttime="20170725 12:49:03.441"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.466" starttime="20170725 12:49:03.441"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.466" starttime="20170725 12:48:54.783"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.466" starttime="20170725 12:48:54.781"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.466" starttime="20170725 12:48:54.781"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.466" starttime="20170725 12:48:54.781"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170725 12:49:03.477" starttime="20170725 12:49:03.477"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.477" starttime="20170725 12:49:03.466"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.477" starttime="20170725 12:48:54.780"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.477" starttime="20170725 12:48:51.530"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.478" starttime="20170725 12:48:51.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:49:03.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:49:03.485" starttime="20170725 12:49:03.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:49:03.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:49:03.485" starttime="20170725 12:49:03.485"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:49:03.486" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:49:03.486" starttime="20170725 12:49:03.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:49:03.487" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:49:03.487" starttime="20170725 12:49:03.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.743" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:49:03.743" starttime="20170725 12:49:03.488"></status>
</kw>
<msg timestamp="20170725 12:49:03.744" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:03.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.744" starttime="20170725 12:49:03.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.744" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.744" starttime="20170725 12:49:03.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.745" starttime="20170725 12:49:03.745"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.745" starttime="20170725 12:49:03.483"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.746" starttime="20170725 12:49:03.483"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.746" starttime="20170725 12:49:03.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:49:03.747" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:49:03.747" starttime="20170725 12:49:03.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.748" starttime="20170725 12:49:03.747"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:49:03.810" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:49:03.810" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.810" starttime="20170725 12:49:03.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.811" starttime="20170725 12:49:03.811"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:49:03.811" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:49:03.812" starttime="20170725 12:49:03.811"></status>
</kw>
<msg timestamp="20170725 12:49:03.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.812" starttime="20170725 12:49:03.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:03.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:03.813" starttime="20170725 12:49:03.812"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:49:03.813" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:49:03.813" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:49:03.813" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status status="PASS" endtime="20170725 12:49:03.813" starttime="20170725 12:49:03.813"></status>
</kw>
<msg timestamp="20170725 12:49:03.814" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170725 12:49:03.814" starttime="20170725 12:49:03.480"></status>
</kw>
<msg timestamp="20170725 12:49:03.814" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170725 12:49:03.814" starttime="20170725 12:49:03.480"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:03.815" starttime="20170725 12:49:03.815"></status>
</kw>
<msg timestamp="20170725 12:49:03.815" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 12:49:03.815" starttime="20170725 12:49:03.814"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:03.815" starttime="20170725 12:49:03.479"></status>
</kw>
<msg timestamp="20170725 12:49:03.815" level="INFO">${resp} = True</msg>
<status status="PASS" endtime="20170725 12:49:03.815" starttime="20170725 12:49:03.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170725 12:49:03.817" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170725 12:49:03.818" starttime="20170725 12:49:03.817"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:49:03.819" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170725 12:49:03.819" starttime="20170725 12:49:03.819"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:49:03.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:49:03.822" starttime="20170725 12:49:03.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:49:03.823" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:49:03.823" starttime="20170725 12:49:03.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:49:03.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:49:03.824" starttime="20170725 12:49:03.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:49:03.824" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:49:03.824" starttime="20170725 12:49:03.824"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:49:04.039" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:49:04.039" starttime="20170725 12:49:03.825"></status>
</kw>
<msg timestamp="20170725 12:49:04.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:04.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:04.039" starttime="20170725 12:49:03.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:49:04.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:04.040" starttime="20170725 12:49:04.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:04.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:04.041" starttime="20170725 12:49:04.040"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.041" starttime="20170725 12:49:03.821"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.041" starttime="20170725 12:49:03.821"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.041" starttime="20170725 12:49:03.820"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:49:04.042" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170725 12:49:04.042" starttime="20170725 12:49:04.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:49:04.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:49:04.042" starttime="20170725 12:49:04.042"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:04.043" starttime="20170725 12:49:04.042"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:49:04.044" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170725 12:49:04.044" starttime="20170725 12:49:04.044"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:49:04.045" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 12:49:04.046" starttime="20170725 12:49:04.045"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.046" starttime="20170725 12:49:04.045"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.046" starttime="20170725 12:49:04.043"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:49:04.319" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170725 12:49:04.319" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:04.319" starttime="20170725 12:49:04.047"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 12:49:04.320" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:49:04.320" starttime="20170725 12:49:04.320"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 12:49:04.321" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 12:49:04.322" starttime="20170725 12:49:04.321"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.322" starttime="20170725 12:49:04.321"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.322" starttime="20170725 12:49:04.319"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:49:04.323" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:49:04.323" starttime="20170725 12:49:04.323"></status>
</kw>
<msg timestamp="20170725 12:49:04.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:04.323" starttime="20170725 12:49:03.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:04.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:04.324" starttime="20170725 12:49:04.323"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170725 12:49:04.324" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:49:04.324" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:49:04.325" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170725 12:49:04.325" starttime="20170725 12:49:04.324"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:04.325" starttime="20170725 12:49:03.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:04.325" starttime="20170725 12:49:04.325"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 12:49:04.330" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 12:49:04.331" starttime="20170725 12:49:04.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 12:49:04.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 12:49:04.332" starttime="20170725 12:49:04.331"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 12:49:04.333" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 12:49:04.333" starttime="20170725 12:49:04.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 12:49:04.334" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 12:49:04.334" starttime="20170725 12:49:04.333"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 12:49:06.067" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 12:49:06.067" starttime="20170725 12:49:04.335"></status>
</kw>
<msg timestamp="20170725 12:49:06.067" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 12:49:06.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:06.067" starttime="20170725 12:49:04.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 12:49:06.068" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:06.068" starttime="20170725 12:49:06.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:06.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:06.069" starttime="20170725 12:49:06.068"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:06.069" starttime="20170725 12:49:04.329"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:06.069" starttime="20170725 12:49:04.329"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:06.069" starttime="20170725 12:49:04.328"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 12:49:06.070" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 12:49:06.070" starttime="20170725 12:49:06.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:06.070" starttime="20170725 12:49:06.070"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 12:49:08.485" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 12:49:08.485" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:08.485" starttime="20170725 12:49:06.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:08.486" starttime="20170725 12:49:08.485"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 12:49:08.486" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 12:49:08.486" starttime="20170725 12:49:08.486"></status>
</kw>
<msg timestamp="20170725 12:49:08.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 12:49:08.486" starttime="20170725 12:49:04.328"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 12:49:08.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 12:49:08.487" starttime="20170725 12:49:08.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 12:49:08.488" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 12:49:08.488" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 12:49:08.488" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 12:49:08.488" starttime="20170725 12:49:08.487"></status>
</kw>
<msg timestamp="20170725 12:49:08.488" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 12:49:08.488" starttime="20170725 12:49:04.327"></status>
</kw>
<msg timestamp="20170725 12:49:08.489" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170725 12:49:08.489" starttime="20170725 12:49:04.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:08.489" starttime="20170725 12:49:08.489"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.489" starttime="20170725 12:49:04.326"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.490" starttime="20170725 12:49:04.326"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.490" starttime="20170725 12:49:03.817"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170725 12:49:08.490" level="INFO">HOST is recovered from quiesced state</msg>
<status status="PASS" endtime="20170725 12:49:08.490" starttime="20170725 12:49:08.490"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.490" starttime="20170725 12:49:03.816"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.490" starttime="20170725 12:49:03.816"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.490" starttime="20170725 12:49:03.478"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.490" starttime="20170725 12:49:03.478"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170725 12:49:08.491" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170725 12:49:08.492" starttime="20170725 12:49:08.491"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170725 12:49:08.492" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170725124854573763_TestBiosUpdate/20170725124854573763_HostBIOSPowerOn/</msg>
<status status="PASS" endtime="20170725 12:49:08.492" starttime="20170725 12:49:08.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:08.493" starttime="20170725 12:49:08.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:08.493" starttime="20170725 12:49:08.493"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170725 12:49:08.494" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170725 12:49:08.494" starttime="20170725 12:49:08.494"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170725 12:49:08.495" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170725 12:49:08.495" starttime="20170725 12:49:08.495"></status>
</kw>
<msg timestamp="20170725 12:49:08.495" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170725 12:49:08.495" starttime="20170725 12:49:08.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:08.496" starttime="20170725 12:49:08.495"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170725 12:49:08.496" starttime="20170725 12:49:08.496"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:49:08.497" level="INFO">${cur_time} = 2017-07-25 12:49:08:497329</msg>
<status status="PASS" endtime="20170725 12:49:08.498" starttime="20170725 12:49:08.497"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 12:49:08.498" level="INFO">${cur_time} = 20170725124908497329</msg>
<status status="PASS" endtime="20170725 12:49:08.498" starttime="20170725 12:49:08.498"></status>
</kw>
<msg timestamp="20170725 12:49:08.498" level="INFO">${cur_time} = 20170725124908497329</msg>
<status status="PASS" endtime="20170725 12:49:08.498" starttime="20170725 12:49:08.497"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170725 12:49:08.499" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 12:49:08.499" starttime="20170725 12:49:08.499"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.499" starttime="20170725 12:49:08.491"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.500" starttime="20170725 12:48:51.072"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.500" starttime="20170725 12:48:51.061"></status>
</kw>
<status status="PASS" endtime="20170725 12:49:08.500" starttime="20170725 12:48:51.053"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170725 12:49:08.500" critical="yes" starttime="20170725 12:34:10.193">#(UTC) 2017/07/25 12:48:50.917498 -    2.324035 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170725 12:49:08.502" starttime="20170725 12:29:53.318"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">BIOS_Code_Update</stat>
<stat fail="1" pass="0">Host_BIOS_Power_On</stat>
<stat fail="0" pass="1">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
