<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170809 16:23:15.412" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/7737/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:23:15.976" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170809 16:23:15.976" starttime="20170809 16:23:15.976" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:23:15.976" level="INFO">${has_host} = False</msg>
<status endtime="20170809 16:23:15.976" starttime="20170809 16:23:15.975" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170809 16:23:15.977" starttime="20170809 16:23:15.977" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:15.977" starttime="20170809 16:23:15.977" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170809 16:23:15.979" level="INFO">${port_num} = 22</msg>
<status endtime="20170809 16:23:15.979" starttime="20170809 16:23:15.979" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170809 16:23:15.979" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170809 16:23:15.979" starttime="20170809 16:23:15.979" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170809 16:23:15.980" level="INFO">${https_num} = 443</msg>
<status endtime="20170809 16:23:15.980" starttime="20170809 16:23:15.980" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170809 16:23:15.981" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170809 16:23:15.981" starttime="20170809 16:23:15.980" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:15.981" starttime="20170809 16:23:15.978" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:15.981" starttime="20170809 16:23:15.978" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:23:15.982" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170809 16:23:15.982" starttime="20170809 16:23:15.981" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:23:15.982" level="INFO">${has_port} = False</msg>
<status endtime="20170809 16:23:15.982" starttime="20170809 16:23:15.981" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170809 16:23:15.983" starttime="20170809 16:23:15.983" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170809 16:23:15.984" starttime="20170809 16:23:15.984" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:15.984" starttime="20170809 16:23:15.983" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:15.984" starttime="20170809 16:23:15.982" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:23:15.985" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:23:17.651" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170809 16:23:17.652" starttime="20170809 16:23:15.984" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:17.652" starttime="20170809 16:23:15.975" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:23:17.653" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170809 16:23:17.730" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:23:17.730" level="INFO">${output} = VERSION_ID="v1.99.8-202-gcd98f02"</msg>
<msg timestamp="20170809 16:23:17.730" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:23:17.730" starttime="20170809 16:23:17.653" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:23:17.731" level="INFO">Length is 0</msg>
<status endtime="20170809 16:23:17.731" starttime="20170809 16:23:17.730" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170809 16:23:17.731" level="INFO">VERSION_ID="v1.99.8-202-gcd98f02"</msg>
<status endtime="20170809 16:23:17.731" starttime="20170809 16:23:17.731" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:17.731" starttime="20170809 16:23:17.652" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:17.731" starttime="20170809 16:23:17.652" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:23:17.733" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170809 16:23:17.950" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170809 16:23:17.950" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170809 16:23:17.950" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170809 16:23:17.950" starttime="20170809 16:23:17.733" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:23:17.951" level="INFO">Length is 81</msg>
<msg timestamp="20170809 16:23:17.951" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170809 16:23:17.951" starttime="20170809 16:23:17.951" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:17.951" starttime="20170809 16:23:17.732" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:17.951" starttime="20170809 16:23:17.732" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:17.951" starttime="20170809 16:23:17.732" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 16:23:18.331" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:23:18.331" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:23:19.104" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170809 16:23:19.105" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170809 16:23:19.171" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:23:19.182" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170809 16:23:19.182" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 16:23:19.182" level="INFO">${rc} = 0</msg>
<status endtime="20170809 16:23:19.182" starttime="20170809 16:23:17.953" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:23:19.183" level="INFO">Length is 0</msg>
<status endtime="20170809 16:23:19.183" starttime="20170809 16:23:19.182" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 16:23:19.183" level="INFO">Length is 11</msg>
<status endtime="20170809 16:23:19.183" starttime="20170809 16:23:19.183" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:19.183" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170809 16:23:19.183" starttime="20170809 16:23:17.952" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 16:23:19.184" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170809 16:23:19.184" starttime="20170809 16:23:19.184" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:19.184" starttime="20170809 16:23:17.952" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:19.184" starttime="20170809 16:23:17.952" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:23:19.187" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170809 16:23:19.187" starttime="20170809 16:23:19.186" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:23:19.187" level="INFO">${has_host} = False</msg>
<status endtime="20170809 16:23:19.187" starttime="20170809 16:23:19.186" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170809 16:23:19.188" starttime="20170809 16:23:19.188" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:19.188" starttime="20170809 16:23:19.187" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170809 16:23:19.189" level="INFO">${port_num} = 22</msg>
<status endtime="20170809 16:23:19.189" starttime="20170809 16:23:19.189" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170809 16:23:19.190" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170809 16:23:19.190" starttime="20170809 16:23:19.190" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170809 16:23:19.190" level="INFO">${https_num} = 443</msg>
<status endtime="20170809 16:23:19.190" starttime="20170809 16:23:19.190" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170809 16:23:19.191" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170809 16:23:19.191" starttime="20170809 16:23:19.191" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:19.191" starttime="20170809 16:23:19.189" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:19.191" starttime="20170809 16:23:19.188" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:23:19.192" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170809 16:23:19.192" starttime="20170809 16:23:19.192" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:23:19.192" level="INFO">${has_port} = False</msg>
<status endtime="20170809 16:23:19.192" starttime="20170809 16:23:19.192" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170809 16:23:19.194" starttime="20170809 16:23:19.194" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170809 16:23:19.195" starttime="20170809 16:23:19.194" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:19.195" starttime="20170809 16:23:19.193" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:19.195" starttime="20170809 16:23:19.193" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:23:19.195" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:23:20.880" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170809 16:23:20.880" starttime="20170809 16:23:19.195" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:20.881" starttime="20170809 16:23:19.185" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:23:20.882" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170809 16:23:20.959" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:23:20.960" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170809 16:23:20.960" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:23:20.960" starttime="20170809 16:23:20.881" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:23:20.960" level="INFO">Length is 0</msg>
<status endtime="20170809 16:23:20.960" starttime="20170809 16:23:20.960" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:20.961" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170809 16:23:20.961" starttime="20170809 16:23:20.881" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170809 16:23:20.961" starttime="20170809 16:23:20.961" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:20.961" starttime="20170809 16:23:19.185" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:20.961" starttime="20170809 16:23:19.184" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170809 16:23:20.962" starttime="20170809 16:23:20.962" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:20.962" starttime="20170809 16:23:15.974" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/7737/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/7737/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:21.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:21.053" starttime="20170809 16:23:21.052" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:21.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:21.054" starttime="20170809 16:23:21.053" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:21.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:21.055" starttime="20170809 16:23:21.054" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:21.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:21.055" starttime="20170809 16:23:21.055" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:21.266" starttime="20170809 16:23:21.056" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:21.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:21.266" starttime="20170809 16:23:21.056" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:21.267" starttime="20170809 16:23:21.267" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:21.268" starttime="20170809 16:23:21.267" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.268" starttime="20170809 16:23:21.052" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.268" starttime="20170809 16:23:21.052" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.268" starttime="20170809 16:23:21.051" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:21.273" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:21.273" starttime="20170809 16:23:21.272" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:21.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:21.274" starttime="20170809 16:23:21.273" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:21.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:21.274" starttime="20170809 16:23:21.274" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:21.275" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:21.275" starttime="20170809 16:23:21.275" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:21.532" starttime="20170809 16:23:21.276" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.533" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:21.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:21.533" starttime="20170809 16:23:21.275" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:21.533" starttime="20170809 16:23:21.533" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:21.534" starttime="20170809 16:23:21.534" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.534" starttime="20170809 16:23:21.272" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.534" starttime="20170809 16:23:21.272" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.535" starttime="20170809 16:23:21.271" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:21.535" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:23:21.535" starttime="20170809 16:23:21.535" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:21.537" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:21.537" starttime="20170809 16:23:21.537" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:21.538" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:21.538" starttime="20170809 16:23:21.538" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.538" starttime="20170809 16:23:21.537" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.539" starttime="20170809 16:23:21.536" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.539" starttime="20170809 16:23:21.535" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:21.627" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:21.627" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:21.627" starttime="20170809 16:23:21.539" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:21.629" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:21.629" starttime="20170809 16:23:21.628" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:21.630" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:21.630" starttime="20170809 16:23:21.629" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.630" starttime="20170809 16:23:21.629" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.630" starttime="20170809 16:23:21.628" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.630" starttime="20170809 16:23:21.627" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:21.630" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:21.630" starttime="20170809 16:23:21.630" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:21.631" starttime="20170809 16:23:21.270" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:21.631" starttime="20170809 16:23:21.631" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:21.632" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:21.632" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:21.632" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170809 16:23:21.632" starttime="20170809 16:23:21.632" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.633" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170809 16:23:21.633" starttime="20170809 16:23:21.270" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.633" level="INFO">${host_state} = Off</msg>
<status endtime="20170809 16:23:21.633" starttime="20170809 16:23:21.269" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170809 16:23:21.634" level="FAIL">Off != Quiesced</msg>
<status endtime="20170809 16:23:21.634" starttime="20170809 16:23:21.634" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:23:21.635" level="INFO">${status} = False</msg>
<status endtime="20170809 16:23:21.635" starttime="20170809 16:23:21.634" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.635" level="INFO">${status} = False</msg>
<status endtime="20170809 16:23:21.635" starttime="20170809 16:23:21.269" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170809 16:23:21.635" starttime="20170809 16:23:21.635" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170809 16:23:21.636" starttime="20170809 16:23:21.636" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 16:23:21.646" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170809 16:23:21.646" starttime="20170809 16:23:21.637" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 16:23:21.657" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170809 16:23:21.657" starttime="20170809 16:23:21.646" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:23:21.660" level="INFO">${cur_time} = 2017-08-09 16:23:21:659805</msg>
<status endtime="20170809 16:23:21.660" starttime="20170809 16:23:21.660" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:23:21.661" level="INFO">${cur_time} = 20170809162321659805</msg>
<status endtime="20170809 16:23:21.661" starttime="20170809 16:23:21.660" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.661" starttime="20170809 16:23:21.659" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.668" level="INFO">${FFDC_TIME} = 20170809162321659805</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 16:23:21.670" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170809 16:23:21.670" starttime="20170809 16:23:21.669" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 16:23:21.670" level="INFO">${suite_name} = 20170809162321659805_TestsSecurityTestSsl</msg>
<status endtime="20170809 16:23:21.670" starttime="20170809 16:23:21.670" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 16:23:21.671" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170809 16:23:21.671" starttime="20170809 16:23:21.670" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 16:23:21.671" level="INFO">${test_name} = 20170809162321659805_TestSSLConnection</msg>
<status endtime="20170809 16:23:21.671" starttime="20170809 16:23:21.671" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.672" starttime="20170809 16:23:21.669" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:21.672" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/7737/obmc-robot/logs/20170809162321659805_TestsSecurityTestSsl/20170809162321659805_TestSSLConnection/</msg>
<msg timestamp="20170809 16:23:21.676" level="INFO">${FFDC_PREFIX} = 20170809162321659805_</msg>
<status endtime="20170809 16:23:21.677" starttime="20170809 16:23:21.658" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.677" starttime="20170809 16:23:21.658" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170809 16:23:21.677" starttime="20170809 16:23:21.677" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:23:21.996" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs"&gt;/tmp/fspcibld/7737/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170809 16:23:21.997" starttime="20170809 16:23:21.678" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 16:23:21.998" level="FAIL">File '/tmp/fspcibld/7737/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170809 16:23:21.998" starttime="20170809 16:23:21.997" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:23:21.998" level="INFO">${exist} = False</msg>
<status endtime="20170809 16:23:21.998" starttime="20170809 16:23:21.997" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:23:21.999" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:23:21.999" starttime="20170809 16:23:21.999" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:21.999" starttime="20170809 16:23:21.998" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170809 16:23:22.000" starttime="20170809 16:23:22.000" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:23:22.002" level="INFO">${cur_time} = 2017-08-09 16:23:22:001852</msg>
<status endtime="20170809 16:23:22.002" starttime="20170809 16:23:22.002" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:23:22.003" level="INFO">${cur_time} = 20170809162322001852</msg>
<status endtime="20170809 16:23:22.003" starttime="20170809 16:23:22.003" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.003" level="INFO">${cur_time} = 20170809162322001852</msg>
<status endtime="20170809 16:23:22.003" starttime="20170809 16:23:22.000" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:23:22.004" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:23:22.004" starttime="20170809 16:23:22.004" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.004" starttime="20170809 16:23:21.636" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.005" starttime="20170809 16:23:21.268" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170809 16:23:22.005" starttime="20170809 16:23:21.050" critical="yes" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:22.006" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:22.006" starttime="20170809 16:23:22.006" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170809 16:23:22.006" starttime="20170809 16:23:20.964" status="PASS"></status>
</suite>
<status endtime="20170809 16:23:22.009" starttime="20170809 16:23:20.962" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/7737/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170809 16:23:22.051" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:23:22.051" starttime="20170809 16:23:22.050" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170809 16:23:22.051" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:23:22.051" starttime="20170809 16:23:22.051" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.052" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:23:22.052" starttime="20170809 16:23:22.050" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170809 16:23:22.054" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:23:22.054" starttime="20170809 16:23:22.054" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170809 16:23:22.055" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:23:22.055" starttime="20170809 16:23:22.054" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.055" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:23:22.055" starttime="20170809 16:23:22.053" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:23:22.056" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 16:23:22.056" starttime="20170809 16:23:22.055" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:23:22.056" starttime="20170809 16:23:22.056" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:23:22.062" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:23:22.065" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 16:23:22.065" level="INFO">${output} = /tmp/fspcibld/7737/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 16:23:22.065" starttime="20170809 16:23:22.056" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 16:23:22.068" starttime="20170809 16:23:22.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 16:23:22.069" starttime="20170809 16:23:22.068" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:23:22.070" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 16:23:22.070" starttime="20170809 16:23:22.069" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.071" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 16:23:22.071" starttime="20170809 16:23:22.055" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:23:22.072" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170809 16:23:22.072" starttime="20170809 16:23:22.071" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:23:22.073" starttime="20170809 16:23:22.072" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170809 16:23:22.076" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:23:22.096" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 16:23:22.096" level="INFO">${os_con_pid} = </msg>
<status endtime="20170809 16:23:22.096" starttime="20170809 16:23:22.073" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170809 16:23:22.110" starttime="20170809 16:23:22.106" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:23:22.111" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170809 16:23:22.111" starttime="20170809 16:23:22.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:23:22.112" starttime="20170809 16:23:22.111" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:23:22.112" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 16:23:22.112" level="INFO">${output} = None</msg>
<status endtime="20170809 16:23:22.113" starttime="20170809 16:23:22.112" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 16:23:22.113" starttime="20170809 16:23:22.113" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170809 16:23:22.116" level="FAIL">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170809 16:23:22.117" starttime="20170809 16:23:22.115" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:22.117" starttime="20170809 16:23:22.114" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.117" starttime="20170809 16:23:22.114" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:23:22.117" level="INFO">${output} = </msg>
<status endtime="20170809 16:23:22.117" starttime="20170809 16:23:22.117" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170809 16:23:22.118" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170809 16:23:22.118" starttime="20170809 16:23:22.118" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170809 16:23:22.178" starttime="20170809 16:23:22.119" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.179" level="INFO">${rc} = 1</msg>
<msg timestamp="20170809 16:23:22.179" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170809 16:23:22.179" starttime="20170809 16:23:22.118" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.179" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170809 16:23:22.180" starttime="20170809 16:23:22.052" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:23:22.181" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170809 16:23:22.182" starttime="20170809 16:23:22.181" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:23:22.183" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 16:23:22.183" starttime="20170809 16:23:22.182" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:23:22.183" starttime="20170809 16:23:22.183" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:23:22.187" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:23:22.189" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 16:23:22.189" level="INFO">${output} = /tmp/fspcibld/7737/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 16:23:22.190" starttime="20170809 16:23:22.183" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 16:23:22.192" starttime="20170809 16:23:22.192" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 16:23:22.193" starttime="20170809 16:23:22.193" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:23:22.194" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 16:23:22.194" starttime="20170809 16:23:22.194" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.195" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 16:23:22.195" starttime="20170809 16:23:22.182" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:23:22.196" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170809 16:23:22.196" starttime="20170809 16:23:22.195" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:23:22.196" starttime="20170809 16:23:22.196" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:23:22.199" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170809 16:23:22.203" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 16:23:22.204" level="INFO">${output} = </msg>
<status endtime="20170809 16:23:22.204" starttime="20170809 16:23:22.196" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170809 16:23:22.207" starttime="20170809 16:23:22.206" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.207" starttime="20170809 16:23:22.049" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170809 16:23:22.208" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 16:23:22.211" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170809 16:23:22.211" starttime="20170809 16:23:22.210" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:22.213" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170809 16:23:22.213" starttime="20170809 16:23:22.212" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:22.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:22.219" starttime="20170809 16:23:22.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:22.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:22.220" starttime="20170809 16:23:22.219" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:22.221" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:22.221" starttime="20170809 16:23:22.221" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:22.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:22.222" starttime="20170809 16:23:22.221" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:22.728" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:22.728" starttime="20170809 16:23:22.222" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:22.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:22.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:22.728" starttime="20170809 16:23:22.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:22.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:22.729" starttime="20170809 16:23:22.729" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:22.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:22.730" starttime="20170809 16:23:22.729" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.730" starttime="20170809 16:23:22.216" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.730" starttime="20170809 16:23:22.215" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.730" starttime="20170809 16:23:22.214" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:22.731" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170809 16:23:22.731" starttime="20170809 16:23:22.730" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:22.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:22.731" starttime="20170809 16:23:22.731" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170809 16:23:22.732" starttime="20170809 16:23:22.732" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:22.733" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170809 16:23:22.733" starttime="20170809 16:23:22.733" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:22.734" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170809 16:23:22.734" starttime="20170809 16:23:22.734" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.735" starttime="20170809 16:23:22.734" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:22.735" starttime="20170809 16:23:22.732" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:23.872" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 16:23:23.872" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:23.872" starttime="20170809 16:23:22.735" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:23.873" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:23.873" starttime="20170809 16:23:23.873" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:23.874" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:23.874" starttime="20170809 16:23:23.874" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:23.875" starttime="20170809 16:23:23.874" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:23.875" starttime="20170809 16:23:23.872" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:23.875" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:23.875" starttime="20170809 16:23:23.875" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:23.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:23.875" starttime="20170809 16:23:22.213" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:23.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:23.876" starttime="20170809 16:23:23.876" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 16:23:23.877" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:23.877" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:23.877" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170809 16:23:23.877" starttime="20170809 16:23:23.876" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:23.877" starttime="20170809 16:23:22.211" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170809 16:23:23.878" starttime="20170809 16:23:23.877" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:23.884" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:23.884" starttime="20170809 16:23:23.883" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:23.885" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:23.885" starttime="20170809 16:23:23.885" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:23.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:23.886" starttime="20170809 16:23:23.885" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:23.887" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:23.887" starttime="20170809 16:23:23.886" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:24.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:24.912" starttime="20170809 16:23:23.888" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:24.912" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:24.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:24.912" starttime="20170809 16:23:23.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:24.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:24.913" starttime="20170809 16:23:24.913" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:24.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:24.914" starttime="20170809 16:23:24.913" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:24.914" starttime="20170809 16:23:23.882" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:24.914" starttime="20170809 16:23:23.882" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:24.914" starttime="20170809 16:23:23.881" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:24.915" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:23:24.915" starttime="20170809 16:23:24.914" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:24.917" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:24.917" starttime="20170809 16:23:24.916" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:24.919" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:24.919" starttime="20170809 16:23:24.919" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:24.919" starttime="20170809 16:23:24.918" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:24.919" starttime="20170809 16:23:24.915" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:24.919" starttime="20170809 16:23:24.915" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:27.647" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:27.647" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:27.647" starttime="20170809 16:23:24.920" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:27.649" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:27.649" starttime="20170809 16:23:27.649" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:27.650" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:27.650" starttime="20170809 16:23:27.650" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:27.650" starttime="20170809 16:23:27.649" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:27.651" starttime="20170809 16:23:27.648" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:27.651" starttime="20170809 16:23:27.648" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:27.651" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:27.651" starttime="20170809 16:23:27.651" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:27.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:27.651" starttime="20170809 16:23:23.880" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:27.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:27.652" starttime="20170809 16:23:27.652" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:27.652" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:27.653" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:27.653" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170809 16:23:27.653" starttime="20170809 16:23:27.652" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:27.653" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 16:23:27.653" starttime="20170809 16:23:23.879" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:27.653" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 16:23:27.653" starttime="20170809 16:23:23.879" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:23:27.654" starttime="20170809 16:23:27.654" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:27.654" starttime="20170809 16:23:23.879" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:27.658" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:27.658" starttime="20170809 16:23:27.658" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:27.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:27.659" starttime="20170809 16:23:27.659" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:27.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:27.660" starttime="20170809 16:23:27.659" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:27.660" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:27.660" starttime="20170809 16:23:27.660" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:28.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:28.009" starttime="20170809 16:23:27.661" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:28.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:28.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:28.009" starttime="20170809 16:23:27.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:28.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:28.010" starttime="20170809 16:23:28.009" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:28.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:28.010" starttime="20170809 16:23:28.010" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:28.010" starttime="20170809 16:23:27.657" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:28.011" starttime="20170809 16:23:27.656" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:28.011" starttime="20170809 16:23:27.656" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:28.011" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:23:28.011" starttime="20170809 16:23:28.011" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:28.013" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:28.013" starttime="20170809 16:23:28.013" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:28.014" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:28.014" starttime="20170809 16:23:28.014" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:28.014" starttime="20170809 16:23:28.013" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:28.015" starttime="20170809 16:23:28.012" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:28.015" starttime="20170809 16:23:28.011" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:29.956" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:29.956" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:29.957" starttime="20170809 16:23:28.015" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:29.958" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:29.958" starttime="20170809 16:23:29.958" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:29.960" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:29.960" starttime="20170809 16:23:29.959" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:29.960" starttime="20170809 16:23:29.959" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:29.960" starttime="20170809 16:23:29.957" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:29.960" starttime="20170809 16:23:29.957" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:29.960" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:29.960" starttime="20170809 16:23:29.960" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:29.961" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:29.961" starttime="20170809 16:23:27.655" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:29.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:29.961" starttime="20170809 16:23:29.961" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:29.962" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:29.962" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:29.962" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170809 16:23:29.962" starttime="20170809 16:23:29.962" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:29.962" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170809 16:23:29.962" starttime="20170809 16:23:27.655" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:29.963" level="INFO">${host_state} = Off</msg>
<status endtime="20170809 16:23:29.963" starttime="20170809 16:23:27.654" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:23:29.963" starttime="20170809 16:23:29.963" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:29.963" starttime="20170809 16:23:23.878" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:29.963" starttime="20170809 16:23:23.878" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:29.963" starttime="20170809 16:23:22.209" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 16:23:29.964" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170809 16:23:29.964" starttime="20170809 16:23:29.964" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:29.966" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170809 16:23:29.966" starttime="20170809 16:23:29.965" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:29.968" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:29.969" starttime="20170809 16:23:29.968" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:29.969" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:29.969" starttime="20170809 16:23:29.969" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:29.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:29.970" starttime="20170809 16:23:29.969" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:29.970" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:29.970" starttime="20170809 16:23:29.970" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:30.613" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:30.613" starttime="20170809 16:23:29.971" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:30.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:30.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:30.613" starttime="20170809 16:23:29.971" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:30.614" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:30.614" starttime="20170809 16:23:30.614" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:30.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:30.615" starttime="20170809 16:23:30.614" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:30.615" starttime="20170809 16:23:29.967" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:30.615" starttime="20170809 16:23:29.967" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:30.615" starttime="20170809 16:23:29.966" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:30.615" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170809 16:23:30.616" starttime="20170809 16:23:30.615" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:30.616" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:30.616" starttime="20170809 16:23:30.616" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170809 16:23:30.617" starttime="20170809 16:23:30.616" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:30.619" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170809 16:23:30.619" starttime="20170809 16:23:30.618" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:30.620" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170809 16:23:30.620" starttime="20170809 16:23:30.619" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:30.620" starttime="20170809 16:23:30.619" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:30.620" starttime="20170809 16:23:30.617" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:31.566" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 16:23:31.566" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:31.566" starttime="20170809 16:23:30.620" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:31.567" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:31.567" starttime="20170809 16:23:31.567" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:31.568" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:31.569" starttime="20170809 16:23:31.568" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:31.569" starttime="20170809 16:23:31.568" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:31.569" starttime="20170809 16:23:31.566" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:31.569" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:31.569" starttime="20170809 16:23:31.569" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:31.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:31.569" starttime="20170809 16:23:29.966" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:31.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:31.570" starttime="20170809 16:23:31.570" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 16:23:31.571" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:31.571" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:31.571" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170809 16:23:31.571" starttime="20170809 16:23:31.570" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:31.571" starttime="20170809 16:23:29.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170809 16:23:31.572" starttime="20170809 16:23:31.571" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:31.576" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:31.577" starttime="20170809 16:23:31.576" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:31.578" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:31.578" starttime="20170809 16:23:31.577" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:31.579" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:31.579" starttime="20170809 16:23:31.578" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:31.580" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:31.580" starttime="20170809 16:23:31.579" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:33.848" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:33.848" starttime="20170809 16:23:31.581" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:33.848" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:33.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:33.848" starttime="20170809 16:23:31.580" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:33.849" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:33.849" starttime="20170809 16:23:33.848" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:33.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:33.849" starttime="20170809 16:23:33.849" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:33.850" starttime="20170809 16:23:31.575" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:33.850" starttime="20170809 16:23:31.575" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:33.850" starttime="20170809 16:23:31.574" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:33.850" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:23:33.850" starttime="20170809 16:23:33.850" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:33.852" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:33.853" starttime="20170809 16:23:33.852" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:33.853" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:33.853" starttime="20170809 16:23:33.853" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:33.854" starttime="20170809 16:23:33.853" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:33.854" starttime="20170809 16:23:33.851" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:33.854" starttime="20170809 16:23:33.851" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:36.765" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:36.765" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:36.765" starttime="20170809 16:23:33.854" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:36.767" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:36.767" starttime="20170809 16:23:36.766" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:36.768" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:36.768" starttime="20170809 16:23:36.768" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:36.768" starttime="20170809 16:23:36.767" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:36.768" starttime="20170809 16:23:36.766" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:36.768" starttime="20170809 16:23:36.765" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:36.769" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:36.769" starttime="20170809 16:23:36.768" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:36.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:36.769" starttime="20170809 16:23:31.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:36.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:36.770" starttime="20170809 16:23:36.769" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:36.770" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:36.770" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:36.770" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170809 16:23:36.770" starttime="20170809 16:23:36.770" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:36.771" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 16:23:36.771" starttime="20170809 16:23:31.573" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:36.771" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 16:23:36.771" starttime="20170809 16:23:31.573" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 16:23:36.772" level="FAIL">On != Off</msg>
<status endtime="20170809 16:23:36.772" starttime="20170809 16:23:36.771" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:36.772" starttime="20170809 16:23:31.573" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:36.772" starttime="20170809 16:23:31.572" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:46.777" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:46.778" starttime="20170809 16:23:46.777" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:46.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:46.778" starttime="20170809 16:23:46.778" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:46.779" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:46.779" starttime="20170809 16:23:46.779" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:46.780" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:46.780" starttime="20170809 16:23:46.779" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.171" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:47.171" starttime="20170809 16:23:46.780" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:47.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:47.171" starttime="20170809 16:23:46.780" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.172" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.172" starttime="20170809 16:23:47.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.173" starttime="20170809 16:23:47.172" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.173" starttime="20170809 16:23:46.776" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.173" starttime="20170809 16:23:46.776" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.173" starttime="20170809 16:23:46.775" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:47.174" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:23:47.174" starttime="20170809 16:23:47.173" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:47.176" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:47.176" starttime="20170809 16:23:47.175" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:47.177" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:47.177" starttime="20170809 16:23:47.177" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.177" starttime="20170809 16:23:47.176" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.177" starttime="20170809 16:23:47.174" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.177" starttime="20170809 16:23:47.174" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:47.331" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:47.331" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:47.331" starttime="20170809 16:23:47.178" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:47.333" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:47.333" starttime="20170809 16:23:47.332" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:47.334" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:47.334" starttime="20170809 16:23:47.334" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.334" starttime="20170809 16:23:47.333" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.334" starttime="20170809 16:23:47.332" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.334" starttime="20170809 16:23:47.332" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:47.335" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:47.335" starttime="20170809 16:23:47.335" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:47.335" starttime="20170809 16:23:46.775" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.336" starttime="20170809 16:23:47.335" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:47.336" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:47.336" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:47.337" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:23:47.337" starttime="20170809 16:23:47.336" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.337" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:23:47.337" starttime="20170809 16:23:46.774" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.337" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:23:47.337" starttime="20170809 16:23:46.774" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:23:47.338" starttime="20170809 16:23:47.338" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.338" starttime="20170809 16:23:46.773" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:47.341" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:47.342" starttime="20170809 16:23:47.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:47.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:47.342" starttime="20170809 16:23:47.342" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:47.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:47.343" starttime="20170809 16:23:47.343" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:47.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:47.344" starttime="20170809 16:23:47.343" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.562" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:47.562" starttime="20170809 16:23:47.344" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.562" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:47.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:47.562" starttime="20170809 16:23:47.344" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.563" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.563" starttime="20170809 16:23:47.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.563" starttime="20170809 16:23:47.563" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.564" starttime="20170809 16:23:47.341" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.564" starttime="20170809 16:23:47.340" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.564" starttime="20170809 16:23:47.340" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:47.564" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:23:47.564" starttime="20170809 16:23:47.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:47.566" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:47.566" starttime="20170809 16:23:47.566" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:47.567" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:47.567" starttime="20170809 16:23:47.567" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.568" starttime="20170809 16:23:47.567" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.568" starttime="20170809 16:23:47.565" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.568" starttime="20170809 16:23:47.565" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:47.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:47.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:47.711" starttime="20170809 16:23:47.568" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:47.713" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:47.713" starttime="20170809 16:23:47.712" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:47.713" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:47.714" starttime="20170809 16:23:47.713" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.714" starttime="20170809 16:23:47.713" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.714" starttime="20170809 16:23:47.712" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.714" starttime="20170809 16:23:47.711" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:47.714" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:47.714" starttime="20170809 16:23:47.714" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:47.715" starttime="20170809 16:23:47.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.715" starttime="20170809 16:23:47.715" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:47.716" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:47.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:47.716" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:23:47.716" starttime="20170809 16:23:47.715" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.716" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:23:47.716" starttime="20170809 16:23:47.338" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.717" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:23:47.717" starttime="20170809 16:23:47.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:23:47.717" starttime="20170809 16:23:47.717" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:47.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:47.724" starttime="20170809 16:23:47.723" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:47.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:47.725" starttime="20170809 16:23:47.724" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:47.726" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:47.726" starttime="20170809 16:23:47.725" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:47.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:47.726" starttime="20170809 16:23:47.726" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.955" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:47.956" starttime="20170809 16:23:47.727" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:47.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:47.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:47.956" starttime="20170809 16:23:47.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.956" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.956" starttime="20170809 16:23:47.956" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:47.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:47.957" starttime="20170809 16:23:47.957" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.957" starttime="20170809 16:23:47.721" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.957" starttime="20170809 16:23:47.720" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.958" starttime="20170809 16:23:47.719" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:47.958" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:23:47.958" starttime="20170809 16:23:47.958" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:47.960" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:23:47.960" starttime="20170809 16:23:47.959" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:47.961" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:23:47.961" starttime="20170809 16:23:47.961" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.961" starttime="20170809 16:23:47.960" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.961" starttime="20170809 16:23:47.959" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:47.961" starttime="20170809 16:23:47.958" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:48.036" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:23:48.036" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:48.037" starttime="20170809 16:23:47.962" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:48.038" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:48.038" starttime="20170809 16:23:48.038" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:48.039" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:48.040" starttime="20170809 16:23:48.039" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:48.040" starttime="20170809 16:23:48.039" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:48.040" starttime="20170809 16:23:48.037" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:48.040" starttime="20170809 16:23:48.037" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:48.040" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:48.040" starttime="20170809 16:23:48.040" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:48.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:48.041" starttime="20170809 16:23:47.719" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:48.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:48.041" starttime="20170809 16:23:48.041" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:48.042" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:48.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:48.042" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:23:48.042" starttime="20170809 16:23:48.042" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:48.042" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:23:48.042" starttime="20170809 16:23:47.718" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:48.042" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:23:48.043" starttime="20170809 16:23:47.718" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:23:48.043" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:23:48.043" starttime="20170809 16:23:48.043" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:48.043" starttime="20170809 16:23:47.717" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:48.044" starttime="20170809 16:23:46.773" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:58.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:58.049" starttime="20170809 16:23:58.048" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:58.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:58.050" starttime="20170809 16:23:58.049" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:58.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:58.050" starttime="20170809 16:23:58.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:58.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:58.051" starttime="20170809 16:23:58.050" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:58.241" starttime="20170809 16:23:58.052" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:58.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.241" starttime="20170809 16:23:58.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.241" starttime="20170809 16:23:58.241" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.242" starttime="20170809 16:23:58.242" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.242" starttime="20170809 16:23:58.048" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.242" starttime="20170809 16:23:58.047" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.243" starttime="20170809 16:23:58.047" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:58.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:23:58.243" starttime="20170809 16:23:58.243" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:58.245" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:58.245" starttime="20170809 16:23:58.244" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:58.246" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:58.246" starttime="20170809 16:23:58.246" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.246" starttime="20170809 16:23:58.245" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.246" starttime="20170809 16:23:58.244" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.246" starttime="20170809 16:23:58.243" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:58.309" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:58.309" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.309" starttime="20170809 16:23:58.247" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:58.311" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:58.311" starttime="20170809 16:23:58.310" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:58.312" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:58.312" starttime="20170809 16:23:58.311" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.312" starttime="20170809 16:23:58.311" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.312" starttime="20170809 16:23:58.310" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.312" starttime="20170809 16:23:58.309" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:58.312" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:58.312" starttime="20170809 16:23:58.312" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.313" starttime="20170809 16:23:58.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.313" starttime="20170809 16:23:58.313" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:58.314" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:58.314" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:58.314" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:23:58.314" starttime="20170809 16:23:58.313" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.314" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:23:58.314" starttime="20170809 16:23:58.045" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.315" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:23:58.315" starttime="20170809 16:23:58.045" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:23:58.315" starttime="20170809 16:23:58.315" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.315" starttime="20170809 16:23:58.045" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:58.320" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:58.321" starttime="20170809 16:23:58.319" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:58.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:58.321" starttime="20170809 16:23:58.321" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:58.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:58.322" starttime="20170809 16:23:58.322" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:58.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:58.323" starttime="20170809 16:23:58.323" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:58.532" starttime="20170809 16:23:58.324" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:58.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.532" starttime="20170809 16:23:58.324" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.533" starttime="20170809 16:23:58.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.533" starttime="20170809 16:23:58.533" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.534" starttime="20170809 16:23:58.319" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.534" starttime="20170809 16:23:58.318" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.534" starttime="20170809 16:23:58.317" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:58.534" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:23:58.534" starttime="20170809 16:23:58.534" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:58.537" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:58.537" starttime="20170809 16:23:58.536" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:58.539" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:23:58.539" starttime="20170809 16:23:58.538" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.539" starttime="20170809 16:23:58.538" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.539" starttime="20170809 16:23:58.535" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.539" starttime="20170809 16:23:58.535" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:58.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:23:58.628" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.629" starttime="20170809 16:23:58.539" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:58.630" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:58.630" starttime="20170809 16:23:58.630" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:58.631" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:58.631" starttime="20170809 16:23:58.631" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.632" starttime="20170809 16:23:58.631" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.632" starttime="20170809 16:23:58.629" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.632" starttime="20170809 16:23:58.629" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:58.632" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:58.632" starttime="20170809 16:23:58.632" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.632" starttime="20170809 16:23:58.316" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.633" starttime="20170809 16:23:58.633" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:58.634" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:58.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:58.634" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:23:58.634" starttime="20170809 16:23:58.633" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.634" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:23:58.634" starttime="20170809 16:23:58.316" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.634" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:23:58.634" starttime="20170809 16:23:58.315" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:23:58.635" starttime="20170809 16:23:58.635" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:23:58.639" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:23:58.640" starttime="20170809 16:23:58.639" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:23:58.640" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:23:58.640" starttime="20170809 16:23:58.640" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:23:58.641" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:23:58.641" starttime="20170809 16:23:58.641" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:23:58.642" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:23:58.642" starttime="20170809 16:23:58.642" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.857" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:23:58.857" starttime="20170809 16:23:58.643" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.857" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:23:58.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.857" starttime="20170809 16:23:58.643" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.858" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.858" starttime="20170809 16:23:58.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.858" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.858" starttime="20170809 16:23:58.858" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.858" starttime="20170809 16:23:58.638" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.859" starttime="20170809 16:23:58.638" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.859" starttime="20170809 16:23:58.637" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:23:58.859" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:23:58.859" starttime="20170809 16:23:58.859" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:58.861" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:23:58.861" starttime="20170809 16:23:58.861" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:58.862" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:23:58.863" starttime="20170809 16:23:58.862" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.863" starttime="20170809 16:23:58.861" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.863" starttime="20170809 16:23:58.860" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.863" starttime="20170809 16:23:58.860" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:23:58.978" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:23:58.978" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.978" starttime="20170809 16:23:58.863" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:23:58.980" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:58.980" starttime="20170809 16:23:58.979" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:23:58.980" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:23:58.981" starttime="20170809 16:23:58.980" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.981" starttime="20170809 16:23:58.980" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.981" starttime="20170809 16:23:58.979" status="PASS"></status>
</kw>
<status endtime="20170809 16:23:58.981" starttime="20170809 16:23:58.978" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:23:58.981" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:23:58.981" starttime="20170809 16:23:58.981" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:23:58.982" starttime="20170809 16:23:58.636" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:23:58.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:23:58.982" starttime="20170809 16:23:58.982" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:23:58.983" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:23:58.983" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:23:58.983" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:23:58.983" starttime="20170809 16:23:58.982" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.983" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:23:58.983" starttime="20170809 16:23:58.636" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:23:58.983" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:23:58.983" starttime="20170809 16:23:58.635" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:23:58.984" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:23:58.984" starttime="20170809 16:23:58.984" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:58.984" starttime="20170809 16:23:58.635" status="FAIL"></status>
</kw>
<status endtime="20170809 16:23:58.984" starttime="20170809 16:23:58.044" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:08.989" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:08.990" starttime="20170809 16:24:08.989" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:08.990" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:08.990" starttime="20170809 16:24:08.990" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:08.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:08.991" starttime="20170809 16:24:08.991" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:08.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:08.992" starttime="20170809 16:24:08.991" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:09.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:09.493" starttime="20170809 16:24:08.992" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:09.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:09.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:09.494" starttime="20170809 16:24:08.992" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:09.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:09.494" starttime="20170809 16:24:09.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:09.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:09.495" starttime="20170809 16:24:09.495" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:09.495" starttime="20170809 16:24:08.989" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:09.495" starttime="20170809 16:24:08.988" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:09.495" starttime="20170809 16:24:08.987" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:09.496" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:24:09.496" starttime="20170809 16:24:09.496" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:09.498" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:09.498" starttime="20170809 16:24:09.497" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:09.499" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:09.499" starttime="20170809 16:24:09.499" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:09.499" starttime="20170809 16:24:09.498" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:09.499" starttime="20170809 16:24:09.497" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:09.499" starttime="20170809 16:24:09.496" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:10.168" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:10.168" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:10.169" starttime="20170809 16:24:09.500" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:10.170" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:10.170" starttime="20170809 16:24:10.170" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:10.171" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:10.171" starttime="20170809 16:24:10.171" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.171" starttime="20170809 16:24:10.170" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.171" starttime="20170809 16:24:10.169" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.172" starttime="20170809 16:24:10.169" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:10.172" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:10.172" starttime="20170809 16:24:10.172" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:10.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:10.172" starttime="20170809 16:24:08.987" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:10.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:10.173" starttime="20170809 16:24:10.172" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:10.173" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:10.173" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:10.174" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:24:10.174" starttime="20170809 16:24:10.173" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:10.174" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:24:10.174" starttime="20170809 16:24:08.986" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:10.174" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:24:10.174" starttime="20170809 16:24:08.986" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:24:10.175" starttime="20170809 16:24:10.174" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.175" starttime="20170809 16:24:08.986" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:10.179" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:10.180" starttime="20170809 16:24:10.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:10.181" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:10.181" starttime="20170809 16:24:10.180" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:10.182" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:10.182" starttime="20170809 16:24:10.181" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:10.183" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:10.183" starttime="20170809 16:24:10.182" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:10.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:10.653" starttime="20170809 16:24:10.184" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:10.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:10.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:10.653" starttime="20170809 16:24:10.183" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:10.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:10.654" starttime="20170809 16:24:10.654" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:10.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:10.655" starttime="20170809 16:24:10.654" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.655" starttime="20170809 16:24:10.178" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.655" starttime="20170809 16:24:10.177" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.655" starttime="20170809 16:24:10.176" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:10.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:24:10.656" starttime="20170809 16:24:10.655" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:10.658" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:10.658" starttime="20170809 16:24:10.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:10.659" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:10.659" starttime="20170809 16:24:10.658" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.659" starttime="20170809 16:24:10.658" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.659" starttime="20170809 16:24:10.656" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:10.659" starttime="20170809 16:24:10.656" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:11.475" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:11.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:11.476" starttime="20170809 16:24:10.659" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:11.478" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:11.478" starttime="20170809 16:24:11.477" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:11.479" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:11.479" starttime="20170809 16:24:11.478" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:11.479" starttime="20170809 16:24:11.478" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:11.479" starttime="20170809 16:24:11.477" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:11.479" starttime="20170809 16:24:11.476" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:11.479" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:11.479" starttime="20170809 16:24:11.479" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:11.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:11.480" starttime="20170809 16:24:10.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:11.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:11.480" starttime="20170809 16:24:11.480" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:11.481" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:11.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:11.481" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:24:11.481" starttime="20170809 16:24:11.481" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:11.482" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:24:11.482" starttime="20170809 16:24:10.175" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:11.482" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:24:11.482" starttime="20170809 16:24:10.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:24:11.483" starttime="20170809 16:24:11.482" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:11.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:11.488" starttime="20170809 16:24:11.487" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:11.489" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:11.489" starttime="20170809 16:24:11.489" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:11.490" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:11.490" starttime="20170809 16:24:11.489" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:11.491" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:11.491" starttime="20170809 16:24:11.490" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:12.104" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:12.104" starttime="20170809 16:24:11.492" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:12.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:12.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:12.104" starttime="20170809 16:24:11.491" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:12.105" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:12.105" starttime="20170809 16:24:12.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:12.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:12.106" starttime="20170809 16:24:12.105" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.106" starttime="20170809 16:24:11.486" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.106" starttime="20170809 16:24:11.486" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.106" starttime="20170809 16:24:11.485" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:12.107" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:24:12.107" starttime="20170809 16:24:12.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:12.109" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:12.109" starttime="20170809 16:24:12.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:12.110" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:12.110" starttime="20170809 16:24:12.109" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.110" starttime="20170809 16:24:12.109" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.110" starttime="20170809 16:24:12.107" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.110" starttime="20170809 16:24:12.107" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:12.711" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:24:12.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:12.711" starttime="20170809 16:24:12.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:12.713" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:12.713" starttime="20170809 16:24:12.713" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:12.714" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:12.714" starttime="20170809 16:24:12.714" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.714" starttime="20170809 16:24:12.713" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.714" starttime="20170809 16:24:12.712" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:12.714" starttime="20170809 16:24:12.712" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:12.715" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:12.715" starttime="20170809 16:24:12.715" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:12.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:12.715" starttime="20170809 16:24:11.484" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:12.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:12.716" starttime="20170809 16:24:12.715" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:12.716" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:12.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:12.717" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:24:12.717" starttime="20170809 16:24:12.716" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:12.717" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:24:12.717" starttime="20170809 16:24:11.483" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:12.717" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:24:12.717" starttime="20170809 16:24:11.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:24:12.718" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:24:12.718" starttime="20170809 16:24:12.717" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:12.718" starttime="20170809 16:24:11.483" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:12.718" starttime="20170809 16:24:08.985" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:22.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:22.723" starttime="20170809 16:24:22.723" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:22.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:22.724" starttime="20170809 16:24:22.724" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:22.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:22.725" starttime="20170809 16:24:22.724" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:22.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:22.725" starttime="20170809 16:24:22.725" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:23.282" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:23.282" starttime="20170809 16:24:22.726" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:23.282" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:23.283" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:23.283" starttime="20170809 16:24:22.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:23.283" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:23.283" starttime="20170809 16:24:23.283" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:23.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:23.284" starttime="20170809 16:24:23.284" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.284" starttime="20170809 16:24:22.722" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.284" starttime="20170809 16:24:22.722" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.284" starttime="20170809 16:24:22.721" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:23.285" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:24:23.285" starttime="20170809 16:24:23.285" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:23.287" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:23.287" starttime="20170809 16:24:23.286" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:23.288" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:23.288" starttime="20170809 16:24:23.288" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.288" starttime="20170809 16:24:23.287" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.288" starttime="20170809 16:24:23.286" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.288" starttime="20170809 16:24:23.285" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:23.931" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:23.931" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:23.931" starttime="20170809 16:24:23.289" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:23.933" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:23.933" starttime="20170809 16:24:23.932" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:23.934" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:23.934" starttime="20170809 16:24:23.933" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.934" starttime="20170809 16:24:23.933" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.934" starttime="20170809 16:24:23.932" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.934" starttime="20170809 16:24:23.931" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:23.934" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:23.934" starttime="20170809 16:24:23.934" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:23.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:23.935" starttime="20170809 16:24:22.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:23.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:23.935" starttime="20170809 16:24:23.935" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:23.936" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:23.936" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:23.936" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:24:23.936" starttime="20170809 16:24:23.936" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:23.936" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:24:23.936" starttime="20170809 16:24:22.720" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:23.937" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:24:23.937" starttime="20170809 16:24:22.719" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:24:23.937" starttime="20170809 16:24:23.937" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:23.937" starttime="20170809 16:24:22.719" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:23.941" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:23.942" starttime="20170809 16:24:23.941" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:23.942" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:23.942" starttime="20170809 16:24:23.942" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:23.943" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:23.943" starttime="20170809 16:24:23.942" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:23.943" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:23.944" starttime="20170809 16:24:23.943" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:24.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:24.438" starttime="20170809 16:24:23.944" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:24.438" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:24.438" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:24.438" starttime="20170809 16:24:23.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:24.439" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:24.439" starttime="20170809 16:24:24.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:24.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:24.440" starttime="20170809 16:24:24.439" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:24.440" starttime="20170809 16:24:23.940" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:24.440" starttime="20170809 16:24:23.940" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:24.440" starttime="20170809 16:24:23.939" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:24.440" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:24:24.441" starttime="20170809 16:24:24.440" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:24.443" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:24.443" starttime="20170809 16:24:24.442" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:24.443" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:24.444" starttime="20170809 16:24:24.443" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:24.444" starttime="20170809 16:24:24.443" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:24.444" starttime="20170809 16:24:24.441" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:24.444" starttime="20170809 16:24:24.441" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:25.122" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:25.123" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:25.123" starttime="20170809 16:24:24.444" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:25.125" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:25.125" starttime="20170809 16:24:25.124" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:25.125" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:25.126" starttime="20170809 16:24:25.125" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.126" starttime="20170809 16:24:25.125" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.126" starttime="20170809 16:24:25.124" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.126" starttime="20170809 16:24:25.123" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:25.126" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:25.126" starttime="20170809 16:24:25.126" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:25.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:25.127" starttime="20170809 16:24:23.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:25.127" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:25.127" starttime="20170809 16:24:25.127" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:25.128" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:25.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:25.128" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:24:25.128" starttime="20170809 16:24:25.127" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:25.128" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:24:25.128" starttime="20170809 16:24:23.938" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:25.129" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:24:25.129" starttime="20170809 16:24:23.937" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:24:25.129" starttime="20170809 16:24:25.129" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:25.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:25.136" starttime="20170809 16:24:25.135" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:25.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:25.137" starttime="20170809 16:24:25.136" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:25.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:25.138" starttime="20170809 16:24:25.137" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:25.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:25.138" starttime="20170809 16:24:25.138" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:25.498" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:25.498" starttime="20170809 16:24:25.139" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:25.498" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:25.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:25.499" starttime="20170809 16:24:25.139" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:25.499" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:25.499" starttime="20170809 16:24:25.499" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:25.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:25.500" starttime="20170809 16:24:25.499" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.500" starttime="20170809 16:24:25.135" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.500" starttime="20170809 16:24:25.134" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.500" starttime="20170809 16:24:25.134" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:25.501" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:24:25.501" starttime="20170809 16:24:25.500" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:25.503" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:25.503" starttime="20170809 16:24:25.502" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:25.504" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:25.527" starttime="20170809 16:24:25.503" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.527" starttime="20170809 16:24:25.503" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.527" starttime="20170809 16:24:25.501" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:25.527" starttime="20170809 16:24:25.501" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:26.163" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:24:26.163" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:26.163" starttime="20170809 16:24:25.527" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:26.164" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:26.165" starttime="20170809 16:24:26.164" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:26.165" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:26.165" starttime="20170809 16:24:26.165" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:26.166" starttime="20170809 16:24:26.165" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:26.166" starttime="20170809 16:24:26.164" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:26.166" starttime="20170809 16:24:26.163" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:26.166" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:26.166" starttime="20170809 16:24:26.166" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:26.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:26.167" starttime="20170809 16:24:25.133" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:26.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:26.167" starttime="20170809 16:24:26.167" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:26.168" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:26.168" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:26.168" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:24:26.168" starttime="20170809 16:24:26.167" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:26.168" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:24:26.168" starttime="20170809 16:24:25.130" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:26.168" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:24:26.168" starttime="20170809 16:24:25.130" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:24:26.169" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:24:26.169" starttime="20170809 16:24:26.169" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:26.169" starttime="20170809 16:24:25.129" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:26.169" starttime="20170809 16:24:22.719" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:36.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:36.176" starttime="20170809 16:24:36.174" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:36.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:36.176" starttime="20170809 16:24:36.176" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:36.177" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:36.177" starttime="20170809 16:24:36.177" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:36.178" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:36.178" starttime="20170809 16:24:36.178" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:36.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:36.492" starttime="20170809 16:24:36.179" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:36.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:36.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:36.492" starttime="20170809 16:24:36.179" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:36.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:36.493" starttime="20170809 16:24:36.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:36.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:36.494" starttime="20170809 16:24:36.494" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:36.495" starttime="20170809 16:24:36.173" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:36.495" starttime="20170809 16:24:36.173" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:36.495" starttime="20170809 16:24:36.172" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:36.496" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:24:36.496" starttime="20170809 16:24:36.495" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:36.498" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:36.498" starttime="20170809 16:24:36.497" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:36.499" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:36.499" starttime="20170809 16:24:36.498" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:36.499" starttime="20170809 16:24:36.498" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:36.499" starttime="20170809 16:24:36.496" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:36.499" starttime="20170809 16:24:36.496" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:37.287" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:37.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:37.288" starttime="20170809 16:24:36.499" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:37.289" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:37.289" starttime="20170809 16:24:37.289" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:37.290" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:37.290" starttime="20170809 16:24:37.290" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.290" starttime="20170809 16:24:37.290" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.291" starttime="20170809 16:24:37.288" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.291" starttime="20170809 16:24:37.288" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:37.291" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:37.291" starttime="20170809 16:24:37.291" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:37.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:37.291" starttime="20170809 16:24:36.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:37.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:37.292" starttime="20170809 16:24:37.292" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:37.292" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:37.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:37.293" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:24:37.293" starttime="20170809 16:24:37.292" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:37.293" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:24:37.293" starttime="20170809 16:24:36.171" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:37.293" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:24:37.293" starttime="20170809 16:24:36.171" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:24:37.294" starttime="20170809 16:24:37.294" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.294" starttime="20170809 16:24:36.170" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:37.298" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:37.298" starttime="20170809 16:24:37.297" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:37.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:37.299" starttime="20170809 16:24:37.298" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:37.299" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:37.299" starttime="20170809 16:24:37.299" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:37.300" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:37.300" starttime="20170809 16:24:37.300" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:37.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:37.653" starttime="20170809 16:24:37.301" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:37.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:37.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:37.654" starttime="20170809 16:24:37.300" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:37.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:37.654" starttime="20170809 16:24:37.654" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:37.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:37.655" starttime="20170809 16:24:37.655" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.655" starttime="20170809 16:24:37.297" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.655" starttime="20170809 16:24:37.296" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.655" starttime="20170809 16:24:37.296" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:37.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:24:37.656" starttime="20170809 16:24:37.655" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:37.658" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:37.658" starttime="20170809 16:24:37.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:37.659" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:37.659" starttime="20170809 16:24:37.659" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.659" starttime="20170809 16:24:37.658" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.659" starttime="20170809 16:24:37.657" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:37.659" starttime="20170809 16:24:37.656" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:38.426" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:38.426" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:38.426" starttime="20170809 16:24:37.659" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:38.428" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:38.428" starttime="20170809 16:24:38.427" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:38.429" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:38.429" starttime="20170809 16:24:38.429" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.429" starttime="20170809 16:24:38.428" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.429" starttime="20170809 16:24:38.427" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.429" starttime="20170809 16:24:38.426" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:38.430" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:38.430" starttime="20170809 16:24:38.430" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:38.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:38.430" starttime="20170809 16:24:37.295" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:38.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:38.431" starttime="20170809 16:24:38.430" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:38.431" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:38.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:38.431" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:24:38.431" starttime="20170809 16:24:38.431" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:38.432" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:24:38.432" starttime="20170809 16:24:37.294" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:38.432" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:24:38.432" starttime="20170809 16:24:37.294" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:24:38.432" starttime="20170809 16:24:38.432" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:38.436" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:38.437" starttime="20170809 16:24:38.436" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:38.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:38.437" starttime="20170809 16:24:38.437" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:38.438" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:38.438" starttime="20170809 16:24:38.437" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:38.438" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:38.438" starttime="20170809 16:24:38.438" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:38.959" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:38.959" starttime="20170809 16:24:38.439" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:38.959" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:38.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:38.959" starttime="20170809 16:24:38.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:38.960" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:38.960" starttime="20170809 16:24:38.960" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:38.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:38.961" starttime="20170809 16:24:38.960" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.961" starttime="20170809 16:24:38.435" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.961" starttime="20170809 16:24:38.435" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.961" starttime="20170809 16:24:38.434" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:38.962" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:24:38.962" starttime="20170809 16:24:38.961" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:38.964" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:38.964" starttime="20170809 16:24:38.963" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:38.965" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:38.965" starttime="20170809 16:24:38.964" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.965" starttime="20170809 16:24:38.964" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.965" starttime="20170809 16:24:38.962" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:38.965" starttime="20170809 16:24:38.962" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:39.459" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:24:39.459" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:39.459" starttime="20170809 16:24:38.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:39.461" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:39.461" starttime="20170809 16:24:39.461" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:39.462" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:39.462" starttime="20170809 16:24:39.462" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:39.462" starttime="20170809 16:24:39.461" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:39.462" starttime="20170809 16:24:39.460" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:39.463" starttime="20170809 16:24:39.460" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:39.463" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:39.463" starttime="20170809 16:24:39.463" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:39.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:39.463" starttime="20170809 16:24:38.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:39.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:39.464" starttime="20170809 16:24:39.463" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:39.464" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:39.464" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:39.465" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:24:39.465" starttime="20170809 16:24:39.464" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:39.465" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:24:39.465" starttime="20170809 16:24:38.433" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:39.465" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:24:39.465" starttime="20170809 16:24:38.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:24:39.466" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:24:39.466" starttime="20170809 16:24:39.465" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:39.466" starttime="20170809 16:24:38.433" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:39.466" starttime="20170809 16:24:36.170" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:49.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:49.472" starttime="20170809 16:24:49.471" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:49.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:49.473" starttime="20170809 16:24:49.472" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:49.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:49.473" starttime="20170809 16:24:49.473" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:49.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:49.474" starttime="20170809 16:24:49.473" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:49.847" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:49.847" starttime="20170809 16:24:49.475" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:49.848" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:49.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:49.848" starttime="20170809 16:24:49.474" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:49.848" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:49.848" starttime="20170809 16:24:49.848" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:49.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:49.849" starttime="20170809 16:24:49.849" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:49.849" starttime="20170809 16:24:49.471" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:49.849" starttime="20170809 16:24:49.470" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:49.849" starttime="20170809 16:24:49.469" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:49.850" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:24:49.850" starttime="20170809 16:24:49.850" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:49.852" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:49.852" starttime="20170809 16:24:49.851" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:49.853" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:49.853" starttime="20170809 16:24:49.853" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:49.853" starttime="20170809 16:24:49.852" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:49.853" starttime="20170809 16:24:49.851" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:49.853" starttime="20170809 16:24:49.850" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:50.058" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:50.059" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:50.059" starttime="20170809 16:24:49.854" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:50.061" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:50.061" starttime="20170809 16:24:50.060" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:50.062" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:50.062" starttime="20170809 16:24:50.062" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.062" starttime="20170809 16:24:50.061" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.062" starttime="20170809 16:24:50.060" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.062" starttime="20170809 16:24:50.059" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:50.063" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:50.063" starttime="20170809 16:24:50.062" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:50.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:50.063" starttime="20170809 16:24:49.469" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:50.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:50.063" starttime="20170809 16:24:50.063" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:50.064" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:50.064" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:50.064" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:24:50.064" starttime="20170809 16:24:50.064" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:50.064" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:24:50.065" starttime="20170809 16:24:49.468" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:50.065" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:24:50.065" starttime="20170809 16:24:49.468" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:24:50.065" starttime="20170809 16:24:50.065" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.066" starttime="20170809 16:24:49.467" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:50.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:50.069" starttime="20170809 16:24:50.069" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:50.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:50.070" starttime="20170809 16:24:50.070" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:50.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:50.071" starttime="20170809 16:24:50.070" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:50.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:50.071" starttime="20170809 16:24:50.071" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:50.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:50.292" starttime="20170809 16:24:50.072" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:50.292" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:50.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:50.292" starttime="20170809 16:24:50.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:50.293" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:50.293" starttime="20170809 16:24:50.293" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:50.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:50.294" starttime="20170809 16:24:50.293" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.294" starttime="20170809 16:24:50.068" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.294" starttime="20170809 16:24:50.068" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.294" starttime="20170809 16:24:50.067" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:50.295" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:24:50.295" starttime="20170809 16:24:50.294" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:50.297" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:50.297" starttime="20170809 16:24:50.296" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:50.298" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:24:50.298" starttime="20170809 16:24:50.298" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.299" starttime="20170809 16:24:50.297" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.299" starttime="20170809 16:24:50.295" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:50.299" starttime="20170809 16:24:50.295" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:51.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:24:51.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:51.129" starttime="20170809 16:24:50.299" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:51.131" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:51.131" starttime="20170809 16:24:51.130" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:51.131" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:51.132" starttime="20170809 16:24:51.131" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.132" starttime="20170809 16:24:51.131" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.132" starttime="20170809 16:24:51.130" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.132" starttime="20170809 16:24:51.129" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:51.132" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:51.132" starttime="20170809 16:24:51.132" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:51.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:51.133" starttime="20170809 16:24:50.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:51.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:51.133" starttime="20170809 16:24:51.133" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:51.134" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:51.134" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:51.134" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:24:51.134" starttime="20170809 16:24:51.133" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:51.134" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:24:51.134" starttime="20170809 16:24:50.066" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:51.135" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:24:51.135" starttime="20170809 16:24:50.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:24:51.135" starttime="20170809 16:24:51.135" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:24:51.139" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:24:51.139" starttime="20170809 16:24:51.139" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:24:51.140" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:24:51.140" starttime="20170809 16:24:51.139" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:24:51.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:24:51.140" starttime="20170809 16:24:51.140" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:24:51.141" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:24:51.141" starttime="20170809 16:24:51.141" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:24:51.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:24:51.445" starttime="20170809 16:24:51.142" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:51.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:24:51.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:51.445" starttime="20170809 16:24:51.142" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:24:51.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:51.445" starttime="20170809 16:24:51.445" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:51.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:51.446" starttime="20170809 16:24:51.446" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.446" starttime="20170809 16:24:51.138" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.446" starttime="20170809 16:24:51.138" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.446" starttime="20170809 16:24:51.137" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:24:51.447" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:24:51.447" starttime="20170809 16:24:51.447" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:51.449" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:51.449" starttime="20170809 16:24:51.448" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:51.450" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:24:51.450" starttime="20170809 16:24:51.450" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.450" starttime="20170809 16:24:51.449" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.450" starttime="20170809 16:24:51.448" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:51.450" starttime="20170809 16:24:51.447" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:24:52.193" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:24:52.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:52.193" starttime="20170809 16:24:51.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:24:52.195" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:52.195" starttime="20170809 16:24:52.194" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:24:52.196" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:24:52.196" starttime="20170809 16:24:52.196" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:52.196" starttime="20170809 16:24:52.195" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:52.196" starttime="20170809 16:24:52.194" status="PASS"></status>
</kw>
<status endtime="20170809 16:24:52.196" starttime="20170809 16:24:52.193" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:24:52.196" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:24:52.197" starttime="20170809 16:24:52.196" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:52.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:24:52.197" starttime="20170809 16:24:51.136" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:24:52.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:24:52.197" starttime="20170809 16:24:52.197" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:24:52.198" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:24:52.198" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:24:52.198" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:24:52.198" starttime="20170809 16:24:52.198" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:52.198" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:24:52.199" starttime="20170809 16:24:51.136" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:24:52.199" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:24:52.199" starttime="20170809 16:24:51.136" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:24:52.199" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:24:52.199" starttime="20170809 16:24:52.199" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:52.200" starttime="20170809 16:24:51.135" status="FAIL"></status>
</kw>
<status endtime="20170809 16:24:52.200" starttime="20170809 16:24:49.467" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:02.205" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:02.205" starttime="20170809 16:25:02.205" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:02.206" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:02.206" starttime="20170809 16:25:02.206" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:02.207" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:02.207" starttime="20170809 16:25:02.206" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:02.207" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:02.207" starttime="20170809 16:25:02.207" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:02.487" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:02.487" starttime="20170809 16:25:02.208" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:02.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:02.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:02.487" starttime="20170809 16:25:02.208" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:02.488" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:02.488" starttime="20170809 16:25:02.488" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:02.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:02.489" starttime="20170809 16:25:02.488" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.489" starttime="20170809 16:25:02.204" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.489" starttime="20170809 16:25:02.204" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.489" starttime="20170809 16:25:02.203" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:02.490" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:25:02.490" starttime="20170809 16:25:02.489" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:02.492" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:02.492" starttime="20170809 16:25:02.491" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:02.493" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:02.493" starttime="20170809 16:25:02.492" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.493" starttime="20170809 16:25:02.492" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.493" starttime="20170809 16:25:02.490" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.493" starttime="20170809 16:25:02.490" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:02.591" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:25:02.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:02.592" starttime="20170809 16:25:02.493" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:02.593" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:02.594" starttime="20170809 16:25:02.593" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:02.594" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:02.594" starttime="20170809 16:25:02.594" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.595" starttime="20170809 16:25:02.594" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.595" starttime="20170809 16:25:02.593" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.595" starttime="20170809 16:25:02.592" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:02.595" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:02.595" starttime="20170809 16:25:02.595" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:02.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:02.595" starttime="20170809 16:25:02.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:02.596" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:02.596" starttime="20170809 16:25:02.596" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:02.597" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:02.597" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:02.597" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:25:02.597" starttime="20170809 16:25:02.596" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:02.597" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:25:02.597" starttime="20170809 16:25:02.202" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:02.598" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:25:02.598" starttime="20170809 16:25:02.201" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:25:02.598" starttime="20170809 16:25:02.598" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.598" starttime="20170809 16:25:02.201" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:02.602" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:02.602" starttime="20170809 16:25:02.601" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:02.603" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:02.603" starttime="20170809 16:25:02.602" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:02.603" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:02.603" starttime="20170809 16:25:02.603" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:02.604" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:02.604" starttime="20170809 16:25:02.603" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:02.937" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:02.937" starttime="20170809 16:25:02.605" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:02.937" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:02.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:02.937" starttime="20170809 16:25:02.604" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:02.938" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:02.938" starttime="20170809 16:25:02.937" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:02.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:02.938" starttime="20170809 16:25:02.938" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.939" starttime="20170809 16:25:02.601" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.939" starttime="20170809 16:25:02.600" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.939" starttime="20170809 16:25:02.600" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:02.939" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:25:02.939" starttime="20170809 16:25:02.939" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:02.942" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:02.942" starttime="20170809 16:25:02.941" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:02.943" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:02.943" starttime="20170809 16:25:02.943" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.943" starttime="20170809 16:25:02.942" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.943" starttime="20170809 16:25:02.940" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:02.943" starttime="20170809 16:25:02.940" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:03.229" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:25:03.230" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:03.230" starttime="20170809 16:25:02.944" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:03.231" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:03.232" starttime="20170809 16:25:03.231" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:03.232" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:03.233" starttime="20170809 16:25:03.232" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.233" starttime="20170809 16:25:03.232" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.233" starttime="20170809 16:25:03.231" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.233" starttime="20170809 16:25:03.230" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:03.233" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:03.233" starttime="20170809 16:25:03.233" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:03.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:03.234" starttime="20170809 16:25:02.599" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:03.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:03.234" starttime="20170809 16:25:03.234" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:03.235" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:03.235" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:03.235" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:25:03.235" starttime="20170809 16:25:03.234" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:03.235" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:25:03.235" starttime="20170809 16:25:02.599" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:03.235" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:25:03.236" starttime="20170809 16:25:02.598" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:25:03.236" starttime="20170809 16:25:03.236" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:03.243" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:03.243" starttime="20170809 16:25:03.242" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:03.244" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:03.244" starttime="20170809 16:25:03.243" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:03.244" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:03.245" starttime="20170809 16:25:03.244" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:03.245" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:03.245" starttime="20170809 16:25:03.245" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:03.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:03.555" starttime="20170809 16:25:03.246" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:03.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:03.555" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:03.555" starttime="20170809 16:25:03.245" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:03.556" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:03.556" starttime="20170809 16:25:03.556" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:03.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:03.557" starttime="20170809 16:25:03.556" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.557" starttime="20170809 16:25:03.239" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.557" starttime="20170809 16:25:03.239" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.557" starttime="20170809 16:25:03.238" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:03.557" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:25:03.558" starttime="20170809 16:25:03.557" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:03.560" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:25:03.560" starttime="20170809 16:25:03.559" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:03.560" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:25:03.561" starttime="20170809 16:25:03.560" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.561" starttime="20170809 16:25:03.560" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.561" starttime="20170809 16:25:03.558" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.561" starttime="20170809 16:25:03.558" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:03.657" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:25:03.657" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:03.657" starttime="20170809 16:25:03.561" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:03.659" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:03.659" starttime="20170809 16:25:03.658" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:03.660" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:03.660" starttime="20170809 16:25:03.660" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.660" starttime="20170809 16:25:03.659" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.661" starttime="20170809 16:25:03.658" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:03.661" starttime="20170809 16:25:03.657" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:03.661" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:03.661" starttime="20170809 16:25:03.661" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:03.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:03.661" starttime="20170809 16:25:03.237" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:03.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:03.662" starttime="20170809 16:25:03.662" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:03.663" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:03.663" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:03.663" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:25:03.663" starttime="20170809 16:25:03.662" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:03.663" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:25:03.663" starttime="20170809 16:25:03.237" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:03.663" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:25:03.663" starttime="20170809 16:25:03.236" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:25:03.664" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:25:03.664" starttime="20170809 16:25:03.664" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:03.664" starttime="20170809 16:25:03.236" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:03.664" starttime="20170809 16:25:02.200" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:13.669" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:13.670" starttime="20170809 16:25:13.669" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:13.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:13.670" starttime="20170809 16:25:13.670" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:13.671" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:13.671" starttime="20170809 16:25:13.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:13.672" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:13.672" starttime="20170809 16:25:13.671" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.305" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:14.305" starttime="20170809 16:25:13.672" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.305" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:14.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:14.305" starttime="20170809 16:25:13.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.306" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:14.306" starttime="20170809 16:25:14.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:14.306" starttime="20170809 16:25:14.306" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.306" starttime="20170809 16:25:13.669" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.306" starttime="20170809 16:25:13.668" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.307" starttime="20170809 16:25:13.667" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:14.307" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:25:14.307" starttime="20170809 16:25:14.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:14.309" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:14.309" starttime="20170809 16:25:14.309" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:14.310" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:14.310" starttime="20170809 16:25:14.310" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.310" starttime="20170809 16:25:14.310" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.311" starttime="20170809 16:25:14.308" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.311" starttime="20170809 16:25:14.307" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:14.389" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:25:14.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:14.389" starttime="20170809 16:25:14.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:14.391" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:14.391" starttime="20170809 16:25:14.390" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:14.392" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:14.392" starttime="20170809 16:25:14.391" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.392" starttime="20170809 16:25:14.391" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.392" starttime="20170809 16:25:14.390" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.392" starttime="20170809 16:25:14.389" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:14.392" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:14.393" starttime="20170809 16:25:14.392" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.393" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:14.393" starttime="20170809 16:25:13.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:14.393" starttime="20170809 16:25:14.393" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:14.394" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:14.394" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:14.394" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:25:14.394" starttime="20170809 16:25:14.394" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.395" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:25:14.395" starttime="20170809 16:25:13.666" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.395" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:25:14.395" starttime="20170809 16:25:13.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:25:14.396" starttime="20170809 16:25:14.396" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.396" starttime="20170809 16:25:13.665" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:14.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:14.403" starttime="20170809 16:25:14.401" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:14.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:14.403" starttime="20170809 16:25:14.403" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:14.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:14.404" starttime="20170809 16:25:14.403" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:14.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:14.404" starttime="20170809 16:25:14.404" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:14.660" starttime="20170809 16:25:14.405" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:14.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:14.660" starttime="20170809 16:25:14.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:14.661" starttime="20170809 16:25:14.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:14.661" starttime="20170809 16:25:14.661" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.661" starttime="20170809 16:25:14.400" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.662" starttime="20170809 16:25:14.400" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.662" starttime="20170809 16:25:14.399" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:14.662" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:25:14.662" starttime="20170809 16:25:14.662" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:14.664" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:14.664" starttime="20170809 16:25:14.664" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:14.665" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:14.665" starttime="20170809 16:25:14.665" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.665" starttime="20170809 16:25:14.664" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.666" starttime="20170809 16:25:14.663" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.666" starttime="20170809 16:25:14.662" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:14.821" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:25:14.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:14.821" starttime="20170809 16:25:14.666" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:14.822" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:14.823" starttime="20170809 16:25:14.822" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:14.823" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:14.824" starttime="20170809 16:25:14.823" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.824" starttime="20170809 16:25:14.823" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.824" starttime="20170809 16:25:14.822" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:14.824" starttime="20170809 16:25:14.821" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:14.824" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:14.824" starttime="20170809 16:25:14.824" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:14.825" starttime="20170809 16:25:14.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:14.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:14.825" starttime="20170809 16:25:14.825" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:14.826" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:14.826" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:14.826" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:25:14.826" starttime="20170809 16:25:14.825" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.826" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:25:14.826" starttime="20170809 16:25:14.397" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:14.827" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:25:14.827" starttime="20170809 16:25:14.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:25:14.827" starttime="20170809 16:25:14.827" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:14.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:14.832" starttime="20170809 16:25:14.831" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:14.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:14.832" starttime="20170809 16:25:14.832" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:14.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:14.833" starttime="20170809 16:25:14.833" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:14.834" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:14.834" starttime="20170809 16:25:14.833" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:15.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:15.094" starttime="20170809 16:25:14.834" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:15.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:15.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:15.094" starttime="20170809 16:25:14.834" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:15.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:15.095" starttime="20170809 16:25:15.095" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:15.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:15.096" starttime="20170809 16:25:15.095" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.096" starttime="20170809 16:25:14.830" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.096" starttime="20170809 16:25:14.830" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.096" starttime="20170809 16:25:14.829" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:15.097" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:25:15.097" starttime="20170809 16:25:15.096" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:15.099" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:25:15.099" starttime="20170809 16:25:15.098" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:15.100" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:25:15.100" starttime="20170809 16:25:15.100" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.100" starttime="20170809 16:25:15.099" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.100" starttime="20170809 16:25:15.098" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.100" starttime="20170809 16:25:15.097" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:15.390" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:25:15.390" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:15.390" starttime="20170809 16:25:15.100" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:15.392" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:15.392" starttime="20170809 16:25:15.391" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:15.393" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:15.393" starttime="20170809 16:25:15.393" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.393" starttime="20170809 16:25:15.392" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.393" starttime="20170809 16:25:15.391" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:15.393" starttime="20170809 16:25:15.391" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:15.394" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:15.394" starttime="20170809 16:25:15.393" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:15.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:15.394" starttime="20170809 16:25:14.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:15.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:15.395" starttime="20170809 16:25:15.394" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:15.395" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:15.395" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:15.395" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:25:15.395" starttime="20170809 16:25:15.395" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:15.396" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:25:15.396" starttime="20170809 16:25:14.828" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:15.396" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:25:15.396" starttime="20170809 16:25:14.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:25:15.396" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:25:15.396" starttime="20170809 16:25:15.396" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:15.397" starttime="20170809 16:25:14.827" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:15.397" starttime="20170809 16:25:13.665" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:25.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:25.402" starttime="20170809 16:25:25.402" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:25.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:25.403" starttime="20170809 16:25:25.403" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:25.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:25.404" starttime="20170809 16:25:25.403" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:25.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:25.404" starttime="20170809 16:25:25.404" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:25.906" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:25.906" starttime="20170809 16:25:25.405" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:25.906" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:25.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:25.906" starttime="20170809 16:25:25.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:25.907" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:25.907" starttime="20170809 16:25:25.907" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:25.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:25.908" starttime="20170809 16:25:25.907" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:25.908" starttime="20170809 16:25:25.401" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:25.908" starttime="20170809 16:25:25.401" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:25.908" starttime="20170809 16:25:25.400" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:25.909" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:25:25.909" starttime="20170809 16:25:25.908" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:25.911" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:25.911" starttime="20170809 16:25:25.910" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:25.912" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:25.912" starttime="20170809 16:25:25.911" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:25.912" starttime="20170809 16:25:25.911" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:25.912" starttime="20170809 16:25:25.909" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:25.912" starttime="20170809 16:25:25.909" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:31.190" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:25:31.190" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:31.190" starttime="20170809 16:25:25.912" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:31.192" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:31.192" starttime="20170809 16:25:31.192" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:31.193" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:31.193" starttime="20170809 16:25:31.193" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.193" starttime="20170809 16:25:31.192" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.193" starttime="20170809 16:25:31.191" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.193" starttime="20170809 16:25:31.191" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:31.194" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:31.194" starttime="20170809 16:25:31.194" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:31.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:31.194" starttime="20170809 16:25:25.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:31.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:31.195" starttime="20170809 16:25:31.194" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:31.195" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:31.195" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:31.196" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:25:31.196" starttime="20170809 16:25:31.195" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:31.196" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:25:31.196" starttime="20170809 16:25:25.399" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:31.197" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:25:31.197" starttime="20170809 16:25:25.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:25:31.198" starttime="20170809 16:25:31.197" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.198" starttime="20170809 16:25:25.398" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:31.201" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:31.202" starttime="20170809 16:25:31.201" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:31.202" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:31.203" starttime="20170809 16:25:31.202" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:31.203" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:31.203" starttime="20170809 16:25:31.203" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:31.204" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:31.204" starttime="20170809 16:25:31.203" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:31.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:31.901" starttime="20170809 16:25:31.204" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:31.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:31.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:31.902" starttime="20170809 16:25:31.204" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:31.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:31.902" starttime="20170809 16:25:31.902" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:31.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:31.903" starttime="20170809 16:25:31.903" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.903" starttime="20170809 16:25:31.200" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.903" starttime="20170809 16:25:31.200" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.903" starttime="20170809 16:25:31.199" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:31.904" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:25:31.904" starttime="20170809 16:25:31.904" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:31.906" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:31.906" starttime="20170809 16:25:31.905" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:31.907" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:31.907" starttime="20170809 16:25:31.907" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.907" starttime="20170809 16:25:31.906" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.907" starttime="20170809 16:25:31.905" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:31.907" starttime="20170809 16:25:31.904" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:32.254" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:25:32.254" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:32.254" starttime="20170809 16:25:31.908" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:32.257" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:32.257" starttime="20170809 16:25:32.256" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:32.258" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:32.258" starttime="20170809 16:25:32.258" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.258" starttime="20170809 16:25:32.257" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.258" starttime="20170809 16:25:32.255" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.258" starttime="20170809 16:25:32.254" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:32.259" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:32.259" starttime="20170809 16:25:32.259" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:32.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:32.259" starttime="20170809 16:25:31.199" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:32.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:32.260" starttime="20170809 16:25:32.259" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:32.260" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:32.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:32.260" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:25:32.260" starttime="20170809 16:25:32.260" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:32.261" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:25:32.261" starttime="20170809 16:25:31.198" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:32.261" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:25:32.261" starttime="20170809 16:25:31.198" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:25:32.262" starttime="20170809 16:25:32.261" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:32.266" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:32.266" starttime="20170809 16:25:32.265" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:32.267" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:32.267" starttime="20170809 16:25:32.266" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:32.268" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:32.268" starttime="20170809 16:25:32.267" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:32.269" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:32.269" starttime="20170809 16:25:32.268" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:32.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:32.560" starttime="20170809 16:25:32.270" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:32.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:32.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:32.561" starttime="20170809 16:25:32.269" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:32.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:32.561" starttime="20170809 16:25:32.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:32.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:32.562" starttime="20170809 16:25:32.561" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.562" starttime="20170809 16:25:32.265" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.562" starttime="20170809 16:25:32.265" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.562" starttime="20170809 16:25:32.264" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:32.563" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:25:32.563" starttime="20170809 16:25:32.562" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:32.565" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:25:32.565" starttime="20170809 16:25:32.564" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:32.566" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:25:32.566" starttime="20170809 16:25:32.565" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.566" starttime="20170809 16:25:32.565" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.566" starttime="20170809 16:25:32.563" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.566" starttime="20170809 16:25:32.563" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:32.690" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:25:32.690" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:32.690" starttime="20170809 16:25:32.566" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:32.692" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:32.692" starttime="20170809 16:25:32.691" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:32.693" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:32.693" starttime="20170809 16:25:32.692" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.693" starttime="20170809 16:25:32.692" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.693" starttime="20170809 16:25:32.691" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:32.693" starttime="20170809 16:25:32.690" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:32.693" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:32.693" starttime="20170809 16:25:32.693" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:32.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:32.694" starttime="20170809 16:25:32.263" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:32.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:32.694" starttime="20170809 16:25:32.694" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:32.695" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:32.695" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:32.695" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:25:32.695" starttime="20170809 16:25:32.695" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:32.695" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:25:32.695" starttime="20170809 16:25:32.262" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:32.695" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:25:32.696" starttime="20170809 16:25:32.262" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:25:32.696" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:25:32.696" starttime="20170809 16:25:32.696" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:32.696" starttime="20170809 16:25:32.262" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:32.697" starttime="20170809 16:25:25.397" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:42.702" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:42.702" starttime="20170809 16:25:42.701" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:42.702" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:42.703" starttime="20170809 16:25:42.702" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:42.703" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:42.703" starttime="20170809 16:25:42.703" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:42.704" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:42.704" starttime="20170809 16:25:42.703" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:25:43.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:25:43.221" starttime="20170809 16:25:42.704" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:43.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:25:43.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:43.221" starttime="20170809 16:25:42.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:25:43.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:43.222" starttime="20170809 16:25:43.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:43.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:43.223" starttime="20170809 16:25:43.222" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:43.223" starttime="20170809 16:25:42.701" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:43.223" starttime="20170809 16:25:42.700" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:43.223" starttime="20170809 16:25:42.700" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:25:43.223" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:25:43.224" starttime="20170809 16:25:43.223" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:43.226" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:43.226" starttime="20170809 16:25:43.225" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:43.226" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:25:43.227" starttime="20170809 16:25:43.226" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:43.227" starttime="20170809 16:25:43.226" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:43.227" starttime="20170809 16:25:43.224" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:43.227" starttime="20170809 16:25:43.224" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:25:49.610" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:25:49.610" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:49.610" starttime="20170809 16:25:43.227" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:25:49.612" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:49.612" starttime="20170809 16:25:49.612" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:25:49.613" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:25:49.613" starttime="20170809 16:25:49.613" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:49.613" starttime="20170809 16:25:49.612" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:49.614" starttime="20170809 16:25:49.611" status="PASS"></status>
</kw>
<status endtime="20170809 16:25:49.614" starttime="20170809 16:25:49.611" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:25:49.614" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:25:49.614" starttime="20170809 16:25:49.614" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:49.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:25:49.614" starttime="20170809 16:25:42.699" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:25:49.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:25:49.615" starttime="20170809 16:25:49.615" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:25:49.615" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:25:49.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:25:49.616" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170809 16:25:49.616" starttime="20170809 16:25:49.615" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:49.616" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 16:25:49.616" starttime="20170809 16:25:42.698" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:25:49.617" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 16:25:49.617" starttime="20170809 16:25:42.698" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 16:25:49.617" level="FAIL">On != Off</msg>
<status endtime="20170809 16:25:49.617" starttime="20170809 16:25:49.617" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:49.617" starttime="20170809 16:25:42.698" status="FAIL"></status>
</kw>
<status endtime="20170809 16:25:49.618" starttime="20170809 16:25:42.697" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:25:59.623" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:25:59.624" starttime="20170809 16:25:59.623" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:25:59.624" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:25:59.624" starttime="20170809 16:25:59.624" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:25:59.625" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:25:59.625" starttime="20170809 16:25:59.625" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:25:59.626" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:25:59.626" starttime="20170809 16:25:59.625" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:00.068" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:00.068" starttime="20170809 16:25:59.626" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:00.068" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:00.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:00.068" starttime="20170809 16:25:59.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:00.069" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:00.069" starttime="20170809 16:26:00.068" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:00.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:00.069" starttime="20170809 16:26:00.069" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.070" starttime="20170809 16:25:59.622" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.070" starttime="20170809 16:25:59.622" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.070" starttime="20170809 16:25:59.621" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:00.070" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:26:00.070" starttime="20170809 16:26:00.070" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:00.072" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:00.072" starttime="20170809 16:26:00.072" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:00.073" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:00.074" starttime="20170809 16:26:00.073" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.074" starttime="20170809 16:26:00.073" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.074" starttime="20170809 16:26:00.071" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.074" starttime="20170809 16:26:00.071" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:00.635" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:00.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:00.635" starttime="20170809 16:26:00.074" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:00.637" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:00.637" starttime="20170809 16:26:00.637" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:00.641" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:00.641" starttime="20170809 16:26:00.641" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.641" starttime="20170809 16:26:00.637" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.641" starttime="20170809 16:26:00.636" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.641" starttime="20170809 16:26:00.636" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:00.642" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:00.642" starttime="20170809 16:26:00.641" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:00.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:00.642" starttime="20170809 16:25:59.620" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:00.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:00.643" starttime="20170809 16:26:00.642" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:00.643" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:00.643" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:00.643" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:26:00.643" starttime="20170809 16:26:00.643" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:00.644" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:26:00.644" starttime="20170809 16:25:59.620" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:00.644" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:26:00.644" starttime="20170809 16:25:59.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:26:00.644" starttime="20170809 16:26:00.644" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:00.645" starttime="20170809 16:25:59.619" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:00.649" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:00.649" starttime="20170809 16:26:00.648" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:00.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:00.650" starttime="20170809 16:26:00.649" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:00.650" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:00.650" starttime="20170809 16:26:00.650" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:00.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:00.651" starttime="20170809 16:26:00.651" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:01.135" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:01.136" starttime="20170809 16:26:00.652" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:01.136" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:01.136" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:01.136" starttime="20170809 16:26:00.651" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:01.136" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:01.137" starttime="20170809 16:26:01.136" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:01.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:01.137" starttime="20170809 16:26:01.137" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.137" starttime="20170809 16:26:00.648" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.137" starttime="20170809 16:26:00.647" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.138" starttime="20170809 16:26:00.647" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:01.138" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:26:01.138" starttime="20170809 16:26:01.138" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:01.141" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:01.141" starttime="20170809 16:26:01.139" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:01.142" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:01.142" starttime="20170809 16:26:01.141" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.142" starttime="20170809 16:26:01.141" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.142" starttime="20170809 16:26:01.139" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.142" starttime="20170809 16:26:01.138" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:01.698" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:01.698" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:01.698" starttime="20170809 16:26:01.142" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:01.700" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:01.700" starttime="20170809 16:26:01.700" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:01.701" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:01.701" starttime="20170809 16:26:01.701" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.701" starttime="20170809 16:26:01.700" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.701" starttime="20170809 16:26:01.699" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:01.701" starttime="20170809 16:26:01.699" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:01.702" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:01.702" starttime="20170809 16:26:01.702" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:01.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:01.702" starttime="20170809 16:26:00.646" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:01.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:01.703" starttime="20170809 16:26:01.702" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:01.703" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:01.703" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:01.704" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:26:01.704" starttime="20170809 16:26:01.703" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:01.704" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:26:01.704" starttime="20170809 16:26:00.645" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:01.704" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:26:01.704" starttime="20170809 16:26:00.645" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:26:01.705" starttime="20170809 16:26:01.704" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:01.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:01.710" starttime="20170809 16:26:01.709" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:01.710" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:01.711" starttime="20170809 16:26:01.710" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:01.711" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:01.711" starttime="20170809 16:26:01.711" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:01.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:01.713" starttime="20170809 16:26:01.712" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:02.001" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:02.001" starttime="20170809 16:26:01.714" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:02.001" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:02.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:02.002" starttime="20170809 16:26:01.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:02.002" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:02.002" starttime="20170809 16:26:02.002" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:02.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:02.003" starttime="20170809 16:26:02.002" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.003" starttime="20170809 16:26:01.708" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.003" starttime="20170809 16:26:01.707" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.003" starttime="20170809 16:26:01.707" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:02.004" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:26:02.004" starttime="20170809 16:26:02.003" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:02.006" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:02.006" starttime="20170809 16:26:02.005" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:02.007" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:02.007" starttime="20170809 16:26:02.007" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.007" starttime="20170809 16:26:02.006" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.007" starttime="20170809 16:26:02.005" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.007" starttime="20170809 16:26:02.004" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:02.073" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:26:02.073" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:02.073" starttime="20170809 16:26:02.007" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:02.074" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:02.075" starttime="20170809 16:26:02.074" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:02.075" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:02.075" starttime="20170809 16:26:02.075" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.076" starttime="20170809 16:26:02.075" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.076" starttime="20170809 16:26:02.074" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:02.076" starttime="20170809 16:26:02.073" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:02.076" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:02.076" starttime="20170809 16:26:02.076" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:02.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:02.076" starttime="20170809 16:26:01.706" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:02.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:02.077" starttime="20170809 16:26:02.077" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:02.078" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:02.078" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:02.078" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:26:02.078" starttime="20170809 16:26:02.077" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:02.078" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:26:02.078" starttime="20170809 16:26:01.706" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:02.078" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:26:02.078" starttime="20170809 16:26:01.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:26:02.079" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:26:02.079" starttime="20170809 16:26:02.079" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:02.079" starttime="20170809 16:26:01.705" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:02.079" starttime="20170809 16:25:59.618" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:12.086" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:12.086" starttime="20170809 16:26:12.085" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:12.087" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:12.087" starttime="20170809 16:26:12.086" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:12.087" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:12.087" starttime="20170809 16:26:12.087" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:12.088" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:12.088" starttime="20170809 16:26:12.088" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:12.391" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:12.391" starttime="20170809 16:26:12.089" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:12.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:12.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:12.391" starttime="20170809 16:26:12.088" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:12.392" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:12.392" starttime="20170809 16:26:12.391" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:12.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:12.392" starttime="20170809 16:26:12.392" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.393" starttime="20170809 16:26:12.085" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.393" starttime="20170809 16:26:12.084" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.393" starttime="20170809 16:26:12.083" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:12.393" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:26:12.393" starttime="20170809 16:26:12.393" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:12.395" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:12.395" starttime="20170809 16:26:12.395" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:12.396" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:12.396" starttime="20170809 16:26:12.396" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.396" starttime="20170809 16:26:12.395" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.397" starttime="20170809 16:26:12.394" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.397" starttime="20170809 16:26:12.394" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:12.922" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:12.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:12.923" starttime="20170809 16:26:12.397" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:12.925" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:12.925" starttime="20170809 16:26:12.924" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:12.926" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:12.926" starttime="20170809 16:26:12.925" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.926" starttime="20170809 16:26:12.925" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.926" starttime="20170809 16:26:12.923" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.926" starttime="20170809 16:26:12.923" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:12.926" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:12.927" starttime="20170809 16:26:12.926" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:12.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:12.927" starttime="20170809 16:26:12.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:12.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:12.927" starttime="20170809 16:26:12.927" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:12.928" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:12.928" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:12.928" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:26:12.928" starttime="20170809 16:26:12.928" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:12.928" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:26:12.928" starttime="20170809 16:26:12.081" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:12.929" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:26:12.929" starttime="20170809 16:26:12.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:26:12.930" starttime="20170809 16:26:12.929" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:12.930" starttime="20170809 16:26:12.081" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:12.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:12.935" starttime="20170809 16:26:12.934" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:12.936" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:12.936" starttime="20170809 16:26:12.936" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:12.937" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:12.937" starttime="20170809 16:26:12.937" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:12.938" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:12.938" starttime="20170809 16:26:12.938" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:13.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:13.273" starttime="20170809 16:26:12.939" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:13.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:13.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:13.273" starttime="20170809 16:26:12.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:13.273" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:13.274" starttime="20170809 16:26:13.273" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:13.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:13.274" starttime="20170809 16:26:13.274" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.274" starttime="20170809 16:26:12.934" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.274" starttime="20170809 16:26:12.933" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.275" starttime="20170809 16:26:12.932" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:13.275" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:26:13.275" starttime="20170809 16:26:13.275" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:13.278" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:13.278" starttime="20170809 16:26:13.277" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:13.279" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:13.279" starttime="20170809 16:26:13.278" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.279" starttime="20170809 16:26:13.278" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.279" starttime="20170809 16:26:13.276" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.279" starttime="20170809 16:26:13.275" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:13.938" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:13.938" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:13.938" starttime="20170809 16:26:13.279" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:13.940" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:13.940" starttime="20170809 16:26:13.939" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:13.941" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:13.941" starttime="20170809 16:26:13.941" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.941" starttime="20170809 16:26:13.940" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.941" starttime="20170809 16:26:13.939" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:13.941" starttime="20170809 16:26:13.938" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:13.942" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:13.942" starttime="20170809 16:26:13.942" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:13.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:13.942" starttime="20170809 16:26:12.931" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:13.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:13.943" starttime="20170809 16:26:13.943" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:13.944" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:13.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:13.944" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:26:13.944" starttime="20170809 16:26:13.944" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:13.945" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:26:13.945" starttime="20170809 16:26:12.931" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:13.945" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:26:13.945" starttime="20170809 16:26:12.930" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:26:13.946" starttime="20170809 16:26:13.946" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:13.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:13.952" starttime="20170809 16:26:13.951" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:13.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:13.953" starttime="20170809 16:26:13.952" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:13.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:13.953" starttime="20170809 16:26:13.953" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:13.954" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:13.954" starttime="20170809 16:26:13.953" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:14.326" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:14.326" starttime="20170809 16:26:13.954" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:14.327" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:14.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:14.327" starttime="20170809 16:26:13.954" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:14.327" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:14.327" starttime="20170809 16:26:14.327" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:14.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:14.328" starttime="20170809 16:26:14.328" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.328" starttime="20170809 16:26:13.950" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.328" starttime="20170809 16:26:13.950" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.328" starttime="20170809 16:26:13.949" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:14.329" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:26:14.329" starttime="20170809 16:26:14.329" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:14.331" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:14.331" starttime="20170809 16:26:14.330" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:14.332" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:14.332" starttime="20170809 16:26:14.332" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.332" starttime="20170809 16:26:14.331" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.332" starttime="20170809 16:26:14.330" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.332" starttime="20170809 16:26:14.329" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:14.978" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:26:14.978" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:14.978" starttime="20170809 16:26:14.333" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:14.980" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:14.980" starttime="20170809 16:26:14.979" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:14.981" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:14.981" starttime="20170809 16:26:14.981" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.981" starttime="20170809 16:26:14.980" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.981" starttime="20170809 16:26:14.979" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:14.981" starttime="20170809 16:26:14.978" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:14.982" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:14.982" starttime="20170809 16:26:14.982" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:14.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:14.982" starttime="20170809 16:26:13.948" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:14.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:14.983" starttime="20170809 16:26:14.982" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:14.983" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:14.984" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:14.984" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:26:14.984" starttime="20170809 16:26:14.983" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:14.984" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:26:14.984" starttime="20170809 16:26:13.947" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:14.985" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:26:14.985" starttime="20170809 16:26:13.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:26:14.986" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:26:14.986" starttime="20170809 16:26:14.985" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:14.986" starttime="20170809 16:26:13.946" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:14.986" starttime="20170809 16:26:12.080" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:24.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:24.992" starttime="20170809 16:26:24.991" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:24.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:24.992" starttime="20170809 16:26:24.992" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:24.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:24.993" starttime="20170809 16:26:24.993" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:24.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:24.994" starttime="20170809 16:26:24.993" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:25.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:25.338" starttime="20170809 16:26:24.994" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:25.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:25.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:25.338" starttime="20170809 16:26:24.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:25.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:25.339" starttime="20170809 16:26:25.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:25.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:25.339" starttime="20170809 16:26:25.339" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:25.340" starttime="20170809 16:26:24.991" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:25.340" starttime="20170809 16:26:24.990" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:25.340" starttime="20170809 16:26:24.989" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:25.341" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:26:25.341" starttime="20170809 16:26:25.340" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:25.343" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:25.343" starttime="20170809 16:26:25.342" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:25.344" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:25.344" starttime="20170809 16:26:25.343" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:25.344" starttime="20170809 16:26:25.343" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:25.344" starttime="20170809 16:26:25.341" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:25.344" starttime="20170809 16:26:25.341" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:26.276" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:26.276" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:26.276" starttime="20170809 16:26:25.344" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:26.278" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:26.278" starttime="20170809 16:26:26.277" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:26.279" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:26.279" starttime="20170809 16:26:26.279" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.279" starttime="20170809 16:26:26.278" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.279" starttime="20170809 16:26:26.277" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.279" starttime="20170809 16:26:26.276" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:26.280" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:26.280" starttime="20170809 16:26:26.280" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:26.280" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:26.280" starttime="20170809 16:26:24.988" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:26.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:26.281" starttime="20170809 16:26:26.281" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:26.281" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:26.282" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:26.282" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:26:26.282" starttime="20170809 16:26:26.281" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:26.282" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:26:26.282" starttime="20170809 16:26:24.988" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:26.282" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:26:26.282" starttime="20170809 16:26:24.987" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:26:26.283" starttime="20170809 16:26:26.283" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.283" starttime="20170809 16:26:24.987" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:26.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:26.287" starttime="20170809 16:26:26.286" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:26.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:26.288" starttime="20170809 16:26:26.287" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:26.288" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:26.288" starttime="20170809 16:26:26.288" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:26.289" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:26.289" starttime="20170809 16:26:26.288" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:26.622" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:26.622" starttime="20170809 16:26:26.289" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:26.622" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:26.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:26.622" starttime="20170809 16:26:26.289" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:26.623" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:26.623" starttime="20170809 16:26:26.622" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:26.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:26.623" starttime="20170809 16:26:26.623" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.624" starttime="20170809 16:26:26.286" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.624" starttime="20170809 16:26:26.285" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.624" starttime="20170809 16:26:26.285" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:26.624" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:26:26.624" starttime="20170809 16:26:26.624" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:26.627" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:26.627" starttime="20170809 16:26:26.626" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:26.628" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:26.628" starttime="20170809 16:26:26.627" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.628" starttime="20170809 16:26:26.627" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.628" starttime="20170809 16:26:26.625" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:26.628" starttime="20170809 16:26:26.625" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:27.374" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:27.374" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:27.374" starttime="20170809 16:26:26.628" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:27.376" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:27.376" starttime="20170809 16:26:27.375" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:27.377" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:27.377" starttime="20170809 16:26:27.376" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.377" starttime="20170809 16:26:27.376" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.377" starttime="20170809 16:26:27.375" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.377" starttime="20170809 16:26:27.374" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:27.377" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:27.378" starttime="20170809 16:26:27.377" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:27.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:27.378" starttime="20170809 16:26:26.284" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:27.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:27.378" starttime="20170809 16:26:27.378" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:27.379" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:27.379" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:27.379" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:26:27.379" starttime="20170809 16:26:27.379" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:27.379" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:26:27.379" starttime="20170809 16:26:26.284" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:27.380" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:26:27.380" starttime="20170809 16:26:26.283" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:26:27.380" starttime="20170809 16:26:27.380" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:27.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:27.385" starttime="20170809 16:26:27.384" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:27.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:27.385" starttime="20170809 16:26:27.385" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:27.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:27.386" starttime="20170809 16:26:27.386" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:27.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:27.387" starttime="20170809 16:26:27.386" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:27.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:27.758" starttime="20170809 16:26:27.387" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:27.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:27.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:27.759" starttime="20170809 16:26:27.387" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:27.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:27.759" starttime="20170809 16:26:27.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:27.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:27.760" starttime="20170809 16:26:27.760" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.760" starttime="20170809 16:26:27.384" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.760" starttime="20170809 16:26:27.383" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.760" starttime="20170809 16:26:27.383" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:27.761" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:26:27.761" starttime="20170809 16:26:27.761" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:27.763" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:27.763" starttime="20170809 16:26:27.762" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:27.764" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:27.764" starttime="20170809 16:26:27.764" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.764" starttime="20170809 16:26:27.763" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.764" starttime="20170809 16:26:27.762" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:27.764" starttime="20170809 16:26:27.761" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:28.429" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:26:28.429" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:28.429" starttime="20170809 16:26:27.765" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:28.431" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:28.431" starttime="20170809 16:26:28.430" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:28.432" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:28.432" starttime="20170809 16:26:28.432" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:28.432" starttime="20170809 16:26:28.431" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:28.432" starttime="20170809 16:26:28.430" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:28.433" starttime="20170809 16:26:28.429" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:28.433" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:28.433" starttime="20170809 16:26:28.433" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:28.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:28.433" starttime="20170809 16:26:27.382" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:28.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:28.434" starttime="20170809 16:26:28.433" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:28.434" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:28.434" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:28.435" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:26:28.435" starttime="20170809 16:26:28.434" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:28.435" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:26:28.435" starttime="20170809 16:26:27.381" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:28.435" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:26:28.435" starttime="20170809 16:26:27.381" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:26:28.436" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:26:28.436" starttime="20170809 16:26:28.435" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:28.436" starttime="20170809 16:26:27.380" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:28.436" starttime="20170809 16:26:24.987" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:38.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:38.442" starttime="20170809 16:26:38.442" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:38.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:38.443" starttime="20170809 16:26:38.443" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:38.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:38.444" starttime="20170809 16:26:38.443" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:38.444" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:38.444" starttime="20170809 16:26:38.444" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:38.812" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:38.812" starttime="20170809 16:26:38.445" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:38.812" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:38.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:38.812" starttime="20170809 16:26:38.445" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:38.813" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:38.813" starttime="20170809 16:26:38.813" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:38.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:38.814" starttime="20170809 16:26:38.814" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.814" starttime="20170809 16:26:38.441" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.814" starttime="20170809 16:26:38.441" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.814" starttime="20170809 16:26:38.440" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:38.815" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:26:38.815" starttime="20170809 16:26:38.815" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:38.817" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:38.818" starttime="20170809 16:26:38.816" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:38.819" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:38.819" starttime="20170809 16:26:38.818" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.819" starttime="20170809 16:26:38.818" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.819" starttime="20170809 16:26:38.816" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.819" starttime="20170809 16:26:38.815" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:38.934" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:38.934" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:38.935" starttime="20170809 16:26:38.819" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:38.939" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:38.939" starttime="20170809 16:26:38.936" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:38.940" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:38.940" starttime="20170809 16:26:38.940" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.940" starttime="20170809 16:26:38.939" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.940" starttime="20170809 16:26:38.935" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.940" starttime="20170809 16:26:38.935" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:38.941" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:38.941" starttime="20170809 16:26:38.941" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:38.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:38.941" starttime="20170809 16:26:38.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:38.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:38.942" starttime="20170809 16:26:38.941" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:38.942" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:38.942" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:38.942" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:26:38.942" starttime="20170809 16:26:38.942" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:38.943" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:26:38.943" starttime="20170809 16:26:38.438" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:38.943" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:26:38.943" starttime="20170809 16:26:38.438" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:26:38.944" starttime="20170809 16:26:38.943" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:38.944" starttime="20170809 16:26:38.437" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:38.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:38.948" starttime="20170809 16:26:38.947" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:38.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:38.949" starttime="20170809 16:26:38.948" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:38.950" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:38.950" starttime="20170809 16:26:38.949" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:38.951" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:38.951" starttime="20170809 16:26:38.950" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:39.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:39.537" starttime="20170809 16:26:38.952" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:39.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:39.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:39.538" starttime="20170809 16:26:38.951" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:39.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:39.538" starttime="20170809 16:26:39.538" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:39.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:39.539" starttime="20170809 16:26:39.539" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:39.539" starttime="20170809 16:26:38.946" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:39.539" starttime="20170809 16:26:38.946" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:39.539" starttime="20170809 16:26:38.945" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:39.540" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:26:39.540" starttime="20170809 16:26:39.540" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:39.542" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:39.542" starttime="20170809 16:26:39.541" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:39.543" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:39.543" starttime="20170809 16:26:39.543" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:39.544" starttime="20170809 16:26:39.543" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:39.544" starttime="20170809 16:26:39.541" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:39.544" starttime="20170809 16:26:39.540" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:40.014" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:40.014" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:40.014" starttime="20170809 16:26:39.544" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:40.016" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:40.016" starttime="20170809 16:26:40.015" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:40.017" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:40.017" starttime="20170809 16:26:40.017" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.017" starttime="20170809 16:26:40.016" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.017" starttime="20170809 16:26:40.015" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.017" starttime="20170809 16:26:40.015" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:40.018" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:40.018" starttime="20170809 16:26:40.018" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:40.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:40.018" starttime="20170809 16:26:38.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:40.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:40.019" starttime="20170809 16:26:40.018" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:40.019" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:40.019" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:40.019" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:26:40.020" starttime="20170809 16:26:40.019" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:40.020" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:26:40.020" starttime="20170809 16:26:38.944" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:40.020" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:26:40.020" starttime="20170809 16:26:38.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:26:40.021" starttime="20170809 16:26:40.021" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:40.027" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:40.027" starttime="20170809 16:26:40.026" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:40.028" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:40.028" starttime="20170809 16:26:40.027" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:40.029" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:40.029" starttime="20170809 16:26:40.028" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:40.030" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:40.030" starttime="20170809 16:26:40.029" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:40.511" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:40.511" starttime="20170809 16:26:40.031" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:40.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:40.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:40.511" starttime="20170809 16:26:40.030" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:40.512" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:40.512" starttime="20170809 16:26:40.512" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:40.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:40.513" starttime="20170809 16:26:40.512" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.513" starttime="20170809 16:26:40.025" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.513" starttime="20170809 16:26:40.025" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.513" starttime="20170809 16:26:40.024" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:40.514" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:26:40.514" starttime="20170809 16:26:40.513" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:40.516" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:40.516" starttime="20170809 16:26:40.515" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:40.517" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:40.517" starttime="20170809 16:26:40.516" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.517" starttime="20170809 16:26:40.516" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.517" starttime="20170809 16:26:40.514" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:40.517" starttime="20170809 16:26:40.514" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:41.053" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:26:41.054" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:41.054" starttime="20170809 16:26:40.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:41.056" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:41.056" starttime="20170809 16:26:41.055" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:41.057" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:41.057" starttime="20170809 16:26:41.057" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:41.057" starttime="20170809 16:26:41.056" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:41.057" starttime="20170809 16:26:41.054" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:41.057" starttime="20170809 16:26:41.054" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:41.058" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:41.058" starttime="20170809 16:26:41.058" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:41.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:41.058" starttime="20170809 16:26:40.023" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:41.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:41.059" starttime="20170809 16:26:41.058" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:41.059" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:41.059" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:41.059" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:26:41.059" starttime="20170809 16:26:41.059" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:41.060" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:26:41.060" starttime="20170809 16:26:40.022" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:41.060" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:26:41.060" starttime="20170809 16:26:40.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:26:41.061" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:26:41.061" starttime="20170809 16:26:41.060" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:41.061" starttime="20170809 16:26:40.021" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:41.061" starttime="20170809 16:26:38.437" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:51.067" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:51.067" starttime="20170809 16:26:51.067" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:51.068" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:51.068" starttime="20170809 16:26:51.068" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:51.069" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:51.069" starttime="20170809 16:26:51.068" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:51.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:51.069" starttime="20170809 16:26:51.069" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:51.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:51.492" starttime="20170809 16:26:51.070" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:51.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:51.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:51.493" starttime="20170809 16:26:51.070" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:51.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:51.493" starttime="20170809 16:26:51.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:51.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:51.494" starttime="20170809 16:26:51.493" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:51.494" starttime="20170809 16:26:51.066" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:51.494" starttime="20170809 16:26:51.065" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:51.494" starttime="20170809 16:26:51.064" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:51.495" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:26:51.495" starttime="20170809 16:26:51.494" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:51.497" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:51.497" starttime="20170809 16:26:51.496" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:51.498" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:51.498" starttime="20170809 16:26:51.498" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:51.498" starttime="20170809 16:26:51.497" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:51.498" starttime="20170809 16:26:51.496" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:51.498" starttime="20170809 16:26:51.495" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:52.277" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:52.277" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:52.277" starttime="20170809 16:26:51.498" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:52.280" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:52.280" starttime="20170809 16:26:52.279" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:52.280" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:52.281" starttime="20170809 16:26:52.280" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.281" starttime="20170809 16:26:52.280" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.281" starttime="20170809 16:26:52.278" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.281" starttime="20170809 16:26:52.278" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:52.281" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:52.281" starttime="20170809 16:26:52.281" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:52.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:52.282" starttime="20170809 16:26:51.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:52.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:52.283" starttime="20170809 16:26:52.282" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:52.283" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:52.284" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:52.284" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:26:52.284" starttime="20170809 16:26:52.283" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:52.284" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:26:52.284" starttime="20170809 16:26:51.063" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:52.284" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:26:52.284" starttime="20170809 16:26:51.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:26:52.285" starttime="20170809 16:26:52.285" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.285" starttime="20170809 16:26:51.062" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:52.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:52.289" starttime="20170809 16:26:52.288" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:52.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:52.290" starttime="20170809 16:26:52.289" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:52.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:52.291" starttime="20170809 16:26:52.291" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:52.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:52.292" starttime="20170809 16:26:52.291" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:52.690" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:52.691" starttime="20170809 16:26:52.292" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:52.691" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:52.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:52.691" starttime="20170809 16:26:52.292" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:52.691" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:52.692" starttime="20170809 16:26:52.691" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:52.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:52.692" starttime="20170809 16:26:52.692" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.692" starttime="20170809 16:26:52.288" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.692" starttime="20170809 16:26:52.287" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.693" starttime="20170809 16:26:52.287" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:52.693" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:26:52.693" starttime="20170809 16:26:52.693" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:52.696" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:52.696" starttime="20170809 16:26:52.694" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:52.696" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:26:52.697" starttime="20170809 16:26:52.696" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.697" starttime="20170809 16:26:52.696" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.697" starttime="20170809 16:26:52.694" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:52.697" starttime="20170809 16:26:52.693" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:53.481" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:26:53.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:53.481" starttime="20170809 16:26:52.697" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:53.483" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:53.483" starttime="20170809 16:26:53.482" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:53.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:53.484" starttime="20170809 16:26:53.484" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.484" starttime="20170809 16:26:53.483" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.484" starttime="20170809 16:26:53.482" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.484" starttime="20170809 16:26:53.481" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:53.485" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:53.485" starttime="20170809 16:26:53.484" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:53.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:53.485" starttime="20170809 16:26:52.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:53.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:53.486" starttime="20170809 16:26:53.485" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:53.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:53.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:53.486" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:26:53.486" starttime="20170809 16:26:53.486" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:53.486" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:26:53.487" starttime="20170809 16:26:52.285" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:53.487" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:26:53.487" starttime="20170809 16:26:52.285" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:26:53.487" starttime="20170809 16:26:53.487" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:26:53.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:26:53.492" starttime="20170809 16:26:53.491" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:26:53.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:26:53.492" starttime="20170809 16:26:53.492" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:26:53.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:26:53.493" starttime="20170809 16:26:53.493" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:26:53.494" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:26:53.494" starttime="20170809 16:26:53.493" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:26:53.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:26:53.902" starttime="20170809 16:26:53.494" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:53.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:26:53.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:53.902" starttime="20170809 16:26:53.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:26:53.903" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:53.903" starttime="20170809 16:26:53.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:53.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:53.904" starttime="20170809 16:26:53.904" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.904" starttime="20170809 16:26:53.490" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.905" starttime="20170809 16:26:53.490" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.905" starttime="20170809 16:26:53.489" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:26:53.906" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:26:53.906" starttime="20170809 16:26:53.905" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:53.909" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:53.909" starttime="20170809 16:26:53.908" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:53.910" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:26:53.910" starttime="20170809 16:26:53.910" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.910" starttime="20170809 16:26:53.909" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.910" starttime="20170809 16:26:53.907" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:53.910" starttime="20170809 16:26:53.906" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:26:54.295" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:26:54.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:54.296" starttime="20170809 16:26:53.911" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:26:54.297" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:54.297" starttime="20170809 16:26:54.297" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:26:54.298" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:26:54.298" starttime="20170809 16:26:54.298" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:54.298" starttime="20170809 16:26:54.297" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:54.299" starttime="20170809 16:26:54.296" status="PASS"></status>
</kw>
<status endtime="20170809 16:26:54.299" starttime="20170809 16:26:54.296" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:26:54.299" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:26:54.299" starttime="20170809 16:26:54.299" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:54.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:26:54.299" starttime="20170809 16:26:53.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:26:54.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:26:54.300" starttime="20170809 16:26:54.300" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:26:54.301" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:26:54.301" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:26:54.301" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:26:54.301" starttime="20170809 16:26:54.300" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:54.301" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:26:54.301" starttime="20170809 16:26:53.488" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:26:54.301" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:26:54.301" starttime="20170809 16:26:53.488" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:26:54.302" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:26:54.302" starttime="20170809 16:26:54.302" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:54.302" starttime="20170809 16:26:53.488" status="FAIL"></status>
</kw>
<status endtime="20170809 16:26:54.302" starttime="20170809 16:26:51.062" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:04.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:04.308" starttime="20170809 16:27:04.307" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:04.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:04.309" starttime="20170809 16:27:04.308" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:04.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:04.309" starttime="20170809 16:27:04.309" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:04.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:04.310" starttime="20170809 16:27:04.310" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:04.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:04.621" starttime="20170809 16:27:04.311" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:04.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:04.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:04.621" starttime="20170809 16:27:04.310" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:04.622" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:04.622" starttime="20170809 16:27:04.621" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:04.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:04.623" starttime="20170809 16:27:04.622" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.623" starttime="20170809 16:27:04.307" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.623" starttime="20170809 16:27:04.306" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.623" starttime="20170809 16:27:04.305" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:04.623" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:27:04.624" starttime="20170809 16:27:04.623" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:04.626" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:04.626" starttime="20170809 16:27:04.625" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:04.626" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:04.627" starttime="20170809 16:27:04.626" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.627" starttime="20170809 16:27:04.626" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.627" starttime="20170809 16:27:04.624" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.627" starttime="20170809 16:27:04.624" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:04.737" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:27:04.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:04.737" starttime="20170809 16:27:04.627" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:04.739" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:04.739" starttime="20170809 16:27:04.738" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:04.740" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:04.740" starttime="20170809 16:27:04.740" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.740" starttime="20170809 16:27:04.739" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.741" starttime="20170809 16:27:04.738" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.741" starttime="20170809 16:27:04.738" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:04.741" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:04.741" starttime="20170809 16:27:04.741" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:04.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:04.741" starttime="20170809 16:27:04.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:04.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:04.742" starttime="20170809 16:27:04.742" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:04.743" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:04.743" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:04.743" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:27:04.743" starttime="20170809 16:27:04.742" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:04.743" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:27:04.743" starttime="20170809 16:27:04.304" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:04.743" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:27:04.743" starttime="20170809 16:27:04.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:27:04.744" starttime="20170809 16:27:04.744" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:04.744" starttime="20170809 16:27:04.303" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:04.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:04.748" starttime="20170809 16:27:04.747" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:04.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:04.749" starttime="20170809 16:27:04.748" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:04.749" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:04.749" starttime="20170809 16:27:04.749" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:04.750" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:04.750" starttime="20170809 16:27:04.749" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:05.166" starttime="20170809 16:27:04.750" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:05.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:05.167" starttime="20170809 16:27:04.750" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:05.167" starttime="20170809 16:27:05.167" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:05.168" starttime="20170809 16:27:05.168" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.168" starttime="20170809 16:27:04.747" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.168" starttime="20170809 16:27:04.746" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.168" starttime="20170809 16:27:04.746" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:05.169" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:27:05.169" starttime="20170809 16:27:05.168" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:05.171" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:05.171" starttime="20170809 16:27:05.170" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:05.172" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:05.172" starttime="20170809 16:27:05.172" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.172" starttime="20170809 16:27:05.171" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.173" starttime="20170809 16:27:05.170" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.173" starttime="20170809 16:27:05.169" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:05.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:27:05.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:05.375" starttime="20170809 16:27:05.173" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:05.377" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:05.377" starttime="20170809 16:27:05.376" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:05.378" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:05.378" starttime="20170809 16:27:05.378" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.378" starttime="20170809 16:27:05.377" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.378" starttime="20170809 16:27:05.376" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.378" starttime="20170809 16:27:05.375" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:05.379" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:05.379" starttime="20170809 16:27:05.379" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:05.379" starttime="20170809 16:27:04.745" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:05.380" starttime="20170809 16:27:05.379" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:05.380" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:05.380" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:05.380" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:27:05.380" starttime="20170809 16:27:05.380" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.381" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:27:05.381" starttime="20170809 16:27:04.745" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.381" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:27:05.381" starttime="20170809 16:27:04.744" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:27:05.382" starttime="20170809 16:27:05.381" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:05.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:05.386" starttime="20170809 16:27:05.385" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:05.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:05.386" starttime="20170809 16:27:05.386" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:05.387" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:05.387" starttime="20170809 16:27:05.386" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:05.388" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:05.388" starttime="20170809 16:27:05.387" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:05.653" starttime="20170809 16:27:05.388" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:05.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:05.654" starttime="20170809 16:27:05.388" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:05.654" starttime="20170809 16:27:05.654" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:05.655" starttime="20170809 16:27:05.654" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.655" starttime="20170809 16:27:05.385" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.655" starttime="20170809 16:27:05.384" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.655" starttime="20170809 16:27:05.384" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:05.656" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:27:05.656" starttime="20170809 16:27:05.656" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:05.658" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:27:05.658" starttime="20170809 16:27:05.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:05.659" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:27:05.659" starttime="20170809 16:27:05.659" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.659" starttime="20170809 16:27:05.658" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.659" starttime="20170809 16:27:05.657" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.659" starttime="20170809 16:27:05.656" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:05.786" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:27:05.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:05.787" starttime="20170809 16:27:05.659" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:05.788" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:05.789" starttime="20170809 16:27:05.788" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:05.789" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:05.790" starttime="20170809 16:27:05.789" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.790" starttime="20170809 16:27:05.789" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.790" starttime="20170809 16:27:05.787" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:05.790" starttime="20170809 16:27:05.787" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:05.790" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:05.790" starttime="20170809 16:27:05.790" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:05.791" starttime="20170809 16:27:05.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:05.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:05.792" starttime="20170809 16:27:05.791" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:05.793" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:05.793" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:05.793" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:27:05.793" starttime="20170809 16:27:05.792" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.793" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:27:05.793" starttime="20170809 16:27:05.382" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:05.794" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:27:05.794" starttime="20170809 16:27:05.382" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:27:05.795" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:27:05.795" starttime="20170809 16:27:05.794" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:05.795" starttime="20170809 16:27:05.382" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:05.795" starttime="20170809 16:27:04.303" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:15.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:15.801" starttime="20170809 16:27:15.800" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:15.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:15.802" starttime="20170809 16:27:15.801" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:15.802" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:15.802" starttime="20170809 16:27:15.802" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:15.803" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:15.803" starttime="20170809 16:27:15.803" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.088" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:16.089" starttime="20170809 16:27:15.804" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:16.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:16.089" starttime="20170809 16:27:15.803" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.090" starttime="20170809 16:27:16.089" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.090" starttime="20170809 16:27:16.090" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.090" starttime="20170809 16:27:15.800" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.091" starttime="20170809 16:27:15.799" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.091" starttime="20170809 16:27:15.798" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:16.091" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:27:16.091" starttime="20170809 16:27:16.091" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:16.093" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:16.093" starttime="20170809 16:27:16.093" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:16.094" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:16.094" starttime="20170809 16:27:16.094" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.094" starttime="20170809 16:27:16.094" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.095" starttime="20170809 16:27:16.092" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.095" starttime="20170809 16:27:16.092" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:16.274" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:27:16.274" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:16.274" starttime="20170809 16:27:16.095" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:16.279" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:16.279" starttime="20170809 16:27:16.275" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:16.280" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:16.280" starttime="20170809 16:27:16.280" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.280" starttime="20170809 16:27:16.279" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.280" starttime="20170809 16:27:16.275" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.281" starttime="20170809 16:27:16.274" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:16.281" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:16.281" starttime="20170809 16:27:16.281" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:16.281" starttime="20170809 16:27:15.798" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.282" starttime="20170809 16:27:16.282" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:16.283" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:16.283" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:16.283" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:27:16.283" starttime="20170809 16:27:16.282" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.283" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:27:16.283" starttime="20170809 16:27:15.797" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.283" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:27:16.284" starttime="20170809 16:27:15.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:27:16.284" starttime="20170809 16:27:16.284" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.284" starttime="20170809 16:27:15.796" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:16.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:16.288" starttime="20170809 16:27:16.288" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:16.289" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:16.289" starttime="20170809 16:27:16.289" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:16.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:16.290" starttime="20170809 16:27:16.289" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:16.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:16.290" starttime="20170809 16:27:16.290" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.534" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:16.534" starttime="20170809 16:27:16.291" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:16.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:16.535" starttime="20170809 16:27:16.291" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.535" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.535" starttime="20170809 16:27:16.535" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.536" starttime="20170809 16:27:16.536" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.536" starttime="20170809 16:27:16.287" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.536" starttime="20170809 16:27:16.287" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.536" starttime="20170809 16:27:16.286" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:16.537" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:27:16.537" starttime="20170809 16:27:16.537" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:16.540" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:16.540" starttime="20170809 16:27:16.538" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:16.541" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:16.541" starttime="20170809 16:27:16.541" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.541" starttime="20170809 16:27:16.540" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.541" starttime="20170809 16:27:16.538" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.541" starttime="20170809 16:27:16.537" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:16.700" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:27:16.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:16.700" starttime="20170809 16:27:16.542" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:16.701" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:16.702" starttime="20170809 16:27:16.701" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:16.702" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:16.702" starttime="20170809 16:27:16.702" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.703" starttime="20170809 16:27:16.702" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.703" starttime="20170809 16:27:16.700" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.703" starttime="20170809 16:27:16.700" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:16.703" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:16.703" starttime="20170809 16:27:16.703" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:16.703" starttime="20170809 16:27:16.285" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.704" starttime="20170809 16:27:16.704" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:16.705" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:16.705" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:16.705" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:27:16.705" starttime="20170809 16:27:16.704" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.705" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:27:16.705" starttime="20170809 16:27:16.285" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.705" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:27:16.705" starttime="20170809 16:27:16.284" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:27:16.706" starttime="20170809 16:27:16.706" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:16.710" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:16.711" starttime="20170809 16:27:16.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:16.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:16.712" starttime="20170809 16:27:16.711" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:16.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:16.713" starttime="20170809 16:27:16.712" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:16.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:16.714" starttime="20170809 16:27:16.713" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.948" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:16.948" starttime="20170809 16:27:16.715" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:16.948" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:16.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:16.948" starttime="20170809 16:27:16.714" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.949" starttime="20170809 16:27:16.949" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:16.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:16.950" starttime="20170809 16:27:16.949" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.950" starttime="20170809 16:27:16.709" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.950" starttime="20170809 16:27:16.709" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.950" starttime="20170809 16:27:16.708" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:16.951" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:27:16.951" starttime="20170809 16:27:16.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:16.953" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:27:16.953" starttime="20170809 16:27:16.952" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:16.954" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:27:16.954" starttime="20170809 16:27:16.953" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.954" starttime="20170809 16:27:16.953" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.954" starttime="20170809 16:27:16.951" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:16.954" starttime="20170809 16:27:16.951" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:17.026" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:27:17.026" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:17.026" starttime="20170809 16:27:16.954" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:17.028" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:17.028" starttime="20170809 16:27:17.027" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:17.029" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:17.029" starttime="20170809 16:27:17.029" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:17.029" starttime="20170809 16:27:17.028" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:17.029" starttime="20170809 16:27:17.027" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:17.029" starttime="20170809 16:27:17.027" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:17.030" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:17.030" starttime="20170809 16:27:17.029" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:17.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:17.030" starttime="20170809 16:27:16.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:17.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:17.031" starttime="20170809 16:27:17.030" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:17.031" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:17.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:17.031" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:27:17.031" starttime="20170809 16:27:17.031" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:17.032" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:27:17.032" starttime="20170809 16:27:16.707" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:17.032" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:27:17.032" starttime="20170809 16:27:16.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:27:17.033" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:27:17.033" starttime="20170809 16:27:17.032" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:17.033" starttime="20170809 16:27:16.706" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:17.033" starttime="20170809 16:27:15.796" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:27.039" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:27.039" starttime="20170809 16:27:27.038" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:27.040" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:27.040" starttime="20170809 16:27:27.039" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:27.040" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:27.040" starttime="20170809 16:27:27.040" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:27.041" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:27.041" starttime="20170809 16:27:27.041" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:28.916" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:28.916" starttime="20170809 16:27:27.042" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:28.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:28.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:28.916" starttime="20170809 16:27:27.041" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:28.917" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:28.917" starttime="20170809 16:27:28.916" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:28.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:28.918" starttime="20170809 16:27:28.917" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:28.918" starttime="20170809 16:27:27.038" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:28.918" starttime="20170809 16:27:27.037" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:28.918" starttime="20170809 16:27:27.036" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:28.919" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:27:28.919" starttime="20170809 16:27:28.918" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:28.921" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:28.921" starttime="20170809 16:27:28.920" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:28.922" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:28.922" starttime="20170809 16:27:28.922" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:28.922" starttime="20170809 16:27:28.921" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:28.922" starttime="20170809 16:27:28.919" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:28.922" starttime="20170809 16:27:28.919" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:35.490" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:27:35.490" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:35.490" starttime="20170809 16:27:28.922" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:35.493" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:35.493" starttime="20170809 16:27:35.492" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:35.493" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:35.494" starttime="20170809 16:27:35.493" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.494" starttime="20170809 16:27:35.493" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.494" starttime="20170809 16:27:35.491" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.494" starttime="20170809 16:27:35.491" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:35.494" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:35.494" starttime="20170809 16:27:35.494" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:35.495" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:35.495" starttime="20170809 16:27:27.036" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:35.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:35.495" starttime="20170809 16:27:35.495" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:35.496" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:35.496" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:35.496" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:27:35.496" starttime="20170809 16:27:35.495" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:35.496" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:27:35.496" starttime="20170809 16:27:27.035" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:35.497" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:27:35.497" starttime="20170809 16:27:27.035" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:27:35.497" starttime="20170809 16:27:35.497" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.497" starttime="20170809 16:27:27.034" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:35.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:35.501" starttime="20170809 16:27:35.500" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:35.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:35.502" starttime="20170809 16:27:35.501" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:35.502" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:35.502" starttime="20170809 16:27:35.502" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:35.503" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:35.503" starttime="20170809 16:27:35.503" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:35.679" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:35.679" starttime="20170809 16:27:35.504" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:35.679" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:35.679" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:35.679" starttime="20170809 16:27:35.503" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:35.680" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:35.680" starttime="20170809 16:27:35.680" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:35.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:35.681" starttime="20170809 16:27:35.680" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.681" starttime="20170809 16:27:35.500" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.681" starttime="20170809 16:27:35.500" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.681" starttime="20170809 16:27:35.499" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:35.682" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:27:35.682" starttime="20170809 16:27:35.681" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:35.684" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:35.684" starttime="20170809 16:27:35.683" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:35.685" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:35.685" starttime="20170809 16:27:35.685" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.685" starttime="20170809 16:27:35.684" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.686" starttime="20170809 16:27:35.683" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:35.686" starttime="20170809 16:27:35.682" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:36.112" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:27:36.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:36.112" starttime="20170809 16:27:35.686" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:36.114" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:36.114" starttime="20170809 16:27:36.113" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:36.115" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:36.115" starttime="20170809 16:27:36.115" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.115" starttime="20170809 16:27:36.114" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.115" starttime="20170809 16:27:36.113" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.115" starttime="20170809 16:27:36.113" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:36.116" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:36.116" starttime="20170809 16:27:36.116" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:36.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:36.116" starttime="20170809 16:27:35.498" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:36.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:36.117" starttime="20170809 16:27:36.116" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:36.117" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:36.117" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:36.117" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:27:36.117" starttime="20170809 16:27:36.117" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:36.118" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:27:36.118" starttime="20170809 16:27:35.498" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:36.118" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:27:36.118" starttime="20170809 16:27:35.498" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:27:36.118" starttime="20170809 16:27:36.118" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:36.122" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:36.123" starttime="20170809 16:27:36.122" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:36.123" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:36.123" starttime="20170809 16:27:36.123" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:36.124" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:36.124" starttime="20170809 16:27:36.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:36.125" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:36.125" starttime="20170809 16:27:36.124" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:36.947" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:36.947" starttime="20170809 16:27:36.125" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:36.948" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:36.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:36.948" starttime="20170809 16:27:36.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:36.948" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:36.948" starttime="20170809 16:27:36.948" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:36.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:36.949" starttime="20170809 16:27:36.949" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.949" starttime="20170809 16:27:36.122" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.949" starttime="20170809 16:27:36.121" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.949" starttime="20170809 16:27:36.121" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:36.950" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:27:36.950" starttime="20170809 16:27:36.949" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:36.952" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:27:36.952" starttime="20170809 16:27:36.951" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:36.953" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:27:36.953" starttime="20170809 16:27:36.953" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.953" starttime="20170809 16:27:36.952" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.953" starttime="20170809 16:27:36.951" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:36.953" starttime="20170809 16:27:36.950" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:37.106" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:27:37.106" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:37.106" starttime="20170809 16:27:36.954" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:37.109" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:37.109" starttime="20170809 16:27:37.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:37.109" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:37.110" starttime="20170809 16:27:37.109" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:37.110" starttime="20170809 16:27:37.109" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:37.110" starttime="20170809 16:27:37.107" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:37.110" starttime="20170809 16:27:37.107" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:37.110" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:37.110" starttime="20170809 16:27:37.110" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:37.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:37.110" starttime="20170809 16:27:36.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:37.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:37.111" starttime="20170809 16:27:37.111" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:37.112" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:37.112" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:37.112" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:27:37.112" starttime="20170809 16:27:37.111" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:37.112" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:27:37.112" starttime="20170809 16:27:36.119" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:37.112" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:27:37.113" starttime="20170809 16:27:36.119" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:27:37.113" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:27:37.113" starttime="20170809 16:27:37.113" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:37.113" starttime="20170809 16:27:36.119" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:37.114" starttime="20170809 16:27:27.033" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:27:47.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:27:47.119" starttime="20170809 16:27:47.119" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:27:47.120" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:27:47.120" starttime="20170809 16:27:47.120" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:27:47.121" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:27:47.121" starttime="20170809 16:27:47.120" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:27:47.122" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:27:47.122" starttime="20170809 16:27:47.121" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:27:47.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:27:47.706" starttime="20170809 16:27:47.123" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:47.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:27:47.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:47.706" starttime="20170809 16:27:47.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:27:47.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:47.707" starttime="20170809 16:27:47.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:47.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:47.708" starttime="20170809 16:27:47.707" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:47.708" starttime="20170809 16:27:47.118" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:47.708" starttime="20170809 16:27:47.117" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:47.708" starttime="20170809 16:27:47.117" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:27:47.709" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:27:47.709" starttime="20170809 16:27:47.708" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:47.711" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:47.711" starttime="20170809 16:27:47.710" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:47.712" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:27:47.712" starttime="20170809 16:27:47.711" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:47.712" starttime="20170809 16:27:47.711" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:47.712" starttime="20170809 16:27:47.709" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:47.712" starttime="20170809 16:27:47.709" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:27:52.918" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:27:52.919" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:52.919" starttime="20170809 16:27:47.712" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:27:52.921" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:52.921" starttime="20170809 16:27:52.920" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:27:52.922" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:27:52.922" starttime="20170809 16:27:52.922" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:52.922" starttime="20170809 16:27:52.921" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:52.922" starttime="20170809 16:27:52.920" status="PASS"></status>
</kw>
<status endtime="20170809 16:27:52.922" starttime="20170809 16:27:52.919" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:27:52.923" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:27:52.923" starttime="20170809 16:27:52.923" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:52.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:27:52.923" starttime="20170809 16:27:47.116" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:27:52.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:27:52.924" starttime="20170809 16:27:52.923" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:27:52.924" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:27:52.924" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:27:52.924" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170809 16:27:52.924" starttime="20170809 16:27:52.924" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:52.925" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 16:27:52.925" starttime="20170809 16:27:47.115" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:27:52.925" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 16:27:52.925" starttime="20170809 16:27:47.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 16:27:52.926" level="FAIL">On != Off</msg>
<status endtime="20170809 16:27:52.926" starttime="20170809 16:27:52.925" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:52.926" starttime="20170809 16:27:47.115" status="FAIL"></status>
</kw>
<status endtime="20170809 16:27:52.926" starttime="20170809 16:27:47.114" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:02.931" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:02.931" starttime="20170809 16:28:02.931" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:02.932" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:02.932" starttime="20170809 16:28:02.932" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:02.933" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:02.933" starttime="20170809 16:28:02.932" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:02.933" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:02.933" starttime="20170809 16:28:02.933" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:03.487" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:03.488" starttime="20170809 16:28:02.934" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:03.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:03.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:03.488" starttime="20170809 16:28:02.934" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:03.488" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:03.489" starttime="20170809 16:28:03.488" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:03.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:03.489" starttime="20170809 16:28:03.489" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.489" starttime="20170809 16:28:02.930" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.489" starttime="20170809 16:28:02.930" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.490" starttime="20170809 16:28:02.929" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:03.490" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:28:03.490" starttime="20170809 16:28:03.490" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:03.492" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:03.492" starttime="20170809 16:28:03.491" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:03.493" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:03.493" starttime="20170809 16:28:03.493" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.493" starttime="20170809 16:28:03.492" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.493" starttime="20170809 16:28:03.491" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.494" starttime="20170809 16:28:03.490" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:03.947" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:03.947" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:03.948" starttime="20170809 16:28:03.494" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:03.950" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:03.950" starttime="20170809 16:28:03.949" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:03.951" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:03.951" starttime="20170809 16:28:03.951" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.951" starttime="20170809 16:28:03.950" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.952" starttime="20170809 16:28:03.948" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.952" starttime="20170809 16:28:03.948" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:03.952" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:03.952" starttime="20170809 16:28:03.952" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:03.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:03.952" starttime="20170809 16:28:02.928" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:03.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:03.953" starttime="20170809 16:28:03.953" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:03.953" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:03.954" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:03.954" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:28:03.954" starttime="20170809 16:28:03.953" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:03.954" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:28:03.954" starttime="20170809 16:28:02.928" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:03.954" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:28:03.954" starttime="20170809 16:28:02.927" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:28:03.955" starttime="20170809 16:28:03.955" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:03.955" starttime="20170809 16:28:02.927" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:03.958" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:03.959" starttime="20170809 16:28:03.958" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:03.960" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:03.960" starttime="20170809 16:28:03.959" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:03.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:03.960" starttime="20170809 16:28:03.960" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:03.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:03.961" starttime="20170809 16:28:03.961" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.139" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:04.139" starttime="20170809 16:28:03.962" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:04.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:04.140" starttime="20170809 16:28:03.961" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.140" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:04.140" starttime="20170809 16:28:04.140" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:04.141" starttime="20170809 16:28:04.141" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.141" starttime="20170809 16:28:03.958" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.141" starttime="20170809 16:28:03.957" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.141" starttime="20170809 16:28:03.957" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:04.142" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:28:04.142" starttime="20170809 16:28:04.142" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:04.144" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:04.144" starttime="20170809 16:28:04.143" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:04.145" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:04.145" starttime="20170809 16:28:04.145" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.145" starttime="20170809 16:28:04.144" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.145" starttime="20170809 16:28:04.143" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.145" starttime="20170809 16:28:04.142" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:04.236" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:04.236" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:04.236" starttime="20170809 16:28:04.146" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:04.238" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:04.238" starttime="20170809 16:28:04.238" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:04.239" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:04.239" starttime="20170809 16:28:04.239" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.239" starttime="20170809 16:28:04.238" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.239" starttime="20170809 16:28:04.237" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.239" starttime="20170809 16:28:04.237" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:04.240" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:04.240" starttime="20170809 16:28:04.240" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:04.240" starttime="20170809 16:28:03.956" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:04.241" starttime="20170809 16:28:04.240" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:04.241" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:04.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:04.241" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:28:04.241" starttime="20170809 16:28:04.241" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.242" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:28:04.242" starttime="20170809 16:28:03.955" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.242" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:28:04.242" starttime="20170809 16:28:03.955" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:28:04.243" starttime="20170809 16:28:04.242" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:04.247" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:04.247" starttime="20170809 16:28:04.247" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:04.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:04.248" starttime="20170809 16:28:04.247" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:04.248" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:04.248" starttime="20170809 16:28:04.248" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:04.249" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:04.249" starttime="20170809 16:28:04.249" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.425" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:04.425" starttime="20170809 16:28:04.250" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:04.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:04.425" starttime="20170809 16:28:04.249" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:04.426" starttime="20170809 16:28:04.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:04.427" starttime="20170809 16:28:04.426" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.427" starttime="20170809 16:28:04.246" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.427" starttime="20170809 16:28:04.246" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.427" starttime="20170809 16:28:04.245" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:04.427" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:28:04.427" starttime="20170809 16:28:04.427" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:04.430" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:04.430" starttime="20170809 16:28:04.429" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:04.430" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:04.431" starttime="20170809 16:28:04.430" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.431" starttime="20170809 16:28:04.430" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.431" starttime="20170809 16:28:04.428" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.431" starttime="20170809 16:28:04.428" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:04.521" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:28:04.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:04.521" starttime="20170809 16:28:04.431" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:04.523" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:04.523" starttime="20170809 16:28:04.522" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:04.524" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:04.524" starttime="20170809 16:28:04.524" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.525" starttime="20170809 16:28:04.523" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.525" starttime="20170809 16:28:04.522" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:04.525" starttime="20170809 16:28:04.521" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:04.525" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:04.525" starttime="20170809 16:28:04.525" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:04.526" starttime="20170809 16:28:04.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:04.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:04.526" starttime="20170809 16:28:04.526" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:04.527" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:04.527" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:04.527" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:28:04.527" starttime="20170809 16:28:04.526" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.527" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:28:04.527" starttime="20170809 16:28:04.243" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:04.527" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:28:04.527" starttime="20170809 16:28:04.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:28:04.528" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:28:04.528" starttime="20170809 16:28:04.528" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:04.528" starttime="20170809 16:28:04.243" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:04.528" starttime="20170809 16:28:02.927" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:14.533" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:14.534" starttime="20170809 16:28:14.533" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:14.534" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:14.534" starttime="20170809 16:28:14.534" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:14.535" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:14.535" starttime="20170809 16:28:14.535" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:14.536" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:14.536" starttime="20170809 16:28:14.535" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:15.002" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:15.002" starttime="20170809 16:28:14.536" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:15.002" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:15.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:15.002" starttime="20170809 16:28:14.536" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:15.003" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:15.003" starttime="20170809 16:28:15.003" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:15.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:15.004" starttime="20170809 16:28:15.004" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.004" starttime="20170809 16:28:14.533" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.004" starttime="20170809 16:28:14.532" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.004" starttime="20170809 16:28:14.531" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:15.005" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:28:15.005" starttime="20170809 16:28:15.005" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:15.007" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:15.007" starttime="20170809 16:28:15.006" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:15.008" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:15.008" starttime="20170809 16:28:15.008" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.008" starttime="20170809 16:28:15.007" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.008" starttime="20170809 16:28:15.006" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.008" starttime="20170809 16:28:15.005" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:15.237" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:15.237" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:15.237" starttime="20170809 16:28:15.009" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:15.239" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:15.239" starttime="20170809 16:28:15.238" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:15.240" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:15.240" starttime="20170809 16:28:15.240" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.240" starttime="20170809 16:28:15.239" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.240" starttime="20170809 16:28:15.238" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.240" starttime="20170809 16:28:15.237" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:15.241" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:15.241" starttime="20170809 16:28:15.240" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:15.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:15.241" starttime="20170809 16:28:14.531" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:15.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:15.242" starttime="20170809 16:28:15.241" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:15.242" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:15.242" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:15.242" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:28:15.242" starttime="20170809 16:28:15.242" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:15.243" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:28:15.243" starttime="20170809 16:28:14.530" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:15.243" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:28:15.243" starttime="20170809 16:28:14.530" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:28:15.243" starttime="20170809 16:28:15.243" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.244" starttime="20170809 16:28:14.530" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:15.247" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:15.248" starttime="20170809 16:28:15.247" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:15.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:15.248" starttime="20170809 16:28:15.248" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:15.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:15.249" starttime="20170809 16:28:15.249" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:15.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:15.250" starttime="20170809 16:28:15.249" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:15.587" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:15.587" starttime="20170809 16:28:15.250" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:15.587" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:15.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:15.587" starttime="20170809 16:28:15.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:15.588" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:15.588" starttime="20170809 16:28:15.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:15.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:15.589" starttime="20170809 16:28:15.588" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.589" starttime="20170809 16:28:15.246" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.589" starttime="20170809 16:28:15.246" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.589" starttime="20170809 16:28:15.245" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:15.590" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:28:15.590" starttime="20170809 16:28:15.589" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:15.592" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:15.592" starttime="20170809 16:28:15.591" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:15.593" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:15.593" starttime="20170809 16:28:15.592" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.593" starttime="20170809 16:28:15.592" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.593" starttime="20170809 16:28:15.590" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:15.593" starttime="20170809 16:28:15.590" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:16.388" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:16.388" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:16.388" starttime="20170809 16:28:15.593" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:16.390" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:16.390" starttime="20170809 16:28:16.390" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:16.391" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:16.391" starttime="20170809 16:28:16.391" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.391" starttime="20170809 16:28:16.390" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.391" starttime="20170809 16:28:16.389" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.391" starttime="20170809 16:28:16.389" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:16.392" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:16.392" starttime="20170809 16:28:16.392" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:16.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:16.392" starttime="20170809 16:28:15.245" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:16.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:16.393" starttime="20170809 16:28:16.392" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:16.393" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:16.393" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:16.393" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:28:16.394" starttime="20170809 16:28:16.393" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:16.394" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:28:16.394" starttime="20170809 16:28:15.244" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:16.394" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:28:16.394" starttime="20170809 16:28:15.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:28:16.395" starttime="20170809 16:28:16.394" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:16.400" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:16.401" starttime="20170809 16:28:16.400" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:16.401" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:16.401" starttime="20170809 16:28:16.401" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:16.402" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:16.402" starttime="20170809 16:28:16.402" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:16.403" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:16.403" starttime="20170809 16:28:16.403" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:16.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:16.747" starttime="20170809 16:28:16.404" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:16.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:16.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:16.748" starttime="20170809 16:28:16.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:16.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:16.749" starttime="20170809 16:28:16.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:16.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:16.749" starttime="20170809 16:28:16.749" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.749" starttime="20170809 16:28:16.399" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.749" starttime="20170809 16:28:16.398" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.750" starttime="20170809 16:28:16.397" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:16.750" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:28:16.750" starttime="20170809 16:28:16.750" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:16.752" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:16.752" starttime="20170809 16:28:16.751" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:16.753" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:16.753" starttime="20170809 16:28:16.753" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.753" starttime="20170809 16:28:16.752" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.753" starttime="20170809 16:28:16.751" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:16.753" starttime="20170809 16:28:16.750" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:17.738" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:28:17.738" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:17.738" starttime="20170809 16:28:16.754" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:17.740" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:17.740" starttime="20170809 16:28:17.740" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:17.741" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:17.741" starttime="20170809 16:28:17.741" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:17.741" starttime="20170809 16:28:17.740" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:17.742" starttime="20170809 16:28:17.739" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:17.742" starttime="20170809 16:28:17.739" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:17.742" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:17.742" starttime="20170809 16:28:17.742" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:17.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:17.742" starttime="20170809 16:28:16.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:17.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:17.743" starttime="20170809 16:28:17.743" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:17.744" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:17.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:17.744" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:28:17.744" starttime="20170809 16:28:17.743" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:17.744" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:28:17.744" starttime="20170809 16:28:16.395" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:17.744" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:28:17.744" starttime="20170809 16:28:16.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:28:17.745" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:28:17.745" starttime="20170809 16:28:17.745" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:17.745" starttime="20170809 16:28:16.395" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:17.745" starttime="20170809 16:28:14.529" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:27.750" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:27.751" starttime="20170809 16:28:27.750" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:27.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:27.751" starttime="20170809 16:28:27.751" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:27.752" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:27.752" starttime="20170809 16:28:27.751" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:27.753" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:27.753" starttime="20170809 16:28:27.752" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:27.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:27.931" starttime="20170809 16:28:27.753" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:27.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:27.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:27.931" starttime="20170809 16:28:27.753" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:27.931" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:27.931" starttime="20170809 16:28:27.931" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:27.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:27.932" starttime="20170809 16:28:27.932" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:27.932" starttime="20170809 16:28:27.749" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:27.932" starttime="20170809 16:28:27.749" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:27.933" starttime="20170809 16:28:27.748" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:27.933" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:28:27.933" starttime="20170809 16:28:27.933" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:27.936" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:27.936" starttime="20170809 16:28:27.935" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:27.938" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:27.938" starttime="20170809 16:28:27.937" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:27.938" starttime="20170809 16:28:27.937" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:27.938" starttime="20170809 16:28:27.934" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:27.938" starttime="20170809 16:28:27.934" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:28.981" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:28.982" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:28.982" starttime="20170809 16:28:27.938" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:28.984" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:28.984" starttime="20170809 16:28:28.983" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:28.985" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:28.986" starttime="20170809 16:28:28.985" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:28.986" starttime="20170809 16:28:28.984" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:28.986" starttime="20170809 16:28:28.983" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:28.986" starttime="20170809 16:28:28.982" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:28.986" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:28.986" starttime="20170809 16:28:28.986" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:28.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:28.987" starttime="20170809 16:28:27.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:28.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:28.987" starttime="20170809 16:28:28.987" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:28.988" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:28.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:28.988" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:28:28.988" starttime="20170809 16:28:28.987" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:28.988" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:28:28.988" starttime="20170809 16:28:27.747" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:28.988" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:28:28.989" starttime="20170809 16:28:27.747" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:28:28.989" starttime="20170809 16:28:28.989" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:28.989" starttime="20170809 16:28:27.746" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:28.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:28.993" starttime="20170809 16:28:28.992" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:28.994" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:28.994" starttime="20170809 16:28:28.994" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:28.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:28.995" starttime="20170809 16:28:28.994" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:28.995" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:28.995" starttime="20170809 16:28:28.995" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:29.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:29.655" starttime="20170809 16:28:28.996" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:29.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:29.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:29.655" starttime="20170809 16:28:28.995" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:29.656" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:29.656" starttime="20170809 16:28:29.656" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:29.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:29.657" starttime="20170809 16:28:29.656" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:29.657" starttime="20170809 16:28:28.992" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:29.657" starttime="20170809 16:28:28.991" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:29.657" starttime="20170809 16:28:28.991" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:29.658" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:28:29.658" starttime="20170809 16:28:29.657" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:29.660" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:29.660" starttime="20170809 16:28:29.659" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:29.661" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:29.661" starttime="20170809 16:28:29.660" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:29.661" starttime="20170809 16:28:29.660" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:29.661" starttime="20170809 16:28:29.658" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:29.661" starttime="20170809 16:28:29.658" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:30.147" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:30.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:30.147" starttime="20170809 16:28:29.661" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:30.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:30.149" starttime="20170809 16:28:30.149" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:30.150" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:30.150" starttime="20170809 16:28:30.150" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.150" starttime="20170809 16:28:30.149" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.150" starttime="20170809 16:28:30.148" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.150" starttime="20170809 16:28:30.148" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:30.151" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:30.151" starttime="20170809 16:28:30.151" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:30.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:30.151" starttime="20170809 16:28:28.990" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:30.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:30.152" starttime="20170809 16:28:30.151" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:30.152" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:30.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:30.153" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:28:30.153" starttime="20170809 16:28:30.152" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:30.153" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:28:30.153" starttime="20170809 16:28:28.990" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:30.153" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:28:30.153" starttime="20170809 16:28:28.989" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:28:30.154" starttime="20170809 16:28:30.154" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:30.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:30.158" starttime="20170809 16:28:30.158" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:30.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:30.159" starttime="20170809 16:28:30.159" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:30.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:30.159" starttime="20170809 16:28:30.159" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:30.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:30.160" starttime="20170809 16:28:30.160" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:30.666" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:30.666" starttime="20170809 16:28:30.161" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:30.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:30.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:30.666" starttime="20170809 16:28:30.160" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:30.667" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:30.667" starttime="20170809 16:28:30.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:30.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:30.668" starttime="20170809 16:28:30.667" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.668" starttime="20170809 16:28:30.157" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.668" starttime="20170809 16:28:30.157" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.668" starttime="20170809 16:28:30.156" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:30.669" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:28:30.669" starttime="20170809 16:28:30.668" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:30.671" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:30.671" starttime="20170809 16:28:30.670" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:30.672" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:30.672" starttime="20170809 16:28:30.671" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.672" starttime="20170809 16:28:30.671" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.672" starttime="20170809 16:28:30.669" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:30.672" starttime="20170809 16:28:30.669" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:31.308" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:28:31.308" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:31.308" starttime="20170809 16:28:30.672" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:31.310" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:31.310" starttime="20170809 16:28:31.309" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:31.311" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:31.311" starttime="20170809 16:28:31.311" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:31.311" starttime="20170809 16:28:31.310" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:31.311" starttime="20170809 16:28:31.309" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:31.311" starttime="20170809 16:28:31.308" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:31.312" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:31.312" starttime="20170809 16:28:31.311" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:31.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:31.312" starttime="20170809 16:28:30.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:31.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:31.313" starttime="20170809 16:28:31.312" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:31.313" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:31.313" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:31.313" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:28:31.313" starttime="20170809 16:28:31.313" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:31.314" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:28:31.314" starttime="20170809 16:28:30.155" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:31.314" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:28:31.314" starttime="20170809 16:28:30.154" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:28:31.314" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:28:31.315" starttime="20170809 16:28:31.314" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:31.315" starttime="20170809 16:28:30.154" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:31.315" starttime="20170809 16:28:27.746" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:41.320" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:41.320" starttime="20170809 16:28:41.319" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:41.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:41.321" starttime="20170809 16:28:41.320" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:41.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:41.321" starttime="20170809 16:28:41.321" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:41.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:41.322" starttime="20170809 16:28:41.322" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:41.829" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:41.829" starttime="20170809 16:28:41.323" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:41.829" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:41.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:41.829" starttime="20170809 16:28:41.322" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:41.830" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:41.830" starttime="20170809 16:28:41.829" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:41.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:41.831" starttime="20170809 16:28:41.830" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:41.831" starttime="20170809 16:28:41.319" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:41.831" starttime="20170809 16:28:41.318" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:41.831" starttime="20170809 16:28:41.318" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:41.831" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:28:41.831" starttime="20170809 16:28:41.831" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:41.834" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:41.834" starttime="20170809 16:28:41.833" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:41.834" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:41.835" starttime="20170809 16:28:41.834" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:41.835" starttime="20170809 16:28:41.834" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:41.835" starttime="20170809 16:28:41.832" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:41.835" starttime="20170809 16:28:41.832" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:42.112" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:42.113" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:42.113" starttime="20170809 16:28:41.835" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:42.115" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:42.115" starttime="20170809 16:28:42.114" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:42.115" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:42.116" starttime="20170809 16:28:42.115" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.116" starttime="20170809 16:28:42.115" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.116" starttime="20170809 16:28:42.114" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.116" starttime="20170809 16:28:42.113" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:42.116" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:42.116" starttime="20170809 16:28:42.116" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:42.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:42.117" starttime="20170809 16:28:41.317" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:42.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:42.117" starttime="20170809 16:28:42.117" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:42.118" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:42.118" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:42.118" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:28:42.118" starttime="20170809 16:28:42.118" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:42.118" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:28:42.118" starttime="20170809 16:28:41.317" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:42.119" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:28:42.119" starttime="20170809 16:28:41.316" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:28:42.119" starttime="20170809 16:28:42.119" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.119" starttime="20170809 16:28:41.316" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:42.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:42.124" starttime="20170809 16:28:42.122" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:42.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:42.125" starttime="20170809 16:28:42.124" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:42.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:42.125" starttime="20170809 16:28:42.125" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:42.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:42.126" starttime="20170809 16:28:42.126" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:42.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:42.356" starttime="20170809 16:28:42.127" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:42.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:42.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:42.356" starttime="20170809 16:28:42.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:42.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:42.357" starttime="20170809 16:28:42.357" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:42.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:42.358" starttime="20170809 16:28:42.357" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.358" starttime="20170809 16:28:42.122" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.358" starttime="20170809 16:28:42.122" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.359" starttime="20170809 16:28:42.121" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:42.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:28:42.359" starttime="20170809 16:28:42.359" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:42.362" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:42.362" starttime="20170809 16:28:42.361" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:42.363" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:42.363" starttime="20170809 16:28:42.362" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.363" starttime="20170809 16:28:42.362" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.363" starttime="20170809 16:28:42.360" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:42.363" starttime="20170809 16:28:42.360" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:43.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:43.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:43.161" starttime="20170809 16:28:42.363" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:43.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:43.163" starttime="20170809 16:28:43.162" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:43.164" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:43.164" starttime="20170809 16:28:43.164" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.165" starttime="20170809 16:28:43.163" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.165" starttime="20170809 16:28:43.161" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.165" starttime="20170809 16:28:43.161" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:43.165" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:43.165" starttime="20170809 16:28:43.165" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:43.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:43.165" starttime="20170809 16:28:42.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:43.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:43.166" starttime="20170809 16:28:43.166" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:43.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:43.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:43.167" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:28:43.167" starttime="20170809 16:28:43.166" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:43.167" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:28:43.167" starttime="20170809 16:28:42.120" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:43.167" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:28:43.167" starttime="20170809 16:28:42.119" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:28:43.168" starttime="20170809 16:28:43.168" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:43.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:43.172" starttime="20170809 16:28:43.172" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:43.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:43.173" starttime="20170809 16:28:43.173" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:43.174" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:43.174" starttime="20170809 16:28:43.173" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:43.174" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:43.174" starttime="20170809 16:28:43.174" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:43.682" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:43.682" starttime="20170809 16:28:43.175" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:43.682" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:43.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:43.683" starttime="20170809 16:28:43.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:43.683" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:43.683" starttime="20170809 16:28:43.683" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:43.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:43.684" starttime="20170809 16:28:43.684" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.684" starttime="20170809 16:28:43.171" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.685" starttime="20170809 16:28:43.171" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.685" starttime="20170809 16:28:43.170" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:43.685" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:28:43.685" starttime="20170809 16:28:43.685" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:43.687" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:43.687" starttime="20170809 16:28:43.687" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:43.693" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:43.693" starttime="20170809 16:28:43.688" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.693" starttime="20170809 16:28:43.687" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.693" starttime="20170809 16:28:43.686" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:43.693" starttime="20170809 16:28:43.685" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:44.149" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:28:44.149" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:44.149" starttime="20170809 16:28:43.694" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:44.151" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:44.151" starttime="20170809 16:28:44.150" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:44.152" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:44.152" starttime="20170809 16:28:44.151" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:44.152" starttime="20170809 16:28:44.151" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:44.152" starttime="20170809 16:28:44.150" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:44.152" starttime="20170809 16:28:44.149" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:44.152" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:44.153" starttime="20170809 16:28:44.152" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:44.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:44.153" starttime="20170809 16:28:43.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:44.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:44.154" starttime="20170809 16:28:44.153" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:44.154" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:44.154" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:44.154" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:28:44.154" starttime="20170809 16:28:44.154" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:44.154" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:28:44.155" starttime="20170809 16:28:43.169" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:44.155" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:28:44.155" starttime="20170809 16:28:43.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:28:44.155" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:28:44.155" starttime="20170809 16:28:44.155" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:44.156" starttime="20170809 16:28:43.168" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:44.156" starttime="20170809 16:28:41.315" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:54.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:54.161" starttime="20170809 16:28:54.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:54.161" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:54.161" starttime="20170809 16:28:54.161" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:54.162" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:54.162" starttime="20170809 16:28:54.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:54.163" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:54.163" starttime="20170809 16:28:54.162" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:54.704" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:54.704" starttime="20170809 16:28:54.163" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:54.704" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:54.704" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:54.704" starttime="20170809 16:28:54.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:54.705" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:54.705" starttime="20170809 16:28:54.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:54.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:54.706" starttime="20170809 16:28:54.706" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:54.706" starttime="20170809 16:28:54.160" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:54.706" starttime="20170809 16:28:54.159" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:54.706" starttime="20170809 16:28:54.159" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:54.707" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:28:54.707" starttime="20170809 16:28:54.707" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:54.709" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:54.709" starttime="20170809 16:28:54.709" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:54.710" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:54.710" starttime="20170809 16:28:54.710" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:54.710" starttime="20170809 16:28:54.709" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:54.710" starttime="20170809 16:28:54.708" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:54.711" starttime="20170809 16:28:54.708" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:55.259" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:55.259" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:55.259" starttime="20170809 16:28:54.711" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:55.261" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:55.261" starttime="20170809 16:28:55.261" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:55.262" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:55.262" starttime="20170809 16:28:55.262" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.262" starttime="20170809 16:28:55.261" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.262" starttime="20170809 16:28:55.260" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.263" starttime="20170809 16:28:55.260" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:55.263" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:55.263" starttime="20170809 16:28:55.263" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:55.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:55.263" starttime="20170809 16:28:54.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:55.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:55.264" starttime="20170809 16:28:55.264" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:55.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:55.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:55.265" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:28:55.265" starttime="20170809 16:28:55.264" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:55.265" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:28:55.265" starttime="20170809 16:28:54.157" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:55.265" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:28:55.265" starttime="20170809 16:28:54.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:28:55.266" starttime="20170809 16:28:55.266" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.266" starttime="20170809 16:28:54.157" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:55.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:55.270" starttime="20170809 16:28:55.269" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:55.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:55.271" starttime="20170809 16:28:55.270" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:55.271" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:55.271" starttime="20170809 16:28:55.271" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:55.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:55.272" starttime="20170809 16:28:55.272" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:55.679" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:55.679" starttime="20170809 16:28:55.273" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:55.679" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:55.679" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:55.679" starttime="20170809 16:28:55.272" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:55.680" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:55.680" starttime="20170809 16:28:55.680" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:55.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:55.681" starttime="20170809 16:28:55.680" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.681" starttime="20170809 16:28:55.269" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.681" starttime="20170809 16:28:55.268" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.682" starttime="20170809 16:28:55.268" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:55.683" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:28:55.683" starttime="20170809 16:28:55.682" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:55.686" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:55.686" starttime="20170809 16:28:55.685" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:55.687" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:28:55.687" starttime="20170809 16:28:55.687" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.687" starttime="20170809 16:28:55.686" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.687" starttime="20170809 16:28:55.684" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:55.687" starttime="20170809 16:28:55.683" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:56.343" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:28:56.343" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:56.343" starttime="20170809 16:28:55.688" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:56.345" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:56.345" starttime="20170809 16:28:56.344" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:56.346" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:56.346" starttime="20170809 16:28:56.346" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.346" starttime="20170809 16:28:56.345" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.346" starttime="20170809 16:28:56.344" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.346" starttime="20170809 16:28:56.343" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:56.347" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:56.347" starttime="20170809 16:28:56.347" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:56.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:56.347" starttime="20170809 16:28:55.267" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:56.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:56.348" starttime="20170809 16:28:56.347" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:56.348" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:56.348" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:56.348" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:28:56.349" starttime="20170809 16:28:56.348" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:56.349" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:28:56.349" starttime="20170809 16:28:55.266" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:56.349" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:28:56.349" starttime="20170809 16:28:55.266" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:28:56.350" starttime="20170809 16:28:56.349" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:28:56.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:28:56.354" starttime="20170809 16:28:56.353" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:28:56.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:28:56.355" starttime="20170809 16:28:56.354" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:28:56.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:28:56.355" starttime="20170809 16:28:56.355" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:28:56.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:28:56.356" starttime="20170809 16:28:56.356" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:28:56.538" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:28:56.539" starttime="20170809 16:28:56.357" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:56.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:28:56.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:56.539" starttime="20170809 16:28:56.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:28:56.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:56.539" starttime="20170809 16:28:56.539" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:56.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:56.540" starttime="20170809 16:28:56.540" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.540" starttime="20170809 16:28:56.353" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.540" starttime="20170809 16:28:56.353" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.541" starttime="20170809 16:28:56.352" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:28:56.541" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:28:56.541" starttime="20170809 16:28:56.541" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:56.543" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:56.543" starttime="20170809 16:28:56.543" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:56.544" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:28:56.545" starttime="20170809 16:28:56.544" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.545" starttime="20170809 16:28:56.543" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.545" starttime="20170809 16:28:56.542" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:56.545" starttime="20170809 16:28:56.541" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:28:57.093" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:28:57.094" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:57.094" starttime="20170809 16:28:56.545" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:28:57.095" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:57.095" starttime="20170809 16:28:57.095" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:28:57.096" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:28:57.096" starttime="20170809 16:28:57.096" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:57.097" starttime="20170809 16:28:57.096" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:57.097" starttime="20170809 16:28:57.094" status="PASS"></status>
</kw>
<status endtime="20170809 16:28:57.097" starttime="20170809 16:28:57.094" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:28:57.097" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:28:57.097" starttime="20170809 16:28:57.097" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:57.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:28:57.097" starttime="20170809 16:28:56.351" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:28:57.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:28:57.098" starttime="20170809 16:28:57.098" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:28:57.099" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:28:57.099" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:28:57.099" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:28:57.099" starttime="20170809 16:28:57.098" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:57.099" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:28:57.099" starttime="20170809 16:28:56.351" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:28:57.099" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:28:57.099" starttime="20170809 16:28:56.350" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:28:57.100" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:28:57.100" starttime="20170809 16:28:57.100" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:57.100" starttime="20170809 16:28:56.350" status="FAIL"></status>
</kw>
<status endtime="20170809 16:28:57.100" starttime="20170809 16:28:54.156" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:07.105" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:07.106" starttime="20170809 16:29:07.105" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:07.106" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:07.106" starttime="20170809 16:29:07.106" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:07.107" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:07.107" starttime="20170809 16:29:07.107" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:07.108" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:07.108" starttime="20170809 16:29:07.107" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:07.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:07.473" starttime="20170809 16:29:07.108" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:07.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:07.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:07.473" starttime="20170809 16:29:07.108" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:07.474" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:07.474" starttime="20170809 16:29:07.474" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:07.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:07.475" starttime="20170809 16:29:07.475" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.475" starttime="20170809 16:29:07.104" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.475" starttime="20170809 16:29:07.104" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.476" starttime="20170809 16:29:07.103" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:07.476" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:29:07.477" starttime="20170809 16:29:07.476" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:07.479" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:07.480" starttime="20170809 16:29:07.478" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:07.481" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:07.481" starttime="20170809 16:29:07.481" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.481" starttime="20170809 16:29:07.480" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.481" starttime="20170809 16:29:07.478" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.481" starttime="20170809 16:29:07.477" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:07.670" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:29:07.671" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:07.671" starttime="20170809 16:29:07.482" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:07.673" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:07.673" starttime="20170809 16:29:07.672" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:07.673" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:07.674" starttime="20170809 16:29:07.673" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.674" starttime="20170809 16:29:07.673" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.674" starttime="20170809 16:29:07.672" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.674" starttime="20170809 16:29:07.671" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:07.674" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:07.674" starttime="20170809 16:29:07.674" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:07.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:07.675" starttime="20170809 16:29:07.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:07.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:07.675" starttime="20170809 16:29:07.675" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:07.676" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:07.676" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:07.676" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:29:07.676" starttime="20170809 16:29:07.675" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:07.676" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:29:07.676" starttime="20170809 16:29:07.102" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:07.677" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:29:07.677" starttime="20170809 16:29:07.102" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:29:07.677" starttime="20170809 16:29:07.677" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:07.677" starttime="20170809 16:29:07.101" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:07.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:07.682" starttime="20170809 16:29:07.680" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:07.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:07.682" starttime="20170809 16:29:07.682" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:07.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:07.684" starttime="20170809 16:29:07.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:07.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:07.685" starttime="20170809 16:29:07.684" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.171" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:08.171" starttime="20170809 16:29:07.686" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:08.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:08.172" starttime="20170809 16:29:07.685" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.172" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:08.172" starttime="20170809 16:29:08.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:08.173" starttime="20170809 16:29:08.172" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.173" starttime="20170809 16:29:07.680" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.173" starttime="20170809 16:29:07.679" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.173" starttime="20170809 16:29:07.679" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:08.174" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:29:08.174" starttime="20170809 16:29:08.173" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:08.176" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:08.176" starttime="20170809 16:29:08.175" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:08.177" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:08.177" starttime="20170809 16:29:08.177" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.177" starttime="20170809 16:29:08.176" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.177" starttime="20170809 16:29:08.175" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.177" starttime="20170809 16:29:08.174" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:08.300" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:29:08.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:08.300" starttime="20170809 16:29:08.177" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:08.302" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:08.302" starttime="20170809 16:29:08.301" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:08.303" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:08.303" starttime="20170809 16:29:08.302" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.303" starttime="20170809 16:29:08.302" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.303" starttime="20170809 16:29:08.301" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.303" starttime="20170809 16:29:08.300" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:08.304" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:08.304" starttime="20170809 16:29:08.303" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:08.304" starttime="20170809 16:29:07.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:08.305" starttime="20170809 16:29:08.305" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:08.306" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:08.306" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:08.306" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:29:08.306" starttime="20170809 16:29:08.305" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.307" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:29:08.307" starttime="20170809 16:29:07.678" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.307" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:29:08.307" starttime="20170809 16:29:07.677" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:29:08.307" starttime="20170809 16:29:08.307" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:08.312" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:08.312" starttime="20170809 16:29:08.311" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:08.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:08.313" starttime="20170809 16:29:08.312" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:08.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:08.313" starttime="20170809 16:29:08.313" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:08.314" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:08.314" starttime="20170809 16:29:08.313" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.623" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:08.624" starttime="20170809 16:29:08.314" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:08.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:08.624" starttime="20170809 16:29:08.314" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.624" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:08.624" starttime="20170809 16:29:08.624" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:08.625" starttime="20170809 16:29:08.625" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.625" starttime="20170809 16:29:08.311" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.625" starttime="20170809 16:29:08.310" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.625" starttime="20170809 16:29:08.310" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:08.626" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:29:08.626" starttime="20170809 16:29:08.626" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:08.628" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:29:08.628" starttime="20170809 16:29:08.627" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:08.629" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:29:08.629" starttime="20170809 16:29:08.629" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.629" starttime="20170809 16:29:08.628" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.630" starttime="20170809 16:29:08.627" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.630" starttime="20170809 16:29:08.626" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:08.732" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:29:08.732" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:08.732" starttime="20170809 16:29:08.630" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:08.734" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:08.734" starttime="20170809 16:29:08.734" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:08.735" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:08.735" starttime="20170809 16:29:08.735" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.735" starttime="20170809 16:29:08.734" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.735" starttime="20170809 16:29:08.733" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:08.735" starttime="20170809 16:29:08.733" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:08.736" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:08.736" starttime="20170809 16:29:08.736" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.736" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:08.736" starttime="20170809 16:29:08.309" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:08.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:08.737" starttime="20170809 16:29:08.736" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:08.737" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:08.737" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:08.738" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:29:08.738" starttime="20170809 16:29:08.737" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.738" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:29:08.738" starttime="20170809 16:29:08.309" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:08.738" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:29:08.738" starttime="20170809 16:29:08.308" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:29:08.739" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:29:08.739" starttime="20170809 16:29:08.738" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:08.739" starttime="20170809 16:29:08.308" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:08.739" starttime="20170809 16:29:07.101" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:18.744" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:18.745" starttime="20170809 16:29:18.744" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:18.745" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:18.745" starttime="20170809 16:29:18.745" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:18.746" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:18.746" starttime="20170809 16:29:18.745" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:18.746" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:18.746" starttime="20170809 16:29:18.746" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:19.129" starttime="20170809 16:29:18.747" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:19.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.129" starttime="20170809 16:29:18.747" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.130" starttime="20170809 16:29:19.130" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.131" starttime="20170809 16:29:19.130" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.131" starttime="20170809 16:29:18.743" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.131" starttime="20170809 16:29:18.743" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.131" starttime="20170809 16:29:18.742" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:19.131" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:29:19.132" starttime="20170809 16:29:19.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:19.134" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:19.134" starttime="20170809 16:29:19.133" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:19.135" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:19.135" starttime="20170809 16:29:19.134" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.135" starttime="20170809 16:29:19.134" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.135" starttime="20170809 16:29:19.132" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.135" starttime="20170809 16:29:19.132" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:19.212" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:29:19.212" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.212" starttime="20170809 16:29:19.135" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:19.214" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:19.214" starttime="20170809 16:29:19.214" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:19.215" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:19.215" starttime="20170809 16:29:19.215" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.215" starttime="20170809 16:29:19.214" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.215" starttime="20170809 16:29:19.213" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.216" starttime="20170809 16:29:19.213" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:19.216" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:19.216" starttime="20170809 16:29:19.216" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.216" starttime="20170809 16:29:18.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.217" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.217" starttime="20170809 16:29:19.216" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:19.218" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:19.218" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:19.218" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:29:19.218" starttime="20170809 16:29:19.217" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.218" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:29:19.218" starttime="20170809 16:29:18.741" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.218" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:29:19.218" starttime="20170809 16:29:18.741" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:29:19.219" starttime="20170809 16:29:19.219" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.219" starttime="20170809 16:29:18.740" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:19.224" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:19.224" starttime="20170809 16:29:19.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:19.225" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:19.225" starttime="20170809 16:29:19.225" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:19.226" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:19.226" starttime="20170809 16:29:19.226" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:19.227" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:19.227" starttime="20170809 16:29:19.227" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.484" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:19.484" starttime="20170809 16:29:19.228" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:19.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.484" starttime="20170809 16:29:19.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.485" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.485" starttime="20170809 16:29:19.484" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.486" starttime="20170809 16:29:19.485" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.486" starttime="20170809 16:29:19.222" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.486" starttime="20170809 16:29:19.222" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.486" starttime="20170809 16:29:19.221" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:19.486" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:29:19.487" starttime="20170809 16:29:19.486" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:19.489" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:19.489" starttime="20170809 16:29:19.488" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:19.489" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:19.490" starttime="20170809 16:29:19.489" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.490" starttime="20170809 16:29:19.489" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.490" starttime="20170809 16:29:19.487" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.490" starttime="20170809 16:29:19.487" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:19.588" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:29:19.588" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.588" starttime="20170809 16:29:19.490" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:19.589" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:19.589" starttime="20170809 16:29:19.589" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:19.590" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:19.590" starttime="20170809 16:29:19.590" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.591" starttime="20170809 16:29:19.590" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.591" starttime="20170809 16:29:19.588" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.591" starttime="20170809 16:29:19.588" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:19.591" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:19.591" starttime="20170809 16:29:19.591" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.591" starttime="20170809 16:29:19.220" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.592" starttime="20170809 16:29:19.592" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:19.593" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:19.593" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:19.593" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:29:19.593" starttime="20170809 16:29:19.592" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.593" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:29:19.593" starttime="20170809 16:29:19.220" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.594" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:29:19.594" starttime="20170809 16:29:19.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:29:19.594" starttime="20170809 16:29:19.594" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:19.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:19.599" starttime="20170809 16:29:19.598" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:19.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:19.599" starttime="20170809 16:29:19.599" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:19.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:19.600" starttime="20170809 16:29:19.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:19.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:19.600" starttime="20170809 16:29:19.600" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.887" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:19.887" starttime="20170809 16:29:19.601" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.887" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:19.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.888" starttime="20170809 16:29:19.601" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.888" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.888" starttime="20170809 16:29:19.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.889" starttime="20170809 16:29:19.888" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.889" starttime="20170809 16:29:19.597" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.889" starttime="20170809 16:29:19.597" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.889" starttime="20170809 16:29:19.596" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:19.890" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:29:19.890" starttime="20170809 16:29:19.889" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:19.894" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:29:19.895" starttime="20170809 16:29:19.891" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:19.895" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:29:19.896" starttime="20170809 16:29:19.895" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.896" starttime="20170809 16:29:19.895" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.896" starttime="20170809 16:29:19.891" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.896" starttime="20170809 16:29:19.890" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:19.986" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:29:19.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.986" starttime="20170809 16:29:19.896" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:19.988" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:19.988" starttime="20170809 16:29:19.987" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:19.989" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:19.989" starttime="20170809 16:29:19.988" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.989" starttime="20170809 16:29:19.988" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.989" starttime="20170809 16:29:19.987" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:19.989" starttime="20170809 16:29:19.986" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:19.989" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:19.989" starttime="20170809 16:29:19.989" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:19.990" starttime="20170809 16:29:19.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:19.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:19.990" starttime="20170809 16:29:19.990" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:19.991" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:19.991" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:19.991" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:29:19.991" starttime="20170809 16:29:19.991" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.991" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:29:19.991" starttime="20170809 16:29:19.595" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:19.992" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:29:19.992" starttime="20170809 16:29:19.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:29:19.992" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:29:19.992" starttime="20170809 16:29:19.992" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:19.992" starttime="20170809 16:29:19.594" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:19.993" starttime="20170809 16:29:18.739" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:29.998" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:29.998" starttime="20170809 16:29:29.997" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:29.999" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:29.999" starttime="20170809 16:29:29.998" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:29.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:29.999" starttime="20170809 16:29:29.999" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:30.000" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:30.000" starttime="20170809 16:29:30.000" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:31.257" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:31.257" starttime="20170809 16:29:30.001" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:31.257" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:31.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:31.257" starttime="20170809 16:29:30.000" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:31.258" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:31.258" starttime="20170809 16:29:31.258" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:31.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:31.259" starttime="20170809 16:29:31.258" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:31.259" starttime="20170809 16:29:29.997" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:31.259" starttime="20170809 16:29:29.996" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:31.259" starttime="20170809 16:29:29.996" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:31.260" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:29:31.260" starttime="20170809 16:29:31.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:31.262" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:31.262" starttime="20170809 16:29:31.261" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:31.263" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:31.263" starttime="20170809 16:29:31.263" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:31.263" starttime="20170809 16:29:31.262" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:31.263" starttime="20170809 16:29:31.261" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:31.264" starttime="20170809 16:29:31.260" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:33.951" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:29:33.951" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:33.952" starttime="20170809 16:29:31.264" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:33.954" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:33.954" starttime="20170809 16:29:33.953" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:33.954" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:33.955" starttime="20170809 16:29:33.954" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:33.955" starttime="20170809 16:29:33.954" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:33.955" starttime="20170809 16:29:33.952" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:33.955" starttime="20170809 16:29:33.952" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:33.955" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:33.955" starttime="20170809 16:29:33.955" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:33.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:33.956" starttime="20170809 16:29:29.995" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:33.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:33.956" starttime="20170809 16:29:33.956" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:33.957" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:33.957" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:33.957" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:29:33.957" starttime="20170809 16:29:33.957" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:33.957" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:29:33.957" starttime="20170809 16:29:29.995" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:33.958" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:29:33.958" starttime="20170809 16:29:29.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:29:33.958" starttime="20170809 16:29:33.958" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:33.958" starttime="20170809 16:29:29.994" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:33.962" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:33.963" starttime="20170809 16:29:33.962" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:33.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:33.963" starttime="20170809 16:29:33.963" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:33.964" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:33.964" starttime="20170809 16:29:33.964" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:33.965" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:33.965" starttime="20170809 16:29:33.964" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:34.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:34.355" starttime="20170809 16:29:33.965" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:34.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:34.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:34.355" starttime="20170809 16:29:33.965" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:34.356" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:34.356" starttime="20170809 16:29:34.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:34.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:34.357" starttime="20170809 16:29:34.356" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:34.357" starttime="20170809 16:29:33.961" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:34.357" starttime="20170809 16:29:33.961" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:34.357" starttime="20170809 16:29:33.960" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:34.357" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:29:34.357" starttime="20170809 16:29:34.357" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:34.360" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:34.360" starttime="20170809 16:29:34.359" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:34.361" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:34.361" starttime="20170809 16:29:34.360" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:34.361" starttime="20170809 16:29:34.360" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:34.361" starttime="20170809 16:29:34.358" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:34.361" starttime="20170809 16:29:34.358" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:39.785" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:29:39.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:39.785" starttime="20170809 16:29:34.361" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:39.787" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:39.787" starttime="20170809 16:29:39.787" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:39.788" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:39.788" starttime="20170809 16:29:39.788" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.788" starttime="20170809 16:29:39.787" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.789" starttime="20170809 16:29:39.786" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.789" starttime="20170809 16:29:39.786" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:39.789" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:39.789" starttime="20170809 16:29:39.789" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:39.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:39.789" starttime="20170809 16:29:33.959" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:39.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:39.790" starttime="20170809 16:29:39.790" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:39.791" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:39.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:39.791" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:29:39.791" starttime="20170809 16:29:39.790" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:39.791" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:29:39.791" starttime="20170809 16:29:33.959" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:39.791" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:29:39.791" starttime="20170809 16:29:33.958" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:29:39.792" starttime="20170809 16:29:39.792" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:39.796" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:39.797" starttime="20170809 16:29:39.796" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:39.797" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:39.797" starttime="20170809 16:29:39.797" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:39.798" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:39.798" starttime="20170809 16:29:39.797" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:39.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:39.798" starttime="20170809 16:29:39.798" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:39.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:39.992" starttime="20170809 16:29:39.799" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:39.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:39.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:39.992" starttime="20170809 16:29:39.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:39.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:39.993" starttime="20170809 16:29:39.992" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:39.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:39.993" starttime="20170809 16:29:39.993" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.994" starttime="20170809 16:29:39.795" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.994" starttime="20170809 16:29:39.795" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.994" starttime="20170809 16:29:39.794" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:39.994" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:29:39.994" starttime="20170809 16:29:39.994" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:39.997" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:29:39.997" starttime="20170809 16:29:39.996" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:39.998" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:29:39.998" starttime="20170809 16:29:39.998" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.998" starttime="20170809 16:29:39.997" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.998" starttime="20170809 16:29:39.995" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:39.998" starttime="20170809 16:29:39.995" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:40.321" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:29:40.321" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:40.321" starttime="20170809 16:29:39.998" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:40.323" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:40.323" starttime="20170809 16:29:40.322" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:40.324" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:40.324" starttime="20170809 16:29:40.323" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:40.324" starttime="20170809 16:29:40.323" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:40.324" starttime="20170809 16:29:40.322" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:40.324" starttime="20170809 16:29:40.321" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:40.324" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:40.325" starttime="20170809 16:29:40.324" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:40.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:40.325" starttime="20170809 16:29:39.794" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:40.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:40.325" starttime="20170809 16:29:40.325" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:40.326" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:40.326" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:40.326" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:29:40.326" starttime="20170809 16:29:40.326" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:40.326" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:29:40.326" starttime="20170809 16:29:39.793" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:40.327" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:29:40.327" starttime="20170809 16:29:39.792" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:29:40.327" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:29:40.327" starttime="20170809 16:29:40.327" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:40.328" starttime="20170809 16:29:39.792" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:40.328" starttime="20170809 16:29:29.993" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:29:50.333" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:29:50.333" starttime="20170809 16:29:50.333" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:29:50.334" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:29:50.334" starttime="20170809 16:29:50.334" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:29:50.335" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:29:50.335" starttime="20170809 16:29:50.334" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:29:50.335" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:29:50.335" starttime="20170809 16:29:50.335" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:29:51.383" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:29:51.383" starttime="20170809 16:29:50.336" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:51.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:29:51.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:51.384" starttime="20170809 16:29:50.336" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:29:51.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:51.384" starttime="20170809 16:29:51.384" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:51.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:51.385" starttime="20170809 16:29:51.385" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:51.385" starttime="20170809 16:29:50.332" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:51.385" starttime="20170809 16:29:50.331" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:51.385" starttime="20170809 16:29:50.331" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:29:51.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:29:51.386" starttime="20170809 16:29:51.386" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:51.388" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:51.388" starttime="20170809 16:29:51.387" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:51.389" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:29:51.389" starttime="20170809 16:29:51.389" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:51.389" starttime="20170809 16:29:51.388" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:51.389" starttime="20170809 16:29:51.387" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:51.389" starttime="20170809 16:29:51.386" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:29:58.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:29:58.464" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:58.464" starttime="20170809 16:29:51.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:29:58.466" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:58.466" starttime="20170809 16:29:58.465" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:29:58.467" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:29:58.467" starttime="20170809 16:29:58.466" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:58.467" starttime="20170809 16:29:58.466" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:58.467" starttime="20170809 16:29:58.465" status="PASS"></status>
</kw>
<status endtime="20170809 16:29:58.467" starttime="20170809 16:29:58.464" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:29:58.467" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:29:58.467" starttime="20170809 16:29:58.467" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:58.468" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:29:58.468" starttime="20170809 16:29:50.330" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:29:58.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:29:58.468" starttime="20170809 16:29:58.468" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:29:58.469" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:29:58.469" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:29:58.469" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170809 16:29:58.469" starttime="20170809 16:29:58.469" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:58.469" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 16:29:58.469" starttime="20170809 16:29:50.330" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:29:58.470" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 16:29:58.470" starttime="20170809 16:29:50.329" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 16:29:58.470" level="FAIL">On != Off</msg>
<status endtime="20170809 16:29:58.470" starttime="20170809 16:29:58.470" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:58.471" starttime="20170809 16:29:50.329" status="FAIL"></status>
</kw>
<status endtime="20170809 16:29:58.471" starttime="20170809 16:29:50.328" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:08.476" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:08.476" starttime="20170809 16:30:08.476" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:08.477" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:08.477" starttime="20170809 16:30:08.477" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:08.478" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:08.478" starttime="20170809 16:30:08.477" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:08.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:08.478" starttime="20170809 16:30:08.478" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:08.722" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:08.723" starttime="20170809 16:30:08.479" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:08.723" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:08.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:08.723" starttime="20170809 16:30:08.479" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:08.723" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:08.724" starttime="20170809 16:30:08.723" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:08.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:08.724" starttime="20170809 16:30:08.724" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.725" starttime="20170809 16:30:08.475" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.725" starttime="20170809 16:30:08.474" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.725" starttime="20170809 16:30:08.474" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:08.725" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:30:08.725" starttime="20170809 16:30:08.725" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:08.727" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:08.727" starttime="20170809 16:30:08.727" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:08.728" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:08.728" starttime="20170809 16:30:08.728" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.728" starttime="20170809 16:30:08.727" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.729" starttime="20170809 16:30:08.726" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.729" starttime="20170809 16:30:08.726" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:08.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:08.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:08.792" starttime="20170809 16:30:08.729" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:08.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:08.794" starttime="20170809 16:30:08.793" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:08.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:08.795" starttime="20170809 16:30:08.795" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.795" starttime="20170809 16:30:08.794" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.796" starttime="20170809 16:30:08.793" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.796" starttime="20170809 16:30:08.792" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:08.796" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:08.796" starttime="20170809 16:30:08.796" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:08.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:08.796" starttime="20170809 16:30:08.473" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:08.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:08.797" starttime="20170809 16:30:08.797" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:08.797" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:08.797" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:08.798" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:30:08.798" starttime="20170809 16:30:08.797" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:08.798" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:30:08.798" starttime="20170809 16:30:08.472" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:08.798" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:30:08.798" starttime="20170809 16:30:08.472" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:30:08.799" starttime="20170809 16:30:08.799" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.799" starttime="20170809 16:30:08.472" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:08.802" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:08.803" starttime="20170809 16:30:08.802" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:08.803" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:08.803" starttime="20170809 16:30:08.803" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:08.804" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:08.804" starttime="20170809 16:30:08.804" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:08.805" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:08.805" starttime="20170809 16:30:08.804" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:08.995" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:08.995" starttime="20170809 16:30:08.805" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:08.995" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:08.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:08.995" starttime="20170809 16:30:08.805" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:08.996" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:08.996" starttime="20170809 16:30:08.996" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:08.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:08.997" starttime="20170809 16:30:08.996" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.997" starttime="20170809 16:30:08.802" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.997" starttime="20170809 16:30:08.801" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:08.997" starttime="20170809 16:30:08.801" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:08.998" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:30:08.998" starttime="20170809 16:30:08.997" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:09.000" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:09.000" starttime="20170809 16:30:08.999" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:09.001" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:09.001" starttime="20170809 16:30:09.001" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.001" starttime="20170809 16:30:09.000" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.001" starttime="20170809 16:30:08.998" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.002" starttime="20170809 16:30:08.998" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:09.101" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:09.102" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:09.102" starttime="20170809 16:30:09.002" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:09.103" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:09.103" starttime="20170809 16:30:09.103" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:09.104" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:09.104" starttime="20170809 16:30:09.104" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.105" starttime="20170809 16:30:09.104" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.105" starttime="20170809 16:30:09.102" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.105" starttime="20170809 16:30:09.102" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:09.105" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:09.105" starttime="20170809 16:30:09.105" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:09.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:09.105" starttime="20170809 16:30:08.800" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:09.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:09.106" starttime="20170809 16:30:09.106" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:09.107" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:09.107" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:09.107" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:30:09.107" starttime="20170809 16:30:09.106" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:09.107" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:30:09.107" starttime="20170809 16:30:08.799" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:09.107" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:30:09.107" starttime="20170809 16:30:08.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:30:09.108" starttime="20170809 16:30:09.108" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:09.112" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:09.112" starttime="20170809 16:30:09.111" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:09.113" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:09.113" starttime="20170809 16:30:09.112" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:09.113" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:09.113" starttime="20170809 16:30:09.113" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:09.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:09.114" starttime="20170809 16:30:09.114" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:09.335" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:09.335" starttime="20170809 16:30:09.115" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:09.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:09.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:09.336" starttime="20170809 16:30:09.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:09.336" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:09.336" starttime="20170809 16:30:09.336" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:09.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:09.337" starttime="20170809 16:30:09.337" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.337" starttime="20170809 16:30:09.111" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.337" starttime="20170809 16:30:09.110" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.337" starttime="20170809 16:30:09.110" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:09.338" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:30:09.338" starttime="20170809 16:30:09.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:09.340" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:09.340" starttime="20170809 16:30:09.339" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:09.341" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:09.341" starttime="20170809 16:30:09.341" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.341" starttime="20170809 16:30:09.340" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.341" starttime="20170809 16:30:09.339" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.341" starttime="20170809 16:30:09.338" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:09.407" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:30:09.407" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:09.407" starttime="20170809 16:30:09.342" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:09.409" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:09.409" starttime="20170809 16:30:09.409" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:09.410" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:09.410" starttime="20170809 16:30:09.410" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.410" starttime="20170809 16:30:09.409" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.410" starttime="20170809 16:30:09.408" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:09.410" starttime="20170809 16:30:09.408" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:09.411" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:09.411" starttime="20170809 16:30:09.411" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:09.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:09.411" starttime="20170809 16:30:09.109" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:09.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:09.412" starttime="20170809 16:30:09.411" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:09.412" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:09.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:09.412" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:30:09.412" starttime="20170809 16:30:09.412" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:09.413" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:30:09.413" starttime="20170809 16:30:09.109" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:09.413" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:30:09.413" starttime="20170809 16:30:09.108" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:30:09.414" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:30:09.414" starttime="20170809 16:30:09.413" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:09.414" starttime="20170809 16:30:09.108" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:09.414" starttime="20170809 16:30:08.471" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:19.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:19.420" starttime="20170809 16:30:19.419" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:19.421" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:19.421" starttime="20170809 16:30:19.420" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:19.421" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:19.421" starttime="20170809 16:30:19.421" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:19.422" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:19.422" starttime="20170809 16:30:19.421" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:19.764" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:19.764" starttime="20170809 16:30:19.423" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:19.765" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:19.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:19.765" starttime="20170809 16:30:19.422" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:19.765" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:19.765" starttime="20170809 16:30:19.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:19.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:19.766" starttime="20170809 16:30:19.766" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:19.766" starttime="20170809 16:30:19.419" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:19.766" starttime="20170809 16:30:19.418" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:19.766" starttime="20170809 16:30:19.417" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:19.767" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:30:19.767" starttime="20170809 16:30:19.767" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:19.769" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:19.769" starttime="20170809 16:30:19.768" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:19.770" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:19.770" starttime="20170809 16:30:19.770" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:19.770" starttime="20170809 16:30:19.769" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:19.770" starttime="20170809 16:30:19.768" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:19.770" starttime="20170809 16:30:19.767" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:20.324" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:20.324" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:20.324" starttime="20170809 16:30:19.770" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:20.327" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:20.327" starttime="20170809 16:30:20.326" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:20.327" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:20.328" starttime="20170809 16:30:20.327" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.328" starttime="20170809 16:30:20.327" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.328" starttime="20170809 16:30:20.325" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.328" starttime="20170809 16:30:20.325" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:20.328" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:20.328" starttime="20170809 16:30:20.328" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:20.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:20.329" starttime="20170809 16:30:19.416" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:20.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:20.329" starttime="20170809 16:30:20.329" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:20.330" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:20.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:20.330" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:30:20.330" starttime="20170809 16:30:20.329" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:20.330" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:30:20.331" starttime="20170809 16:30:19.416" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:20.331" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:30:20.331" starttime="20170809 16:30:19.415" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:30:20.332" starttime="20170809 16:30:20.331" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.332" starttime="20170809 16:30:19.415" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:20.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:20.338" starttime="20170809 16:30:20.337" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:20.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:20.338" starttime="20170809 16:30:20.338" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:20.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:20.339" starttime="20170809 16:30:20.339" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:20.341" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:20.341" starttime="20170809 16:30:20.340" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:20.850" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:20.850" starttime="20170809 16:30:20.342" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:20.850" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:20.850" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:20.850" starttime="20170809 16:30:20.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:20.851" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:20.851" starttime="20170809 16:30:20.851" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:20.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:20.852" starttime="20170809 16:30:20.851" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.852" starttime="20170809 16:30:20.336" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.852" starttime="20170809 16:30:20.335" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.852" starttime="20170809 16:30:20.334" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:20.853" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:30:20.853" starttime="20170809 16:30:20.852" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:20.858" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:20.858" starttime="20170809 16:30:20.854" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:20.859" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:20.859" starttime="20170809 16:30:20.859" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.859" starttime="20170809 16:30:20.858" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.859" starttime="20170809 16:30:20.853" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:20.859" starttime="20170809 16:30:20.853" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:21.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:21.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:21.366" starttime="20170809 16:30:20.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:21.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:21.368" starttime="20170809 16:30:21.367" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:21.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:21.369" starttime="20170809 16:30:21.368" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.369" starttime="20170809 16:30:21.368" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.369" starttime="20170809 16:30:21.367" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.369" starttime="20170809 16:30:21.366" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:21.369" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:21.369" starttime="20170809 16:30:21.369" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:21.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:21.370" starttime="20170809 16:30:20.333" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:21.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:21.370" starttime="20170809 16:30:21.370" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:21.371" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:21.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:21.371" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:30:21.371" starttime="20170809 16:30:21.371" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:21.371" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:30:21.371" starttime="20170809 16:30:20.333" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:21.372" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:30:21.372" starttime="20170809 16:30:20.332" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:30:21.372" starttime="20170809 16:30:21.372" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:21.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:21.378" starttime="20170809 16:30:21.377" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:21.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:21.378" starttime="20170809 16:30:21.378" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:21.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:21.379" starttime="20170809 16:30:21.379" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:21.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:21.380" starttime="20170809 16:30:21.379" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:21.739" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:21.739" starttime="20170809 16:30:21.380" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:21.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:21.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:21.739" starttime="20170809 16:30:21.380" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:21.739" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:21.740" starttime="20170809 16:30:21.739" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:21.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:21.740" starttime="20170809 16:30:21.740" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.740" starttime="20170809 16:30:21.376" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.740" starttime="20170809 16:30:21.376" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.741" starttime="20170809 16:30:21.375" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:21.741" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:30:21.741" starttime="20170809 16:30:21.741" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:21.743" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:21.743" starttime="20170809 16:30:21.742" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:21.744" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:21.745" starttime="20170809 16:30:21.744" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.745" starttime="20170809 16:30:21.743" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.745" starttime="20170809 16:30:21.742" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:21.745" starttime="20170809 16:30:21.741" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:22.549" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:30:22.549" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:22.549" starttime="20170809 16:30:21.745" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:22.551" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:22.551" starttime="20170809 16:30:22.551" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:22.552" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:22.552" starttime="20170809 16:30:22.552" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:22.552" starttime="20170809 16:30:22.551" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:22.553" starttime="20170809 16:30:22.550" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:22.553" starttime="20170809 16:30:22.550" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:22.553" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:22.553" starttime="20170809 16:30:22.553" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:22.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:22.553" starttime="20170809 16:30:21.375" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:22.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:22.554" starttime="20170809 16:30:22.554" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:22.555" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:22.555" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:22.555" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:30:22.555" starttime="20170809 16:30:22.554" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:22.555" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:30:22.555" starttime="20170809 16:30:21.373" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:22.555" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:30:22.555" starttime="20170809 16:30:21.373" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:30:22.556" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:30:22.556" starttime="20170809 16:30:22.556" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:22.556" starttime="20170809 16:30:21.372" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:22.556" starttime="20170809 16:30:19.414" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:32.562" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:32.562" starttime="20170809 16:30:32.561" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:32.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:32.563" starttime="20170809 16:30:32.562" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:32.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:32.563" starttime="20170809 16:30:32.563" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:32.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:32.564" starttime="20170809 16:30:32.564" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:32.836" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:32.836" starttime="20170809 16:30:32.565" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:32.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:32.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:32.836" starttime="20170809 16:30:32.564" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:32.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:32.837" starttime="20170809 16:30:32.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:32.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:32.838" starttime="20170809 16:30:32.837" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:32.838" starttime="20170809 16:30:32.561" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:32.838" starttime="20170809 16:30:32.560" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:32.838" starttime="20170809 16:30:32.559" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:32.838" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:30:32.838" starttime="20170809 16:30:32.838" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:32.841" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:32.841" starttime="20170809 16:30:32.840" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:32.841" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:32.842" starttime="20170809 16:30:32.841" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:32.842" starttime="20170809 16:30:32.841" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:32.842" starttime="20170809 16:30:32.839" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:32.842" starttime="20170809 16:30:32.839" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:33.059" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:33.059" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:33.060" starttime="20170809 16:30:32.842" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:33.062" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:33.062" starttime="20170809 16:30:33.061" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:33.062" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:33.063" starttime="20170809 16:30:33.062" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.063" starttime="20170809 16:30:33.062" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.063" starttime="20170809 16:30:33.060" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.063" starttime="20170809 16:30:33.060" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:33.063" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:33.063" starttime="20170809 16:30:33.063" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:33.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:33.064" starttime="20170809 16:30:32.558" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:33.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:33.064" starttime="20170809 16:30:33.064" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:33.065" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:33.065" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:33.065" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:30:33.065" starttime="20170809 16:30:33.065" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:33.065" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:30:33.065" starttime="20170809 16:30:32.558" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:33.066" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:30:33.066" starttime="20170809 16:30:32.558" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:30:33.066" starttime="20170809 16:30:33.066" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.066" starttime="20170809 16:30:32.557" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:33.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:33.070" starttime="20170809 16:30:33.069" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:33.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:33.071" starttime="20170809 16:30:33.070" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:33.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:33.071" starttime="20170809 16:30:33.071" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:33.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:33.072" starttime="20170809 16:30:33.071" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:33.425" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:33.426" starttime="20170809 16:30:33.073" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:33.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:33.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:33.426" starttime="20170809 16:30:33.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:33.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:33.426" starttime="20170809 16:30:33.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:33.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:33.427" starttime="20170809 16:30:33.427" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.427" starttime="20170809 16:30:33.069" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.427" starttime="20170809 16:30:33.068" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.427" starttime="20170809 16:30:33.068" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:33.428" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:30:33.428" starttime="20170809 16:30:33.428" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:33.430" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:33.430" starttime="20170809 16:30:33.429" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:33.431" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:33.431" starttime="20170809 16:30:33.431" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.431" starttime="20170809 16:30:33.431" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.432" starttime="20170809 16:30:33.429" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:33.432" starttime="20170809 16:30:33.428" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:34.114" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:34.114" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:34.114" starttime="20170809 16:30:33.432" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:34.116" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:34.116" starttime="20170809 16:30:34.115" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:34.117" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:34.117" starttime="20170809 16:30:34.117" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.117" starttime="20170809 16:30:34.116" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.117" starttime="20170809 16:30:34.115" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.117" starttime="20170809 16:30:34.114" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:34.118" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:34.118" starttime="20170809 16:30:34.117" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:34.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:34.118" starttime="20170809 16:30:33.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:34.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:34.119" starttime="20170809 16:30:34.118" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:34.119" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:34.119" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:34.119" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:30:34.119" starttime="20170809 16:30:34.119" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:34.120" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:30:34.120" starttime="20170809 16:30:33.067" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:34.120" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:30:34.120" starttime="20170809 16:30:33.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:30:34.121" starttime="20170809 16:30:34.120" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:34.125" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:34.125" starttime="20170809 16:30:34.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:34.126" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:34.126" starttime="20170809 16:30:34.125" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:34.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:34.126" starttime="20170809 16:30:34.126" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:34.127" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:34.127" starttime="20170809 16:30:34.127" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:34.457" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:34.457" starttime="20170809 16:30:34.128" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:34.457" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:34.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:34.457" starttime="20170809 16:30:34.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:34.458" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:34.458" starttime="20170809 16:30:34.458" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:34.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:34.459" starttime="20170809 16:30:34.458" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.459" starttime="20170809 16:30:34.124" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.459" starttime="20170809 16:30:34.123" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.459" starttime="20170809 16:30:34.122" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:34.460" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:30:34.460" starttime="20170809 16:30:34.459" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:34.462" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:34.462" starttime="20170809 16:30:34.461" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:34.462" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:34.463" starttime="20170809 16:30:34.462" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.463" starttime="20170809 16:30:34.462" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.463" starttime="20170809 16:30:34.460" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:34.463" starttime="20170809 16:30:34.460" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:35.383" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:30:35.383" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:35.383" starttime="20170809 16:30:34.463" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:35.385" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:35.385" starttime="20170809 16:30:35.385" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:35.386" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:35.386" starttime="20170809 16:30:35.386" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:35.386" starttime="20170809 16:30:35.385" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:35.387" starttime="20170809 16:30:35.384" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:35.387" starttime="20170809 16:30:35.384" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:35.387" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:35.387" starttime="20170809 16:30:35.387" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:35.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:35.387" starttime="20170809 16:30:34.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:35.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:35.388" starttime="20170809 16:30:35.388" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:35.388" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:35.388" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:35.389" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:30:35.389" starttime="20170809 16:30:35.388" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:35.389" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:30:35.389" starttime="20170809 16:30:34.121" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:35.389" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:30:35.389" starttime="20170809 16:30:34.121" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:30:35.390" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:30:35.390" starttime="20170809 16:30:35.389" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:35.390" starttime="20170809 16:30:34.121" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:35.390" starttime="20170809 16:30:32.557" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:45.395" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:45.396" starttime="20170809 16:30:45.395" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:45.396" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:45.396" starttime="20170809 16:30:45.396" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:45.397" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:45.397" starttime="20170809 16:30:45.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:45.397" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:45.397" starttime="20170809 16:30:45.397" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:45.737" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:45.737" starttime="20170809 16:30:45.398" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:45.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:45.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:45.737" starttime="20170809 16:30:45.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:45.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:45.738" starttime="20170809 16:30:45.737" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:45.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:45.739" starttime="20170809 16:30:45.738" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:45.739" starttime="20170809 16:30:45.394" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:45.739" starttime="20170809 16:30:45.394" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:45.739" starttime="20170809 16:30:45.393" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:45.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:30:45.740" starttime="20170809 16:30:45.739" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:45.742" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:45.742" starttime="20170809 16:30:45.741" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:45.742" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:45.743" starttime="20170809 16:30:45.742" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:45.743" starttime="20170809 16:30:45.742" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:45.743" starttime="20170809 16:30:45.740" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:45.743" starttime="20170809 16:30:45.740" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:46.067" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:46.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:46.067" starttime="20170809 16:30:45.743" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:46.069" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:46.069" starttime="20170809 16:30:46.068" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:46.070" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:46.070" starttime="20170809 16:30:46.069" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.070" starttime="20170809 16:30:46.069" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.070" starttime="20170809 16:30:46.068" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.070" starttime="20170809 16:30:46.067" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:46.070" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:46.071" starttime="20170809 16:30:46.070" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:46.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:46.071" starttime="20170809 16:30:45.392" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:46.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:46.071" starttime="20170809 16:30:46.071" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:46.072" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:46.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:46.072" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:30:46.072" starttime="20170809 16:30:46.072" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:46.072" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:30:46.072" starttime="20170809 16:30:45.392" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:46.073" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:30:46.073" starttime="20170809 16:30:45.391" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:30:46.073" starttime="20170809 16:30:46.073" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.073" starttime="20170809 16:30:45.391" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:46.078" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:46.078" starttime="20170809 16:30:46.077" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:46.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:46.079" starttime="20170809 16:30:46.079" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:46.080" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:46.080" starttime="20170809 16:30:46.080" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:46.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:46.081" starttime="20170809 16:30:46.081" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:46.418" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:46.418" starttime="20170809 16:30:46.082" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:46.418" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:46.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:46.418" starttime="20170809 16:30:46.082" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:46.418" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:46.419" starttime="20170809 16:30:46.418" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:46.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:46.419" starttime="20170809 16:30:46.419" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.419" starttime="20170809 16:30:46.077" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.419" starttime="20170809 16:30:46.076" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.419" starttime="20170809 16:30:46.075" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:46.420" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:30:46.420" starttime="20170809 16:30:46.420" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:46.422" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:46.423" starttime="20170809 16:30:46.421" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:46.423" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:46.423" starttime="20170809 16:30:46.423" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.424" starttime="20170809 16:30:46.423" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.424" starttime="20170809 16:30:46.421" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:46.424" starttime="20170809 16:30:46.420" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:47.259" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:47.259" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:47.259" starttime="20170809 16:30:46.424" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:47.261" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:47.261" starttime="20170809 16:30:47.260" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:47.262" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:47.262" starttime="20170809 16:30:47.261" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.262" starttime="20170809 16:30:47.261" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.262" starttime="20170809 16:30:47.260" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.262" starttime="20170809 16:30:47.259" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:47.262" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:47.262" starttime="20170809 16:30:47.262" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:47.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:47.263" starttime="20170809 16:30:46.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:47.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:47.263" starttime="20170809 16:30:47.263" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:47.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:47.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:47.264" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:30:47.264" starttime="20170809 16:30:47.264" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:47.264" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:30:47.264" starttime="20170809 16:30:46.074" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:47.265" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:30:47.265" starttime="20170809 16:30:46.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:30:47.265" starttime="20170809 16:30:47.265" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:47.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:47.270" starttime="20170809 16:30:47.269" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:47.270" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:47.270" starttime="20170809 16:30:47.270" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:47.271" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:47.271" starttime="20170809 16:30:47.270" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:47.271" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:47.271" starttime="20170809 16:30:47.271" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:47.623" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:47.623" starttime="20170809 16:30:47.272" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:47.623" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:47.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:47.624" starttime="20170809 16:30:47.272" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:47.624" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:47.624" starttime="20170809 16:30:47.624" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:47.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:47.625" starttime="20170809 16:30:47.624" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.625" starttime="20170809 16:30:47.268" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.625" starttime="20170809 16:30:47.268" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.625" starttime="20170809 16:30:47.267" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:47.626" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:30:47.626" starttime="20170809 16:30:47.626" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:47.628" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:47.628" starttime="20170809 16:30:47.627" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:47.629" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:30:47.629" starttime="20170809 16:30:47.629" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.629" starttime="20170809 16:30:47.628" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.629" starttime="20170809 16:30:47.627" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:47.629" starttime="20170809 16:30:47.626" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:48.170" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:30:48.170" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:48.170" starttime="20170809 16:30:47.629" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:48.172" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:48.172" starttime="20170809 16:30:48.171" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:48.173" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:48.173" starttime="20170809 16:30:48.172" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:48.173" starttime="20170809 16:30:48.172" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:48.173" starttime="20170809 16:30:48.171" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:48.173" starttime="20170809 16:30:48.170" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:48.173" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:48.173" starttime="20170809 16:30:48.173" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:48.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:48.174" starttime="20170809 16:30:47.267" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:48.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:48.174" starttime="20170809 16:30:48.174" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:48.175" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:48.175" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:48.175" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:30:48.175" starttime="20170809 16:30:48.175" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:48.175" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:30:48.175" starttime="20170809 16:30:47.266" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:48.176" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:30:48.176" starttime="20170809 16:30:47.266" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:30:48.176" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:30:48.176" starttime="20170809 16:30:48.176" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:48.176" starttime="20170809 16:30:47.265" status="FAIL"></status>
</kw>
<status endtime="20170809 16:30:48.177" starttime="20170809 16:30:45.391" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:58.182" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:58.182" starttime="20170809 16:30:58.181" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:58.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:58.183" starttime="20170809 16:30:58.182" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:58.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:58.183" starttime="20170809 16:30:58.183" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:58.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:58.184" starttime="20170809 16:30:58.183" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:58.466" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:58.466" starttime="20170809 16:30:58.185" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:58.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:58.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:58.466" starttime="20170809 16:30:58.184" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:58.467" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:58.467" starttime="20170809 16:30:58.466" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:58.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:58.468" starttime="20170809 16:30:58.467" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:58.468" starttime="20170809 16:30:58.181" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:58.468" starttime="20170809 16:30:58.180" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:58.468" starttime="20170809 16:30:58.179" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:58.468" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:30:58.468" starttime="20170809 16:30:58.468" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:58.470" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:58.471" starttime="20170809 16:30:58.470" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:58.471" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:58.471" starttime="20170809 16:30:58.471" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:58.472" starttime="20170809 16:30:58.471" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:58.472" starttime="20170809 16:30:58.469" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:58.472" starttime="20170809 16:30:58.469" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:30:59.168" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:30:59.168" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:59.168" starttime="20170809 16:30:58.472" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:59.170" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:59.170" starttime="20170809 16:30:59.169" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:59.171" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:30:59.171" starttime="20170809 16:30:59.171" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.171" starttime="20170809 16:30:59.170" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.171" starttime="20170809 16:30:59.169" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.171" starttime="20170809 16:30:59.168" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:30:59.172" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:30:59.172" starttime="20170809 16:30:59.172" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:59.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:59.172" starttime="20170809 16:30:58.179" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:59.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:59.173" starttime="20170809 16:30:59.172" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:30:59.173" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:30:59.173" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:30:59.173" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:30:59.174" starttime="20170809 16:30:59.173" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:59.174" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:30:59.174" starttime="20170809 16:30:58.178" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:59.174" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:30:59.174" starttime="20170809 16:30:58.178" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:30:59.175" starttime="20170809 16:30:59.174" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.175" starttime="20170809 16:30:58.177" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:30:59.178" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:30:59.179" starttime="20170809 16:30:59.178" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:30:59.179" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:30:59.179" starttime="20170809 16:30:59.179" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:30:59.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:30:59.180" starttime="20170809 16:30:59.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:30:59.180" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:30:59.181" starttime="20170809 16:30:59.180" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:30:59.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:30:59.591" starttime="20170809 16:30:59.181" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:30:59.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:30:59.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:30:59.591" starttime="20170809 16:30:59.181" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:30:59.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:59.592" starttime="20170809 16:30:59.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:30:59.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:30:59.592" starttime="20170809 16:30:59.592" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.592" starttime="20170809 16:30:59.177" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.592" starttime="20170809 16:30:59.177" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.593" starttime="20170809 16:30:59.177" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:30:59.593" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:30:59.593" starttime="20170809 16:30:59.593" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:30:59.598" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:59.598" starttime="20170809 16:30:59.595" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:30:59.599" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:30:59.599" starttime="20170809 16:30:59.599" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.599" starttime="20170809 16:30:59.598" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.600" starttime="20170809 16:30:59.594" status="PASS"></status>
</kw>
<status endtime="20170809 16:30:59.600" starttime="20170809 16:30:59.593" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:00.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:00.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:00.144" starttime="20170809 16:30:59.600" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:00.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:00.146" starttime="20170809 16:31:00.145" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:00.147" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:00.147" starttime="20170809 16:31:00.146" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.147" starttime="20170809 16:31:00.146" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.147" starttime="20170809 16:31:00.145" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.147" starttime="20170809 16:31:00.144" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:00.147" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:00.147" starttime="20170809 16:31:00.147" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:00.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:00.148" starttime="20170809 16:30:59.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:00.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:00.148" starttime="20170809 16:31:00.148" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:00.149" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:00.149" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:00.149" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:31:00.149" starttime="20170809 16:31:00.149" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:00.149" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:31:00.149" starttime="20170809 16:30:59.175" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:00.150" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:31:00.150" starttime="20170809 16:30:59.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:31:00.150" starttime="20170809 16:31:00.150" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:00.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:00.154" starttime="20170809 16:31:00.154" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:00.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:00.155" starttime="20170809 16:31:00.155" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:00.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:00.156" starttime="20170809 16:31:00.155" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:00.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:00.156" starttime="20170809 16:31:00.156" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:00.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:00.517" starttime="20170809 16:31:00.157" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:00.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:00.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:00.517" starttime="20170809 16:31:00.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:00.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:00.518" starttime="20170809 16:31:00.518" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:00.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:00.519" starttime="20170809 16:31:00.518" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.519" starttime="20170809 16:31:00.153" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.519" starttime="20170809 16:31:00.153" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.519" starttime="20170809 16:31:00.152" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:00.520" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:31:00.520" starttime="20170809 16:31:00.519" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:00.522" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:00.522" starttime="20170809 16:31:00.521" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:00.523" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:00.523" starttime="20170809 16:31:00.523" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.523" starttime="20170809 16:31:00.522" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.523" starttime="20170809 16:31:00.520" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:00.523" starttime="20170809 16:31:00.520" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:01.373" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:31:01.373" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:01.374" starttime="20170809 16:31:00.523" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:01.375" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:01.375" starttime="20170809 16:31:01.375" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:01.376" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:01.376" starttime="20170809 16:31:01.376" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:01.376" starttime="20170809 16:31:01.375" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:01.377" starttime="20170809 16:31:01.374" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:01.377" starttime="20170809 16:31:01.374" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:01.377" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:01.377" starttime="20170809 16:31:01.377" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:01.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:01.377" starttime="20170809 16:31:00.152" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:01.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:01.378" starttime="20170809 16:31:01.378" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:01.378" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:01.379" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:01.379" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:31:01.379" starttime="20170809 16:31:01.378" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:01.379" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:31:01.379" starttime="20170809 16:31:00.151" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:01.379" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:31:01.379" starttime="20170809 16:31:00.151" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:31:01.380" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:31:01.380" starttime="20170809 16:31:01.379" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:01.380" starttime="20170809 16:31:00.150" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:01.380" starttime="20170809 16:30:58.177" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:11.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:11.386" starttime="20170809 16:31:11.385" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:11.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:11.386" starttime="20170809 16:31:11.386" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:11.387" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:11.387" starttime="20170809 16:31:11.387" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:11.388" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:11.388" starttime="20170809 16:31:11.387" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:11.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:11.649" starttime="20170809 16:31:11.388" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:11.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:11.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:11.650" starttime="20170809 16:31:11.388" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:11.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:11.650" starttime="20170809 16:31:11.650" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:11.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:11.651" starttime="20170809 16:31:11.650" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.651" starttime="20170809 16:31:11.385" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.651" starttime="20170809 16:31:11.384" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.651" starttime="20170809 16:31:11.383" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:11.652" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:31:11.652" starttime="20170809 16:31:11.651" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:11.654" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:11.654" starttime="20170809 16:31:11.653" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:11.655" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:11.655" starttime="20170809 16:31:11.655" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.655" starttime="20170809 16:31:11.654" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.655" starttime="20170809 16:31:11.653" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.655" starttime="20170809 16:31:11.652" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:11.722" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:11.722" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:11.722" starttime="20170809 16:31:11.656" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:11.724" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:11.724" starttime="20170809 16:31:11.723" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:11.725" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:11.725" starttime="20170809 16:31:11.725" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.725" starttime="20170809 16:31:11.724" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.725" starttime="20170809 16:31:11.723" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.726" starttime="20170809 16:31:11.722" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:11.726" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:11.726" starttime="20170809 16:31:11.726" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:11.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:11.726" starttime="20170809 16:31:11.382" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:11.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:11.727" starttime="20170809 16:31:11.727" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:11.727" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:11.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:11.728" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:31:11.728" starttime="20170809 16:31:11.727" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:11.728" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:31:11.728" starttime="20170809 16:31:11.382" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:11.728" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:31:11.728" starttime="20170809 16:31:11.381" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:31:11.729" starttime="20170809 16:31:11.729" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:11.729" starttime="20170809 16:31:11.381" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:11.732" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:11.733" starttime="20170809 16:31:11.732" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:11.733" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:11.733" starttime="20170809 16:31:11.733" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:11.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:11.734" starttime="20170809 16:31:11.734" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:11.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:11.735" starttime="20170809 16:31:11.734" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.142" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:12.142" starttime="20170809 16:31:11.735" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.142" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:12.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:12.142" starttime="20170809 16:31:11.735" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.143" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:12.143" starttime="20170809 16:31:12.143" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.144" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:12.144" starttime="20170809 16:31:12.143" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.144" starttime="20170809 16:31:11.732" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.144" starttime="20170809 16:31:11.731" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.144" starttime="20170809 16:31:11.731" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:12.145" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:31:12.145" starttime="20170809 16:31:12.144" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:12.147" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:12.147" starttime="20170809 16:31:12.146" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:12.149" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:12.149" starttime="20170809 16:31:12.148" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.149" starttime="20170809 16:31:12.148" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.149" starttime="20170809 16:31:12.146" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.149" starttime="20170809 16:31:12.145" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:12.288" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:12.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:12.288" starttime="20170809 16:31:12.149" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:12.290" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:12.290" starttime="20170809 16:31:12.289" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:12.291" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:12.291" starttime="20170809 16:31:12.291" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.291" starttime="20170809 16:31:12.290" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.291" starttime="20170809 16:31:12.289" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.291" starttime="20170809 16:31:12.288" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:12.291" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:12.292" starttime="20170809 16:31:12.291" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:12.292" starttime="20170809 16:31:11.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:12.293" starttime="20170809 16:31:12.292" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:12.293" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:12.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:12.293" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:31:12.293" starttime="20170809 16:31:12.293" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.294" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:31:12.294" starttime="20170809 16:31:11.729" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.294" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:31:12.294" starttime="20170809 16:31:11.729" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:31:12.295" starttime="20170809 16:31:12.294" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:12.298" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:12.299" starttime="20170809 16:31:12.298" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:12.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:12.299" starttime="20170809 16:31:12.299" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:12.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:12.300" starttime="20170809 16:31:12.300" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:12.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:12.301" starttime="20170809 16:31:12.300" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:12.595" starttime="20170809 16:31:12.301" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.596" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:12.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:12.596" starttime="20170809 16:31:12.301" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:12.596" starttime="20170809 16:31:12.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:12.597" starttime="20170809 16:31:12.597" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.597" starttime="20170809 16:31:12.298" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.597" starttime="20170809 16:31:12.297" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.597" starttime="20170809 16:31:12.297" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:12.598" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:31:12.598" starttime="20170809 16:31:12.598" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:12.600" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:12.600" starttime="20170809 16:31:12.599" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:12.601" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:12.601" starttime="20170809 16:31:12.601" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.601" starttime="20170809 16:31:12.600" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.601" starttime="20170809 16:31:12.599" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.601" starttime="20170809 16:31:12.598" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:12.713" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:31:12.713" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:12.713" starttime="20170809 16:31:12.602" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:12.715" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:12.715" starttime="20170809 16:31:12.715" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:12.716" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:12.716" starttime="20170809 16:31:12.716" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.716" starttime="20170809 16:31:12.715" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.716" starttime="20170809 16:31:12.714" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:12.716" starttime="20170809 16:31:12.714" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:12.717" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:12.717" starttime="20170809 16:31:12.717" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:12.717" starttime="20170809 16:31:12.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:12.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:12.718" starttime="20170809 16:31:12.717" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:12.719" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:12.719" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:12.719" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:31:12.719" starttime="20170809 16:31:12.718" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.719" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:31:12.719" starttime="20170809 16:31:12.296" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:12.720" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:31:12.720" starttime="20170809 16:31:12.295" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:31:12.721" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:31:12.721" starttime="20170809 16:31:12.720" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:12.721" starttime="20170809 16:31:12.295" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:12.721" starttime="20170809 16:31:11.381" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:22.727" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:22.727" starttime="20170809 16:31:22.727" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:22.728" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:22.728" starttime="20170809 16:31:22.728" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:22.728" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:22.729" starttime="20170809 16:31:22.728" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:22.729" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:22.729" starttime="20170809 16:31:22.729" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:23.514" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:23.515" starttime="20170809 16:31:22.730" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:23.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:23.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:23.515" starttime="20170809 16:31:22.729" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:23.515" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:23.516" starttime="20170809 16:31:23.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:23.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:23.516" starttime="20170809 16:31:23.516" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.516" starttime="20170809 16:31:22.726" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.516" starttime="20170809 16:31:22.725" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.517" starttime="20170809 16:31:22.725" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:23.517" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:31:23.517" starttime="20170809 16:31:23.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:23.519" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:23.519" starttime="20170809 16:31:23.519" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:23.520" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:23.521" starttime="20170809 16:31:23.520" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.521" starttime="20170809 16:31:23.520" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.521" starttime="20170809 16:31:23.518" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.521" starttime="20170809 16:31:23.517" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:23.616" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:23.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:23.616" starttime="20170809 16:31:23.521" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:23.618" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:23.618" starttime="20170809 16:31:23.617" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:23.619" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:23.619" starttime="20170809 16:31:23.619" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.619" starttime="20170809 16:31:23.618" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.619" starttime="20170809 16:31:23.617" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.619" starttime="20170809 16:31:23.616" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:23.620" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:23.620" starttime="20170809 16:31:23.620" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:23.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:23.620" starttime="20170809 16:31:22.724" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:23.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:23.621" starttime="20170809 16:31:23.620" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:23.621" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:23.621" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:23.621" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:31:23.621" starttime="20170809 16:31:23.621" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:23.622" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:31:23.622" starttime="20170809 16:31:22.723" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:23.622" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:31:23.622" starttime="20170809 16:31:22.722" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:31:23.623" starttime="20170809 16:31:23.622" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.623" starttime="20170809 16:31:22.722" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:23.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:23.629" starttime="20170809 16:31:23.628" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:23.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:23.629" starttime="20170809 16:31:23.629" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:23.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:23.630" starttime="20170809 16:31:23.630" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:23.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:23.631" starttime="20170809 16:31:23.630" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:23.918" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:23.919" starttime="20170809 16:31:23.631" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:23.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:23.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:23.919" starttime="20170809 16:31:23.631" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:23.919" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:23.919" starttime="20170809 16:31:23.919" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:23.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:23.920" starttime="20170809 16:31:23.920" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.920" starttime="20170809 16:31:23.628" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.920" starttime="20170809 16:31:23.627" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.920" starttime="20170809 16:31:23.627" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:23.921" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:31:23.921" starttime="20170809 16:31:23.921" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:23.923" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:23.923" starttime="20170809 16:31:23.922" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:23.927" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:23.927" starttime="20170809 16:31:23.927" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.927" starttime="20170809 16:31:23.926" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.927" starttime="20170809 16:31:23.922" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:23.928" starttime="20170809 16:31:23.921" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:24.044" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:24.044" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:24.044" starttime="20170809 16:31:23.928" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:24.046" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:24.046" starttime="20170809 16:31:24.045" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:24.047" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:24.047" starttime="20170809 16:31:24.047" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.047" starttime="20170809 16:31:24.046" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.047" starttime="20170809 16:31:24.045" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.047" starttime="20170809 16:31:24.044" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:24.048" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:24.048" starttime="20170809 16:31:24.048" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:24.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:24.048" starttime="20170809 16:31:23.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:24.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:24.049" starttime="20170809 16:31:24.048" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:24.049" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:24.049" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:24.049" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:31:24.049" starttime="20170809 16:31:24.049" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:24.050" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:31:24.050" starttime="20170809 16:31:23.623" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:24.050" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:31:24.050" starttime="20170809 16:31:23.623" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:31:24.051" starttime="20170809 16:31:24.050" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:24.054" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:24.055" starttime="20170809 16:31:24.054" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:24.055" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:24.055" starttime="20170809 16:31:24.055" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:24.056" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:24.056" starttime="20170809 16:31:24.056" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:24.057" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:24.057" starttime="20170809 16:31:24.056" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:24.272" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:24.273" starttime="20170809 16:31:24.057" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:24.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:24.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:24.273" starttime="20170809 16:31:24.057" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:24.273" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:24.273" starttime="20170809 16:31:24.273" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:24.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:24.274" starttime="20170809 16:31:24.274" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.274" starttime="20170809 16:31:24.053" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.274" starttime="20170809 16:31:24.053" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.275" starttime="20170809 16:31:24.053" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:24.275" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:31:24.275" starttime="20170809 16:31:24.275" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:24.278" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:24.278" starttime="20170809 16:31:24.277" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:24.278" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:24.279" starttime="20170809 16:31:24.278" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.279" starttime="20170809 16:31:24.278" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.279" starttime="20170809 16:31:24.276" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.279" starttime="20170809 16:31:24.275" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:24.387" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:31:24.387" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:24.387" starttime="20170809 16:31:24.279" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:24.389" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:24.389" starttime="20170809 16:31:24.388" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:24.390" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:24.390" starttime="20170809 16:31:24.390" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.390" starttime="20170809 16:31:24.389" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.390" starttime="20170809 16:31:24.388" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:24.390" starttime="20170809 16:31:24.387" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:24.391" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:24.391" starttime="20170809 16:31:24.391" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:24.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:24.391" starttime="20170809 16:31:24.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:24.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:24.392" starttime="20170809 16:31:24.391" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:24.392" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:24.392" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:24.392" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:31:24.392" starttime="20170809 16:31:24.392" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:24.393" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:31:24.393" starttime="20170809 16:31:24.051" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:24.393" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:31:24.393" starttime="20170809 16:31:24.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:31:24.393" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:31:24.394" starttime="20170809 16:31:24.393" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:24.394" starttime="20170809 16:31:24.051" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:24.394" starttime="20170809 16:31:22.722" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:34.399" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:34.400" starttime="20170809 16:31:34.399" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:34.400" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:34.400" starttime="20170809 16:31:34.400" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:34.401" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:34.401" starttime="20170809 16:31:34.400" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:34.401" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:34.401" starttime="20170809 16:31:34.401" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:34.592" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:34.592" starttime="20170809 16:31:34.402" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:34.592" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:34.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:34.592" starttime="20170809 16:31:34.402" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:34.593" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:34.593" starttime="20170809 16:31:34.592" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:34.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:34.593" starttime="20170809 16:31:34.593" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.593" starttime="20170809 16:31:34.398" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.594" starttime="20170809 16:31:34.397" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.594" starttime="20170809 16:31:34.397" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:34.594" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:31:34.594" starttime="20170809 16:31:34.594" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:34.596" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:34.596" starttime="20170809 16:31:34.596" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:34.597" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:34.597" starttime="20170809 16:31:34.597" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.597" starttime="20170809 16:31:34.597" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.598" starttime="20170809 16:31:34.595" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.598" starttime="20170809 16:31:34.595" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:34.661" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:34.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:34.661" starttime="20170809 16:31:34.598" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:34.663" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:34.663" starttime="20170809 16:31:34.662" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:34.664" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:34.664" starttime="20170809 16:31:34.664" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.664" starttime="20170809 16:31:34.663" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.665" starttime="20170809 16:31:34.662" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.665" starttime="20170809 16:31:34.661" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:34.665" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:34.665" starttime="20170809 16:31:34.665" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:34.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:34.665" starttime="20170809 16:31:34.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:34.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:34.666" starttime="20170809 16:31:34.666" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:34.667" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:34.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:34.667" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:31:34.667" starttime="20170809 16:31:34.666" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:34.667" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:31:34.667" starttime="20170809 16:31:34.396" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:34.667" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:31:34.667" starttime="20170809 16:31:34.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:31:34.668" starttime="20170809 16:31:34.668" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.668" starttime="20170809 16:31:34.395" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:34.672" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:34.672" starttime="20170809 16:31:34.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:34.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:34.672" starttime="20170809 16:31:34.672" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:34.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:34.673" starttime="20170809 16:31:34.673" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:34.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:34.674" starttime="20170809 16:31:34.673" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:34.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:34.862" starttime="20170809 16:31:34.674" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:34.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:34.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:34.862" starttime="20170809 16:31:34.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:34.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:34.863" starttime="20170809 16:31:34.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:34.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:34.864" starttime="20170809 16:31:34.863" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.864" starttime="20170809 16:31:34.671" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.864" starttime="20170809 16:31:34.670" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.864" starttime="20170809 16:31:34.670" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:34.865" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:31:34.865" starttime="20170809 16:31:34.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:34.869" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:34.869" starttime="20170809 16:31:34.866" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:34.870" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:34.870" starttime="20170809 16:31:34.870" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.871" starttime="20170809 16:31:34.870" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.871" starttime="20170809 16:31:34.865" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:34.871" starttime="20170809 16:31:34.865" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:35.004" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:35.004" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:35.004" starttime="20170809 16:31:34.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:35.006" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:35.006" starttime="20170809 16:31:35.006" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:35.007" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:35.007" starttime="20170809 16:31:35.007" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.007" starttime="20170809 16:31:35.006" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.007" starttime="20170809 16:31:35.005" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.007" starttime="20170809 16:31:35.005" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:35.008" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:35.008" starttime="20170809 16:31:35.008" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:35.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:35.008" starttime="20170809 16:31:34.669" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:35.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:35.009" starttime="20170809 16:31:35.008" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:35.009" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:35.009" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:35.009" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170809 16:31:35.010" starttime="20170809 16:31:35.009" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:35.010" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 16:31:35.010" starttime="20170809 16:31:34.669" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:35.010" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 16:31:35.010" starttime="20170809 16:31:34.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:31:35.011" starttime="20170809 16:31:35.010" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:35.015" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:35.015" starttime="20170809 16:31:35.014" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:35.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:35.015" starttime="20170809 16:31:35.015" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:35.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:35.016" starttime="20170809 16:31:35.016" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:35.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:35.017" starttime="20170809 16:31:35.016" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:35.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:35.221" starttime="20170809 16:31:35.017" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:35.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:35.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:35.221" starttime="20170809 16:31:35.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:35.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:35.222" starttime="20170809 16:31:35.221" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:35.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:35.222" starttime="20170809 16:31:35.222" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.222" starttime="20170809 16:31:35.014" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.222" starttime="20170809 16:31:35.013" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.223" starttime="20170809 16:31:35.013" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:35.224" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 16:31:35.224" starttime="20170809 16:31:35.223" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:35.226" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:35.226" starttime="20170809 16:31:35.225" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:35.227" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 16:31:35.227" starttime="20170809 16:31:35.227" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.227" starttime="20170809 16:31:35.226" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.227" starttime="20170809 16:31:35.225" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.227" starttime="20170809 16:31:35.224" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:35.308" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 16:31:35.308" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:35.308" starttime="20170809 16:31:35.228" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:35.310" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:35.310" starttime="20170809 16:31:35.310" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:35.311" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:35.311" starttime="20170809 16:31:35.311" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.311" starttime="20170809 16:31:35.310" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.311" starttime="20170809 16:31:35.309" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:35.311" starttime="20170809 16:31:35.309" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:35.312" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:35.312" starttime="20170809 16:31:35.312" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:35.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:35.312" starttime="20170809 16:31:35.012" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:35.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:35.313" starttime="20170809 16:31:35.312" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:35.313" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:35.313" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:35.313" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170809 16:31:35.313" starttime="20170809 16:31:35.313" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:35.314" level="INFO">${state} = Off</msg>
<status endtime="20170809 16:31:35.314" starttime="20170809 16:31:35.012" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:35.314" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 16:31:35.314" starttime="20170809 16:31:35.011" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 16:31:35.315" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 16:31:35.315" starttime="20170809 16:31:35.314" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:35.315" starttime="20170809 16:31:35.011" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:35.315" starttime="20170809 16:31:34.394" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:45.322" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:45.322" starttime="20170809 16:31:45.321" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:45.323" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:45.323" starttime="20170809 16:31:45.322" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:45.324" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:45.324" starttime="20170809 16:31:45.323" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:45.325" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:45.325" starttime="20170809 16:31:45.325" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:45.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:45.515" starttime="20170809 16:31:45.326" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:45.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:45.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:45.515" starttime="20170809 16:31:45.326" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:45.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:45.516" starttime="20170809 16:31:45.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:45.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:45.517" starttime="20170809 16:31:45.516" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.517" starttime="20170809 16:31:45.320" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.517" starttime="20170809 16:31:45.319" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.517" starttime="20170809 16:31:45.318" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:45.517" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:31:45.518" starttime="20170809 16:31:45.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:45.520" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:45.520" starttime="20170809 16:31:45.519" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:45.521" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:45.521" starttime="20170809 16:31:45.520" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.521" starttime="20170809 16:31:45.520" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.521" starttime="20170809 16:31:45.518" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.521" starttime="20170809 16:31:45.518" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:45.608" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:45.608" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:45.608" starttime="20170809 16:31:45.521" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:45.610" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:45.610" starttime="20170809 16:31:45.609" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:45.611" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:45.611" starttime="20170809 16:31:45.611" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.611" starttime="20170809 16:31:45.610" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.611" starttime="20170809 16:31:45.609" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.611" starttime="20170809 16:31:45.608" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:45.612" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:45.612" starttime="20170809 16:31:45.611" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:45.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:45.612" starttime="20170809 16:31:45.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:45.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:45.613" starttime="20170809 16:31:45.612" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:45.613" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:45.613" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:45.613" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:31:45.613" starttime="20170809 16:31:45.613" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:45.614" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:31:45.614" starttime="20170809 16:31:45.317" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:45.614" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:31:45.614" starttime="20170809 16:31:45.316" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:31:45.615" starttime="20170809 16:31:45.614" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.615" starttime="20170809 16:31:45.316" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:45.618" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:45.619" starttime="20170809 16:31:45.618" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:45.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:45.619" starttime="20170809 16:31:45.619" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:45.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:45.620" starttime="20170809 16:31:45.619" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:45.620" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:45.620" starttime="20170809 16:31:45.620" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:45.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:45.973" starttime="20170809 16:31:45.621" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:45.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:45.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:45.973" starttime="20170809 16:31:45.621" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:45.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:45.974" starttime="20170809 16:31:45.973" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:45.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:45.975" starttime="20170809 16:31:45.974" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.975" starttime="20170809 16:31:45.617" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.975" starttime="20170809 16:31:45.617" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.975" starttime="20170809 16:31:45.616" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:45.975" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:31:45.976" starttime="20170809 16:31:45.975" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:45.978" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:45.978" starttime="20170809 16:31:45.977" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:45.979" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:45.979" starttime="20170809 16:31:45.979" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.979" starttime="20170809 16:31:45.978" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.979" starttime="20170809 16:31:45.976" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:45.979" starttime="20170809 16:31:45.976" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:46.071" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:46.072" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:46.072" starttime="20170809 16:31:45.980" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:46.073" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:46.073" starttime="20170809 16:31:46.073" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:46.074" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:46.075" starttime="20170809 16:31:46.074" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:46.075" starttime="20170809 16:31:46.074" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:46.075" starttime="20170809 16:31:46.072" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:46.075" starttime="20170809 16:31:46.072" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:46.075" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:46.075" starttime="20170809 16:31:46.075" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:46.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:46.076" starttime="20170809 16:31:45.616" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:46.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:46.076" starttime="20170809 16:31:46.076" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:46.077" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:46.077" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:46.077" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:31:46.077" starttime="20170809 16:31:46.077" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:46.077" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:31:46.077" starttime="20170809 16:31:45.615" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:46.078" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:31:46.078" starttime="20170809 16:31:45.615" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:31:46.078" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:31:46.078" starttime="20170809 16:31:46.078" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:46.078" starttime="20170809 16:31:45.315" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:56.083" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:56.084" starttime="20170809 16:31:56.083" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:56.084" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:56.084" starttime="20170809 16:31:56.084" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:56.085" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:56.085" starttime="20170809 16:31:56.084" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:56.086" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:56.086" starttime="20170809 16:31:56.085" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:56.332" starttime="20170809 16:31:56.087" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:56.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:56.332" starttime="20170809 16:31:56.086" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:56.333" starttime="20170809 16:31:56.333" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:56.334" starttime="20170809 16:31:56.333" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.334" starttime="20170809 16:31:56.082" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.334" starttime="20170809 16:31:56.082" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.334" starttime="20170809 16:31:56.081" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:56.335" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:31:56.335" starttime="20170809 16:31:56.334" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:56.337" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:56.337" starttime="20170809 16:31:56.336" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:56.338" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:56.338" starttime="20170809 16:31:56.337" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.338" starttime="20170809 16:31:56.337" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.338" starttime="20170809 16:31:56.335" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.338" starttime="20170809 16:31:56.335" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:56.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:56.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:56.415" starttime="20170809 16:31:56.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:56.417" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:56.417" starttime="20170809 16:31:56.416" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:56.418" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:56.418" starttime="20170809 16:31:56.418" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.418" starttime="20170809 16:31:56.417" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.418" starttime="20170809 16:31:56.416" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.418" starttime="20170809 16:31:56.415" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:56.419" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:56.419" starttime="20170809 16:31:56.418" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:56.419" starttime="20170809 16:31:56.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:56.420" starttime="20170809 16:31:56.419" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:56.420" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:56.420" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:56.420" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:31:56.420" starttime="20170809 16:31:56.420" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.421" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:31:56.421" starttime="20170809 16:31:56.080" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.421" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:31:56.421" starttime="20170809 16:31:56.080" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:31:56.421" starttime="20170809 16:31:56.421" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.422" starttime="20170809 16:31:56.079" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:31:56.426" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:31:56.427" starttime="20170809 16:31:56.426" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:31:56.427" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:31:56.427" starttime="20170809 16:31:56.427" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:31:56.428" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:31:56.428" starttime="20170809 16:31:56.427" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:31:56.428" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:31:56.428" starttime="20170809 16:31:56.428" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.713" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:31:56.713" starttime="20170809 16:31:56.429" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.713" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:31:56.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:56.713" starttime="20170809 16:31:56.429" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.714" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:56.714" starttime="20170809 16:31:56.714" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:56.715" starttime="20170809 16:31:56.714" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.715" starttime="20170809 16:31:56.425" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.715" starttime="20170809 16:31:56.424" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.715" starttime="20170809 16:31:56.423" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:31:56.715" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:31:56.715" starttime="20170809 16:31:56.715" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:56.718" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:56.718" starttime="20170809 16:31:56.717" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:56.718" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:31:56.719" starttime="20170809 16:31:56.718" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.719" starttime="20170809 16:31:56.718" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.719" starttime="20170809 16:31:56.716" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.719" starttime="20170809 16:31:56.716" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:31:56.821" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:31:56.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:56.821" starttime="20170809 16:31:56.719" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:31:56.823" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:56.823" starttime="20170809 16:31:56.822" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:31:56.824" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:31:56.824" starttime="20170809 16:31:56.823" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.824" starttime="20170809 16:31:56.823" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.824" starttime="20170809 16:31:56.822" status="PASS"></status>
</kw>
<status endtime="20170809 16:31:56.824" starttime="20170809 16:31:56.821" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:31:56.825" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:31:56.825" starttime="20170809 16:31:56.824" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:31:56.825" starttime="20170809 16:31:56.423" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:31:56.825" starttime="20170809 16:31:56.825" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:31:56.826" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:31:56.826" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:31:56.826" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:31:56.826" starttime="20170809 16:31:56.826" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.826" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:31:56.827" starttime="20170809 16:31:56.422" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:31:56.827" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:31:56.827" starttime="20170809 16:31:56.422" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:31:56.827" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:31:56.828" starttime="20170809 16:31:56.827" status="FAIL"></status>
</kw>
<status endtime="20170809 16:31:56.828" starttime="20170809 16:31:56.079" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:06.833" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:06.833" starttime="20170809 16:32:06.832" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:06.834" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:06.834" starttime="20170809 16:32:06.833" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:06.834" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:06.834" starttime="20170809 16:32:06.834" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:06.835" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:06.835" starttime="20170809 16:32:06.835" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:07.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:07.181" starttime="20170809 16:32:06.836" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:07.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:07.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:07.182" starttime="20170809 16:32:06.835" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:07.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:07.182" starttime="20170809 16:32:07.182" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:07.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:07.183" starttime="20170809 16:32:07.182" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:07.183" starttime="20170809 16:32:06.832" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:07.183" starttime="20170809 16:32:06.831" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:07.183" starttime="20170809 16:32:06.831" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:07.184" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:32:07.184" starttime="20170809 16:32:07.183" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:07.186" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:07.186" starttime="20170809 16:32:07.185" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:07.187" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:07.187" starttime="20170809 16:32:07.186" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:07.187" starttime="20170809 16:32:07.186" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:07.187" starttime="20170809 16:32:07.184" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:07.187" starttime="20170809 16:32:07.184" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:08.056" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:08.056" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:08.056" starttime="20170809 16:32:07.187" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:08.058" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:08.058" starttime="20170809 16:32:08.057" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:08.059" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:08.059" starttime="20170809 16:32:08.059" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.059" starttime="20170809 16:32:08.058" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.059" starttime="20170809 16:32:08.057" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.059" starttime="20170809 16:32:08.056" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:08.060" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:08.060" starttime="20170809 16:32:08.059" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:08.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:08.060" starttime="20170809 16:32:06.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:08.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:08.061" starttime="20170809 16:32:08.060" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:08.061" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:08.061" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:08.061" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:32:08.061" starttime="20170809 16:32:08.061" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:08.062" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:32:08.062" starttime="20170809 16:32:06.829" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:08.062" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:32:08.062" starttime="20170809 16:32:06.829" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:32:08.062" starttime="20170809 16:32:08.062" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.063" starttime="20170809 16:32:06.829" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:08.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:08.067" starttime="20170809 16:32:08.066" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:08.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:08.067" starttime="20170809 16:32:08.067" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:08.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:08.068" starttime="20170809 16:32:08.068" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:08.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:08.069" starttime="20170809 16:32:08.068" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:08.290" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:08.291" starttime="20170809 16:32:08.069" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:08.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:08.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:08.291" starttime="20170809 16:32:08.069" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:08.291" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:08.291" starttime="20170809 16:32:08.291" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:08.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:08.292" starttime="20170809 16:32:08.292" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.292" starttime="20170809 16:32:08.065" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.292" starttime="20170809 16:32:08.065" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.292" starttime="20170809 16:32:08.064" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:08.293" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:32:08.293" starttime="20170809 16:32:08.293" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:08.296" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:08.296" starttime="20170809 16:32:08.295" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:08.297" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:08.297" starttime="20170809 16:32:08.297" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.297" starttime="20170809 16:32:08.296" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.298" starttime="20170809 16:32:08.294" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.298" starttime="20170809 16:32:08.293" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:08.410" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:08.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:08.410" starttime="20170809 16:32:08.298" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:08.412" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:08.412" starttime="20170809 16:32:08.412" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:08.413" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:08.413" starttime="20170809 16:32:08.413" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.413" starttime="20170809 16:32:08.412" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.413" starttime="20170809 16:32:08.411" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:08.413" starttime="20170809 16:32:08.411" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:08.414" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:08.414" starttime="20170809 16:32:08.414" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:08.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:08.414" starttime="20170809 16:32:08.064" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:08.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:08.415" starttime="20170809 16:32:08.414" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:08.415" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:08.415" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:08.415" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:32:08.415" starttime="20170809 16:32:08.415" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:08.416" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:32:08.416" starttime="20170809 16:32:08.063" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:08.416" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:32:08.416" starttime="20170809 16:32:08.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:32:08.417" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:32:08.417" starttime="20170809 16:32:08.416" status="FAIL"></status>
</kw>
<status endtime="20170809 16:32:08.417" starttime="20170809 16:32:06.828" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:18.422" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:18.423" starttime="20170809 16:32:18.422" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:18.423" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:18.423" starttime="20170809 16:32:18.423" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:18.424" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:18.424" starttime="20170809 16:32:18.423" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:18.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:18.424" starttime="20170809 16:32:18.424" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:18.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:18.660" starttime="20170809 16:32:18.425" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:18.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:18.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:18.660" starttime="20170809 16:32:18.425" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:18.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:18.661" starttime="20170809 16:32:18.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:18.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:18.661" starttime="20170809 16:32:18.661" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.661" starttime="20170809 16:32:18.421" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.662" starttime="20170809 16:32:18.421" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.662" starttime="20170809 16:32:18.420" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:18.662" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:32:18.662" starttime="20170809 16:32:18.662" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:18.664" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:18.664" starttime="20170809 16:32:18.664" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:18.665" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:18.666" starttime="20170809 16:32:18.665" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.666" starttime="20170809 16:32:18.664" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.666" starttime="20170809 16:32:18.663" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.666" starttime="20170809 16:32:18.663" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:18.729" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:18.729" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:18.729" starttime="20170809 16:32:18.666" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:18.731" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:18.731" starttime="20170809 16:32:18.731" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:18.732" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:18.732" starttime="20170809 16:32:18.732" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.732" starttime="20170809 16:32:18.731" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.732" starttime="20170809 16:32:18.730" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.732" starttime="20170809 16:32:18.730" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:18.733" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:18.733" starttime="20170809 16:32:18.733" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:18.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:18.733" starttime="20170809 16:32:18.420" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:18.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:18.734" starttime="20170809 16:32:18.733" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:18.734" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:18.734" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:18.734" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:32:18.735" starttime="20170809 16:32:18.734" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:18.735" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:32:18.735" starttime="20170809 16:32:18.419" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:18.735" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:32:18.735" starttime="20170809 16:32:18.418" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:32:18.736" starttime="20170809 16:32:18.735" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.736" starttime="20170809 16:32:18.418" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:18.740" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:18.740" starttime="20170809 16:32:18.739" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:18.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:18.741" starttime="20170809 16:32:18.741" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:18.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:18.742" starttime="20170809 16:32:18.741" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:18.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:18.743" starttime="20170809 16:32:18.742" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:18.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:18.956" starttime="20170809 16:32:18.744" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:18.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:18.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:18.957" starttime="20170809 16:32:18.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:18.957" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:18.957" starttime="20170809 16:32:18.957" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:18.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:18.958" starttime="20170809 16:32:18.958" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.958" starttime="20170809 16:32:18.739" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.958" starttime="20170809 16:32:18.738" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.958" starttime="20170809 16:32:18.738" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:18.959" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:32:18.959" starttime="20170809 16:32:18.959" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:18.961" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:18.961" starttime="20170809 16:32:18.960" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:18.962" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:18.962" starttime="20170809 16:32:18.962" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.962" starttime="20170809 16:32:18.961" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.962" starttime="20170809 16:32:18.960" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:18.962" starttime="20170809 16:32:18.959" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:19.073" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:19.073" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:19.073" starttime="20170809 16:32:18.963" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:19.075" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:19.075" starttime="20170809 16:32:19.074" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:19.076" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:19.076" starttime="20170809 16:32:19.075" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:19.076" starttime="20170809 16:32:19.075" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:19.076" starttime="20170809 16:32:19.074" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:19.076" starttime="20170809 16:32:19.073" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:19.077" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:19.077" starttime="20170809 16:32:19.076" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:19.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:19.077" starttime="20170809 16:32:18.737" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:19.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:19.078" starttime="20170809 16:32:19.077" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:19.078" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:19.078" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:19.078" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:32:19.078" starttime="20170809 16:32:19.078" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:19.079" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:32:19.079" starttime="20170809 16:32:18.736" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:19.079" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:32:19.079" starttime="20170809 16:32:18.736" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:32:19.080" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:32:19.080" starttime="20170809 16:32:19.079" status="FAIL"></status>
</kw>
<status endtime="20170809 16:32:19.080" starttime="20170809 16:32:18.417" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:29.086" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:29.087" starttime="20170809 16:32:29.086" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:29.088" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:29.088" starttime="20170809 16:32:29.087" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:29.089" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:29.089" starttime="20170809 16:32:29.088" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:29.090" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:29.090" starttime="20170809 16:32:29.089" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.412" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:29.412" starttime="20170809 16:32:29.091" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:29.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:29.412" starttime="20170809 16:32:29.090" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:29.413" starttime="20170809 16:32:29.413" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:29.414" starttime="20170809 16:32:29.413" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.414" starttime="20170809 16:32:29.085" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.414" starttime="20170809 16:32:29.084" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.414" starttime="20170809 16:32:29.083" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:29.415" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:32:29.415" starttime="20170809 16:32:29.414" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:29.417" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:29.417" starttime="20170809 16:32:29.416" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:29.418" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:29.418" starttime="20170809 16:32:29.417" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.418" starttime="20170809 16:32:29.417" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.418" starttime="20170809 16:32:29.415" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.418" starttime="20170809 16:32:29.415" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:29.482" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:29.482" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:29.482" starttime="20170809 16:32:29.418" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:29.484" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:29.484" starttime="20170809 16:32:29.483" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:29.485" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:29.485" starttime="20170809 16:32:29.485" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.485" starttime="20170809 16:32:29.484" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.485" starttime="20170809 16:32:29.483" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.485" starttime="20170809 16:32:29.482" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:29.486" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:29.486" starttime="20170809 16:32:29.486" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:29.486" starttime="20170809 16:32:29.082" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:29.487" starttime="20170809 16:32:29.486" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:29.487" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:29.487" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:29.487" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:32:29.488" starttime="20170809 16:32:29.487" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.488" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:32:29.488" starttime="20170809 16:32:29.081" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.488" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:32:29.488" starttime="20170809 16:32:29.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:32:29.489" starttime="20170809 16:32:29.488" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.489" starttime="20170809 16:32:29.081" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:29.492" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:29.493" starttime="20170809 16:32:29.492" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:29.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:29.494" starttime="20170809 16:32:29.493" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:29.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:29.495" starttime="20170809 16:32:29.494" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:29.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:29.496" starttime="20170809 16:32:29.495" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.699" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:29.699" starttime="20170809 16:32:29.497" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:29.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:29.699" starttime="20170809 16:32:29.496" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.700" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:29.700" starttime="20170809 16:32:29.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:29.701" starttime="20170809 16:32:29.700" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.701" starttime="20170809 16:32:29.491" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.701" starttime="20170809 16:32:29.491" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.701" starttime="20170809 16:32:29.490" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:29.702" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:32:29.702" starttime="20170809 16:32:29.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:29.704" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:29.704" starttime="20170809 16:32:29.703" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:29.705" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:29.705" starttime="20170809 16:32:29.705" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.705" starttime="20170809 16:32:29.704" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.705" starttime="20170809 16:32:29.702" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.705" starttime="20170809 16:32:29.702" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:29.795" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:29.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:29.796" starttime="20170809 16:32:29.705" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:29.798" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:29.798" starttime="20170809 16:32:29.797" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:29.799" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:29.799" starttime="20170809 16:32:29.799" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.799" starttime="20170809 16:32:29.798" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.799" starttime="20170809 16:32:29.796" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:29.799" starttime="20170809 16:32:29.796" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:29.800" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:29.800" starttime="20170809 16:32:29.800" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:29.800" starttime="20170809 16:32:29.490" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:29.801" starttime="20170809 16:32:29.800" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:29.801" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:29.801" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:29.802" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:32:29.802" starttime="20170809 16:32:29.801" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.802" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:32:29.802" starttime="20170809 16:32:29.489" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:29.802" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:32:29.802" starttime="20170809 16:32:29.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:32:29.803" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:32:29.803" starttime="20170809 16:32:29.802" status="FAIL"></status>
</kw>
<status endtime="20170809 16:32:29.803" starttime="20170809 16:32:29.080" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:39.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:39.808" starttime="20170809 16:32:39.808" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:39.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:39.809" starttime="20170809 16:32:39.808" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:39.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:39.809" starttime="20170809 16:32:39.809" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:39.810" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:39.811" starttime="20170809 16:32:39.810" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.017" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:40.017" starttime="20170809 16:32:39.811" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:40.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:40.018" starttime="20170809 16:32:39.811" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:40.018" starttime="20170809 16:32:40.018" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:40.019" starttime="20170809 16:32:40.019" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.019" starttime="20170809 16:32:39.807" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.019" starttime="20170809 16:32:39.807" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.019" starttime="20170809 16:32:39.806" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:40.020" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:32:40.020" starttime="20170809 16:32:40.019" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:40.022" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:40.022" starttime="20170809 16:32:40.021" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:40.023" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:40.023" starttime="20170809 16:32:40.023" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.023" starttime="20170809 16:32:40.022" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.023" starttime="20170809 16:32:40.021" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.023" starttime="20170809 16:32:40.020" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:40.087" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:40.087" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:40.087" starttime="20170809 16:32:40.024" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:40.089" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:40.089" starttime="20170809 16:32:40.088" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:40.089" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:40.090" starttime="20170809 16:32:40.089" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.090" starttime="20170809 16:32:40.089" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.090" starttime="20170809 16:32:40.088" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.090" starttime="20170809 16:32:40.087" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:40.090" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:40.090" starttime="20170809 16:32:40.090" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:40.091" starttime="20170809 16:32:39.805" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:40.091" starttime="20170809 16:32:40.091" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:40.092" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:40.092" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:40.092" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:32:40.092" starttime="20170809 16:32:40.091" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.092" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:32:40.092" starttime="20170809 16:32:39.805" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.092" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:32:40.093" starttime="20170809 16:32:39.804" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:32:40.093" starttime="20170809 16:32:40.093" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.093" starttime="20170809 16:32:39.804" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:40.097" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:40.098" starttime="20170809 16:32:40.097" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:40.098" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:40.098" starttime="20170809 16:32:40.098" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:40.099" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:40.099" starttime="20170809 16:32:40.099" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:40.100" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:40.100" starttime="20170809 16:32:40.099" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:40.382" starttime="20170809 16:32:40.100" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:40.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:40.383" starttime="20170809 16:32:40.100" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.383" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:40.383" starttime="20170809 16:32:40.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:40.384" starttime="20170809 16:32:40.384" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.384" starttime="20170809 16:32:40.096" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.384" starttime="20170809 16:32:40.096" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.384" starttime="20170809 16:32:40.095" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:40.385" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:32:40.385" starttime="20170809 16:32:40.385" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:40.387" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:40.387" starttime="20170809 16:32:40.386" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:40.388" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:40.388" starttime="20170809 16:32:40.388" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.388" starttime="20170809 16:32:40.387" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.388" starttime="20170809 16:32:40.386" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.388" starttime="20170809 16:32:40.385" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:40.491" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:40.492" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:40.492" starttime="20170809 16:32:40.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:40.493" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:40.493" starttime="20170809 16:32:40.493" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:40.495" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:40.495" starttime="20170809 16:32:40.495" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.495" starttime="20170809 16:32:40.493" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.495" starttime="20170809 16:32:40.492" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:40.495" starttime="20170809 16:32:40.492" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:40.496" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:40.496" starttime="20170809 16:32:40.495" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.496" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:40.496" starttime="20170809 16:32:40.094" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:40.497" starttime="20170809 16:32:40.496" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:40.497" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:40.497" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:40.497" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:32:40.497" starttime="20170809 16:32:40.497" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.498" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:32:40.498" starttime="20170809 16:32:40.094" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:40.498" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:32:40.498" starttime="20170809 16:32:40.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:32:40.499" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:32:40.499" starttime="20170809 16:32:40.498" status="FAIL"></status>
</kw>
<status endtime="20170809 16:32:40.499" starttime="20170809 16:32:39.803" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:50.504" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:50.504" starttime="20170809 16:32:50.503" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:50.505" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:50.505" starttime="20170809 16:32:50.504" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:50.505" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:50.505" starttime="20170809 16:32:50.505" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:50.506" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:50.506" starttime="20170809 16:32:50.505" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:50.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:50.706" starttime="20170809 16:32:50.507" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:50.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:50.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:50.706" starttime="20170809 16:32:50.506" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:50.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:50.707" starttime="20170809 16:32:50.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:50.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:50.708" starttime="20170809 16:32:50.707" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.708" starttime="20170809 16:32:50.503" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.708" starttime="20170809 16:32:50.502" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.708" starttime="20170809 16:32:50.502" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:50.709" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:32:50.709" starttime="20170809 16:32:50.708" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:50.711" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:50.711" starttime="20170809 16:32:50.710" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:50.712" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:50.712" starttime="20170809 16:32:50.711" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.712" starttime="20170809 16:32:50.711" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.712" starttime="20170809 16:32:50.709" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.712" starttime="20170809 16:32:50.709" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:50.802" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:50.802" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:50.802" starttime="20170809 16:32:50.712" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:50.803" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:50.803" starttime="20170809 16:32:50.803" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:50.804" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:50.804" starttime="20170809 16:32:50.804" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.805" starttime="20170809 16:32:50.804" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.805" starttime="20170809 16:32:50.802" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.805" starttime="20170809 16:32:50.802" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:50.805" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:50.805" starttime="20170809 16:32:50.805" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:50.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:50.805" starttime="20170809 16:32:50.501" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:50.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:50.806" starttime="20170809 16:32:50.806" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:50.807" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:50.807" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:50.807" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:32:50.807" starttime="20170809 16:32:50.806" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:50.807" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:32:50.807" starttime="20170809 16:32:50.501" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:50.808" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:32:50.808" starttime="20170809 16:32:50.500" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:32:50.808" starttime="20170809 16:32:50.808" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:50.808" starttime="20170809 16:32:50.500" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:32:50.812" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:32:50.813" starttime="20170809 16:32:50.811" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:32:50.813" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:32:50.813" starttime="20170809 16:32:50.813" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:32:50.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:32:50.814" starttime="20170809 16:32:50.813" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:32:50.814" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:32:50.814" starttime="20170809 16:32:50.814" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:32:51.104" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:32:51.104" starttime="20170809 16:32:50.815" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:51.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:32:51.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:51.104" starttime="20170809 16:32:50.815" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:32:51.105" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:51.105" starttime="20170809 16:32:51.104" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:51.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:51.105" starttime="20170809 16:32:51.105" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.106" starttime="20170809 16:32:50.811" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.106" starttime="20170809 16:32:50.810" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.106" starttime="20170809 16:32:50.810" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:32:51.106" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:32:51.106" starttime="20170809 16:32:51.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:51.108" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:51.109" starttime="20170809 16:32:51.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:51.109" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:32:51.109" starttime="20170809 16:32:51.109" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.110" starttime="20170809 16:32:51.109" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.110" starttime="20170809 16:32:51.107" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.110" starttime="20170809 16:32:51.107" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:32:51.204" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:32:51.204" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:51.204" starttime="20170809 16:32:51.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:32:51.206" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:51.206" starttime="20170809 16:32:51.205" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:32:51.207" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:32:51.207" starttime="20170809 16:32:51.207" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.207" starttime="20170809 16:32:51.206" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.207" starttime="20170809 16:32:51.205" status="PASS"></status>
</kw>
<status endtime="20170809 16:32:51.207" starttime="20170809 16:32:51.204" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:32:51.208" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:32:51.208" starttime="20170809 16:32:51.208" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:51.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:32:51.208" starttime="20170809 16:32:50.809" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:32:51.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:32:51.209" starttime="20170809 16:32:51.208" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:32:51.209" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:32:51.209" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:32:51.209" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:32:51.209" starttime="20170809 16:32:51.209" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:51.210" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:32:51.210" starttime="20170809 16:32:50.809" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:32:51.210" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:32:51.210" starttime="20170809 16:32:50.808" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:32:51.211" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:32:51.211" starttime="20170809 16:32:51.210" status="FAIL"></status>
</kw>
<status endtime="20170809 16:32:51.211" starttime="20170809 16:32:50.499" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:01.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:01.216" starttime="20170809 16:33:01.216" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:01.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:01.217" starttime="20170809 16:33:01.217" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:01.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:01.218" starttime="20170809 16:33:01.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:01.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:01.218" starttime="20170809 16:33:01.218" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:01.401" starttime="20170809 16:33:01.219" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:01.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:01.401" starttime="20170809 16:33:01.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:01.402" starttime="20170809 16:33:01.401" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:01.403" starttime="20170809 16:33:01.402" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.403" starttime="20170809 16:33:01.215" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.403" starttime="20170809 16:33:01.215" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.403" starttime="20170809 16:33:01.214" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:01.403" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:33:01.404" starttime="20170809 16:33:01.403" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:01.406" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:01.406" starttime="20170809 16:33:01.405" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:01.406" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:01.407" starttime="20170809 16:33:01.406" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.407" starttime="20170809 16:33:01.406" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.407" starttime="20170809 16:33:01.404" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.407" starttime="20170809 16:33:01.404" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:01.481" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:01.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:01.481" starttime="20170809 16:33:01.407" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:01.482" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:01.483" starttime="20170809 16:33:01.482" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:01.483" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:01.483" starttime="20170809 16:33:01.483" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.484" starttime="20170809 16:33:01.483" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.484" starttime="20170809 16:33:01.481" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.484" starttime="20170809 16:33:01.481" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:01.484" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:01.484" starttime="20170809 16:33:01.484" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:01.484" starttime="20170809 16:33:01.213" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:01.485" starttime="20170809 16:33:01.485" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:01.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:01.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:01.486" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:33:01.486" starttime="20170809 16:33:01.485" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.486" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:33:01.486" starttime="20170809 16:33:01.212" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.486" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:33:01.486" starttime="20170809 16:33:01.212" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:33:01.487" starttime="20170809 16:33:01.487" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.487" starttime="20170809 16:33:01.212" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:01.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:01.491" starttime="20170809 16:33:01.490" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:01.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:01.492" starttime="20170809 16:33:01.491" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:01.492" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:01.492" starttime="20170809 16:33:01.492" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:01.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:01.493" starttime="20170809 16:33:01.492" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.709" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:01.710" starttime="20170809 16:33:01.494" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.710" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:01.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:01.710" starttime="20170809 16:33:01.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.710" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:01.710" starttime="20170809 16:33:01.710" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:01.711" starttime="20170809 16:33:01.711" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.711" starttime="20170809 16:33:01.490" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.711" starttime="20170809 16:33:01.489" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.711" starttime="20170809 16:33:01.489" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:01.712" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:33:01.712" starttime="20170809 16:33:01.712" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:01.714" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:01.714" starttime="20170809 16:33:01.714" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:01.715" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:01.715" starttime="20170809 16:33:01.715" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.715" starttime="20170809 16:33:01.714" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.715" starttime="20170809 16:33:01.713" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.716" starttime="20170809 16:33:01.712" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:01.857" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:01.858" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:01.858" starttime="20170809 16:33:01.716" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:01.859" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:01.860" starttime="20170809 16:33:01.859" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:01.860" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:01.860" starttime="20170809 16:33:01.860" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.861" starttime="20170809 16:33:01.860" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.861" starttime="20170809 16:33:01.858" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:01.861" starttime="20170809 16:33:01.858" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:01.861" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:01.861" starttime="20170809 16:33:01.861" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:01.861" starttime="20170809 16:33:01.488" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:01.862" starttime="20170809 16:33:01.862" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:01.863" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:01.863" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:01.863" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:33:01.863" starttime="20170809 16:33:01.862" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.863" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:33:01.863" starttime="20170809 16:33:01.488" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:01.863" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:33:01.863" starttime="20170809 16:33:01.487" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:33:01.864" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:33:01.864" starttime="20170809 16:33:01.864" status="FAIL"></status>
</kw>
<status endtime="20170809 16:33:01.864" starttime="20170809 16:33:01.211" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:11.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:11.874" starttime="20170809 16:33:11.873" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:11.875" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:11.875" starttime="20170809 16:33:11.875" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:11.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:11.876" starttime="20170809 16:33:11.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:11.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:11.877" starttime="20170809 16:33:11.876" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.090" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:12.090" starttime="20170809 16:33:11.877" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:12.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:12.090" starttime="20170809 16:33:11.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.091" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:12.091" starttime="20170809 16:33:12.091" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:12.092" starttime="20170809 16:33:12.091" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.092" starttime="20170809 16:33:11.873" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.092" starttime="20170809 16:33:11.868" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.092" starttime="20170809 16:33:11.868" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:12.093" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:33:12.093" starttime="20170809 16:33:12.092" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:12.095" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:12.095" starttime="20170809 16:33:12.094" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:12.096" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:12.096" starttime="20170809 16:33:12.096" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.096" starttime="20170809 16:33:12.095" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.097" starttime="20170809 16:33:12.094" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.097" starttime="20170809 16:33:12.093" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:12.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:12.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:12.160" starttime="20170809 16:33:12.097" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:12.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:12.162" starttime="20170809 16:33:12.162" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:12.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:12.163" starttime="20170809 16:33:12.163" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.164" starttime="20170809 16:33:12.162" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.164" starttime="20170809 16:33:12.161" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.164" starttime="20170809 16:33:12.161" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:12.164" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:12.164" starttime="20170809 16:33:12.164" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:12.164" starttime="20170809 16:33:11.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:12.165" starttime="20170809 16:33:12.165" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:12.166" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:12.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:12.166" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:33:12.166" starttime="20170809 16:33:12.165" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.166" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:33:12.166" starttime="20170809 16:33:11.866" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.167" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:33:12.167" starttime="20170809 16:33:11.866" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:33:12.167" starttime="20170809 16:33:12.167" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.167" starttime="20170809 16:33:11.866" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:12.171" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:12.171" starttime="20170809 16:33:12.171" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:12.172" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:12.172" starttime="20170809 16:33:12.171" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:12.172" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:12.172" starttime="20170809 16:33:12.172" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:12.173" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:12.173" starttime="20170809 16:33:12.173" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.369" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:12.369" starttime="20170809 16:33:12.174" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:12.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:12.369" starttime="20170809 16:33:12.173" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.370" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:12.370" starttime="20170809 16:33:12.370" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:12.371" starttime="20170809 16:33:12.370" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.371" starttime="20170809 16:33:12.170" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.371" starttime="20170809 16:33:12.170" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.371" starttime="20170809 16:33:12.169" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:12.372" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:33:12.372" starttime="20170809 16:33:12.371" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:12.374" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:12.374" starttime="20170809 16:33:12.373" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:12.375" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:12.375" starttime="20170809 16:33:12.375" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.375" starttime="20170809 16:33:12.374" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.375" starttime="20170809 16:33:12.372" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.375" starttime="20170809 16:33:12.372" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:12.465" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:12.465" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:12.465" starttime="20170809 16:33:12.376" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:12.467" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:12.467" starttime="20170809 16:33:12.467" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:12.468" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:12.468" starttime="20170809 16:33:12.468" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.468" starttime="20170809 16:33:12.467" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.469" starttime="20170809 16:33:12.466" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:12.469" starttime="20170809 16:33:12.466" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:12.469" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:12.469" starttime="20170809 16:33:12.469" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:12.469" starttime="20170809 16:33:12.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:12.470" starttime="20170809 16:33:12.470" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:12.470" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:12.471" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:12.471" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:33:12.471" starttime="20170809 16:33:12.470" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.471" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:33:12.471" starttime="20170809 16:33:12.168" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:12.471" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:33:12.471" starttime="20170809 16:33:12.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:33:12.472" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:33:12.472" starttime="20170809 16:33:12.472" status="FAIL"></status>
</kw>
<status endtime="20170809 16:33:12.472" starttime="20170809 16:33:11.865" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:22.479" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:22.479" starttime="20170809 16:33:22.478" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:22.480" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:22.480" starttime="20170809 16:33:22.480" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:22.481" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:22.481" starttime="20170809 16:33:22.481" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:22.482" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:22.483" starttime="20170809 16:33:22.482" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:22.680" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:22.680" starttime="20170809 16:33:22.483" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:22.680" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:22.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:22.680" starttime="20170809 16:33:22.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:22.681" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:22.681" starttime="20170809 16:33:22.681" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:22.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:22.682" starttime="20170809 16:33:22.681" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.682" starttime="20170809 16:33:22.477" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.682" starttime="20170809 16:33:22.477" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.682" starttime="20170809 16:33:22.476" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:22.683" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:33:22.683" starttime="20170809 16:33:22.683" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:22.686" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:22.686" starttime="20170809 16:33:22.685" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:22.687" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:22.689" starttime="20170809 16:33:22.687" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.689" starttime="20170809 16:33:22.686" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.690" starttime="20170809 16:33:22.684" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.690" starttime="20170809 16:33:22.683" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:22.781" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:22.781" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:22.781" starttime="20170809 16:33:22.690" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:22.783" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:22.783" starttime="20170809 16:33:22.783" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:22.784" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:22.784" starttime="20170809 16:33:22.784" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.784" starttime="20170809 16:33:22.783" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.784" starttime="20170809 16:33:22.782" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.784" starttime="20170809 16:33:22.782" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:22.785" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:22.785" starttime="20170809 16:33:22.785" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:22.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:22.785" starttime="20170809 16:33:22.475" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:22.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:22.786" starttime="20170809 16:33:22.785" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:22.786" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:22.786" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:22.787" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:33:22.787" starttime="20170809 16:33:22.786" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:22.787" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:33:22.787" starttime="20170809 16:33:22.474" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:22.787" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:33:22.787" starttime="20170809 16:33:22.474" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:33:22.788" starttime="20170809 16:33:22.788" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:22.788" starttime="20170809 16:33:22.473" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:22.794" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:22.794" starttime="20170809 16:33:22.793" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:22.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:22.795" starttime="20170809 16:33:22.795" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:22.796" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:22.796" starttime="20170809 16:33:22.795" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:22.797" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:22.797" starttime="20170809 16:33:22.796" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:23.066" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:23.066" starttime="20170809 16:33:22.798" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:23.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:23.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:23.066" starttime="20170809 16:33:22.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:23.067" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:23.067" starttime="20170809 16:33:23.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:23.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:23.068" starttime="20170809 16:33:23.068" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.068" starttime="20170809 16:33:22.792" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.068" starttime="20170809 16:33:22.791" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.068" starttime="20170809 16:33:22.791" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:23.069" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:33:23.069" starttime="20170809 16:33:23.069" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:23.071" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:23.071" starttime="20170809 16:33:23.070" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:23.072" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:23.072" starttime="20170809 16:33:23.072" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.072" starttime="20170809 16:33:23.071" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.072" starttime="20170809 16:33:23.070" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.072" starttime="20170809 16:33:23.069" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:23.161" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:23.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:23.161" starttime="20170809 16:33:23.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:23.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:23.163" starttime="20170809 16:33:23.163" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:23.164" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:23.165" starttime="20170809 16:33:23.164" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.165" starttime="20170809 16:33:23.163" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.165" starttime="20170809 16:33:23.162" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:23.165" starttime="20170809 16:33:23.162" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:23.165" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:23.165" starttime="20170809 16:33:23.165" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:23.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:23.166" starttime="20170809 16:33:22.790" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:23.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:23.166" starttime="20170809 16:33:23.166" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:23.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:23.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:23.167" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:33:23.167" starttime="20170809 16:33:23.166" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:23.167" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:33:23.167" starttime="20170809 16:33:22.789" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:23.168" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:33:23.168" starttime="20170809 16:33:22.788" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:33:23.168" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:33:23.168" starttime="20170809 16:33:23.168" status="FAIL"></status>
</kw>
<status endtime="20170809 16:33:23.168" starttime="20170809 16:33:22.473" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:33.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:33.174" starttime="20170809 16:33:33.173" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:33.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:33.175" starttime="20170809 16:33:33.174" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:33.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:33.175" starttime="20170809 16:33:33.175" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:33.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:33.176" starttime="20170809 16:33:33.176" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.361" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:33.361" starttime="20170809 16:33:33.177" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.361" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:33.361" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:33.362" starttime="20170809 16:33:33.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.362" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:33.362" starttime="20170809 16:33:33.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:33.363" starttime="20170809 16:33:33.362" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.363" starttime="20170809 16:33:33.173" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.363" starttime="20170809 16:33:33.172" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.363" starttime="20170809 16:33:33.172" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:33.364" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:33:33.364" starttime="20170809 16:33:33.363" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:33.366" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:33.366" starttime="20170809 16:33:33.365" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:33.367" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:33.367" starttime="20170809 16:33:33.367" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.367" starttime="20170809 16:33:33.366" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.367" starttime="20170809 16:33:33.365" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.367" starttime="20170809 16:33:33.364" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:33.431" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:33.431" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:33.431" starttime="20170809 16:33:33.368" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:33.433" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:33.433" starttime="20170809 16:33:33.432" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:33.434" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:33.434" starttime="20170809 16:33:33.434" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.434" starttime="20170809 16:33:33.433" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.434" starttime="20170809 16:33:33.432" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.434" starttime="20170809 16:33:33.432" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:33.435" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:33.435" starttime="20170809 16:33:33.435" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:33.435" starttime="20170809 16:33:33.171" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:33.436" starttime="20170809 16:33:33.435" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:33.436" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:33.436" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:33.436" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:33:33.436" starttime="20170809 16:33:33.436" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.437" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:33:33.437" starttime="20170809 16:33:33.170" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.437" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:33:33.437" starttime="20170809 16:33:33.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:33:33.438" starttime="20170809 16:33:33.438" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.438" starttime="20170809 16:33:33.170" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:33.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:33.442" starttime="20170809 16:33:33.441" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:33.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:33.443" starttime="20170809 16:33:33.443" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:33.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:33.444" starttime="20170809 16:33:33.443" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:33.444" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:33.444" starttime="20170809 16:33:33.444" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.700" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:33.700" starttime="20170809 16:33:33.445" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:33.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:33.701" starttime="20170809 16:33:33.444" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:33.701" starttime="20170809 16:33:33.701" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:33.702" starttime="20170809 16:33:33.702" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.702" starttime="20170809 16:33:33.441" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.702" starttime="20170809 16:33:33.440" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.702" starttime="20170809 16:33:33.440" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:33.703" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:33:33.703" starttime="20170809 16:33:33.703" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:33.705" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:33.705" starttime="20170809 16:33:33.704" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:33.706" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:33.706" starttime="20170809 16:33:33.706" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.706" starttime="20170809 16:33:33.705" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.706" starttime="20170809 16:33:33.704" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.706" starttime="20170809 16:33:33.703" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:33.862" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:33.862" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:33.862" starttime="20170809 16:33:33.707" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:33.864" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:33.864" starttime="20170809 16:33:33.863" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:33.865" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:33.865" starttime="20170809 16:33:33.865" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.865" starttime="20170809 16:33:33.864" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.865" starttime="20170809 16:33:33.863" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:33.865" starttime="20170809 16:33:33.862" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:33.866" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:33.866" starttime="20170809 16:33:33.865" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:33.866" starttime="20170809 16:33:33.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:33.867" starttime="20170809 16:33:33.866" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:33.867" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:33.867" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:33.867" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:33:33.867" starttime="20170809 16:33:33.867" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.868" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:33:33.868" starttime="20170809 16:33:33.439" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:33.868" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:33:33.868" starttime="20170809 16:33:33.438" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:33:33.869" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 16:33:33.869" starttime="20170809 16:33:33.868" status="FAIL"></status>
</kw>
<status endtime="20170809 16:33:33.869" starttime="20170809 16:33:33.169" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:33:33.869" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170809 16:33:33.869" starttime="20170809 16:23:31.572" status="FAIL"></status>
</kw>
<status endtime="20170809 16:33:33.869" starttime="20170809 16:23:29.964" status="FAIL"></status>
</kw>
<status endtime="20170809 16:33:33.869" starttime="20170809 16:23:22.208" status="FAIL"></status>
</kw>
<status endtime="20170809 16:33:33.869" starttime="20170809 16:23:22.208" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:33.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:33.875" starttime="20170809 16:33:33.874" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:33.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:33.876" starttime="20170809 16:33:33.875" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:33.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:33.876" starttime="20170809 16:33:33.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:33.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:33.877" starttime="20170809 16:33:33.877" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:34.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:34.078" starttime="20170809 16:33:33.878" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:34.078" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:34.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:34.078" starttime="20170809 16:33:33.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:34.079" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:34.079" starttime="20170809 16:33:34.078" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:34.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:34.079" starttime="20170809 16:33:34.079" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.080" starttime="20170809 16:33:33.874" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.080" starttime="20170809 16:33:33.873" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.080" starttime="20170809 16:33:33.873" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:34.080" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:33:34.081" starttime="20170809 16:33:34.080" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:34.083" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:34.083" starttime="20170809 16:33:34.082" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:34.083" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:33:34.084" starttime="20170809 16:33:34.083" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.084" starttime="20170809 16:33:34.083" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.084" starttime="20170809 16:33:34.081" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.084" starttime="20170809 16:33:34.081" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:34.177" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:33:34.177" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:34.177" starttime="20170809 16:33:34.084" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:33:34.179" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:34.179" starttime="20170809 16:33:34.179" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:33:34.180" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:33:34.181" starttime="20170809 16:33:34.180" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.181" starttime="20170809 16:33:34.180" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.181" starttime="20170809 16:33:34.178" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:34.181" starttime="20170809 16:33:34.178" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:34.181" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:34.181" starttime="20170809 16:33:34.181" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:34.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:34.182" starttime="20170809 16:33:33.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:34.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:34.182" starttime="20170809 16:33:34.182" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:34.183" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:34.183" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:34.183" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:33:34.183" starttime="20170809 16:33:34.182" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:34.183" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:33:34.183" starttime="20170809 16:33:33.871" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:34.183" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:33:34.184" starttime="20170809 16:33:33.871" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170809 16:33:34.184" starttime="20170809 16:33:34.184" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:34.185" level="INFO">${status} = True</msg>
<status endtime="20170809 16:33:34.185" starttime="20170809 16:33:34.184" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:34.185" level="INFO">${status} = True</msg>
<status endtime="20170809 16:33:34.185" starttime="20170809 16:33:33.870" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 16:33:34.224" level="INFO">Length is 10</msg>
<status endtime="20170809 16:33:34.224" starttime="20170809 16:33:34.224" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:33:34.234" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:33:37.243" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 16:33:37.243" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.723 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.596 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170809 16:33:37.243" starttime="20170809 16:33:34.225" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 16:33:37.246" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.723 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.596 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.607 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.568 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.568/0.623/0.723/0.064 ms</msg>
<status endtime="20170809 16:33:37.246" starttime="20170809 16:33:37.245" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170809 16:33:37.247" starttime="20170809 16:33:37.247" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.248" starttime="20170809 16:33:34.223" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:33:37.265" level="INFO">${cur_time} = 2017-08-09 16:33:37:264407</msg>
<status endtime="20170809 16:33:37.265" starttime="20170809 16:33:37.264" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:33:37.265" level="INFO">${cur_time} = 20170809163337264407</msg>
<status endtime="20170809 16:33:37.265" starttime="20170809 16:33:37.265" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.266" starttime="20170809 16:33:37.264" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.266" level="INFO">${FFDC_TIME} = 20170809163337264407</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 16:33:37.278" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170809 16:33:37.278" starttime="20170809 16:33:37.276" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 16:33:37.278" level="INFO">${suite_name} = 20170809163337264407_TestsTestBasicPoweron</msg>
<status endtime="20170809 16:33:37.278" starttime="20170809 16:33:37.278" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 16:33:37.279" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170809 16:33:37.279" starttime="20170809 16:33:37.279" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 16:33:37.279" level="INFO">${test_name} = 20170809163337264407_PowerOnTest</msg>
<status endtime="20170809 16:33:37.280" starttime="20170809 16:33:37.279" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.280" starttime="20170809 16:33:37.275" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.280" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/</msg>
<msg timestamp="20170809 16:33:37.280" level="INFO">${FFDC_PREFIX} = 20170809163337264407_</msg>
<msg timestamp="20170809 16:33:37.310" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.312" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.312" starttime="20170809 16:33:37.311" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.317" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.350" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.350" starttime="20170809 16:33:37.348" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.351" starttime="20170809 16:33:37.347" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.352" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.352" starttime="20170809 16:33:37.351" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.352" starttime="20170809 16:33:37.351" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.353" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.353" starttime="20170809 16:33:37.353" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.353" starttime="20170809 16:33:37.352" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.354" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.355" starttime="20170809 16:33:37.354" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.355" starttime="20170809 16:33:37.353" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.356" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.356" starttime="20170809 16:33:37.355" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.356" starttime="20170809 16:33:37.355" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.357" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.357" starttime="20170809 16:33:37.357" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.357" starttime="20170809 16:33:37.356" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.359" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.359" starttime="20170809 16:33:37.358" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.359" starttime="20170809 16:33:37.358" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.365" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.365" starttime="20170809 16:33:37.364" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.366" starttime="20170809 16:33:37.359" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.367" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.367" starttime="20170809 16:33:37.366" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.367" starttime="20170809 16:33:37.366" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.369" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.369" starttime="20170809 16:33:37.368" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.369" starttime="20170809 16:33:37.367" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.370" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.370" starttime="20170809 16:33:37.369" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.370" starttime="20170809 16:33:37.369" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.371" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.371" starttime="20170809 16:33:37.371" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.371" starttime="20170809 16:33:37.370" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.373" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.373" starttime="20170809 16:33:37.372" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.373" starttime="20170809 16:33:37.372" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 16:33:37.417" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:37.418" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170809 16:33:37.495" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:33:37.511" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170809 16:33:37.511" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 16:33:37.511" level="INFO">${rc} = 0</msg>
<status endtime="20170809 16:33:37.511" starttime="20170809 16:33:37.373" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:33:37.511" level="INFO">Length is 0</msg>
<status endtime="20170809 16:33:37.512" starttime="20170809 16:33:37.511" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 16:33:37.512" level="INFO">Length is 11</msg>
<status endtime="20170809 16:33:37.512" starttime="20170809 16:33:37.512" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.512" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170809 16:33:37.512" starttime="20170809 16:33:37.373" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.514" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.514" starttime="20170809 16:33:37.513" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.514" starttime="20170809 16:33:37.513" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.514" starttime="20170809 16:33:37.367" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.515" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.515" starttime="20170809 16:33:37.515" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.515" starttime="20170809 16:33:37.514" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:33:37.516" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170809 16:33:37.516" starttime="20170809 16:33:37.516" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.518" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.518" starttime="20170809 16:33:37.517" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.518" starttime="20170809 16:33:37.516" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.519" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.519" starttime="20170809 16:33:37.519" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.519" starttime="20170809 16:33:37.518" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.519" starttime="20170809 16:33:37.516" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.523" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.523" starttime="20170809 16:33:37.522" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.523" starttime="20170809 16:33:37.519" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.524" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.524" starttime="20170809 16:33:37.524" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.524" starttime="20170809 16:33:37.523" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.524" starttime="20170809 16:33:37.519" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.526" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.526" starttime="20170809 16:33:37.525" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.526" starttime="20170809 16:33:37.525" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.527" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.527" starttime="20170809 16:33:37.527" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.527" starttime="20170809 16:33:37.526" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.527" starttime="20170809 16:33:37.525" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.527" starttime="20170809 16:33:37.516" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:37.529" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:37.529" starttime="20170809 16:33:37.528" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.529" starttime="20170809 16:33:37.527" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.529" starttime="20170809 16:33:37.347" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:33:37.540" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170809 16:33:37.540" starttime="20170809 16:33:37.540" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170809 16:33:37.542" level="INFO">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('FFDC Generic Report', 'BMC FFDC Manifest...</msg>
<status endtime="20170809 16:33:37.542" starttime="20170809 16:33:37.541" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170809 16:33:37.543" starttime="20170809 16:33:37.543" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.543" level="INFO">@{ffdc_function_list} = [ OS FFDC | Get Request FFDC | BMC Specific Files | SEL Log | FFDC Generic Report | Core Files ]</msg>
<status endtime="20170809 16:33:37.543" starttime="20170809 16:33:37.542" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 16:33:37.545" starttime="20170809 16:33:37.545" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:37.545" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 16:33:37.545" starttime="20170809 16:33:37.544" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 16:33:37.546" starttime="20170809 16:33:37.546" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170809 16:33:37.592" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170809 16:33:37.592" starttime="20170809 16:33:37.592" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.592" starttime="20170809 16:33:37.591" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.592" starttime="20170809 16:33:37.546" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.592" starttime="20170809 16:33:37.543" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.592" starttime="20170809 16:33:37.543" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 16:33:37.594" starttime="20170809 16:33:37.594" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.594" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:37.594" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 16:33:37.594" starttime="20170809 16:33:37.594" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 16:33:37.595" starttime="20170809 16:33:37.595" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:33:37.644" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170809 16:33:37.644" starttime="20170809 16:33:37.644" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:33:37.651" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170809 16:33:37.651" starttime="20170809 16:33:37.651" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:37.653" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_record_log.txt</msg>
<status endtime="20170809 16:33:37.653" starttime="20170809 16:33:37.652" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:37.657" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:37.658" starttime="20170809 16:33:37.657" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:37.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:37.659" starttime="20170809 16:33:37.658" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:37.659" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:37.660" starttime="20170809 16:33:37.659" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:37.660" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:37.661" starttime="20170809 16:33:37.660" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:37.840" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:37.840" starttime="20170809 16:33:37.662" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.840" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:37.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:37.840" starttime="20170809 16:33:37.661" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:37.841" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:37.841" starttime="20170809 16:33:37.840" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:37.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:37.841" starttime="20170809 16:33:37.841" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.842" starttime="20170809 16:33:37.656" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.842" starttime="20170809 16:33:37.655" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.842" starttime="20170809 16:33:37.654" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:37.842" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170809 16:33:37.842" starttime="20170809 16:33:37.842" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:37.843" starttime="20170809 16:33:37.843" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:37.886" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:33:37.886" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 16:33:37.886" starttime="20170809 16:33:37.843" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:37.886" starttime="20170809 16:33:37.886" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:37.887" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:37.887" starttime="20170809 16:33:37.887" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:37.887" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 16:33:37.887" starttime="20170809 16:33:37.653" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:37.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 16:33:37.888" level="FAIL">404 != 200</msg>
<status endtime="20170809 16:33:37.888" starttime="20170809 16:33:37.888" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:33:37.888" level="INFO">${status} = False</msg>
<status endtime="20170809 16:33:37.888" starttime="20170809 16:33:37.887" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 16:33:37.889" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:37.890" starttime="20170809 16:33:37.889" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.890" starttime="20170809 16:33:37.889" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:37.890" starttime="20170809 16:33:37.652" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:37.890" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_led.txt</msg>
<status endtime="20170809 16:33:37.890" starttime="20170809 16:33:37.890" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:37.893" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:37.894" starttime="20170809 16:33:37.893" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:37.894" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:37.894" starttime="20170809 16:33:37.894" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:37.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:37.895" starttime="20170809 16:33:37.895" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:37.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:37.896" starttime="20170809 16:33:37.895" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:38.074" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:38.074" starttime="20170809 16:33:37.897" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:38.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:38.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:38.074" starttime="20170809 16:33:37.896" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:38.075" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:38.075" starttime="20170809 16:33:38.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:38.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:38.076" starttime="20170809 16:33:38.075" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.076" starttime="20170809 16:33:37.892" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.076" starttime="20170809 16:33:37.892" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.076" starttime="20170809 16:33:37.891" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:38.076" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170809 16:33:38.076" starttime="20170809 16:33:38.076" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:38.077" starttime="20170809 16:33:38.077" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:38.121" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:33:38.121" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 16:33:38.121" starttime="20170809 16:33:38.077" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:38.122" starttime="20170809 16:33:38.121" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:38.122" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:38.122" starttime="20170809 16:33:38.122" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:38.122" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 16:33:38.122" starttime="20170809 16:33:37.891" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:38.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 16:33:38.124" level="FAIL">404 != 200</msg>
<status endtime="20170809 16:33:38.124" starttime="20170809 16:33:38.123" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:33:38.124" level="INFO">${status} = False</msg>
<status endtime="20170809 16:33:38.124" starttime="20170809 16:33:38.123" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 16:33:38.125" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:38.125" starttime="20170809 16:33:38.124" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.125" starttime="20170809 16:33:38.124" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.125" starttime="20170809 16:33:37.890" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:38.126" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_inventory.txt</msg>
<status endtime="20170809 16:33:38.126" starttime="20170809 16:33:38.125" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:38.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:38.129" starttime="20170809 16:33:38.128" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:38.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:38.130" starttime="20170809 16:33:38.129" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:38.130" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:38.130" starttime="20170809 16:33:38.130" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:38.131" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:38.131" starttime="20170809 16:33:38.131" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:38.318" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:38.318" starttime="20170809 16:33:38.132" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:38.318" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:38.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:38.318" starttime="20170809 16:33:38.131" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:38.319" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:38.319" starttime="20170809 16:33:38.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:38.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:38.319" starttime="20170809 16:33:38.319" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.319" starttime="20170809 16:33:38.127" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.320" starttime="20170809 16:33:38.127" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:38.320" starttime="20170809 16:33:38.126" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:38.320" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170809 16:33:38.320" starttime="20170809 16:33:38.320" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:38.321" starttime="20170809 16:33:38.321" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:40.585" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:33:40.585" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:40.585" starttime="20170809 16:33:38.321" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:40.586" starttime="20170809 16:33:40.585" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:40.586" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:40.586" starttime="20170809 16:33:40.586" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:40.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:40.586" starttime="20170809 16:33:38.126" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:40.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:40.587" starttime="20170809 16:33:40.587" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:40.587" level="INFO">${status} = True</msg>
<status endtime="20170809 16:33:40.587" starttime="20170809 16:33:40.587" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 16:33:40.588" starttime="20170809 16:33:40.588" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 16:33:40.591" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/13"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/14", 
        "/xyz/openbmc_project/logging/entry/11", 
        "/xyz/openbmc_project/logging/entry/10", 
        "/xyz/openbmc_project/logging/entry/8", 
        "/xyz/openbmc_project/logging/entry/7", 
        "/xyz/openbmc_project/logging/entry/5", 
        "/xyz/openbmc_project/logging/entry/4"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:40.592" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 16:33:40.592" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170809 16:33:40.592" starttime="20170809 16:33:40.588" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:40.594" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_inventory.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:40.594" starttime="20170809 16:33:40.593" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:40.594" starttime="20170809 16:33:40.592" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:40.594" starttime="20170809 16:33:38.125" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:40.595" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_sensor_list.txt</msg>
<status endtime="20170809 16:33:40.595" starttime="20170809 16:33:40.594" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:40.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:40.598" starttime="20170809 16:33:40.597" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:40.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:40.599" starttime="20170809 16:33:40.599" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:40.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:40.600" starttime="20170809 16:33:40.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:40.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:40.600" starttime="20170809 16:33:40.600" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:40.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:40.871" starttime="20170809 16:33:40.601" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:40.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:40.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:40.871" starttime="20170809 16:33:40.600" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:40.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:40.872" starttime="20170809 16:33:40.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:40.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:40.873" starttime="20170809 16:33:40.872" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:40.873" starttime="20170809 16:33:40.597" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:40.873" starttime="20170809 16:33:40.596" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:40.873" starttime="20170809 16:33:40.596" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:40.873" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170809 16:33:40.874" starttime="20170809 16:33:40.873" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:40.874" starttime="20170809 16:33:40.874" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:41.044" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:33:41.045" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:41.045" starttime="20170809 16:33:40.874" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:41.045" starttime="20170809 16:33:41.045" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:41.046" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:41.046" starttime="20170809 16:33:41.046" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:41.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:41.046" starttime="20170809 16:33:40.595" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:41.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:41.047" starttime="20170809 16:33:41.047" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:41.047" level="INFO">${status} = True</msg>
<status endtime="20170809 16:33:41.047" starttime="20170809 16:33:41.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 16:33:41.048" starttime="20170809 16:33:41.047" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 16:33:41.049" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:41.049" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 16:33:41.049" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170809 16:33:41.049" starttime="20170809 16:33:41.048" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:41.051" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_sensor_list.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:41.051" starttime="20170809 16:33:41.050" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.051" starttime="20170809 16:33:41.049" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.051" starttime="20170809 16:33:40.594" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:41.052" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_elog.txt</msg>
<status endtime="20170809 16:33:41.052" starttime="20170809 16:33:41.052" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:41.055" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:41.055" starttime="20170809 16:33:41.054" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:41.056" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:41.056" starttime="20170809 16:33:41.056" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:41.057" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:41.057" starttime="20170809 16:33:41.056" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:41.057" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:41.057" starttime="20170809 16:33:41.057" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:41.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:41.233" starttime="20170809 16:33:41.058" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:41.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:41.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:41.234" starttime="20170809 16:33:41.058" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:41.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:41.234" starttime="20170809 16:33:41.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:41.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:41.235" starttime="20170809 16:33:41.234" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.235" starttime="20170809 16:33:41.054" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.235" starttime="20170809 16:33:41.053" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.235" starttime="20170809 16:33:41.053" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:41.236" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170809 16:33:41.236" starttime="20170809 16:33:41.236" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:41.237" starttime="20170809 16:33:41.236" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:41.784" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:33:41.784" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:41.784" starttime="20170809 16:33:41.237" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:41.785" starttime="20170809 16:33:41.784" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:41.785" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:41.785" starttime="20170809 16:33:41.785" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:41.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:41.785" starttime="20170809 16:33:41.052" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:41.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:41.787" starttime="20170809 16:33:41.786" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:41.787" level="INFO">${status} = True</msg>
<status endtime="20170809 16:33:41.787" starttime="20170809 16:33:41.786" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 16:33:41.787" starttime="20170809 16:33:41.787" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 16:33:41.790" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 06 24 69 e6 33 00 00 00 06 24 e9 a9 df 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 44 90 00 00 44 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 32 2b d3 cd a7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 32 2b d3 d4 65 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 32 2b d3 db 7e 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 32 2b ef 1b 41 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 32 2b ef 22 a9 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 32 2b ef 2b 7b 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 32 2b ef 65 3a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 32 2b f3 be d2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 32 2b f4 1b 37 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 32 2b f4 24 f9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 32 2b f4 2c 19 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 32 2b f4 33 37 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 32 2b f4 3a 15 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 33 07 5a b7 c6 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 33 07 5a c5 7c 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 33 07 5a cf 61 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 33 07 5b 0e b2 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 33 0a 04 2b d3 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 33 0a 04 8c a6 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 33 0a 04 97 22 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 33 0a 04 9e 71 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 33 0a 04 a5 58 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 33 0a 04 ac 05 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296167247, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/10/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 06 24 e9 a2 36 00 00 00 06 25 78 d1 1f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 45 90 00 00 45 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 21 ab 78 80 ce 02 00 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 6b 75 70 20 70 69 72 20 32 31 32 39 20 64 6f 6e 65 0a 57 6b 75 70 57 20 6b 70 75 70 69 20 72 70 20 69 72 32 20 31 32 38 32 20 31 64 33 6f 30 6e 20 65 64 0a 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 31 20 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296168768, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [], 
      "Id": 12, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296174871, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 0c b6 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 03 56 18 ac 93 00 00 00 03 56 b2 fe 98 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 51 90 00 00 51 55 48 00 18 01 00 e5 00 23 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 03 20 00 00 00 24 00 08 00 00 05 05 ff ff 00 10 90 01 70 08 42 43 32 33 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 05 00 00 00 02 00 00 00 e6 00 00 00 00 23 01 00 02 00 03 08 00 55 44 00 40 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 25 00 02 00 03 20 01 86 82 00 70 00 00 00 00 05 05 e6 00 00 00 00 01 90 01 70 08 02 05 e6 00 00 00 01 00 24 00 08 ff ff 00 10 00 55 44 02 88 02 01 e5 00 00 00 00 04 0c 00 05 00 01 00 00 00 00 2f a4 eb 00 08 c0 01 c1 02 00 00 dd b6 00 08 00 08 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 44 09 42 82 06 80 00 03 e0 00 01 80 ac 02 c5 00 08 ff ff ff 13 00 ff 18 ff 06 5a 09 81 13 00 c0 00 00 00 7f 90 00 08 11 07 08 eb 40 03 0d 00 29 4f 00 08 30 82 12 10 7e 40 17 00 06 61 15 87 1d 04 60 00 08 0c 30 04 43 1d 64 90 21 87 26 b9 06 80 20 01 02 00 04 0d 7c 00 06 68 15 87 f1 25 12 00 08 fe 04 44 06 6f 15 83 1f 99 17 40 80 2d 0f 81 16 c2 00 f6 33 40 64 11 32 01 02 00 02 11 06 80 ff 1f 82 34 c2 a5 00 00 08 04 04 44 ee 04 e1 00 08 0e 1c 04 43 f8 bf 12 00 08 f1 37 83 00 a8 42 40 70 00 82 44 80 62 fc 00 00 d6 01 28 00 08 3f 02 06 f8 04 41 30 7d e7 12 82 37 82 60 de 00 08 49 18 0d 04 ca e3 3c 80 24 7c 04 42 20 bb 5b 0f 81 fa fc 00 fb 00 34 00 31 4b 40 02 00 40 07 81 88 fc c8 1b 80 04 44 c4 db 12 80 24 f0 30 55 3f 13 00 ae 27 41 49 04 43 16 5d 41 12 6d b0 00 16 01 4c d8 15 87 cd f5 3c 40 57 c1 26 02 3f 41 38 04 43 30 42 48 31 e4 71 57 82 04 41 01 a2 55 72 85 15 08 00 b5 15 40 03 02 00 3e 02 00 00 39 5d 00 08 02 e0 04 4c 91 04 41 d9 cc 06 80 3f 00 3f 04 41 20 d8 99 3c 87 f5 7d 00 08 f7 b8 04 44 60 2d 40 04 41 1a 01 3c bd 00 00 08 9f c0 20 00 f0 00 40 10 00 2c cd 72 86 0f 00 25 00 40 02 02 00 0b 97 ad 00 08 80 c9 0b 40 04 41 1f df 15 87 f4 01 92 80 41 28 82 84 51 00 08 8f d9 0d 03 30 d3 21 27 81 04 43 d3 23 00 08 c8 58 c0 04 42 70 6e 12 83 34 00 01 19 c0 5b 73 06 80 99 44 46 75 69 80 08 ff ff 3f ec 02 00 6e 4d 00 25 08 3c 04 44 25 39 57 82 ff 0d 02 40 24 57 82 08 61 f7 00 08 12 4c 85 37 83 bf be 72 83 9f 41 6d cf 81 12 83 b7 81 00 0f 4b a1 72 84 04 64 00 00 c6 31 72 86 80 db 42 a8 12 85 fc 83 b9 7a 72 85 f3 10 fc 37 47 0f 81 24 80 42 00 2b 13 0b b3 00 09 02 00 04 b5 09 bb 09 d6 c4 09 ca 0c 0a ce 34 0b ce 32 90 43 01 03 75 2e 00 04 10 03 17 40 b3 43 10 01 71 16 03 80 30 21 ff fc 32 d8 7f af 80 f6 c3 a5 70 f6 c2 00 00 00 00 00 55 44 00 58 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 33 02 90 00 00 00 00 40 33 65 64 00 00 00 00 40 33 49 74 00 00 00 00 40 32 3f 94 00 00 00 00 40 32 43 60 00 00 00 00 40 32 4c b4 00 00 00 00 40 32 07 24 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 04 01 15 31 00 01 28 00 42 50 52 44 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 fc 00 00 00 00 00 00 02 fc 00 00 00 11 00 00 00 00 00 00 00 19 2c f2 c0 08 00 00 00 fe 00 08 43 4f 79 03 e3 db 00 00 00 53 00 00 00 00 00 25 00 03 00 00 00 24 00 00 00 19 2c ff 3e 2d 00 00 00 fe 00 00 43 4f 77 43 67 13 00 00 01 6e 00 00 00 1c 00 00 00 1b 3a d4 d4 6d 00 00 00 fe 00 08 43 4f c7 f4 90 bf 00 00 00 b3 00 00 00 00 00 00 00 05 00 00 00 24 00 00 00 1b 3a d5 1e ac 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a d5 2a c0 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a ea d1 99 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 00 00 00 00 2c 00 00 00 1b 3a eb 02 dc 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 07 00 00 00 2c 00 00 00 1b 3a eb 24 83 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 07 00 00 00 2c 00 00 00 1b 3a ee 68 c2 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a fb 02 ac 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 00 00 00 00 2c 00 00 00 1b 3a fb 5b 01 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 09 00 00 00 2c 00 00 00 1b 3a fb 7b d1 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 09 00 00 00 2c 00 00 00 1b 3b 15 30 7c 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 00 00 00 00 2c 00 00 00 1b 3b 15 c9 35 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 0a 00 00 00 2c 00 00 00 1b 3b 15 eb 5b 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 0a 00 00 00 2c 00 00 00 1b 3b 17 99 f0 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 24 00 08 00 00 00 00 ff ff 00 10 00 00 00 2c 00 00 00 1b 3b 4c 4e b4 00 00 00 fe 00 18 43 4f 51 86 ef 36 00 00 00 71 00 00 00 00 00 24 00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34"
      ], 
      "Id": 13, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296292560, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0a 25 97 70 67 00 00 00 0a 25 b3 7d 48 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 56 90 00 00 56 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 00 2c 01 01 01 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 4d d2 94 00 00 00 00 40 4d d4 5c 00 00 00 00 40 4d da e0 00 00 00 00 40 2b 82 10 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 fc 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 f4 00 00 00 00 00 00 03 f4 00 00 00 0f 00 00 00 00 00 00 00 51 0c f9 9d 96 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 9e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 51 12 ef 6c 3d 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 9e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 51 12 ef bc 51 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 9f 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 52 0c fa 38 6b 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 9f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 52 0c fa 8c da 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a0 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 53 07 05 07 fa 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 53 07 05 5a 98 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a1 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 54 07 05 c1 f3 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a1 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 54 07 06 15 43 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a2 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 55 01 10 8d be 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 55 01 10 c5 25 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 a3 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 55 07 06 82 b1 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 a3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 55 07 06 99 3b 00 00 00 77 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 55 07 06 a0 f3 00 00 00 77 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 55 07 06 ab f0 00 00 00 77 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c"
      ], 
      "Id": 14, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296295371, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/15": {
      "AdditionalData": [], 
      "Id": 15, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296301523, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/16": {
      "AdditionalData": [], 
      "Id": 16, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296405721, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295222449, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295514791, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 05 d1 0a 2a bc 00 00 00 05 d1 d6 ba ff 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 19 90 00 00 19 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 2f 1f 37 9e 43 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 2f 1f 37 a6 78 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 2f 1f 37 ae c7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 2f 1f 51 6e 5d 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 2f 1f 51 77 5f 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 2f 1f 51 81 50 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 2f 1f 51 b7 0a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 2f 1f 54 a1 8c 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 2f 1f 54 f5 a7 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 91 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 2f 1f 55 00 73 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2f 1f 55 09 1b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 2f 1f 55 11 93 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 2f 1f 55 19 d7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 2f 37 36 78 eb 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 2f 37 36 86 e7 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 2f 37 36 91 03 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 2f 37 36 cb c8 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 30 19 5b 41 2f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 30 19 5b 9a 3a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 92 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 30 19 5b a5 8c 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 30 19 5b af 19 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 30 19 5b b7 99 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 30 19 5b bf f0 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295918626, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 05 d1 29 16 de 00 00 00 05 d2 31 72 28 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 04 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 6b 75 70 20 70 69 72 20 32 31 32 39 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 30 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 32 38 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 31 20 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295920629, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295926742, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 c0 53 2b e1 00 00 00 09 c0 f9 f4 4a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 30 90 00 00 30 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 51 00 e0 e7 f7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 51 00 e0 ee d3 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 00 e0 f5 be 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 51 00 fb 94 a7 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 51 00 fb 9c 3b 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 51 00 fb a4 f3 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 51 00 fb e4 fa 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 51 00 ff 0b c9 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 51 00 ff 67 47 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 51 00 ff 71 01 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 51 00 ff 78 33 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 51 00 ff 7f 10 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 00 ff 86 4a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 51 17 d8 38 29 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 51 17 d8 46 69 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 51 17 d8 51 75 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 51 17 d8 8e 2c 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 51 18 da 70 f5 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 51 18 da cd 5d 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 51 18 da d8 1b 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 51 18 da df 89 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 51 18 da e6 50 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 18 da ed 51 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296043830, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 c0 8f ce ca 00 00 00 09 c1 2c a8 3b 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 31 90 00 00 31 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 04 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 57 6b 6b 75 75 70 70 20 20 70 70 69 69 72 72 20 20 32 32 31 31 33 33 30 31 20 20 64 64 6f 6f 6e 6e 65 65 0a 0a 57 6b 57 75 6b 70 75 20 70 70 20 70 69 69 72 72 20 20 32 31 32 32 39 31 20 32 64 6f 38 6e 65 20 0a 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296045452, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296051668, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:41.790" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 16:33:41.791" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system",
                "ESEL...</msg>
<status endtime="20170809 16:33:41.791" starttime="20170809 16:33:41.787" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:41.793" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_elog.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:41.793" starttime="20170809 16:33:41.792" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.793" starttime="20170809 16:33:41.791" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.793" starttime="20170809 16:33:41.051" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.793" starttime="20170809 16:33:37.652" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.793" starttime="20170809 16:33:37.650" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.793" starttime="20170809 16:33:37.650" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.793" starttime="20170809 16:33:37.644" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.794" starttime="20170809 16:33:37.643" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.794" starttime="20170809 16:33:37.595" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.794" starttime="20170809 16:33:37.593" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:41.794" starttime="20170809 16:33:37.593" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 16:33:41.796" starttime="20170809 16:33:41.795" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:41.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:41.796" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 16:33:41.796" starttime="20170809 16:33:41.795" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 16:33:41.796" starttime="20170809 16:33:41.796" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:33:41.841" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170809 16:33:41.841" starttime="20170809 16:33:41.841" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:33:41.842" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /p...</msg>
<status endtime="20170809 16:33:41.842" starttime="20170809 16:33:41.842" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:41.843" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_proc_list.txt</msg>
<status endtime="20170809 16:33:41.843" starttime="20170809 16:33:41.843" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 16:33:41.847" starttime="20170809 16:33:41.846" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:41.847" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170809 16:33:41.847" starttime="20170809 16:33:41.847" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:41.977" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:41.977" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170809 16:33:42.367" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:42.367" starttime="20170809 16:33:41.913" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:42.367" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:42.367" level="INFO">${ret_values} = (u'Mem: 192964K used, 239296K free, 16580K shrd, 17000K buff, 79380K cached\nCPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.93 1.90 1.49 1/163 2874\n  PID  PPID ...</msg>
<status endtime="20170809 16:33:42.368" starttime="20170809 16:33:41.848" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:42.368" level="INFO">${stdout} = Mem: 192964K used, 239296K free, 16580K shrd, 17000K buff, 79380K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.93 1.90 1.49 1/163 2874
  PID  PPID USER  ...</msg>
<status endtime="20170809 16:33:42.368" starttime="20170809 16:33:42.368" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:42.369" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:42.369" starttime="20170809 16:33:42.369" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:42.376" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_proc_list.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:42.376" starttime="20170809 16:33:42.375" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:42.376" starttime="20170809 16:33:42.374" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:42.377" starttime="20170809 16:33:42.369" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:42.377" starttime="20170809 16:33:41.843" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:42.377" starttime="20170809 16:33:41.843" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:42.377" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_journalctl.txt</msg>
<status endtime="20170809 16:33:42.378" starttime="20170809 16:33:42.377" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 16:33:42.379" starttime="20170809 16:33:42.379" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:42.380" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170809 16:33:42.380" starttime="20170809 16:33:42.379" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:42.495" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:42.495" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170809 16:33:46.424" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:46.425" starttime="20170809 16:33:42.437" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:46.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:46.430" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 16:17:27 UTC, end at Wed 2017-08-09 16:33:46 UTC. --\nAug 09 16:17:27 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 16:17:27 witherspoon kernel: Linu...</msg>
<status endtime="20170809 16:33:46.430" starttime="20170809 16:33:42.380" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:46.432" level="INFO">${stdout} = -- Logs begin at Wed 2017-08-09 16:17:27 UTC, end at Wed 2017-08-09 16:33:46 UTC. --
Aug 09 16:17:27 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 16:17:27 witherspoon kernel: Linux ver...</msg>
<status endtime="20170809 16:33:46.433" starttime="20170809 16:33:46.431" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:46.433" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:46.433" starttime="20170809 16:33:46.433" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:46.443" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_journalctl.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:46.444" starttime="20170809 16:33:46.441" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.444" starttime="20170809 16:33:46.439" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.444" starttime="20170809 16:33:46.434" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.444" starttime="20170809 16:33:42.378" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.444" starttime="20170809 16:33:42.377" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:46.445" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_meminfo.txt</msg>
<status endtime="20170809 16:33:46.445" starttime="20170809 16:33:46.444" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 16:33:46.446" starttime="20170809 16:33:46.446" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:46.447" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170809 16:33:46.447" starttime="20170809 16:33:46.447" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:46.565" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:46.565" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170809 16:33:46.672" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:46.672" starttime="20170809 16:33:46.503" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:46.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:46.672" level="INFO">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          239140 kB\nMemAvailable:     317256 kB\nBuffers:           17000 kB\nCached:            79380 kB\nSwapCached:            0 kB\nActive:           13228...</msg>
<status endtime="20170809 16:33:46.672" starttime="20170809 16:33:46.447" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:46.673" level="INFO">${stdout} = MemTotal:         432260 kB
MemFree:          239140 kB
MemAvailable:     317256 kB
Buffers:           17000 kB
Cached:            79380 kB
SwapCached:            0 kB
Active:           132284 kB
Inac...</msg>
<status endtime="20170809 16:33:46.673" starttime="20170809 16:33:46.672" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:46.673" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:46.673" starttime="20170809 16:33:46.673" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:46.680" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_meminfo.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:46.681" starttime="20170809 16:33:46.680" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.681" starttime="20170809 16:33:46.679" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.681" starttime="20170809 16:33:46.674" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.681" starttime="20170809 16:33:46.445" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.681" starttime="20170809 16:33:46.444" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:46.682" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_procinfo.txt</msg>
<status endtime="20170809 16:33:46.682" starttime="20170809 16:33:46.681" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 16:33:46.683" starttime="20170809 16:33:46.683" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:46.685" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170809 16:33:46.685" starttime="20170809 16:33:46.684" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:46.805" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:46.806" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170809 16:33:46.852" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:46.852" starttime="20170809 16:33:46.735" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:46.852" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:46.852" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170809 16:33:46.852" starttime="20170809 16:33:46.685" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:46.853" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170809 16:33:46.853" starttime="20170809 16:33:46.853" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:46.854" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:46.854" starttime="20170809 16:33:46.853" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:46.860" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_procinfo.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:46.860" starttime="20170809 16:33:46.860" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.860" starttime="20170809 16:33:46.859" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.861" starttime="20170809 16:33:46.854" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.861" starttime="20170809 16:33:46.682" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:46.861" starttime="20170809 16:33:46.681" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:46.861" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170809 16:33:46.861" starttime="20170809 16:33:46.861" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 16:33:46.863" starttime="20170809 16:33:46.862" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:46.863" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170809 16:33:46.863" starttime="20170809 16:33:46.863" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:46.984" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:46.984" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170809 16:33:47.616" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:47.616" starttime="20170809 16:33:46.915" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:47.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:47.617" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 16:33 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 16:33 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170809 16:33:47.617" starttime="20170809 16:33:46.864" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:47.618" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 16:33 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 16:33 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170809 16:33:47.618" starttime="20170809 16:33:47.618" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:47.619" level="INFO">${stderr} = ls: /proc/2878/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170809 16:33:47.619" starttime="20170809 16:33:47.619" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:47.626" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:47.626" starttime="20170809 16:33:47.625" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.626" starttime="20170809 16:33:47.624" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.626" starttime="20170809 16:33:47.619" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.626" starttime="20170809 16:33:46.862" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.626" starttime="20170809 16:33:46.861" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:47.627" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_dmesg.txt</msg>
<status endtime="20170809 16:33:47.627" starttime="20170809 16:33:47.627" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 16:33:47.629" starttime="20170809 16:33:47.628" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:47.629" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170809 16:33:47.629" starttime="20170809 16:33:47.629" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:47.739" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:47.739" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170809 16:33:47.799" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:47.799" starttime="20170809 16:33:47.680" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:47.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:47.800" level="INFO">${ret_values} = (u'[    2.830000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB\n[    2.850000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB\n[    2.8...</msg>
<status endtime="20170809 16:33:47.800" starttime="20170809 16:33:47.630" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:47.800" level="INFO">${stdout} = [    2.830000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB
[    2.850000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB
[    2.850000...</msg>
<status endtime="20170809 16:33:47.800" starttime="20170809 16:33:47.800" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:47.801" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:47.801" starttime="20170809 16:33:47.801" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:47.808" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_dmesg.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:47.807" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:47.806" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:47.801" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:47.627" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:47.627" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:41.842" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:41.841" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:41.841" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.808" starttime="20170809 16:33:41.841" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.809" starttime="20170809 16:33:41.840" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.809" starttime="20170809 16:33:41.797" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.809" starttime="20170809 16:33:41.794" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:47.809" starttime="20170809 16:33:41.794" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 16:33:47.811" starttime="20170809 16:33:47.811" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:47.811" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:47.811" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 16:33:47.812" starttime="20170809 16:33:47.810" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 16:33:47.812" starttime="20170809 16:33:47.812" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:47.855" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:47.855" starttime="20170809 16:33:47.855" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:47.856" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:47.856" starttime="20170809 16:33:47.856" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:47.857" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:47.857" starttime="20170809 16:33:47.856" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:47.857" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:47.857" starttime="20170809 16:33:47.857" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:48.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:48.051" starttime="20170809 16:33:47.858" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:48.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:48.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:48.051" starttime="20170809 16:33:47.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:48.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:48.052" starttime="20170809 16:33:48.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:48.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:48.052" starttime="20170809 16:33:48.052" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:48.052" starttime="20170809 16:33:47.854" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:48.052" starttime="20170809 16:33:47.854" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:48.053" starttime="20170809 16:33:47.851" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:48.053" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170809 16:33:48.054" starttime="20170809 16:33:48.053" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:48.054" starttime="20170809 16:33:48.054" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:48.732" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:33:48.732" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:48.732" starttime="20170809 16:33:48.055" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:48.733" starttime="20170809 16:33:48.732" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:48.733" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:48.733" starttime="20170809 16:33:48.733" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:48.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:48.734" starttime="20170809 16:33:47.851" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:48.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:48.735" starttime="20170809 16:33:48.734" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:48.735" level="INFO">${status} = True</msg>
<status endtime="20170809 16:33:48.735" starttime="20170809 16:33:48.734" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170809 16:33:48.735" starttime="20170809 16:33:48.735" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:48.737" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 06 24 69 e6 33 00 00 00 06 24 e9 a9 df 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 44 90 00 00 44 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 32 2b d3 cd a7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 32 2b d3 d4 65 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 32 2b d3 db 7e 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 32 2b ef 1b 41 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 32 2b ef 22 a9 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 32 2b ef 2b 7b 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 32 2b ef 65 3a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 32 2b f3 be d2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 32 2b f4 1b 37 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 32 2b f4 24 f9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 32 2b f4 2c 19 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 32 2b f4 33 37 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 32 2b f4 3a 15 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 33 07 5a b7 c6 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 33 07 5a c5 7c 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 33 07 5a cf 61 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 33 07 5b 0e b2 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 33 0a 04 2b d3 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 33 0a 04 8c a6 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 33 0a 04 97 22 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 33 0a 04 9e 71 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 33 0a 04 a5 58 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 33 0a 04 ac 05 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296167247, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/10/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 06 24 e9 a2 36 00 00 00 06 25 78 d1 1f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 45 90 00 00 45 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 21 ab 78 80 ce 02 00 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 6b 75 70 20 70 69 72 20 32 31 32 39 20 64 6f 6e 65 0a 57 6b 75 70 57 20 6b 70 75 70 69 20 72 70 20 69 72 32 20 31 32 38 32 20 31 64 33 6f 30 6e 20 65 64 0a 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 31 20 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296168768, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [], 
      "Id": 12, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296174871, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 0c b6 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 03 56 18 ac 93 00 00 00 03 56 b2 fe 98 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 51 90 00 00 51 55 48 00 18 01 00 e5 00 23 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 03 20 00 00 00 24 00 08 00 00 05 05 ff ff 00 10 90 01 70 08 42 43 32 33 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 05 00 00 00 02 00 00 00 e6 00 00 00 00 23 01 00 02 00 03 08 00 55 44 00 40 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 25 00 02 00 03 20 01 86 82 00 70 00 00 00 00 05 05 e6 00 00 00 00 01 90 01 70 08 02 05 e6 00 00 00 01 00 24 00 08 ff ff 00 10 00 55 44 02 88 02 01 e5 00 00 00 00 04 0c 00 05 00 01 00 00 00 00 2f a4 eb 00 08 c0 01 c1 02 00 00 dd b6 00 08 00 08 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 44 09 42 82 06 80 00 03 e0 00 01 80 ac 02 c5 00 08 ff ff ff 13 00 ff 18 ff 06 5a 09 81 13 00 c0 00 00 00 7f 90 00 08 11 07 08 eb 40 03 0d 00 29 4f 00 08 30 82 12 10 7e 40 17 00 06 61 15 87 1d 04 60 00 08 0c 30 04 43 1d 64 90 21 87 26 b9 06 80 20 01 02 00 04 0d 7c 00 06 68 15 87 f1 25 12 00 08 fe 04 44 06 6f 15 83 1f 99 17 40 80 2d 0f 81 16 c2 00 f6 33 40 64 11 32 01 02 00 02 11 06 80 ff 1f 82 34 c2 a5 00 00 08 04 04 44 ee 04 e1 00 08 0e 1c 04 43 f8 bf 12 00 08 f1 37 83 00 a8 42 40 70 00 82 44 80 62 fc 00 00 d6 01 28 00 08 3f 02 06 f8 04 41 30 7d e7 12 82 37 82 60 de 00 08 49 18 0d 04 ca e3 3c 80 24 7c 04 42 20 bb 5b 0f 81 fa fc 00 fb 00 34 00 31 4b 40 02 00 40 07 81 88 fc c8 1b 80 04 44 c4 db 12 80 24 f0 30 55 3f 13 00 ae 27 41 49 04 43 16 5d 41 12 6d b0 00 16 01 4c d8 15 87 cd f5 3c 40 57 c1 26 02 3f 41 38 04 43 30 42 48 31 e4 71 57 82 04 41 01 a2 55 72 85 15 08 00 b5 15 40 03 02 00 3e 02 00 00 39 5d 00 08 02 e0 04 4c 91 04 41 d9 cc 06 80 3f 00 3f 04 41 20 d8 99 3c 87 f5 7d 00 08 f7 b8 04 44 60 2d 40 04 41 1a 01 3c bd 00 00 08 9f c0 20 00 f0 00 40 10 00 2c cd 72 86 0f 00 25 00 40 02 02 00 0b 97 ad 00 08 80 c9 0b 40 04 41 1f df 15 87 f4 01 92 80 41 28 82 84 51 00 08 8f d9 0d 03 30 d3 21 27 81 04 43 d3 23 00 08 c8 58 c0 04 42 70 6e 12 83 34 00 01 19 c0 5b 73 06 80 99 44 46 75 69 80 08 ff ff 3f ec 02 00 6e 4d 00 25 08 3c 04 44 25 39 57 82 ff 0d 02 40 24 57 82 08 61 f7 00 08 12 4c 85 37 83 bf be 72 83 9f 41 6d cf 81 12 83 b7 81 00 0f 4b a1 72 84 04 64 00 00 c6 31 72 86 80 db 42 a8 12 85 fc 83 b9 7a 72 85 f3 10 fc 37 47 0f 81 24 80 42 00 2b 13 0b b3 00 09 02 00 04 b5 09 bb 09 d6 c4 09 ca 0c 0a ce 34 0b ce 32 90 43 01 03 75 2e 00 04 10 03 17 40 b3 43 10 01 71 16 03 80 30 21 ff fc 32 d8 7f af 80 f6 c3 a5 70 f6 c2 00 00 00 00 00 55 44 00 58 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 33 02 90 00 00 00 00 40 33 65 64 00 00 00 00 40 33 49 74 00 00 00 00 40 32 3f 94 00 00 00 00 40 32 43 60 00 00 00 00 40 32 4c b4 00 00 00 00 40 32 07 24 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 04 01 15 31 00 01 28 00 42 50 52 44 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 fc 00 00 00 00 00 00 02 fc 00 00 00 11 00 00 00 00 00 00 00 19 2c f2 c0 08 00 00 00 fe 00 08 43 4f 79 03 e3 db 00 00 00 53 00 00 00 00 00 25 00 03 00 00 00 24 00 00 00 19 2c ff 3e 2d 00 00 00 fe 00 00 43 4f 77 43 67 13 00 00 01 6e 00 00 00 1c 00 00 00 1b 3a d4 d4 6d 00 00 00 fe 00 08 43 4f c7 f4 90 bf 00 00 00 b3 00 00 00 00 00 00 00 05 00 00 00 24 00 00 00 1b 3a d5 1e ac 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a d5 2a c0 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a ea d1 99 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 00 00 00 00 2c 00 00 00 1b 3a eb 02 dc 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 07 00 00 00 2c 00 00 00 1b 3a eb 24 83 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 07 00 00 00 2c 00 00 00 1b 3a ee 68 c2 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a fb 02 ac 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 00 00 00 00 2c 00 00 00 1b 3a fb 5b 01 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 09 00 00 00 2c 00 00 00 1b 3a fb 7b d1 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 09 00 00 00 2c 00 00 00 1b 3b 15 30 7c 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 00 00 00 00 2c 00 00 00 1b 3b 15 c9 35 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 0a 00 00 00 2c 00 00 00 1b 3b 15 eb 5b 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 0a 00 00 00 2c 00 00 00 1b 3b 17 99 f0 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 24 00 08 00 00 00 00 ff ff 00 10 00 00 00 2c 00 00 00 1b 3b 4c 4e b4 00 00 00 fe 00 18 43 4f 51 86 ef 36 00 00 00 71 00 00 00 00 00 24 00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34"
      ], 
      "Id": 13, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296292560, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0a 25 97 70 67 00 00 00 0a 25 b3 7d 48 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 56 90 00 00 56 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 00 2c 01 01 01 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 4d d2 94 00 00 00 00 40 4d d4 5c 00 00 00 00 40 4d da e0 00 00 00 00 40 2b 82 10 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 fc 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 f4 00 00 00 00 00 00 03 f4 00 00 00 0f 00 00 00 00 00 00 00 51 0c f9 9d 96 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 9e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 51 12 ef 6c 3d 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 9e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 51 12 ef bc 51 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 9f 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 52 0c fa 38 6b 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 9f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 52 0c fa 8c da 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a0 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 53 07 05 07 fa 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 53 07 05 5a 98 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a1 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 54 07 05 c1 f3 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a1 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 54 07 06 15 43 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a2 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 55 01 10 8d be 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 55 01 10 c5 25 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 a3 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 55 07 06 82 b1 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 a3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 55 07 06 99 3b 00 00 00 77 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 55 07 06 a0 f3 00 00 00 77 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 55 07 06 ab f0 00 00 00 77 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c"
      ], 
      "Id": 14, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296295371, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/15": {
      "AdditionalData": [], 
      "Id": 15, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296301523, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/16": {
      "AdditionalData": [], 
      "Id": 16, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296405721, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295222449, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295514791, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 05 d1 0a 2a bc 00 00 00 05 d1 d6 ba ff 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 19 90 00 00 19 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 2f 1f 37 9e 43 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 2f 1f 37 a6 78 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 2f 1f 37 ae c7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 2f 1f 51 6e 5d 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 2f 1f 51 77 5f 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 2f 1f 51 81 50 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 2f 1f 51 b7 0a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 2f 1f 54 a1 8c 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 2f 1f 54 f5 a7 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 91 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 2f 1f 55 00 73 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2f 1f 55 09 1b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 2f 1f 55 11 93 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 2f 1f 55 19 d7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 2f 37 36 78 eb 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 2f 37 36 86 e7 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 2f 37 36 91 03 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 2f 37 36 cb c8 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 30 19 5b 41 2f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 30 19 5b 9a 3a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 92 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 30 19 5b a5 8c 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 30 19 5b af 19 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 30 19 5b b7 99 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 30 19 5b bf f0 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295918626, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 05 d1 29 16 de 00 00 00 05 d2 31 72 28 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 04 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 6b 75 70 20 70 69 72 20 32 31 32 39 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 30 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 32 38 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 31 20 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295920629, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502295926742, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 c0 53 2b e1 00 00 00 09 c0 f9 f4 4a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 30 90 00 00 30 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 51 00 e0 e7 f7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 51 00 e0 ee d3 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 00 e0 f5 be 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 51 00 fb 94 a7 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 51 00 fb 9c 3b 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 51 00 fb a4 f3 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 51 00 fb e4 fa 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 51 00 ff 0b c9 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 51 00 ff 67 47 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 51 00 ff 71 01 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 51 00 ff 78 33 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 51 00 ff 7f 10 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 00 ff 86 4a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 51 17 d8 38 29 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 51 17 d8 46 69 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 51 17 d8 51 75 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 51 17 d8 8e 2c 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 51 18 da 70 f5 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 51 18 da cd 5d 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 51 18 da d8 1b 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 51 18 da df 89 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 51 18 da e6 50 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 18 da ed 51 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296043830, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 c0 8f ce ca 00 00 00 09 c1 2c a8 3b 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 31 90 00 00 31 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 04 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 57 6b 6b 75 75 70 70 20 20 70 70 69 69 72 72 20 20 32 32 31 31 33 33 30 31 20 20 64 64 6f 6f 6e 6e 65 65 0a 0a 57 6b 57 75 6b 70 75 20 70 70 20 70 69 69 72 72 20 20 32 31 32 32 39 31 20 32 64 6f 38 6e 65 20 0a 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296045452, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502296051668, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:48.738" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:48.738" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/16': {u'Resolved': 0, u'Id': 16, u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Timestamp': 1...</msg>
<status endtime="20170809 16:33:48.739" starttime="20170809 16:33:48.736" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170809 16:33:48.739" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/10/callout', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/11/callout', u'/xyz/openbmc_...</msg>
<status endtime="20170809 16:33:48.739" starttime="20170809 16:33:48.739" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:33:48.740" level="INFO">${logpath} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel</msg>
<status endtime="20170809 16:33:48.740" starttime="20170809 16:33:48.739" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:48.741" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:48.741" starttime="20170809 16:33:48.740" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:48.742" starttime="20170809 16:33:48.741" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:48.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:48.746" starttime="20170809 16:33:48.745" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:48.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:48.746" starttime="20170809 16:33:48.746" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:48.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:48.747" starttime="20170809 16:33:48.746" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:48.747" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:48.747" starttime="20170809 16:33:48.747" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:48.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:48.956" starttime="20170809 16:33:48.748" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:48.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:48.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:48.956" starttime="20170809 16:33:48.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:48.957" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:48.957" starttime="20170809 16:33:48.957" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:48.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:48.958" starttime="20170809 16:33:48.957" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:48.958" starttime="20170809 16:33:48.744" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:48.958" starttime="20170809 16:33:48.744" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:48.958" starttime="20170809 16:33:48.743" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:48.959" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170809 16:33:48.959" starttime="20170809 16:33:48.958" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:48.959" starttime="20170809 16:33:48.959" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:49.048" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:49.048" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.048" starttime="20170809 16:33:48.960" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:49.049" starttime="20170809 16:33:49.048" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:49.049" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:49.049" starttime="20170809 16:33:49.049" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.050" starttime="20170809 16:33:48.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.050" starttime="20170809 16:33:49.050" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:49.051" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 06 24 69 e6 33 00 00 00 06 24 e9 a9 df 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 44 90 00 00 44 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 32 2b d3 cd a7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 32 2b d3 d4 65 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 32 2b d3 db 7e 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 32 2b ef 1b 41 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 32 2b ef 22 a9 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 32 2b ef 2b 7b 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 32 2b ef 65 3a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 32 2b f3 be d2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 32 2b f4 1b 37 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 32 2b f4 24 f9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 32 2b f4 2c 19 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 32 2b f4 33 37 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 32 2b f4 3a 15 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 33 07 5a b7 c6 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 33 07 5a c5 7c 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 33 07 5a cf 61 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 33 07 5b 0e b2 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 33 0a 04 2b d3 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 33 0a 04 8c a6 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 33 0a 04 97 22 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 33 0a 04 9e 71 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 33 0a 04 a5 58 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 33 0a 04 ac 05 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:49.051" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:49.051" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170809 16:33:49.051" starttime="20170809 16:33:49.050" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.051" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 06 24 69 e6 33 00 00 00 06 24 e9 a9 df 42 00 0...</msg>
<status endtime="20170809 16:33:49.052" starttime="20170809 16:33:48.742" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:49.052" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:49.052" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:49.052" starttime="20170809 16:33:49.052" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:49.053" starttime="20170809 16:33:49.052" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:49.053" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:49.053" starttime="20170809 16:33:49.053" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:49.055" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:49.055" starttime="20170809 16:33:49.054" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.055" starttime="20170809 16:33:49.053" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:49.056" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:49.056" starttime="20170809 16:33:49.056" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.056" starttime="20170809 16:33:49.055" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.056" starttime="20170809 16:33:48.741" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:49.057" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:49.057" starttime="20170809 16:33:49.057" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.057" starttime="20170809 16:33:49.056" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:49.058" starttime="20170809 16:33:49.058" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:49.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:49.062" starttime="20170809 16:33:49.061" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:49.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:49.063" starttime="20170809 16:33:49.062" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:49.063" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:49.063" starttime="20170809 16:33:49.063" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:49.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:49.064" starttime="20170809 16:33:49.063" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:49.248" starttime="20170809 16:33:49.065" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:49.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.248" starttime="20170809 16:33:49.064" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.249" starttime="20170809 16:33:49.249" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.250" starttime="20170809 16:33:49.249" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.250" starttime="20170809 16:33:49.061" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.250" starttime="20170809 16:33:49.060" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.250" starttime="20170809 16:33:49.059" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:49.251" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status endtime="20170809 16:33:49.251" starttime="20170809 16:33:49.250" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:49.251" starttime="20170809 16:33:49.251" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:49.335" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:49.335" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.335" starttime="20170809 16:33:49.252" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:49.336" starttime="20170809 16:33:49.336" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:49.336" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:49.336" starttime="20170809 16:33:49.336" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.337" starttime="20170809 16:33:49.059" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.337" starttime="20170809 16:33:49.337" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:49.338" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 06 24 e9 a2 36 00 00 00 06 25 78 d1 1f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 45 90 00 00 45 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 21 ab 78 80 ce 02 00 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 6b 75 70 20 70 69 72 20 32 31 32 39 20 64 6f 6e 65 0a 57 6b 75 70 57 20 6b 70 75 70 69 20 72 70 20 69 72 32 20 31 32 38 32 20 31 64 33 6f 30 6e 20 65 64 0a 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 31 20 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:49.338" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:49.338" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170809 16:33:49.338" starttime="20170809 16:33:49.337" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.339" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 06 24 e9 a2 36 00 00 00 06 25 78 d1 1f 42 00 0...</msg>
<status endtime="20170809 16:33:49.339" starttime="20170809 16:33:49.058" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:49.339" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:49.339" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:49.339" starttime="20170809 16:33:49.339" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:49.340" starttime="20170809 16:33:49.340" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:49.340" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:49.340" starttime="20170809 16:33:49.340" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:49.342" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:49.342" starttime="20170809 16:33:49.341" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.342" starttime="20170809 16:33:49.341" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:49.343" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:49.344" starttime="20170809 16:33:49.343" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.344" starttime="20170809 16:33:49.342" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.344" starttime="20170809 16:33:49.057" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:49.345" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:49.345" starttime="20170809 16:33:49.344" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.345" starttime="20170809 16:33:49.344" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/12" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:49.346" starttime="20170809 16:33:49.345" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:49.349" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:49.349" starttime="20170809 16:33:49.348" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:49.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:49.350" starttime="20170809 16:33:49.349" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:49.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:49.350" starttime="20170809 16:33:49.350" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:49.351" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:49.351" starttime="20170809 16:33:49.351" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:49.560" starttime="20170809 16:33:49.352" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:49.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.560" starttime="20170809 16:33:49.351" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.561" starttime="20170809 16:33:49.560" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.562" starttime="20170809 16:33:49.561" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.562" starttime="20170809 16:33:49.348" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.562" starttime="20170809 16:33:49.347" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.562" starttime="20170809 16:33:49.347" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:49.562" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/12/attr/AdditionalData</msg>
<status endtime="20170809 16:33:49.562" starttime="20170809 16:33:49.562" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:49.563" starttime="20170809 16:33:49.563" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:49.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/12/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:49.755" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.755" starttime="20170809 16:33:49.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:49.755" starttime="20170809 16:33:49.755" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:49.756" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:49.756" starttime="20170809 16:33:49.755" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.756" starttime="20170809 16:33:49.346" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.757" starttime="20170809 16:33:49.756" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:49.757" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:49.757" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:49.757" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170809 16:33:49.757" starttime="20170809 16:33:49.757" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.758" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 16:33:49.758" starttime="20170809 16:33:49.346" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:49.758" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:33:49.758" level="INFO">${length} = 0</msg>
<status endtime="20170809 16:33:49.758" starttime="20170809 16:33:49.758" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.759" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:49.759" starttime="20170809 16:33:49.759" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.759" starttime="20170809 16:33:49.345" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/13" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:49.760" starttime="20170809 16:33:49.759" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:49.763" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:49.763" starttime="20170809 16:33:49.763" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:49.764" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:49.764" starttime="20170809 16:33:49.764" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:49.765" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:49.765" starttime="20170809 16:33:49.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:49.765" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:49.765" starttime="20170809 16:33:49.765" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:49.992" starttime="20170809 16:33:49.766" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:49.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:49.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:49.992" starttime="20170809 16:33:49.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.992" starttime="20170809 16:33:49.992" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:49.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:49.993" starttime="20170809 16:33:49.993" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.993" starttime="20170809 16:33:49.762" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.993" starttime="20170809 16:33:49.762" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:49.993" starttime="20170809 16:33:49.761" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:49.994" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/13/attr/AdditionalData</msg>
<status endtime="20170809 16:33:49.994" starttime="20170809 16:33:49.994" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:49.995" starttime="20170809 16:33:49.994" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:50.082" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/13/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:50.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.082" starttime="20170809 16:33:49.995" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:50.083" starttime="20170809 16:33:50.082" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:50.083" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:50.083" starttime="20170809 16:33:50.083" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.083" starttime="20170809 16:33:49.761" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.084" starttime="20170809 16:33:50.084" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:50.085" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 0c b6 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 03 56 18 ac 93 00 00 00 03 56 b2 fe 98 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 51 90 00 00 51 55 48 00 18 01 00 e5 00 23 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 03 20 00 00 00 24 00 08 00 00 05 05 ff ff 00 10 90 01 70 08 42 43 32 33 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 05 00 00 00 02 00 00 00 e6 00 00 00 00 23 01 00 02 00 03 08 00 55 44 00 40 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 25 00 02 00 03 20 01 86 82 00 70 00 00 00 00 05 05 e6 00 00 00 00 01 90 01 70 08 02 05 e6 00 00 00 01 00 24 00 08 ff ff 00 10 00 55 44 02 88 02 01 e5 00 00 00 00 04 0c 00 05 00 01 00 00 00 00 2f a4 eb 00 08 c0 01 c1 02 00 00 dd b6 00 08 00 08 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 44 09 42 82 06 80 00 03 e0 00 01 80 ac 02 c5 00 08 ff ff ff 13 00 ff 18 ff 06 5a 09 81 13 00 c0 00 00 00 7f 90 00 08 11 07 08 eb 40 03 0d 00 29 4f 00 08 30 82 12 10 7e 40 17 00 06 61 15 87 1d 04 60 00 08 0c 30 04 43 1d 64 90 21 87 26 b9 06 80 20 01 02 00 04 0d 7c 00 06 68 15 87 f1 25 12 00 08 fe 04 44 06 6f 15 83 1f 99 17 40 80 2d 0f 81 16 c2 00 f6 33 40 64 11 32 01 02 00 02 11 06 80 ff 1f 82 34 c2 a5 00 00 08 04 04 44 ee 04 e1 00 08 0e 1c 04 43 f8 bf 12 00 08 f1 37 83 00 a8 42 40 70 00 82 44 80 62 fc 00 00 d6 01 28 00 08 3f 02 06 f8 04 41 30 7d e7 12 82 37 82 60 de 00 08 49 18 0d 04 ca e3 3c 80 24 7c 04 42 20 bb 5b 0f 81 fa fc 00 fb 00 34 00 31 4b 40 02 00 40 07 81 88 fc c8 1b 80 04 44 c4 db 12 80 24 f0 30 55 3f 13 00 ae 27 41 49 04 43 16 5d 41 12 6d b0 00 16 01 4c d8 15 87 cd f5 3c 40 57 c1 26 02 3f 41 38 04 43 30 42 48 31 e4 71 57 82 04 41 01 a2 55 72 85 15 08 00 b5 15 40 03 02 00 3e 02 00 00 39 5d 00 08 02 e0 04 4c 91 04 41 d9 cc 06 80 3f 00 3f 04 41 20 d8 99 3c 87 f5 7d 00 08 f7 b8 04 44 60 2d 40 04 41 1a 01 3c bd 00 00 08 9f c0 20 00 f0 00 40 10 00 2c cd 72 86 0f 00 25 00 40 02 02 00 0b 97 ad 00 08 80 c9 0b 40 04 41 1f df 15 87 f4 01 92 80 41 28 82 84 51 00 08 8f d9 0d 03 30 d3 21 27 81 04 43 d3 23 00 08 c8 58 c0 04 42 70 6e 12 83 34 00 01 19 c0 5b 73 06 80 99 44 46 75 69 80 08 ff ff 3f ec 02 00 6e 4d 00 25 08 3c 04 44 25 39 57 82 ff 0d 02 40 24 57 82 08 61 f7 00 08 12 4c 85 37 83 bf be 72 83 9f 41 6d cf 81 12 83 b7 81 00 0f 4b a1 72 84 04 64 00 00 c6 31 72 86 80 db 42 a8 12 85 fc 83 b9 7a 72 85 f3 10 fc 37 47 0f 81 24 80 42 00 2b 13 0b b3 00 09 02 00 04 b5 09 bb 09 d6 c4 09 ca 0c 0a ce 34 0b ce 32 90 43 01 03 75 2e 00 04 10 03 17 40 b3 43 10 01 71 16 03 80 30 21 ff fc 32 d8 7f af 80 f6 c3 a5 70 f6 c2 00 00 00 00 00 55 44 00 58 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 33 02 90 00 00 00 00 40 33 65 64 00 00 00 00 40 33 49 74 00 00 00 00 40 32 3f 94 00 00 00 00 40 32 43 60 00 00 00 00 40 32 4c b4 00 00 00 00 40 32 07 24 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 04 01 15 31 00 01 28 00 42 50 52 44 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 fc 00 00 00 00 00 00 02 fc 00 00 00 11 00 00 00 00 00 00 00 19 2c f2 c0 08 00 00 00 fe 00 08 43 4f 79 03 e3 db 00 00 00 53 00 00 00 00 00 25 00 03 00 00 00 24 00 00 00 19 2c ff 3e 2d 00 00 00 fe 00 00 43 4f 77 43 67 13 00 00 01 6e 00 00 00 1c 00 00 00 1b 3a d4 d4 6d 00 00 00 fe 00 08 43 4f c7 f4 90 bf 00 00 00 b3 00 00 00 00 00 00 00 05 00 00 00 24 00 00 00 1b 3a d5 1e ac 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a d5 2a c0 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a ea d1 99 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 00 00 00 00 2c 00 00 00 1b 3a eb 02 dc 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 07 00 00 00 2c 00 00 00 1b 3a eb 24 83 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c4 eb 00 07 00 00 00 2c 00 00 00 1b 3a ee 68 c2 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 1b 3a fb 02 ac 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 00 00 00 00 2c 00 00 00 1b 3a fb 5b 01 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 09 00 00 00 2c 00 00 00 1b 3a fb 7b d1 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 f5 cc 00 09 00 00 00 2c 00 00 00 1b 3b 15 30 7c 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 00 00 00 00 2c 00 00 00 1b 3b 15 c9 35 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 0a 00 00 00 2c 00 00 00 1b 3b 15 eb 5b 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 25 00 02 00 00 00 00 59 93 00 0a 00 00 00 2c 00 00 00 1b 3b 17 99 f0 00 00 00 fe 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 24 00 08 00 00 00 00 ff ff 00 10 00 00 00 2c 00 00 00 1b 3b 4c 4e b4 00 00 00 fe 00 18 43 4f 51 86 ef 36 00 00 00 71 00 00 00 00 00 24 00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:50.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:50.085" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8', u'ESEL=00 00 df 00 00 00 00 20 00 04 0c b6 04 aa 00 00 50...</msg>
<status endtime="20170809 16:33:50.085" starttime="20170809 16:33:50.084" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.085" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8', u'ESEL=00 00 df 00 00 00 00 20 00 04 0c b6 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 03 56 18 ac 93 00 00...</msg>
<status endtime="20170809 16:33:50.085" starttime="20170809 16:33:49.760" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:50.086" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:50.086" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:50.086" starttime="20170809 16:33:50.086" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:50.087" starttime="20170809 16:33:50.086" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:50.088" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:50.088" starttime="20170809 16:33:50.087" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:50.090" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:50.090" starttime="20170809 16:33:50.089" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.090" starttime="20170809 16:33:50.088" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:50.091" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:50.091" starttime="20170809 16:33:50.090" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.091" starttime="20170809 16:33:50.090" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.091" starttime="20170809 16:33:49.759" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/13/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:50.092" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:50.092" starttime="20170809 16:33:50.091" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.092" starttime="20170809 16:33:50.091" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/14" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:50.093" starttime="20170809 16:33:50.092" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:50.096" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:50.097" starttime="20170809 16:33:50.096" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:50.097" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:50.097" starttime="20170809 16:33:50.097" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:50.098" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:50.098" starttime="20170809 16:33:50.097" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:50.099" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:50.099" starttime="20170809 16:33:50.098" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.291" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:50.291" starttime="20170809 16:33:50.100" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:50.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.291" starttime="20170809 16:33:50.099" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.292" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.292" starttime="20170809 16:33:50.292" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.293" starttime="20170809 16:33:50.292" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.293" starttime="20170809 16:33:50.095" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.293" starttime="20170809 16:33:50.095" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.293" starttime="20170809 16:33:50.094" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:50.294" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/14/attr/AdditionalData</msg>
<status endtime="20170809 16:33:50.294" starttime="20170809 16:33:50.293" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:50.294" starttime="20170809 16:33:50.294" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:50.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/14/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:50.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.381" starttime="20170809 16:33:50.295" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:50.381" starttime="20170809 16:33:50.381" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:50.382" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:50.382" starttime="20170809 16:33:50.382" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.382" starttime="20170809 16:33:50.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.383" starttime="20170809 16:33:50.382" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:50.383" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0a 25 97 70 67 00 00 00 0a 25 b3 7d 48 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 56 90 00 00 56 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 00 2c 01 01 01 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 4d d2 94 00 00 00 00 40 4d d4 5c 00 00 00 00 40 4d da e0 00 00 00 00 40 2b 82 10 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 fc 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 f4 00 00 00 00 00 00 03 f4 00 00 00 0f 00 00 00 00 00 00 00 51 0c f9 9d 96 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 9e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 51 12 ef 6c 3d 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 9e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 51 12 ef bc 51 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 9f 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 52 0c fa 38 6b 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 9f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 52 0c fa 8c da 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a0 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 53 07 05 07 fa 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 53 07 05 5a 98 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a1 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 54 07 05 c1 f3 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a1 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 54 07 06 15 43 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a2 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 55 01 10 8d be 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 a2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 55 01 10 c5 25 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 a3 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 55 07 06 82 b1 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 a3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 55 07 06 99 3b 00 00 00 77 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 55 07 06 a0 f3 00 00 00 77 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 55 07 06 ab f0 00 00 00 77 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:50.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:50.384" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 0...</msg>
<status endtime="20170809 16:33:50.384" starttime="20170809 16:33:50.383" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.384" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0a 25 97 70 67 00 00 00 0a 25 b3 7d 48 42 00 0...</msg>
<status endtime="20170809 16:33:50.384" starttime="20170809 16:33:50.093" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:50.385" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:50.385" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:50.385" starttime="20170809 16:33:50.384" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:50.385" starttime="20170809 16:33:50.385" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:50.386" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:50.386" starttime="20170809 16:33:50.386" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:50.387" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:50.387" starttime="20170809 16:33:50.387" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.387" starttime="20170809 16:33:50.386" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:50.389" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:50.389" starttime="20170809 16:33:50.388" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.389" starttime="20170809 16:33:50.388" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.389" starttime="20170809 16:33:50.092" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/14/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:50.390" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:50.390" starttime="20170809 16:33:50.389" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.390" starttime="20170809 16:33:50.389" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/15" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:50.391" starttime="20170809 16:33:50.390" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:50.396" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:50.397" starttime="20170809 16:33:50.395" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:50.397" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:50.397" starttime="20170809 16:33:50.397" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:50.398" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:50.398" starttime="20170809 16:33:50.398" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:50.399" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:50.399" starttime="20170809 16:33:50.399" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.583" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:50.584" starttime="20170809 16:33:50.400" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:50.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.584" starttime="20170809 16:33:50.400" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.584" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.585" starttime="20170809 16:33:50.584" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.585" starttime="20170809 16:33:50.585" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.585" starttime="20170809 16:33:50.394" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.585" starttime="20170809 16:33:50.394" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.586" starttime="20170809 16:33:50.393" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:50.586" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/15/attr/AdditionalData</msg>
<status endtime="20170809 16:33:50.586" starttime="20170809 16:33:50.586" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:50.587" starttime="20170809 16:33:50.586" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:50.669" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/15/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:50.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.669" starttime="20170809 16:33:50.587" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:50.670" starttime="20170809 16:33:50.669" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:50.670" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:50.670" starttime="20170809 16:33:50.670" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.670" starttime="20170809 16:33:50.392" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.671" starttime="20170809 16:33:50.670" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:50.671" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:50.671" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:50.672" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170809 16:33:50.672" starttime="20170809 16:33:50.671" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.672" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 16:33:50.672" starttime="20170809 16:33:50.391" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:50.672" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:33:50.672" level="INFO">${length} = 0</msg>
<status endtime="20170809 16:33:50.673" starttime="20170809 16:33:50.672" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.673" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:50.673" starttime="20170809 16:33:50.673" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.673" starttime="20170809 16:33:50.390" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/16" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:50.674" starttime="20170809 16:33:50.674" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:50.678" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:50.678" starttime="20170809 16:33:50.677" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:50.679" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:50.679" starttime="20170809 16:33:50.678" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:50.679" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:50.679" starttime="20170809 16:33:50.679" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:50.680" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:50.680" starttime="20170809 16:33:50.680" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.915" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:50.915" starttime="20170809 16:33:50.681" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:50.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:50.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:50.915" starttime="20170809 16:33:50.680" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.915" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.916" starttime="20170809 16:33:50.915" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:50.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:50.916" starttime="20170809 16:33:50.916" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.916" starttime="20170809 16:33:50.676" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.916" starttime="20170809 16:33:50.676" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:50.917" starttime="20170809 16:33:50.675" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:50.917" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/16/attr/AdditionalData</msg>
<status endtime="20170809 16:33:50.917" starttime="20170809 16:33:50.917" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:50.918" starttime="20170809 16:33:50.918" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:52.425" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/16/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:52.426" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:52.426" starttime="20170809 16:33:50.919" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:52.426" starttime="20170809 16:33:52.426" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:52.427" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:52.427" starttime="20170809 16:33:52.427" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:52.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:52.427" starttime="20170809 16:33:50.675" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:52.428" starttime="20170809 16:33:52.427" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:52.428" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:52.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:52.429" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170809 16:33:52.429" starttime="20170809 16:33:52.428" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:52.429" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 16:33:52.429" starttime="20170809 16:33:50.674" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:52.429" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:33:52.429" level="INFO">${length} = 0</msg>
<status endtime="20170809 16:33:52.429" starttime="20170809 16:33:52.429" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.430" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:52.430" starttime="20170809 16:33:52.430" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.430" starttime="20170809 16:33:50.673" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:52.431" starttime="20170809 16:33:52.431" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:52.435" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:52.435" starttime="20170809 16:33:52.434" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:52.436" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:52.436" starttime="20170809 16:33:52.435" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:52.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:52.436" starttime="20170809 16:33:52.436" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:52.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:52.437" starttime="20170809 16:33:52.437" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:52.611" starttime="20170809 16:33:52.438" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:52.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:52.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:52.612" starttime="20170809 16:33:52.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.612" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:52.612" starttime="20170809 16:33:52.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:52.613" starttime="20170809 16:33:52.612" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.613" starttime="20170809 16:33:52.433" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.613" starttime="20170809 16:33:52.433" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.613" starttime="20170809 16:33:52.432" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:52.614" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170809 16:33:52.614" starttime="20170809 16:33:52.613" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:52.614" starttime="20170809 16:33:52.614" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:52.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:52.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:52.711" starttime="20170809 16:33:52.615" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:52.712" starttime="20170809 16:33:52.712" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:52.712" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:52.712" starttime="20170809 16:33:52.712" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:52.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:52.713" starttime="20170809 16:33:52.432" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:52.713" starttime="20170809 16:33:52.713" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:52.714" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:52.714" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:52.714" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170809 16:33:52.714" starttime="20170809 16:33:52.714" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:52.714" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 16:33:52.715" starttime="20170809 16:33:52.431" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:52.715" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:33:52.715" level="INFO">${length} = 0</msg>
<status endtime="20170809 16:33:52.715" starttime="20170809 16:33:52.715" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.716" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:52.716" starttime="20170809 16:33:52.715" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.716" starttime="20170809 16:33:52.430" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:52.717" starttime="20170809 16:33:52.716" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:52.720" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:52.721" starttime="20170809 16:33:52.720" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:52.721" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:52.721" starttime="20170809 16:33:52.721" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:52.722" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:52.722" starttime="20170809 16:33:52.721" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:52.722" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:52.722" starttime="20170809 16:33:52.722" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:52.982" starttime="20170809 16:33:52.723" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:52.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:52.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:52.982" starttime="20170809 16:33:52.723" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.983" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:52.983" starttime="20170809 16:33:52.983" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:52.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:52.984" starttime="20170809 16:33:52.983" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.984" starttime="20170809 16:33:52.719" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.984" starttime="20170809 16:33:52.719" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:52.984" starttime="20170809 16:33:52.718" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:52.985" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170809 16:33:52.985" starttime="20170809 16:33:52.984" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:52.985" starttime="20170809 16:33:52.985" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:53.068" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:53.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.068" starttime="20170809 16:33:52.986" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:53.069" starttime="20170809 16:33:53.069" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:53.069" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:53.069" starttime="20170809 16:33:53.069" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.070" starttime="20170809 16:33:52.717" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:53.070" starttime="20170809 16:33:53.070" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:53.071" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:53.071" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:53.071" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170809 16:33:53.071" starttime="20170809 16:33:53.071" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.071" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 16:33:53.071" starttime="20170809 16:33:52.717" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:53.072" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:33:53.072" level="INFO">${length} = 0</msg>
<status endtime="20170809 16:33:53.072" starttime="20170809 16:33:53.072" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.073" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:53.073" starttime="20170809 16:33:53.072" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.073" starttime="20170809 16:33:52.716" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:53.074" starttime="20170809 16:33:53.073" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:53.077" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:53.077" starttime="20170809 16:33:53.077" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:53.078" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:53.078" starttime="20170809 16:33:53.078" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:53.079" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:53.079" starttime="20170809 16:33:53.078" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:53.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:53.079" starttime="20170809 16:33:53.079" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.330" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:53.330" starttime="20170809 16:33:53.080" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:53.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.331" starttime="20170809 16:33:53.080" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:53.332" starttime="20170809 16:33:53.331" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:53.332" starttime="20170809 16:33:53.332" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.332" starttime="20170809 16:33:53.076" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.332" starttime="20170809 16:33:53.075" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.333" starttime="20170809 16:33:53.075" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:53.333" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170809 16:33:53.333" starttime="20170809 16:33:53.333" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:53.334" starttime="20170809 16:33:53.333" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:53.512" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:53.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.513" starttime="20170809 16:33:53.334" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:53.513" starttime="20170809 16:33:53.513" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:53.514" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:53.514" starttime="20170809 16:33:53.514" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.514" starttime="20170809 16:33:53.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:53.515" starttime="20170809 16:33:53.514" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:53.515" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 05 d1 0a 2a bc 00 00 00 05 d1 d6 ba ff 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 19 90 00 00 19 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 2f 1f 37 9e 43 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 2f 1f 37 a6 78 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 2f 1f 37 ae c7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 2f 1f 51 6e 5d 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 2f 1f 51 77 5f 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 2f 1f 51 81 50 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 2f 1f 51 b7 0a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 2f 1f 54 a1 8c 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 2f 1f 54 f5 a7 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 91 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 2f 1f 55 00 73 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2f 1f 55 09 1b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 2f 1f 55 11 93 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 2f 1f 55 19 d7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 2f 37 36 78 eb 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 2f 37 36 86 e7 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 2f 37 36 91 03 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 2f 37 36 cb c8 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 30 19 5b 41 2f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 30 19 5b 9a 3a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 92 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 30 19 5b a5 8c 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 30 19 5b af 19 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 30 19 5b b7 99 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 30 19 5b bf f0 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:53.516" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:53.516" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170809 16:33:53.516" starttime="20170809 16:33:53.515" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.516" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 05 d1 0a 2a bc 00 00 00 05 d1 d6 ba ff 42 00 0...</msg>
<status endtime="20170809 16:33:53.516" starttime="20170809 16:33:53.074" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:53.517" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:53.517" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:53.517" starttime="20170809 16:33:53.516" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:53.517" starttime="20170809 16:33:53.517" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:53.518" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:53.518" starttime="20170809 16:33:53.518" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:53.519" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:53.520" starttime="20170809 16:33:53.519" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.520" starttime="20170809 16:33:53.518" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:53.521" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:53.521" starttime="20170809 16:33:53.520" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.521" starttime="20170809 16:33:53.520" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.521" starttime="20170809 16:33:53.073" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:53.522" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:53.522" starttime="20170809 16:33:53.521" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.522" starttime="20170809 16:33:53.521" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:53.523" starttime="20170809 16:33:53.522" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:53.531" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:53.531" starttime="20170809 16:33:53.530" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:53.532" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:53.532" starttime="20170809 16:33:53.532" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:53.533" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:53.533" starttime="20170809 16:33:53.532" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:53.534" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:53.534" starttime="20170809 16:33:53.533" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.767" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:53.767" starttime="20170809 16:33:53.535" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.767" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:53.767" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.768" starttime="20170809 16:33:53.535" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.768" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:53.768" starttime="20170809 16:33:53.768" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:53.769" starttime="20170809 16:33:53.768" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.769" starttime="20170809 16:33:53.529" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.769" starttime="20170809 16:33:53.529" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.769" starttime="20170809 16:33:53.528" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:53.770" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170809 16:33:53.770" starttime="20170809 16:33:53.769" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:53.770" starttime="20170809 16:33:53.770" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:53.854" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:53.854" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.854" starttime="20170809 16:33:53.771" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:53.855" starttime="20170809 16:33:53.854" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:53.855" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:53.855" starttime="20170809 16:33:53.855" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:53.855" starttime="20170809 16:33:53.524" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:53.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:53.856" starttime="20170809 16:33:53.856" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:53.857" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 05 d1 29 16 de 00 00 00 05 d2 31 72 28 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 04 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 6b 75 70 20 70 69 72 20 32 31 32 39 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 30 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 32 38 20 64 6f 6e 65 0a 57 6b 75 70 20 70 69 72 20 32 31 33 31 20 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:53.857" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:53.857" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170809 16:33:53.857" starttime="20170809 16:33:53.856" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:53.857" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 05 d1 29 16 de 00 00 00 05 d2 31 72 28 42 00 0...</msg>
<status endtime="20170809 16:33:53.857" starttime="20170809 16:33:53.523" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:53.858" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:53.858" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:53.858" starttime="20170809 16:33:53.858" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:53.859" starttime="20170809 16:33:53.858" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:53.859" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:53.859" starttime="20170809 16:33:53.859" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:53.861" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:53.861" starttime="20170809 16:33:53.860" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.861" starttime="20170809 16:33:53.859" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:53.862" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:53.862" starttime="20170809 16:33:53.862" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.862" starttime="20170809 16:33:53.861" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.862" starttime="20170809 16:33:53.522" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:53.863" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:53.863" starttime="20170809 16:33:53.863" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:53.863" starttime="20170809 16:33:53.862" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:53.864" starttime="20170809 16:33:53.864" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:53.867" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:53.868" starttime="20170809 16:33:53.867" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:53.868" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:53.868" starttime="20170809 16:33:53.868" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:53.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:53.869" starttime="20170809 16:33:53.868" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:53.869" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:53.870" starttime="20170809 16:33:53.869" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:54.055" starttime="20170809 16:33:53.870" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:54.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.055" starttime="20170809 16:33:53.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.056" starttime="20170809 16:33:54.055" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.057" starttime="20170809 16:33:54.056" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.057" starttime="20170809 16:33:53.866" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.057" starttime="20170809 16:33:53.866" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.057" starttime="20170809 16:33:53.865" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:54.058" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170809 16:33:54.058" starttime="20170809 16:33:54.057" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:54.059" starttime="20170809 16:33:54.058" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:54.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:54.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.144" starttime="20170809 16:33:54.059" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:54.144" starttime="20170809 16:33:54.144" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:54.145" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:54.145" starttime="20170809 16:33:54.145" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.145" starttime="20170809 16:33:53.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.146" starttime="20170809 16:33:54.145" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:54.146" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:54.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:54.146" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170809 16:33:54.146" starttime="20170809 16:33:54.146" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.147" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 16:33:54.147" starttime="20170809 16:33:53.864" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:54.147" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:33:54.147" level="INFO">${length} = 0</msg>
<status endtime="20170809 16:33:54.147" starttime="20170809 16:33:54.147" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.148" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:54.148" starttime="20170809 16:33:54.148" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.148" starttime="20170809 16:33:53.863" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:54.149" starttime="20170809 16:33:54.148" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:54.152" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:54.152" starttime="20170809 16:33:54.152" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:54.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:54.153" starttime="20170809 16:33:54.153" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:54.154" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:54.154" starttime="20170809 16:33:54.153" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:54.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:54.154" starttime="20170809 16:33:54.154" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.379" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:54.379" starttime="20170809 16:33:54.155" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:54.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.379" starttime="20170809 16:33:54.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.380" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.380" starttime="20170809 16:33:54.379" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.381" starttime="20170809 16:33:54.380" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.381" starttime="20170809 16:33:54.151" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.381" starttime="20170809 16:33:54.151" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.381" starttime="20170809 16:33:54.150" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:54.381" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170809 16:33:54.381" starttime="20170809 16:33:54.381" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:54.382" starttime="20170809 16:33:54.382" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:54.478" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:54.478" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.478" starttime="20170809 16:33:54.382" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:54.479" starttime="20170809 16:33:54.478" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:54.479" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:54.479" starttime="20170809 16:33:54.479" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.480" starttime="20170809 16:33:54.150" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.480" starttime="20170809 16:33:54.480" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:54.481" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 c0 53 2b e1 00 00 00 09 c0 f9 f4 4a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 30 90 00 00 30 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 06 1e 14 00 00 00 00 00 06 25 2c 00 00 00 00 00 06 27 84 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 00 06 aa e8 00 00 00 00 00 06 b3 4c 00 00 00 00 00 06 b4 7c 00 00 00 00 00 06 ba ec 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 00 06 60 d4 00 00 00 00 00 06 70 80 00 00 00 00 00 06 81 34 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 51 00 e0 e7 f7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4c f0 00 00 00 00 24 00 00 00 51 00 e0 ee d3 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 00 e0 f5 be 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 51 00 fb 94 a7 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 51 00 fb 9c 3b 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 51 00 fb a4 f3 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 51 00 fb e4 fa 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 51 00 ff 0b c9 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 51 00 ff 67 47 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 51 00 ff 71 01 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 51 00 ff 78 33 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 51 00 ff 7f 10 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 00 ff 86 4a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 51 17 d8 38 29 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 51 17 d8 46 69 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 51 17 d8 51 75 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 51 17 d8 8e 2c 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 51 18 da 70 f5 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 51 18 da cd 5d 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 51 18 da d8 1b 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 51 18 da df 89 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 51 18 da e6 50 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 51 18 da ed 51 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:54.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:54.481" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170809 16:33:54.481" starttime="20170809 16:33:54.480" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.482" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 c0 53 2b e1 00 00 00 09 c0 f9 f4 4a 42 00 0...</msg>
<status endtime="20170809 16:33:54.482" starttime="20170809 16:33:54.149" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:54.482" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:54.482" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:54.482" starttime="20170809 16:33:54.482" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:54.483" starttime="20170809 16:33:54.482" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:54.483" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:54.483" starttime="20170809 16:33:54.483" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:54.485" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:54.485" starttime="20170809 16:33:54.484" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.485" starttime="20170809 16:33:54.484" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:54.486" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:54.486" starttime="20170809 16:33:54.486" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.486" starttime="20170809 16:33:54.485" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.486" starttime="20170809 16:33:54.148" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:54.487" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:54.487" starttime="20170809 16:33:54.487" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.487" starttime="20170809 16:33:54.486" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:54.488" starttime="20170809 16:33:54.488" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:54.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:54.492" starttime="20170809 16:33:54.491" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:54.493" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:54.493" starttime="20170809 16:33:54.492" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:54.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:54.493" starttime="20170809 16:33:54.493" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:54.494" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:54.494" starttime="20170809 16:33:54.494" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:54.754" starttime="20170809 16:33:54.495" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:54.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.754" starttime="20170809 16:33:54.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.755" starttime="20170809 16:33:54.754" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.755" starttime="20170809 16:33:54.755" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.755" starttime="20170809 16:33:54.490" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.755" starttime="20170809 16:33:54.490" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.756" starttime="20170809 16:33:54.489" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:54.756" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170809 16:33:54.756" starttime="20170809 16:33:54.756" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:54.757" starttime="20170809 16:33:54.756" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:54.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:54.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.867" starttime="20170809 16:33:54.757" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:54.867" starttime="20170809 16:33:54.867" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:54.868" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:54.868" starttime="20170809 16:33:54.868" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:54.868" starttime="20170809 16:33:54.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:54.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:54.869" starttime="20170809 16:33:54.868" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:54.869" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 c0 8f ce ca 00 00 00 09 c1 2c a8 3b 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 31 90 00 00 31 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 02 67 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 a6 fc 00 00 00 04 55 44 01 08 01 07 01 00 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 32 39 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 30 2e 2e 2e 64 6f 6e 65 0a 53 74 61 72 74 69 6e 67 20 43 50 55 20 77 69 74 68 20 70 69 72 20 32 31 33 31 2e 2e 2e 64 6f 6e 65 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 38 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 32 39 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 30 0a 44 62 65 6c 6c 20 77 6b 75 70 20 70 69 72 20 32 31 33 31 0a 57 57 6b 6b 75 75 70 70 20 20 70 70 69 69 72 72 20 20 32 32 31 31 33 33 30 31 20 20 64 64 6f 6f 6e 6e 65 65 0a 0a 57 6b 57 75 6b 70 75 20 70 70 20 70 69 69 72 72 20 20 32 31 32 32 39 31 20 32 64 6f 38 6e 65 20 0a 64 6f 6e 65 0a 53 74 61 72 74 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 00 05 62 b0 00 00 00 00 40 2b 78 20 00 00 00 00 40 2b 7f 40 00 00 00 00 40 2b 8f 08 00 00 00 00 40 2b 90 fc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:54.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:54.870" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170809 16:33:54.870" starttime="20170809 16:33:54.869" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:54.870" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 c0 8f ce ca 00 00 00 09 c1 2c a8 3b 42 00 0...</msg>
<status endtime="20170809 16:33:54.870" starttime="20170809 16:33:54.488" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:54.870" level="INFO">Length is 2</msg>
<msg timestamp="20170809 16:33:54.871" level="INFO">${length} = 2</msg>
<status endtime="20170809 16:33:54.871" starttime="20170809 16:33:54.870" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 16:33:54.871" starttime="20170809 16:33:54.871" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 16:33:54.872" level="INFO">${index} = 1</msg>
<status endtime="20170809 16:33:54.872" starttime="20170809 16:33:54.871" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:54.873" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:54.873" starttime="20170809 16:33:54.873" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.873" starttime="20170809 16:33:54.872" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:54.874" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:54.875" starttime="20170809 16:33:54.874" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.875" starttime="20170809 16:33:54.873" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.875" starttime="20170809 16:33:54.487" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170809 16:33:54.875" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:54.876" starttime="20170809 16:33:54.875" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:54.876" starttime="20170809 16:33:54.875" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 16:33:54.876" starttime="20170809 16:33:54.876" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:33:54.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:33:54.880" starttime="20170809 16:33:54.880" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:33:54.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:33:54.881" starttime="20170809 16:33:54.881" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:33:54.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:33:54.882" starttime="20170809 16:33:54.881" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:33:54.882" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:33:54.882" starttime="20170809 16:33:54.882" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:33:55.071" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:33:55.071" starttime="20170809 16:33:54.883" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:55.071" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:55.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:55.071" starttime="20170809 16:33:54.883" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:33:55.072" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:55.072" starttime="20170809 16:33:55.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:55.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:55.072" starttime="20170809 16:33:55.072" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.073" starttime="20170809 16:33:54.879" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.073" starttime="20170809 16:33:54.879" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.073" starttime="20170809 16:33:54.878" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:33:55.073" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170809 16:33:55.073" starttime="20170809 16:33:55.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 16:33:55.074" starttime="20170809 16:33:55.074" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:33:55.156" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:33:55.156" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:55.156" starttime="20170809 16:33:55.074" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 16:33:55.157" starttime="20170809 16:33:55.156" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:33:55.157" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:33:55.157" starttime="20170809 16:33:55.157" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:55.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:33:55.157" starttime="20170809 16:33:54.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:33:55.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:33:55.158" starttime="20170809 16:33:55.158" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:33:55.159" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:33:55.159" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:33:55.159" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170809 16:33:55.159" starttime="20170809 16:33:55.158" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:55.159" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 16:33:55.159" starttime="20170809 16:33:54.877" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:33:55.160" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:33:55.160" level="INFO">${length} = 0</msg>
<status endtime="20170809 16:33:55.160" starttime="20170809 16:33:55.159" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:33:55.160" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 16:33:55.160" starttime="20170809 16:33:55.160" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.161" starttime="20170809 16:33:54.876" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.161" starttime="20170809 16:33:48.741" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170809 16:33:55.164" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:33:55.170" level="INFO">${out} = </msg>
<status endtime="20170809 16:33:55.170" starttime="20170809 16:33:55.161" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170809 16:33:55.174" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170809 16:33:55.174" starttime="20170809 16:33:55.173" status="FAIL"></status>
</kw>
<msg timestamp="20170809 16:33:55.174" level="INFO">${status} = False</msg>
<status endtime="20170809 16:33:55.174" starttime="20170809 16:33:55.172" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170809 16:33:55.175" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170809 16:33:55.175" starttime="20170809 16:33:55.175" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.176" starttime="20170809 16:33:47.850" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.176" starttime="20170809 16:33:47.813" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.176" starttime="20170809 16:33:47.809" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.176" starttime="20170809 16:33:47.809" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 16:33:55.179" starttime="20170809 16:33:55.179" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:55.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:55.179" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 16:33:55.180" starttime="20170809 16:33:55.178" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 16:33:55.180" starttime="20170809 16:33:55.180" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:33:55.225" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170809 16:33:55.225" starttime="20170809 16:33:55.225" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:33:55.227" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170809 16:33:55.227" starttime="20170809 16:33:55.226" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 16:33:55.232" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170809 16:33:55.232" starttime="20170809 16:33:55.227" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.235" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.235" starttime="20170809 16:33:55.235" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.235" starttime="20170809 16:33:55.234" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.236" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.237" starttime="20170809 16:33:55.236" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.237" starttime="20170809 16:33:55.235" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.238" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.238" starttime="20170809 16:33:55.238" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.238" starttime="20170809 16:33:55.237" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.239" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.239" starttime="20170809 16:33:55.239" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.240" starttime="20170809 16:33:55.238" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.240" starttime="20170809 16:33:55.233" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.240" starttime="20170809 16:33:55.233" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:55.240" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170809 16:33:55.241" starttime="20170809 16:33:55.240" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:55.355" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:55.356" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170809 16:33:55.403" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:55.403" starttime="20170809 16:33:55.294" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:55.404" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:55.404" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-202"\nVERSION_ID="v1.99.8-202-gcd98f02"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170809 16:33:55.404" starttime="20170809 16:33:55.241" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:55.404" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-202"
VERSION_ID="v1.99.8-202-gcd98f02"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170809 16:33:55.404" starttime="20170809 16:33:55.404" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:55.405" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:55.405" starttime="20170809 16:33:55.405" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.414" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.413" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.412" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.405" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.232" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.232" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.232" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.226" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.414" starttime="20170809 16:33:55.226" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:33:55.415" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170809 16:33:55.415" starttime="20170809 16:33:55.415" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 16:33:55.416" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170809 16:33:55.416" starttime="20170809 16:33:55.416" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.419" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.419" starttime="20170809 16:33:55.419" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.419" starttime="20170809 16:33:55.418" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.421" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.421" starttime="20170809 16:33:55.420" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.421" starttime="20170809 16:33:55.420" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.422" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.422" starttime="20170809 16:33:55.422" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.422" starttime="20170809 16:33:55.421" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:55.423" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:55.423" starttime="20170809 16:33:55.423" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.424" starttime="20170809 16:33:55.422" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.424" starttime="20170809 16:33:55.418" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:55.424" starttime="20170809 16:33:55.417" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:55.424" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170809 16:33:55.425" starttime="20170809 16:33:55.424" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:55.540" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:55.540" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170809 16:33:56.978" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:56.978" starttime="20170809 16:33:55.476" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:56.978" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:56.978" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170809 16:33:56.978" starttime="20170809 16:33:55.425" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:56.979" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170809 16:33:56.979" starttime="20170809 16:33:56.979" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:56.980" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:56.980" starttime="20170809 16:33:56.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:56.986" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:56.986" starttime="20170809 16:33:56.985" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.986" starttime="20170809 16:33:56.985" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.986" starttime="20170809 16:33:56.980" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.986" starttime="20170809 16:33:55.416" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.986" starttime="20170809 16:33:55.416" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.986" starttime="20170809 16:33:55.416" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.986" starttime="20170809 16:33:55.414" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.987" starttime="20170809 16:33:55.414" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:33:56.988" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170809 16:33:56.988" starttime="20170809 16:33:56.987" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 16:33:56.988" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170809 16:33:56.988" starttime="20170809 16:33:56.988" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:56.991" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:56.992" starttime="20170809 16:33:56.991" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.992" starttime="20170809 16:33:56.991" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:56.993" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:56.993" starttime="20170809 16:33:56.992" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.993" starttime="20170809 16:33:56.992" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:56.994" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:56.994" starttime="20170809 16:33:56.994" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.994" starttime="20170809 16:33:56.993" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:56.995" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:56.995" starttime="20170809 16:33:56.995" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.996" starttime="20170809 16:33:56.994" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.996" starttime="20170809 16:33:56.990" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:56.996" starttime="20170809 16:33:56.990" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:56.996" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170809 16:33:56.997" starttime="20170809 16:33:56.996" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:57.111" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:57.111" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170809 16:33:57.261" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:57.261" starttime="20170809 16:33:57.052" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:57.261" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:57.261" level="INFO">${ret_values} = (u' 16:34:02 up 16 min,  load average: 1.08, 1.88, 1.49', u'', 0)</msg>
<status endtime="20170809 16:33:57.261" starttime="20170809 16:33:56.997" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:57.262" level="INFO">${stdout} =  16:34:02 up 16 min,  load average: 1.08, 1.88, 1.49</msg>
<status endtime="20170809 16:33:57.262" starttime="20170809 16:33:57.262" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:57.263" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:57.263" starttime="20170809 16:33:57.263" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.270" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.270" starttime="20170809 16:33:57.269" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.270" starttime="20170809 16:33:57.268" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.270" starttime="20170809 16:33:57.263" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.270" starttime="20170809 16:33:56.989" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.270" starttime="20170809 16:33:56.989" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.273" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.273" starttime="20170809 16:33:57.273" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.273" starttime="20170809 16:33:57.272" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.274" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.274" starttime="20170809 16:33:57.274" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.275" starttime="20170809 16:33:57.273" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.276" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.276" starttime="20170809 16:33:57.275" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.276" starttime="20170809 16:33:57.275" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.277" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.277" starttime="20170809 16:33:57.277" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.277" starttime="20170809 16:33:57.276" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.277" starttime="20170809 16:33:57.272" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.277" starttime="20170809 16:33:57.271" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:57.278" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170809 16:33:57.278" starttime="20170809 16:33:57.278" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:57.397" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:57.397" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170809 16:33:57.468" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:57.468" starttime="20170809 16:33:57.340" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:57.468" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:57.468" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 13:23:33 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170809 16:33:57.468" starttime="20170809 16:33:57.278" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:57.469" level="INFO">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 13:23:33 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170809 16:33:57.469" starttime="20170809 16:33:57.468" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:57.469" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:57.469" starttime="20170809 16:33:57.469" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.476" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.476" starttime="20170809 16:33:57.475" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.476" starttime="20170809 16:33:57.475" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.476" starttime="20170809 16:33:57.470" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.476" starttime="20170809 16:33:57.270" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.476" starttime="20170809 16:33:57.270" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.479" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.479" starttime="20170809 16:33:57.479" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.479" starttime="20170809 16:33:57.478" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.481" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.481" starttime="20170809 16:33:57.480" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.481" starttime="20170809 16:33:57.480" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.482" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.482" starttime="20170809 16:33:57.482" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.482" starttime="20170809 16:33:57.481" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.483" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.483" starttime="20170809 16:33:57.483" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.483" starttime="20170809 16:33:57.482" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.484" starttime="20170809 16:33:57.478" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.484" starttime="20170809 16:33:57.477" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:33:57.484" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170809 16:33:57.484" starttime="20170809 16:33:57.484" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:33:57.603" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:57.604" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170809 16:33:57.672" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:57.672" starttime="20170809 16:33:57.546" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:57.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:57.672" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170809 16:33:57.672" starttime="20170809 16:33:57.485" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:33:57.673" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170809 16:33:57.673" starttime="20170809 16:33:57.672" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:33:57.673" level="INFO">${stderr} = </msg>
<status endtime="20170809 16:33:57.673" starttime="20170809 16:33:57.673" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:33:57.680" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/20170809163337264407_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:57.679" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:57.679" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:57.674" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:57.477" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:57.476" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:56.989" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:56.987" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:56.987" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.680" starttime="20170809 16:33:55.225" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.681" starttime="20170809 16:33:55.225" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.681" starttime="20170809 16:33:55.180" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.681" starttime="20170809 16:33:55.177" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:57.681" starttime="20170809 16:33:55.177" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 16:33:57.683" starttime="20170809 16:33:57.682" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:33:57.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:33:57.683" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 16:33:57.683" starttime="20170809 16:33:57.682" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 16:33:57.683" starttime="20170809 16:33:57.683" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 16:33:57.773" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:57.773" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170809 16:33:57.831" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:33:57.850" level="INFO">${core_files} = /tmp/core_openpower-occ-c.1097
/tmp/core_openpower-occ-c.1563
/tmp/core_openpower-occ-c.1565
/tmp/core_openpower-occ-c.1567
/tmp/core_openpower-occ-c.1569
/tmp/core_openpower-occ-c.1571
/tmp/core_phos...</msg>
<msg timestamp="20170809 16:33:57.850" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 16:33:57.850" level="INFO">${rc} = 0</msg>
<status endtime="20170809 16:33:57.850" starttime="20170809 16:33:57.724" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170809 16:33:57.851" level="INFO">@{core_list} = [ /tmp/core_openpower-occ-c.1097 | /tmp/core_openpower-occ-c.1563 | /tmp/core_openpower-occ-c.1565 | /tmp/core_openpower-occ-c.1567 | /tmp/core_openpower-occ-c.1569 | /tmp/core_openpower-occ-c.1571 | ...</msg>
<status endtime="20170809 16:33:57.851" starttime="20170809 16:33:57.851" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170809 16:33:57.913" starttime="20170809 16:33:57.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170809 16:33:58.664" starttime="20170809 16:33:57.921" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:58.664" starttime="20170809 16:33:57.914" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:58.664" starttime="20170809 16:33:57.913" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:58.664" starttime="20170809 16:33:57.870" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:58.664" starttime="20170809 16:33:57.852" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_openpower-occ-c.1097" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 16:33:58.994" starttime="20170809 16:33:58.665" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170809 16:33:59.044" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:59.044" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1097'.</msg>
<msg timestamp="20170809 16:33:59.091" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:59.110" starttime="20170809 16:33:58.995" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:59.110" starttime="20170809 16:33:58.665" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1563" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 16:33:59.361" starttime="20170809 16:33:59.110" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170809 16:33:59.412" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:59.413" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1563'.</msg>
<msg timestamp="20170809 16:33:59.483" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:59.501" starttime="20170809 16:33:59.361" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:59.501" starttime="20170809 16:33:59.110" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1565" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 16:33:59.858" starttime="20170809 16:33:59.501" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170809 16:33:59.907" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:33:59.907" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1565'.</msg>
<msg timestamp="20170809 16:33:59.955" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:33:59.972" starttime="20170809 16:33:59.859" status="PASS"></status>
</kw>
<status endtime="20170809 16:33:59.972" starttime="20170809 16:33:59.501" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1567" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 16:34:00.210" starttime="20170809 16:33:59.973" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170809 16:34:00.266" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:34:00.267" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1567'.</msg>
<msg timestamp="20170809 16:34:00.323" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:34:00.341" starttime="20170809 16:34:00.211" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:00.341" starttime="20170809 16:33:59.972" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1569" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 16:34:00.581" starttime="20170809 16:34:00.342" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170809 16:34:00.634" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:34:00.635" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1569'.</msg>
<msg timestamp="20170809 16:34:00.693" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:34:00.713" starttime="20170809 16:34:00.581" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:00.713" starttime="20170809 16:34:00.341" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1571" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 16:34:01.048" starttime="20170809 16:34:00.714" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170809 16:34:01.102" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:34:01.103" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1571'.</msg>
<msg timestamp="20170809 16:34:01.171" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:34:01.191" starttime="20170809 16:34:01.048" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.191" starttime="20170809 16:34:00.713" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1653" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 16:34:01.447" starttime="20170809 16:34:01.191" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170809 16:34:01.499" level="INFO">path_separator=/
newline=

timeout=25 seconds
alias=bmc_connection
term_type=vt100
height=24
host=9.3.86.161
index=1
prompt=# 
encoding=UTF-8
port=22
width=80</msg>
<msg timestamp="20170809 16:34:01.500" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.1653'.</msg>
<msg timestamp="20170809 16:34:01.559" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 16:34:01.577" starttime="20170809 16:34:01.447" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.577" starttime="20170809 16:34:01.191" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.577" starttime="20170809 16:33:58.665" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.577" starttime="20170809 16:33:57.723" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.577" starttime="20170809 16:33:57.684" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.577" starttime="20170809 16:33:57.681" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.577" starttime="20170809 16:33:57.681" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.578" starttime="20170809 16:33:37.543" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.578" starttime="20170809 16:33:37.541" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.578" starttime="20170809 16:33:37.541" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.578" starttime="20170809 16:33:37.540" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170809 16:34:01.593" starttime="20170809 16:34:01.593" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.593" starttime="20170809 16:34:01.578" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.593" starttime="20170809 16:33:37.539" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.594" starttime="20170809 16:33:34.186" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.594" starttime="20170809 16:33:34.185" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:34:01.600" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:34:01.603" starttime="20170809 16:34:01.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:34:01.603" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:34:01.603" starttime="20170809 16:34:01.603" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:34:01.604" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:34:01.604" starttime="20170809 16:34:01.604" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:34:01.605" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:34:01.605" starttime="20170809 16:34:01.604" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:34:01.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:34:01.822" starttime="20170809 16:34:01.605" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:01.822" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:34:01.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:01.822" starttime="20170809 16:34:01.605" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:34:01.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:01.823" starttime="20170809 16:34:01.822" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:01.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:01.823" starttime="20170809 16:34:01.823" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.823" starttime="20170809 16:34:01.599" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.823" starttime="20170809 16:34:01.598" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.824" starttime="20170809 16:34:01.597" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:34:01.824" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:34:01.824" starttime="20170809 16:34:01.824" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:01.826" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:01.826" starttime="20170809 16:34:01.826" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:01.827" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:01.827" starttime="20170809 16:34:01.827" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.827" starttime="20170809 16:34:01.826" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.828" starttime="20170809 16:34:01.825" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.828" starttime="20170809 16:34:01.824" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:34:01.943" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:34:01.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:01.944" starttime="20170809 16:34:01.828" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:01.945" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:01.945" starttime="20170809 16:34:01.945" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:01.946" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:01.946" starttime="20170809 16:34:01.946" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.946" starttime="20170809 16:34:01.946" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.947" starttime="20170809 16:34:01.944" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.947" starttime="20170809 16:34:01.944" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:34:01.947" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:34:01.947" starttime="20170809 16:34:01.947" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:01.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:01.947" starttime="20170809 16:34:01.597" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:01.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:01.948" starttime="20170809 16:34:01.948" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:34:01.949" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:34:01.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:34:01.949" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:34:01.949" starttime="20170809 16:34:01.949" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:01.950" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:34:01.950" starttime="20170809 16:34:01.596" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:01.950" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:34:01.950" starttime="20170809 16:34:01.596" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170809 16:34:01.951" starttime="20170809 16:34:01.951" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:01.951" level="INFO">${status} = True</msg>
<status endtime="20170809 16:34:01.951" starttime="20170809 16:34:01.951" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:01.952" starttime="20170809 16:34:01.595" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:01.952" level="INFO">${resp} = True</msg>
<status endtime="20170809 16:34:01.952" starttime="20170809 16:34:01.595" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 16:34:01.954" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170809 16:34:01.954" starttime="20170809 16:34:01.953" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:34:01.955" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170809 16:34:01.955" starttime="20170809 16:34:01.955" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:34:01.958" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:34:01.959" starttime="20170809 16:34:01.958" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:34:01.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:34:01.959" starttime="20170809 16:34:01.959" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:34:01.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:34:01.960" starttime="20170809 16:34:01.960" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:34:01.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:34:01.961" starttime="20170809 16:34:01.961" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:34:02.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:34:02.268" starttime="20170809 16:34:01.962" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:02.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:34:02.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:02.268" starttime="20170809 16:34:01.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:34:02.269" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:02.269" starttime="20170809 16:34:02.268" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:02.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:02.269" starttime="20170809 16:34:02.269" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.269" starttime="20170809 16:34:01.957" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.270" starttime="20170809 16:34:01.957" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.270" starttime="20170809 16:34:01.956" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:34:02.270" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170809 16:34:02.270" starttime="20170809 16:34:02.270" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:34:02.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:34:02.271" starttime="20170809 16:34:02.271" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170809 16:34:02.271" starttime="20170809 16:34:02.271" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:02.273" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170809 16:34:02.273" starttime="20170809 16:34:02.272" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:02.274" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170809 16:34:02.274" starttime="20170809 16:34:02.274" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.274" starttime="20170809 16:34:02.273" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.275" starttime="20170809 16:34:02.272" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:34:02.565" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 16:34:02.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:02.565" starttime="20170809 16:34:02.275" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:02.566" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:02.566" starttime="20170809 16:34:02.566" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:02.567" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:02.567" starttime="20170809 16:34:02.567" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.568" starttime="20170809 16:34:02.567" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.568" starttime="20170809 16:34:02.565" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:34:02.568" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:34:02.568" starttime="20170809 16:34:02.568" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:02.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:02.569" starttime="20170809 16:34:01.955" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:02.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:02.569" starttime="20170809 16:34:02.569" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 16:34:02.570" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:34:02.570" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:34:02.570" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170809 16:34:02.570" starttime="20170809 16:34:02.569" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:02.570" starttime="20170809 16:34:01.954" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170809 16:34:02.571" starttime="20170809 16:34:02.570" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:34:02.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:34:02.576" starttime="20170809 16:34:02.575" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:34:02.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:34:02.577" starttime="20170809 16:34:02.576" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:34:02.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:34:02.577" starttime="20170809 16:34:02.577" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:34:02.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:34:02.578" starttime="20170809 16:34:02.578" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:34:04.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:34:04.254" starttime="20170809 16:34:02.579" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:04.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:34:04.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:04.254" starttime="20170809 16:34:02.578" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:34:04.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:04.255" starttime="20170809 16:34:04.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:04.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:04.256" starttime="20170809 16:34:04.255" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:04.256" starttime="20170809 16:34:02.575" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:04.256" starttime="20170809 16:34:02.574" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:04.257" starttime="20170809 16:34:02.574" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:34:04.257" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:34:04.258" starttime="20170809 16:34:04.257" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:04.261" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:04.261" starttime="20170809 16:34:04.260" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:04.262" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:04.262" starttime="20170809 16:34:04.262" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:04.262" starttime="20170809 16:34:04.261" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:04.262" starttime="20170809 16:34:04.259" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:04.262" starttime="20170809 16:34:04.258" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:34:10.024" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:34:10.024" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:10.024" starttime="20170809 16:34:04.263" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:10.026" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:10.026" starttime="20170809 16:34:10.026" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:10.027" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:10.027" starttime="20170809 16:34:10.027" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.027" starttime="20170809 16:34:10.026" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.028" starttime="20170809 16:34:10.025" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.028" starttime="20170809 16:34:10.025" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:34:10.028" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:34:10.028" starttime="20170809 16:34:10.028" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:10.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:10.028" starttime="20170809 16:34:02.573" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:10.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:10.029" starttime="20170809 16:34:10.029" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:34:10.030" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:34:10.030" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:34:10.030" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170809 16:34:10.030" starttime="20170809 16:34:10.029" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:10.030" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 16:34:10.030" starttime="20170809 16:34:02.572" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:10.030" level="INFO">${power_state} = On</msg>
<status endtime="20170809 16:34:10.030" starttime="20170809 16:34:02.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 16:34:10.031" level="FAIL">Off != On</msg>
<status endtime="20170809 16:34:10.031" starttime="20170809 16:34:10.031" status="FAIL"></status>
</kw>
<status endtime="20170809 16:34:10.031" starttime="20170809 16:34:02.572" status="FAIL"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:34:10.035" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:34:10.036" starttime="20170809 16:34:10.035" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:34:10.036" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:34:10.036" starttime="20170809 16:34:10.036" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:34:10.037" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:34:10.037" starttime="20170809 16:34:10.037" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:34:10.038" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:34:10.038" starttime="20170809 16:34:10.037" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:34:10.769" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:34:10.770" starttime="20170809 16:34:10.038" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:10.770" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:34:10.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:10.770" starttime="20170809 16:34:10.038" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:34:10.770" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:10.771" starttime="20170809 16:34:10.770" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:10.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:10.771" starttime="20170809 16:34:10.771" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.772" starttime="20170809 16:34:10.034" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.772" starttime="20170809 16:34:10.034" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.772" starttime="20170809 16:34:10.033" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:34:10.772" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:34:10.772" starttime="20170809 16:34:10.772" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:10.774" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:10.774" starttime="20170809 16:34:10.774" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:10.776" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:10.776" starttime="20170809 16:34:10.775" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.776" starttime="20170809 16:34:10.775" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.776" starttime="20170809 16:34:10.773" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:10.776" starttime="20170809 16:34:10.773" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:34:11.141" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:34:11.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:11.141" starttime="20170809 16:34:10.776" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:11.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:11.143" starttime="20170809 16:34:11.143" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:11.144" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:11.145" starttime="20170809 16:34:11.144" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:11.145" starttime="20170809 16:34:11.144" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:11.145" starttime="20170809 16:34:11.142" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:11.145" starttime="20170809 16:34:11.142" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:34:11.145" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:34:11.145" starttime="20170809 16:34:11.145" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:11.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:11.146" starttime="20170809 16:34:10.032" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:11.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:11.146" starttime="20170809 16:34:11.146" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:34:11.147" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:34:11.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:34:11.147" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170809 16:34:11.147" starttime="20170809 16:34:11.146" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:11.147" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170809 16:34:11.147" starttime="20170809 16:34:10.032" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:11.147" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170809 16:34:11.147" starttime="20170809 16:34:10.031" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170809 16:34:11.148" level="FAIL">Off != Quiesced</msg>
<status endtime="20170809 16:34:11.148" starttime="20170809 16:34:11.148" status="FAIL"></status>
</kw>
<status endtime="20170809 16:34:11.148" starttime="20170809 16:34:02.571" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:34:21.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:34:21.154" starttime="20170809 16:34:21.153" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:34:21.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:34:21.155" starttime="20170809 16:34:21.154" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:34:21.155" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:34:21.155" starttime="20170809 16:34:21.155" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:34:21.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:34:21.156" starttime="20170809 16:34:21.155" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:34:21.494" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:34:21.494" starttime="20170809 16:34:21.157" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:21.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:34:21.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:21.495" starttime="20170809 16:34:21.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:34:21.495" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:21.495" starttime="20170809 16:34:21.495" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:21.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:21.496" starttime="20170809 16:34:21.496" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.496" starttime="20170809 16:34:21.153" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.496" starttime="20170809 16:34:21.152" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.496" starttime="20170809 16:34:21.152" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:34:21.497" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 16:34:21.497" starttime="20170809 16:34:21.497" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:21.499" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:21.499" starttime="20170809 16:34:21.498" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:21.500" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:21.500" starttime="20170809 16:34:21.500" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.500" starttime="20170809 16:34:21.499" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.500" starttime="20170809 16:34:21.498" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.500" starttime="20170809 16:34:21.497" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:34:21.850" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 16:34:21.851" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:21.851" starttime="20170809 16:34:21.501" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:21.852" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:21.852" starttime="20170809 16:34:21.852" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:21.853" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:21.853" starttime="20170809 16:34:21.853" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.853" starttime="20170809 16:34:21.853" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.854" starttime="20170809 16:34:21.851" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.854" starttime="20170809 16:34:21.851" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:34:21.854" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:34:21.854" starttime="20170809 16:34:21.854" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:21.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:21.854" starttime="20170809 16:34:21.151" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:21.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:21.855" starttime="20170809 16:34:21.855" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:34:21.856" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:34:21.856" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:34:21.856" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170809 16:34:21.856" starttime="20170809 16:34:21.855" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:21.856" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 16:34:21.856" starttime="20170809 16:34:21.150" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:21.856" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 16:34:21.856" starttime="20170809 16:34:21.150" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 16:34:21.857" starttime="20170809 16:34:21.857" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:21.857" starttime="20170809 16:34:21.150" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:34:21.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 16:34:21.861" starttime="20170809 16:34:21.860" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:34:21.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 16:34:21.862" starttime="20170809 16:34:21.862" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:34:21.863" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 16:34:21.863" starttime="20170809 16:34:21.862" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:34:21.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 16:34:21.863" starttime="20170809 16:34:21.863" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:34:22.422" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 16:34:22.422" starttime="20170809 16:34:21.864" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:34:22.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:22.422" starttime="20170809 16:34:21.864" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:34:22.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:22.423" starttime="20170809 16:34:22.422" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:22.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:22.423" starttime="20170809 16:34:22.423" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.423" starttime="20170809 16:34:21.860" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.424" starttime="20170809 16:34:21.859" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.424" starttime="20170809 16:34:21.859" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:34:22.424" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 16:34:22.424" starttime="20170809 16:34:22.424" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:22.426" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:22.426" starttime="20170809 16:34:22.426" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:22.427" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 16:34:22.427" starttime="20170809 16:34:22.427" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.427" starttime="20170809 16:34:22.426" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.428" starttime="20170809 16:34:22.425" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.428" starttime="20170809 16:34:22.425" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:34:22.783" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:34:22.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:22.783" starttime="20170809 16:34:22.428" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:34:22.785" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:22.785" starttime="20170809 16:34:22.784" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:34:22.786" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 16:34:22.786" starttime="20170809 16:34:22.786" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.786" starttime="20170809 16:34:22.785" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.786" starttime="20170809 16:34:22.784" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.786" starttime="20170809 16:34:22.783" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:34:22.787" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 16:34:22.787" starttime="20170809 16:34:22.787" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 16:34:22.787" starttime="20170809 16:34:21.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:34:22.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 16:34:22.788" starttime="20170809 16:34:22.787" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:34:22.788" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:34:22.788" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:34:22.789" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170809 16:34:22.789" starttime="20170809 16:34:22.788" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.789" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170809 16:34:22.789" starttime="20170809 16:34:21.858" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.789" level="INFO">${host_state} = Off</msg>
<status endtime="20170809 16:34:22.789" starttime="20170809 16:34:21.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 16:34:22.790" starttime="20170809 16:34:22.789" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.790" starttime="20170809 16:34:21.149" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.790" starttime="20170809 16:34:02.571" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.790" starttime="20170809 16:34:01.953" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170809 16:34:22.790" level="INFO">HOST is recovered from quiesced state</msg>
<status endtime="20170809 16:34:22.791" starttime="20170809 16:34:22.790" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.791" starttime="20170809 16:34:01.952" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.791" starttime="20170809 16:34:01.952" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.791" starttime="20170809 16:34:01.595" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.791" starttime="20170809 16:34:01.594" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 16:34:22.807" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170809 16:34:22.807" starttime="20170809 16:34:22.792" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 16:34:22.808" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/7737/obmc-robot/logs/20170809163337264407_TestsTestBasicPoweron/20170809163337264407_PowerOnTest/</msg>
<status endtime="20170809 16:34:22.808" starttime="20170809 16:34:22.807" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170809 16:34:22.809" starttime="20170809 16:34:22.808" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170809 16:34:22.810" starttime="20170809 16:34:22.809" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:34:22.810" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs"&gt;/tmp/fspcibld/7737/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170809 16:34:22.810" starttime="20170809 16:34:22.810" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:34:22.811" level="INFO">File '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170809 16:34:22.811" starttime="20170809 16:34:22.811" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.812" level="INFO">${exist} = True</msg>
<status endtime="20170809 16:34:22.812" starttime="20170809 16:34:22.811" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170809 16:34:22.812" starttime="20170809 16:34:22.812" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170809 16:34:22.813" starttime="20170809 16:34:22.812" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:34:22.814" level="INFO">${cur_time} = 2017-08-09 16:34:22:813509</msg>
<status endtime="20170809 16:34:22.814" starttime="20170809 16:34:22.813" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:34:22.814" level="INFO">${cur_time} = 20170809163422813509</msg>
<status endtime="20170809 16:34:22.814" starttime="20170809 16:34:22.814" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.815" level="INFO">${cur_time} = 20170809163422813509</msg>
<status endtime="20170809 16:34:22.815" starttime="20170809 16:34:22.813" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:34:22.815" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7737/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 16:34:22.816" starttime="20170809 16:34:22.815" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.816" starttime="20170809 16:34:22.791" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.816" starttime="20170809 16:33:33.870" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170809 16:34:22.817" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:34:22.817" starttime="20170809 16:34:22.817" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170809 16:34:22.819" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:34:22.819" starttime="20170809 16:34:22.818" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.819" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 16:34:22.819" starttime="20170809 16:34:22.817" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:34:22.820" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 16:34:22.820" starttime="20170809 16:34:22.820" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:34:22.821" starttime="20170809 16:34:22.820" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:34:22.827" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:34:22.840" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 16:34:22.840" level="INFO">${output} = /tmp/fspcibld/7737/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 16:34:22.840" starttime="20170809 16:34:22.821" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 16:34:22.843" starttime="20170809 16:34:22.842" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 16:34:22.844" starttime="20170809 16:34:22.843" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:34:22.845" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 16:34:22.845" starttime="20170809 16:34:22.844" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.845" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 16:34:22.845" starttime="20170809 16:34:22.819" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:34:22.846" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170809 16:34:22.846" starttime="20170809 16:34:22.846" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:34:22.847" starttime="20170809 16:34:22.846" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170809 16:34:22.850" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:34:22.872" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 16:34:22.872" level="INFO">${os_con_pid} = </msg>
<status endtime="20170809 16:34:22.874" starttime="20170809 16:34:22.847" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170809 16:34:22.887" starttime="20170809 16:34:22.884" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:34:22.888" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170809 16:34:22.889" starttime="20170809 16:34:22.888" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 16:34:22.890" starttime="20170809 16:34:22.889" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:34:22.890" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 16:34:22.890" level="INFO">${output} = None</msg>
<status endtime="20170809 16:34:22.891" starttime="20170809 16:34:22.890" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 16:34:22.891" starttime="20170809 16:34:22.891" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170809 16:34:22.897" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/7737/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/7737/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170809 16:34:22.897" starttime="20170809 16:34:22.894" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.897" starttime="20170809 16:34:22.892" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.897" starttime="20170809 16:34:22.891" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:34:22.898" level="INFO">${output} = </msg>
<status endtime="20170809 16:34:22.898" starttime="20170809 16:34:22.898" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170809 16:34:22.899" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170809 16:34:22.899" starttime="20170809 16:34:22.898" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170809 16:34:22.963" starttime="20170809 16:34:22.899" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.969" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 16:34:22.970" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170809 16:34:22.970" starttime="20170809 16:34:22.899" status="PASS"></status>
</kw>
<msg timestamp="20170809 16:34:22.975" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170809 16:34:22.975" starttime="20170809 16:34:22.816" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170809 16:34:22.985" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85089|secure|Booting in non-secure mode.
  3.85090|secure|SecureROM invalid - skipping functionality
  6.24609|ISTEP  6. 5 - host_init_fsi
  6.32062|ISTEP  6. 6 - host_set_ipl_parms
  6.34161|ISTEP  6. 7 - host_discover_targets
 11.54892|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 11.54892|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 11.59659|ISTEP  6. 8 - host_update_master_tpm
 11.60481|SECURE|Security Access Bit&gt; 0x0000000000000000
 11.60482|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 11.60493|ISTEP  6. 9 - host_gard
 11.64110|ISTEP  6.10 - host_revert_sbe_mcs_setup
 11.66915|ISTEP  6.11 - host_start_occ_xstop_handler
 11.67019|ISTEP  6.12 - host_voltage_config
 11.70512|ISTEP  7. 2 - mss_volt
 12.33064|ISTEP  7. 3 - mss_freq
 12.44277|ISTEP  7. 4 - mss_eff_config
 15.36233|ISTEP  7. 5 - mss_attr_update
 15.37014|ISTEP  8. 1 - host_slave_sbe_config
 15.40214|ISTEP  8. 2 - host_setup_sbe
 15.40539|ISTEP  8. 3 - host_cbs_start
 15.41319|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 22.02575|ISTEP  8. 5 - host_attnlisten_proc
 22.02697|ISTEP  8. 6 - host_p9_fbc_eff_config
 22.03410|ISTEP  8. 7 - host_p9_eff_config_links
 22.04292|ISTEP  8. 8 - proc_attr_update
 22.04434|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 22.07297|ISTEP  8.10 - proc_xbus_scominit
 23.60231|ISTEP  8.11 - proc_xbus_enable_ridi
 23.60678|ISTEP  9. 1 - fabric_erepair
 23.61605|ISTEP  9. 2 - fabric_io_dccal
 24.27881|ISTEP  9. 3 - fabric_pre_trainadv
 24.28375|ISTEP  9. 4 - fabric_io_run_training
 24.40503|ISTEP  9. 5 - fabric_post_trainadv
 24.40911|ISTEP  9. 6 - proc_smp_link_layer
 24.41280|ISTEP  9. 7 - proc_fab_iovalid
 24.42799|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.43511|ISTEP 10. 1 - proc_build_smp
 24.94969|ISTEP 10. 2 - host_slave_sbe_update
 25.31992|ISTEP 10. 3 - host_set_voltages
 25.34544|ISTEP 10. 4 - proc_cen_ref_clk_enable
 25.35489|ISTEP 10. 5 - proc_enable_osclite
 25.35586|ISTEP 10. 6 - proc_chiplet_scominit
 25.39495|ISTEP 10. 7 - proc_abus_scominit
 25.41257|ISTEP 10. 8 - proc_obus_scominit
 25.50998|ISTEP 10. 9 - proc_npu_scominit
 25.53067|ISTEP 10.10 - proc_pcie_scominit
 25.57070|ISTEP 10.11 - proc_scomoverride_chiplets
 25.57197|ISTEP 10.12 - proc_chiplet_enable_ridi
 25.57562|ISTEP 10.13 - host_rng_bist
 25.57963|ISTEP 10.14 - host_update_redundant_tpm
 25.64394|ISTEP 11. 1 - host_prd_hwreconfig
 25.65294|ISTEP 12. 1 - mss_getecid
 25.65754|ISTEP 13. 1 - host_disable_memvolt
 25.84494|ISTEP 13. 2 - mem_pll_reset
 25.85556|ISTEP 13. 3 - mem_pll_initf
 25.92800|ISTEP 13. 4 - mem_pll_setup
 25.95487|ISTEP 13. 6 - mem_startclocks
 25.97215|ISTEP 13. 7 - host_enable_memvolt
 25.97388|ISTEP 13. 8 - mss_scominit
 26.31810|ISTEP 13. 9 - mss_ddr_phy_reset
 26.38443|ISTEP 13.10 - mss_draminit
 26.55836|ISTEP 13.11 - mss_draminit_training
 26.98608|ISTEP 13.12 - mss_draminit_trainadv
 26.98775|ISTEP 13.13 - mss_draminit_mc
 27.01013|ISTEP 14. 1 - mss_memdiag
 37.63710|ISTEP 14. 2 - mss_thermal_init
 37.64628|ISTEP 14. 3 - proc_pcie_config
 37.65793|ISTEP 14. 4 - mss_power_cleanup
 37.66124|ISTEP 14. 5 - proc_setup_bars
 37.68743|ISTEP 14. 6 - proc_htm_setup
 37.69485|ISTEP 14. 7 - proc_exit_cache_contained
 37.70684|ISTEP 15. 1 - host_build_stop_image
 41.07374|ISTEP 15. 2 - proc_set_pba_homer_bar
 41.07740|ISTEP 15. 3 - host_establish_ex_chiplet
 41.11334|ISTEP 15. 4 - host_start_stop_engine
 41.21957|ISTEP 16. 1 - host_activate_master
 42.28109|ISTEP 16. 2 - host_activate_slave_cores
 42.79710|ISTEP 16. 3 - host_secure_rng
 42.80132|ISTEP 16. 4 - mss_scrub
 42.84294|ISTEP 16. 5 - host_ipl_complete
 42.84156|ISTEP 16. 6 - host_load_io_ppe
 42.84437|ISTEP 18.11 - proc_tod_setup
 42.89150|ISTEP 18.12 - proc_tod_init
 42.90115|ISTEP 20. 1 - host_load_payload
 43.15363|ISTEP 20. 2 - host_load_hdat
 46.92432|ISTEP 21. 1 - host_runtime_setup
 48.82248|================================================
 48.82537|Error reported by lpc (0x2400) PLID 0x90000019
 48.82708|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 48.82709|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 48.82709|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 48.82882|  UserData1  LPC Address : 0x0ffffe0000000002
 48.82882|  UserData2  LPC Transaction Type : 0x0000000000000200
 48.82883|------------------------------------------------
 48.82883|  Callout type             : Procedure Callout
 48.82884|  Procedure                : EPUB_PRC_HB_CODE
 48.82884|  Priority                 : SRCI_PRIORITY_HIGH
 48.82885|------------------------------------------------
 48.82885|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 48.82886|================================================
 48.83064|System shutting down with error status 0x9000001A
 48.83066|================================================
 48.83067|Error reported by initservice (0x0500) PLID 0x9000001A
 48.84767|  Initialization Service launched a function and the task returned an error.
 48.84767|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 48.84768|  ReasonCode 0x0506 WAIT_FN_FAILED
 48.84768|  UserData1  task id or task return code : 0x0000000000000267
 48.84769|  UserData2  returned status from task : 0x0000000000000001
 48.84770|------------------------------------------------
 48.84770|  Callout type             : Procedure Callout
 48.84771|  Procedure                : EPUB_PRC_HB_CODE
 48.84771|  Priority                 : SRCI_PRIORITY_HIGH
 48.84772|------------------------------------------------
 48.84772|  host_runtime_setup
 48.84773|------------------------------------------------
 48.84773|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 48.84774|================================================


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85105|secure|Booting in non-secure mode.
  3.85106|secure|SecureROM invalid - skipping functionality
  4.99972|ISTEP  6. 5 - host_init_fsi
  5.08205|ISTEP  6. 6 - host_set_ipl_parms
  5.10068|ISTEP  6. 7 - host_discover_targets
  5.51982|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.51983|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.55386|ISTEP  6. 8 - host_update_master_tpm
  5.56116|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.56117|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.56128|ISTEP  6. 9 - host_gard
  5.59291|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.61261|ISTEP  6.11 - host_start_occ_xstop_handler
  5.61337|ISTEP  6.12 - host_voltage_config
  5.64778|ISTEP  7. 2 - mss_volt
  5.96213|ISTEP  7. 3 - mss_freq
  6.07265|ISTEP  7. 4 - mss_eff_config
  8.99232|ISTEP  7. 5 - mss_attr_update
  8.99957|ISTEP  8. 1 - host_slave_sbe_config
  9.03067|ISTEP  8. 2 - host_setup_sbe
  9.03371|ISTEP  8. 3 - host_cbs_start
  9.04150|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 15.65687|ISTEP  8. 5 - host_attnlisten_proc
 15.65765|ISTEP  8. 6 - host_p9_fbc_eff_config
 15.66741|ISTEP  8. 7 - host_p9_eff_config_links
 15.67567|ISTEP  8. 8 - proc_attr_update
 15.67697|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 15.70477|ISTEP  8.10 - proc_xbus_scominit
 17.23528|ISTEP  8.11 - proc_xbus_enable_ridi
 17.24021|ISTEP  9. 1 - fabric_erepair
 17.24982|ISTEP  9. 2 - fabric_io_dccal
 17.91406|ISTEP  9. 3 - fabric_pre_trainadv
 17.91871|ISTEP  9. 4 - fabric_io_run_training
 18.04019|ISTEP  9. 5 - fabric_post_trainadv
 18.04467|ISTEP  9. 6 - proc_smp_link_layer
 18.04822|ISTEP  9. 7 - proc_fab_iovalid
 18.06348|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 18.07053|ISTEP 10. 1 - proc_build_smp
 18.20008|ISTEP 10. 2 - host_slave_sbe_update
 18.52466|ISTEP 10. 3 - host_set_voltages
 18.54723|ISTEP 10. 4 - proc_cen_ref_clk_enable
 18.55192|ISTEP 10. 5 - proc_enable_osclite
 18.55311|ISTEP 10. 6 - proc_chiplet_scominit
 18.59060|ISTEP 10. 7 - proc_abus_scominit
 18.59741|ISTEP 10. 8 - proc_obus_scominit
 18.68088|ISTEP 10. 9 - proc_npu_scominit
 18.70143|ISTEP 10.10 - proc_pcie_scominit
 18.74193|ISTEP 10.11 - proc_scomoverride_chiplets
 18.74352|ISTEP 10.12 - proc_chiplet_enable_ridi
 18.74567|ISTEP 10.13 - host_rng_bist
 18.74955|ISTEP 10.14 - host_update_redundant_tpm
 18.81364|ISTEP 11. 1 - host_prd_hwreconfig
 18.81756|ISTEP 12. 1 - mss_getecid
 18.83279|ISTEP 13. 1 - host_disable_memvolt
 18.92732|ISTEP 13. 2 - mem_pll_reset
 18.93792|ISTEP 13. 3 - mem_pll_initf
 18.96886|ISTEP 13. 4 - mem_pll_setup
 18.99384|ISTEP 13. 6 - mem_startclocks
 19.01073|ISTEP 13. 7 - host_enable_memvolt
 19.01242|ISTEP 13. 8 - mss_scominit
 19.38163|ISTEP 13. 9 - mss_ddr_phy_reset
 19.45112|ISTEP 13.10 - mss_draminit
 19.62311|ISTEP 13.11 - mss_draminit_training
 20.03612|ISTEP 13.12 - mss_draminit_trainadv
 20.03787|ISTEP 13.13 - mss_draminit_mc
 20.05974|ISTEP 14. 1 - mss_memdiag
 71.36645|ISTEP 14. 2 - mss_thermal_init
 71.37507|ISTEP 14. 3 - proc_pcie_config
 71.38674|ISTEP 14. 4 - mss_power_cleanup
 71.38993|ISTEP 14. 5 - proc_setup_bars
 71.41793|ISTEP 14. 6 - proc_htm_setup
 71.42571|ISTEP 14. 7 - proc_exit_cache_contained
 71.43512|ISTEP 15. 1 - host_build_stop_image
 74.58268|ISTEP 15. 2 - proc_set_pba_homer_bar
 74.58683|ISTEP 15. 3 - host_establish_ex_chiplet
 74.62457|ISTEP 15. 4 - host_start_stop_engine
 74.72849|ISTEP 16. 1 - host_activate_master
 75.80105|ISTEP 16. 2 - host_activate_slave_cores
 76.28805|ISTEP 16. 3 - host_secure_rng
 76.30515|ISTEP 16. 4 - mss_scrub
 76.31196|ISTEP 16. 5 - host_ipl_complete
 76.34662|ISTEP 16. 6 - host_load_io_ppe
 76.34813|ISTEP 18.11 - proc_tod_setup
 76.39339|ISTEP 18.12 - proc_tod_init
 76.40657|ISTEP 20. 1 - host_load_payload
 76.78261|ISTEP 20. 2 - host_load_hdat
 80.54028|ISTEP 21. 1 - host_runtime_setup
 81.80654|================================================
 81.80819|Error reported by lpc (0x2400) PLID 0x90000030
 81.80988|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 81.80988|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 81.80989|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 81.81158|  UserData1  LPC Address : 0x0ffffe0000000002
 81.81159|  UserData2  LPC Transaction Type : 0x0000000000000200
 81.81159|------------------------------------------------
 81.81160|  Callout type             : Procedure Callout
 81.81160|  Procedure                : EPUB_PRC_HB_CODE
 81.81161|  Priority                 : SRCI_PRIORITY_HIGH
 81.81161|------------------------------------------------
 81.81162|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 81.81162|================================================
 81.82778|System shutting down with error status 0x90000031
 81.82743|================================================
 81.82744|Error reported by initservice (0x0500) PLID 0x90000031
 81.82989|  Initialization Service launched a function and the task returned an error.
 81.82989|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 81.82990|  ReasonCode 0x0506 WAIT_FN_FAILED
 81.82990|  UserData1  task id or task return code : 0x0000000000000267
 81.82991|  UserData2  returned status from task : 0x0000000000000001
 81.82991|------------------------------------------------
 81.82992|  Callout type             : Procedure Callout
 81.82992|  Procedure                : EPUB_PRC_HB_CODE
 81.82993|  Priority                 : SRCI_PRIORITY_HIGH
 81.82993|------------------------------------------------
 81.82994|  host_runtime_setup
 81.82994|------------------------------------------------
 81.82995|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 81.82995|================================================


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85101|secure|Booting in non-secure mode.
  3.85102|secure|SecureROM invalid - skipping functionality
  4.94275|ISTEP  6. 5 - host_init_fsi
  5.04651|ISTEP  6. 6 - host_set_ipl_parms
  5.06713|ISTEP  6. 7 - host_discover_targets
  5.53221|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.53222|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.55676|ISTEP  6. 8 - host_update_master_tpm
  5.56387|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.56387|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.56398|ISTEP  6. 9 - host_gard
  5.59543|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.60828|ISTEP  6.11 - host_start_occ_xstop_handler
  5.60904|ISTEP  6.12 - host_voltage_config
  5.64332|ISTEP  7. 2 - mss_volt
  5.96768|ISTEP  7. 3 - mss_freq
  6.07972|ISTEP  7. 4 - mss_eff_config
  9.01625|ISTEP  7. 5 - mss_attr_update
  9.02483|ISTEP  8. 1 - host_slave_sbe_config
  9.05570|ISTEP  8. 2 - host_setup_sbe
  9.05878|ISTEP  8. 3 - host_cbs_start
  9.06650|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 15.67897|ISTEP  8. 5 - host_attnlisten_proc
 15.67959|ISTEP  8. 6 - host_p9_fbc_eff_config
 15.68701|ISTEP  8. 7 - host_p9_eff_config_links
 15.69803|ISTEP  8. 8 - proc_attr_update
 15.70004|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 15.72809|ISTEP  8.10 - proc_xbus_scominit
 17.24979|ISTEP  8.11 - proc_xbus_enable_ridi
 17.25445|ISTEP  9. 1 - fabric_erepair
 17.26405|ISTEP  9. 2 - fabric_io_dccal
 17.92809|ISTEP  9. 3 - fabric_pre_trainadv
 17.93233|ISTEP  9. 4 - fabric_io_run_training
 18.05341|ISTEP  9. 5 - fabric_post_trainadv
 18.05749|ISTEP  9. 6 - proc_smp_link_layer
 18.06180|ISTEP  9. 7 - proc_fab_iovalid
 18.07858|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 18.08634|ISTEP 10. 1 - proc_build_smp
 18.21300|ISTEP 10. 2 - host_slave_sbe_update
 18.53896|ISTEP 10. 3 - host_set_voltages
 18.56262|ISTEP 10. 4 - proc_cen_ref_clk_enable
 18.56692|ISTEP 10. 5 - proc_enable_osclite
 18.56758|ISTEP 10. 6 - proc_chiplet_scominit
 18.60485|ISTEP 10. 7 - proc_abus_scominit
 18.61181|ISTEP 10. 8 - proc_obus_scominit
 18.69606|ISTEP 10. 9 - proc_npu_scominit
 18.71668|ISTEP 10.10 - proc_pcie_scominit
 18.75606|ISTEP 10.11 - proc_scomoverride_chiplets
 18.75723|ISTEP 10.12 - proc_chiplet_enable_ridi
 18.75924|ISTEP 10.13 - host_rng_bist
 18.76298|ISTEP 10.14 - host_update_redundant_tpm
 18.82533|ISTEP 11. 1 - host_prd_hwreconfig
 18.82929|ISTEP 12. 1 - mss_getecid
 18.83377|ISTEP 13. 1 - host_disable_memvolt
 18.93366|ISTEP 13. 2 - mem_pll_reset
 18.94403|ISTEP 13. 3 - mem_pll_initf
 18.97450|ISTEP 13. 4 - mem_pll_setup
 18.99962|ISTEP 13. 6 - mem_startclocks
 19.01698|ISTEP 13. 7 - host_enable_memvolt
 19.01865|ISTEP 13. 8 - mss_scominit
 19.36402|ISTEP 13. 9 - mss_ddr_phy_reset
 19.43100|ISTEP 13.10 - mss_draminit
 19.60244|ISTEP 13.11 - mss_draminit_training
 20.01204|ISTEP 13.12 - mss_draminit_trainadv
 20.01381|ISTEP 13.13 - mss_draminit_mc
 20.04123|ISTEP 14. 1 - mss_memdiag
 41.27271|ISTEP 14. 2 - mss_thermal_init
 41.28158|ISTEP 14. 3 - proc_pcie_config
 41.29320|ISTEP 14. 4 - mss_power_cleanup
 41.29803|ISTEP 14. 5 - proc_setup_bars
 41.32429|ISTEP 14. 6 - proc_htm_setup
 41.33286|ISTEP 14. 7 - proc_exit_cache_contained
 41.34255|ISTEP 15. 1 - host_build_stop_image
 44.46433|ISTEP 15. 2 - proc_set_pba_homer_bar
 44.46848|ISTEP 15. 3 - host_establish_ex_chiplet
 44.47688|ISTEP 15. 4 - host_start_stop_engine
 44.60107|ISTEP 16. 1 - host_activate_master
 45.65419|ISTEP 16. 2 - host_activate_slave_cores
 46.10763|ISTEP 16. 3 - host_secure_rng
 46.11508|ISTEP 16. 4 - mss_scrub
 46.15088|ISTEP 16. 5 - host_ipl_complete
 46.16654|ISTEP 16. 6 - host_load_io_ppe
 46.14592|ISTEP 18.11 - proc_tod_setup
 46.20176|ISTEP 18.12 - proc_tod_init
 46.20633|ISTEP 20. 1 - host_load_payload
 46.45525|ISTEP 20. 2 - host_load_hdat
 50.19555|ISTEP 21. 1 - host_runtime_setup
 51.56484|================================================
 51.56663|Error reported by lpc (0x2400) PLID 0x90000044
 51.56841|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 51.56842|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 51.56842|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 51.57021|  UserData1  LPC Address : 0x0ffffe0000000002
 51.57021|  UserData2  LPC Transaction Type : 0x0000000000000200
 51.57022|------------------------------------------------
 51.57023|  Callout type             : Procedure Callout
 51.57023|  Procedure                : EPUB_PRC_HB_CODE
 51.57024|  Priority                 : SRCI_PRIORITY_HIGH
 51.57024|------------------------------------------------
 51.57025|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 51.57025|================================================
 51.56125|System shutting down with error status 0x90000045
 51.55955|================================================
 51.55955|Error reported by initservice (0x0500) PLID 0x90000045
 51.56195|  Initialization Service launched a function and the task returned an error.
 51.56195|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 51.56196|  ReasonCode 0x0506 WAIT_FN_FAILED
 51.56196|  UserData1  task id or task return code : 0x0000000000000267
 51.56197|  UserData2  returned status from task : 0x0000000000000001
 51.56198|------------------------------------------------
 51.56198|  Callout type             : Procedure Callout
 51.56199|  Procedure                : EPUB_PRC_HB_CODE
 51.56199|  Priority                 : SRCI_PRIORITY_HIGH
 51.56200|------------------------------------------------
 51.56200|  host_runtime_setup
 51.56201|------------------------------------------------
 51.56201|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 51.56202|================================================


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85107|secure|Booting in non-secure mode.
  3.85108|secure|SecureROM invalid - skipping functionality
  4.98064|ISTEP  6. 5 - host_init_fsi
  5.06028|ISTEP  6. 6 - host_set_ipl_parms
  5.07817|ISTEP  6. 7 - host_discover_targets
  5.49465|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.49466|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.51958|ISTEP  6. 8 - host_update_master_tpm
  5.52693|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.52693|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.52705|ISTEP  6. 9 - host_gard
  5.56215|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.57462|ISTEP  6.11 - host_start_occ_xstop_handler
  5.57583|ISTEP  6.12 - host_voltage_config
  5.61034|ISTEP  7. 2 - mss_volt
  5.92674|ISTEP  7. 3 - mss_freq
  6.14693|ISTEP  7. 4 - mss_eff_config
  9.08635|ISTEP  7. 5 - mss_attr_update
  9.09397|ISTEP  8. 1 - host_slave_sbe_config
  9.12711|ISTEP  8. 2 - host_setup_sbe
  9.13011|ISTEP  8. 3 - host_cbs_start
  9.13784|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 15.75020|ISTEP  8. 5 - host_attnlisten_proc
 15.75081|ISTEP  8. 6 - host_p9_fbc_eff_config
 15.75725|ISTEP  8. 7 - host_p9_eff_config_links
 15.76554|ISTEP  8. 8 - proc_attr_update
 15.76680|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 15.79708|ISTEP  8.10 - proc_xbus_scominit
 17.32136|ISTEP  8.11 - proc_xbus_enable_ridi
 17.32585|ISTEP  9. 1 - fabric_erepair
 17.33539|ISTEP  9. 2 - fabric_io_dccal
 17.99939|ISTEP  9. 3 - fabric_pre_trainadv
 18.00367|ISTEP  9. 4 - fabric_io_run_training
 18.12593|ISTEP  9. 5 - fabric_post_trainadv
 18.12998|ISTEP  9. 6 - proc_smp_link_layer
 18.13373|ISTEP  9. 7 - proc_fab_iovalid
 18.14872|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 18.15666|ISTEP 10. 1 - proc_build_smp
 18.28461|ISTEP 10. 2 - host_slave_sbe_update
 18.62223|ISTEP 10. 3 - host_set_voltages
 18.64463|ISTEP 10. 4 - proc_cen_ref_clk_enable
 18.65420|ISTEP 10. 5 - proc_enable_osclite
 18.65512|ISTEP 10. 6 - proc_chiplet_scominit
 18.69350|ISTEP 10. 7 - proc_abus_scominit
 18.70050|ISTEP 10. 8 - proc_obus_scominit
 18.78498|ISTEP 10. 9 - proc_npu_scominit
 18.80666|ISTEP 10.10 - proc_pcie_scominit
 18.84865|ISTEP 10.11 - proc_scomoverride_chiplets
 18.84984|ISTEP 10.12 - proc_chiplet_enable_ridi
 18.85205|ISTEP 10.13 - host_rng_bist
 18.85577|ISTEP 10.14 - host_update_redundant_tpm
 18.92867|ISTEP 11. 1 - host_prd_hwreconfig
 18.93251|ISTEP 12. 1 - mss_getecid
 18.93709|ISTEP 13. 1 - host_disable_memvolt
 19.02331|ISTEP 13. 2 - mem_pll_reset
 19.03363|ISTEP 13. 3 - mem_pll_initf
 19.06193|ISTEP 13. 4 - mem_pll_setup
 19.08684|ISTEP 13. 6 - mem_startclocks
 19.10368|ISTEP 13. 7 - host_enable_memvolt
 19.10488|ISTEP 13. 8 - mss_scominit
 19.44711|ISTEP 13. 9 - mss_ddr_phy_reset
 19.51572|ISTEP 13.10 - mss_draminit
 19.68791|ISTEP 13.11 - mss_draminit_training
 20.28970|ISTEP 13.12 - mss_draminit_trainadv
 20.29132|ISTEP 13.13 - mss_draminit_mc
 20.31332|ISTEP 14. 1 - mss_memdiag
 28.01403|================================================
 28.01575|Error reported by prdf (0xE500) PLID 0x90000051
 28.01575|  PRD Signature            : 0x240008 0xFFFF0010
 28.01753|  Signature Description    : pu.mca:k0:n0:s0:p01:c0 () Maintenance UE
 28.01754|  UserData1   : 0x0024000800000505
 28.01754|  UserData2   : 0xffff001090017008
 28.01755|------------------------------------------------
 28.01755|  Callout type             : Hardware Callout
 28.01755|  CPU id                   : 0
 28.01756|  Target                   : Physical:/Sys0/Node0/DIMM8
 28.01757|  Deconfig State           : DELAYED_DECONFIG
 28.01757|  GARD Error Type          : GARD_Predictive
 28.01758|  Priority                 : SRCI_PRIORITY_MED
 28.01758|------------------------------------------------
 28.01759|  
 28.01759|------------------------------------------------
 28.01759|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 28.01760|================================================
 85.12146|System shutting down with error status 0x90000056
 85.12654|================================================
 85.12654|Error reported by ipmi (0x2500) PLID 0x90000056
 85.12828|  Requested sensor is not present.
 85.12828|  ModuleId   0x03 IPMI::MOD_IPMISENSOR
 85.12828|  ReasonCode 0x2507 IPMI::RC_SENSOR_NOT_PRESENT
 85.12829|  UserData1  BMC IPMI Completion code. : 0x00000000000000cb
 85.12830|  UserData2  bytes [0-3]sensor number bytes [4-7]HUID of target. : 0x0000000700000000
 85.12831|------------------------------------------------
 85.12831|  Callout type             : Procedure Callout
 85.12832|  Procedure                : EPUB_PRC_HB_CODE
 85.12832|  Priority                 : SRCI_PRIORITY_HIGH
 85.12833|------------------------------------------------
 85.12833|  libistepdisp.so
 85.12833|------------------------------------------------
 85.12834|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
 85.12834|================================================
</msg>
<status endtime="20170809 16:34:22.987" starttime="20170809 16:34:22.985" status="PASS"></status>
</kw>
<status endtime="20170809 16:34:22.987" starttime="20170809 16:33:33.870" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170809 16:34:22.989" starttime="20170809 16:23:22.049" critical="yes" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170809 16:34:22.994" starttime="20170809 16:23:22.010" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170809 16:34:23.004" starttime="20170809 16:23:15.414" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
