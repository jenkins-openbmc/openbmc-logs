<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170511 19:08:51.342" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170511 19:08:52.074" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170511 19:08:52.074" starttime="20170511 19:08:52.073"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170511 19:08:52.075" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170511 19:08:52.075" starttime="20170511 19:08:52.074"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:52.075" starttime="20170511 19:08:52.073"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170511 19:08:52.081" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 19:08:52.119" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 19:08:52.119" starttime="20170511 19:08:52.118"></status>
</kw>
<msg timestamp="20170511 19:08:52.119" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 19:08:52.119" starttime="20170511 19:08:52.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:52.120" starttime="20170511 19:08:52.120"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:52.120" starttime="20170511 19:08:52.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:52.121" starttime="20170511 19:08:52.121"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 19:08:52.122" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 19:08:52.122" starttime="20170511 19:08:52.122"></status>
</kw>
<msg timestamp="20170511 19:08:52.122" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 19:08:52.122" starttime="20170511 19:08:52.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:52.124" starttime="20170511 19:08:52.124"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:52.124" starttime="20170511 19:08:52.123"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:52.124" starttime="20170511 19:08:52.122"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 19:08:52.125" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 19:08:54.042" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 19:08:54.042" starttime="20170511 19:08:52.125"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.043" starttime="20170511 19:08:52.117"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:08:54.043" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170511 19:08:54.170" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:08:54.170" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170511 19:08:54.170" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:08:54.171" starttime="20170511 19:08:54.043"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170511 19:08:54.171" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170511 19:08:54.171" starttime="20170511 19:08:54.171"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170511 19:08:54.172" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170511 19:08:54.172" starttime="20170511 19:08:54.171"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.172" starttime="20170511 19:08:52.116"></status>
</kw>
<msg timestamp="20170511 19:08:54.172" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170511 19:08:54.346" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170511 19:08:54.362" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170511 19:08:54.362" starttime="20170511 19:08:54.361"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:54.363" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170511 19:08:54.363" starttime="20170511 19:08:54.363"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:08:54.369" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:08:54.371" starttime="20170511 19:08:54.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:54.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:54.371" starttime="20170511 19:08:54.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:08:54.372" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:08:54.372" starttime="20170511 19:08:54.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:08:54.372" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:08:54.372" starttime="20170511 19:08:54.372"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:08:54.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:08:54.656" starttime="20170511 19:08:54.373"></status>
</kw>
<msg timestamp="20170511 19:08:54.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:08:54.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:54.656" starttime="20170511 19:08:54.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:08:54.657" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:54.657" starttime="20170511 19:08:54.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:54.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:54.657" starttime="20170511 19:08:54.657"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.658" starttime="20170511 19:08:54.368"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.658" starttime="20170511 19:08:54.365"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.658" starttime="20170511 19:08:54.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:54.658" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170511 19:08:54.658" starttime="20170511 19:08:54.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:54.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:54.659" starttime="20170511 19:08:54.659"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:54.659" starttime="20170511 19:08:54.659"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 19:08:54.661" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170511 19:08:54.661" starttime="20170511 19:08:54.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 19:08:54.662" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170511 19:08:54.662" starttime="20170511 19:08:54.662"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.662" starttime="20170511 19:08:54.661"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.662" starttime="20170511 19:08:54.660"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:08:54.873" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170511 19:08:54.873" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:54.873" starttime="20170511 19:08:54.663"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 19:08:54.875" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 19:08:54.875" starttime="20170511 19:08:54.874"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 19:08:54.876" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 19:08:54.876" starttime="20170511 19:08:54.875"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.876" starttime="20170511 19:08:54.875"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.876" starttime="20170511 19:08:54.874"></status>
</kw>
<msg timestamp="20170511 19:08:54.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:54.876" starttime="20170511 19:08:54.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:54.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:54.877" starttime="20170511 19:08:54.877"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170511 19:08:54.878" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:08:54.878" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:08:54.878" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170511 19:08:54.878" starttime="20170511 19:08:54.877"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:54.878" starttime="20170511 19:08:54.362"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:08:54.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:08:54.882" starttime="20170511 19:08:54.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:54.883" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:54.883" starttime="20170511 19:08:54.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:08:54.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:08:54.883" starttime="20170511 19:08:54.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:08:54.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:08:54.884" starttime="20170511 19:08:54.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:08:55.152" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:08:55.152" starttime="20170511 19:08:54.885"></status>
</kw>
<msg timestamp="20170511 19:08:55.152" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:08:55.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:55.152" starttime="20170511 19:08:54.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:08:55.153" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:55.153" starttime="20170511 19:08:55.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:55.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:55.154" starttime="20170511 19:08:55.153"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:55.154" starttime="20170511 19:08:54.881"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:55.154" starttime="20170511 19:08:54.880"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:55.154" starttime="20170511 19:08:54.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:55.154" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170511 19:08:55.154" starttime="20170511 19:08:55.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:55.155" starttime="20170511 19:08:55.155"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:08:55.261" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170511 19:08:55.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:55.261" starttime="20170511 19:08:55.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:55.261" starttime="20170511 19:08:55.261"></status>
</kw>
<msg timestamp="20170511 19:08:55.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:55.262" starttime="20170511 19:08:54.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:55.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:55.262" starttime="20170511 19:08:55.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 19:08:55.263" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:08:55.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:08:55.263" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170511 19:08:55.263" starttime="20170511 19:08:55.262"></status>
</kw>
<msg timestamp="20170511 19:08:55.263" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170511 19:08:55.263" starttime="20170511 19:08:54.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170511 19:08:55.264" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:55.264" starttime="20170511 19:08:55.264"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:55.264" starttime="20170511 19:08:54.360"></status>
</kw>
<msg timestamp="20170511 19:08:55.301" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 19:08:55.318" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 19:08:55.322" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170511 19:08:55.322" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 19:08:55.325" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 19:08:55.325" starttime="20170511 19:08:55.325"></status>
</kw>
<msg timestamp="20170511 19:08:55.325" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 19:08:55.325" starttime="20170511 19:08:55.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:55.326" starttime="20170511 19:08:55.326"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:55.327" starttime="20170511 19:08:55.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:55.327" starttime="20170511 19:08:55.327"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 19:08:55.328" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 19:08:55.328" starttime="20170511 19:08:55.328"></status>
</kw>
<msg timestamp="20170511 19:08:55.328" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 19:08:55.329" starttime="20170511 19:08:55.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:55.330" starttime="20170511 19:08:55.330"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:55.330" starttime="20170511 19:08:55.329"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:55.330" starttime="20170511 19:08:55.329"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 19:08:55.331" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 19:08:57.169" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 19:08:57.169" starttime="20170511 19:08:55.331"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.169" starttime="20170511 19:08:55.324"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:08:57.201" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:08:57.202" starttime="20170511 19:08:57.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:57.203" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:57.203" starttime="20170511 19:08:57.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:08:57.203" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:08:57.204" starttime="20170511 19:08:57.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:08:57.204" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:08:57.204" starttime="20170511 19:08:57.204"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.452" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:08:57.452" starttime="20170511 19:08:57.205"></status>
</kw>
<msg timestamp="20170511 19:08:57.452" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:08:57.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.453" starttime="20170511 19:08:57.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.453" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.453" starttime="20170511 19:08:57.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.454" starttime="20170511 19:08:57.454"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.454" starttime="20170511 19:08:57.200"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.454" starttime="20170511 19:08:57.199"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.455" starttime="20170511 19:08:57.196"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:57.455" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 19:08:57.455" starttime="20170511 19:08:57.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:57.456" starttime="20170511 19:08:57.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:08:57.533" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 19:08:57.533" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.533" starttime="20170511 19:08:57.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:57.534" starttime="20170511 19:08:57.534"></status>
</kw>
<msg timestamp="20170511 19:08:57.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.534" starttime="20170511 19:08:57.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.535" starttime="20170511 19:08:57.535"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 19:08:57.536" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:08:57.536" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:08:57.536" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170511 19:08:57.536" starttime="20170511 19:08:57.535"></status>
</kw>
<msg timestamp="20170511 19:08:57.536" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170511 19:08:57.536" starttime="20170511 19:08:57.195"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.536" starttime="20170511 19:08:57.193"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:08:57.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:08:57.541" starttime="20170511 19:08:57.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:57.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:57.541" starttime="20170511 19:08:57.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:08:57.542" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:08:57.542" starttime="20170511 19:08:57.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:08:57.543" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:08:57.543" starttime="20170511 19:08:57.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.784" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:08:57.784" starttime="20170511 19:08:57.543"></status>
</kw>
<msg timestamp="20170511 19:08:57.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:08:57.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.784" starttime="20170511 19:08:57.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.785" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.785" starttime="20170511 19:08:57.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.786" starttime="20170511 19:08:57.785"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.786" starttime="20170511 19:08:57.539"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.786" starttime="20170511 19:08:57.539"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.786" starttime="20170511 19:08:57.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:57.787" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170511 19:08:57.787" starttime="20170511 19:08:57.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:57.788" starttime="20170511 19:08:57.787"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:08:57.876" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170511 19:08:57.876" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.876" starttime="20170511 19:08:57.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:57.877" starttime="20170511 19:08:57.877"></status>
</kw>
<msg timestamp="20170511 19:08:57.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.877" starttime="20170511 19:08:57.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:57.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:57.878" starttime="20170511 19:08:57.877"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 19:08:57.879" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:08:57.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:08:57.879" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170511 19:08:57.879" starttime="20170511 19:08:57.878"></status>
</kw>
<msg timestamp="20170511 19:08:57.879" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170511 19:08:57.879" starttime="20170511 19:08:57.537"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:57.879" starttime="20170511 19:08:57.537"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:08:57.883" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:08:57.884" starttime="20170511 19:08:57.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:57.885" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:57.885" starttime="20170511 19:08:57.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:08:57.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:08:57.886" starttime="20170511 19:08:57.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:08:57.886" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:08:57.887" starttime="20170511 19:08:57.886"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.135" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:08:58.135" starttime="20170511 19:08:57.888"></status>
</kw>
<msg timestamp="20170511 19:08:58.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:08:58.136" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.136" starttime="20170511 19:08:57.887"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.136" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.136" starttime="20170511 19:08:58.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.137" starttime="20170511 19:08:58.137"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.137" starttime="20170511 19:08:57.882"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.137" starttime="20170511 19:08:57.882"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.137" starttime="20170511 19:08:57.881"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:58.138" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 19:08:58.138" starttime="20170511 19:08:58.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:58.139" starttime="20170511 19:08:58.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:08:58.216" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 19:08:58.216" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.216" starttime="20170511 19:08:58.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:58.217" starttime="20170511 19:08:58.217"></status>
</kw>
<msg timestamp="20170511 19:08:58.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.217" starttime="20170511 19:08:57.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.218" starttime="20170511 19:08:58.217"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 19:08:58.218" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:08:58.218" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:08:58.219" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 19:08:58.219" starttime="20170511 19:08:58.218"></status>
</kw>
<msg timestamp="20170511 19:08:58.219" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 19:08:58.219" starttime="20170511 19:08:57.880"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.219" starttime="20170511 19:08:57.880"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:08:58.223" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:08:58.223" starttime="20170511 19:08:58.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:58.224" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:58.224" starttime="20170511 19:08:58.223"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:08:58.224" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:08:58.224" starttime="20170511 19:08:58.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:08:58.225" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:08:58.225" starttime="20170511 19:08:58.225"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.449" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:08:58.449" starttime="20170511 19:08:58.226"></status>
</kw>
<msg timestamp="20170511 19:08:58.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:08:58.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.450" starttime="20170511 19:08:58.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.450" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.450" starttime="20170511 19:08:58.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.451" starttime="20170511 19:08:58.451"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.451" starttime="20170511 19:08:58.222"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.451" starttime="20170511 19:08:58.222"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.451" starttime="20170511 19:08:58.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:58.452" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 19:08:58.452" starttime="20170511 19:08:58.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:58.453" starttime="20170511 19:08:58.452"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:08:58.537" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 19:08:58.537" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.537" starttime="20170511 19:08:58.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:58.538" starttime="20170511 19:08:58.538"></status>
</kw>
<msg timestamp="20170511 19:08:58.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.538" starttime="20170511 19:08:58.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.539" starttime="20170511 19:08:58.538"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 19:08:58.539" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:08:58.539" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:08:58.540" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 19:08:58.540" starttime="20170511 19:08:58.539"></status>
</kw>
<msg timestamp="20170511 19:08:58.540" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 19:08:58.540" starttime="20170511 19:08:58.220"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.540" starttime="20170511 19:08:58.219"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.578" starttime="20170511 19:08:52.080"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170511 19:08:58.583" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170511 19:08:58.584" starttime="20170511 19:08:58.578"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.584" starttime="20170511 19:08:52.080"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.584" starttime="20170511 19:08:52.075"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Clear BMC Record Log</arg>
</arguments>
<kw name="Clear BMC Record Log" library="utils">
<doc>Clears all the event logs on the BMC. This would be</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170511 19:08:58.592" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20170511 19:08:58.592" starttime="20170511 19:08:58.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170511 19:08:58.593" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20170511 19:08:58.593" starttime="20170511 19:08:58.592"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}records/events/</arg>
<arg>clear</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:58.594" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20170511 19:08:58.594" starttime="20170511 19:08:58.593"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:08:58.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:08:58.597" starttime="20170511 19:08:58.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:58.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:58.598" starttime="20170511 19:08:58.597"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:08:58.598" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:08:58.598" starttime="20170511 19:08:58.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:08:58.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:08:58.599" starttime="20170511 19:08:58.599"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.818" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:08:58.818" starttime="20170511 19:08:58.600"></status>
</kw>
<msg timestamp="20170511 19:08:58.818" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:08:58.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.819" starttime="20170511 19:08:58.599"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.819" starttime="20170511 19:08:58.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:58.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:58.820" starttime="20170511 19:08:58.820"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.820" starttime="20170511 19:08:58.596"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.820" starttime="20170511 19:08:58.595"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:58.820" starttime="20170511 19:08:58.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:08:58.821" level="INFO">${base_uri} = /org/openbmc/records/events//action/clear</msg>
<status status="PASS" endtime="20170511 19:08:58.821" starttime="20170511 19:08:58.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:08:58.822" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:08:58.822" starttime="20170511 19:08:58.821"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:58.822" starttime="20170511 19:08:58.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:58.823" starttime="20170511 19:08:58.822"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:08:59.043" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events//action/clear, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170511 19:08:59.043" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:59.043" starttime="20170511 19:08:58.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:59.043" starttime="20170511 19:08:59.043"></status>
</kw>
<msg timestamp="20170511 19:08:59.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:59.044" starttime="20170511 19:08:58.594"></status>
</kw>
<msg timestamp="20170511 19:08:59.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:08:59.044" starttime="20170511 19:08:58.593"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:08:59.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:08:59.045" starttime="20170511 19:08:59.044"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:59.045" starttime="20170511 19:08:58.591"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:59.045" starttime="20170511 19:08:58.584"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:59.045" starttime="20170511 19:08:52.075"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:59.062" starttime="20170511 19:08:59.053"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:59.063" starttime="20170511 19:08:59.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:08:59.754" starttime="20170511 19:08:59.064"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:59.755" starttime="20170511 19:08:59.063"></status>
</kw>
<status status="PASS" endtime="20170511 19:08:59.755" starttime="20170511 19:08:59.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170511 19:08:59.755" level="INFO">Copying /home/fspcibld/witherspoon.pnor to /tmp</msg>
<status status="PASS" endtime="20170511 19:08:59.755" starttime="20170511 19:08:59.755"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:34.086" starttime="20170511 19:08:59.756"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.087" starttime="20170511 19:08:59.053"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.087" starttime="20170511 19:08:59.046"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170511 19:09:34.089" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170511 19:09:34.089" level="INFO">${pnor_basename} = witherspoon.pnor</msg>
<status status="PASS" endtime="20170511 19:09:34.089" starttime="20170511 19:09:34.088"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170511 19:09:34.101" level="INFO">@{arglist} = [ /tmp/witherspoon.pnor ]</msg>
<status status="PASS" endtime="20170511 19:09:34.101" starttime="20170511 19:09:34.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170511 19:09:34.102" level="INFO">${args} = {u'data': [u'/tmp/witherspoon.pnor']}</msg>
<status status="PASS" endtime="20170511 19:09:34.102" starttime="20170511 19:09:34.101"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:34.103" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170511 19:09:34.103" starttime="20170511 19:09:34.103"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:34.106" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:34.106" starttime="20170511 19:09:34.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:34.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:34.107" starttime="20170511 19:09:34.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:34.108" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:34.108" starttime="20170511 19:09:34.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:34.108" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:34.108" starttime="20170511 19:09:34.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:34.292" starttime="20170511 19:09:34.109"></status>
</kw>
<msg timestamp="20170511 19:09:34.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:34.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.293" starttime="20170511 19:09:34.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.293" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.294" starttime="20170511 19:09:34.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.294" starttime="20170511 19:09:34.294"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.294" starttime="20170511 19:09:34.105"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.294" starttime="20170511 19:09:34.105"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.295" starttime="20170511 19:09:34.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:34.295" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170511 19:09:34.295" starttime="20170511 19:09:34.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:34.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:34.296" starttime="20170511 19:09:34.295"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:34.296" starttime="20170511 19:09:34.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:34.297" starttime="20170511 19:09:34.297"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:34.342" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170511 19:09:34.342" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.342" starttime="20170511 19:09:34.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:34.342" starttime="20170511 19:09:34.342"></status>
</kw>
<msg timestamp="20170511 19:09:34.343" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.343" starttime="20170511 19:09:34.103"></status>
</kw>
<msg timestamp="20170511 19:09:34.343" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.343" starttime="20170511 19:09:34.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170511 19:09:34.344" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170511 19:09:34.344" starttime="20170511 19:09:34.343"></status>
</kw>
<status status="FAIL" endtime="20170511 19:09:34.344" starttime="20170511 19:09:34.100"></status>
</kw>
<msg timestamp="20170511 19:09:34.344" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170511 19:09:34.344" starttime="20170511 19:09:34.090"></status>
</kw>
<status status="FAIL" endtime="20170511 19:09:34.345" starttime="20170511 19:08:59.045"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170511 19:09:34.346" starttime="20170511 19:09:34.346"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:34.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:34.358" starttime="20170511 19:09:34.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:34.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:34.359" starttime="20170511 19:09:34.359"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:34.360" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:34.360" starttime="20170511 19:09:34.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:34.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:34.360" starttime="20170511 19:09:34.360"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:34.539" starttime="20170511 19:09:34.361"></status>
</kw>
<msg timestamp="20170511 19:09:34.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:34.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.540" starttime="20170511 19:09:34.361"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.541" starttime="20170511 19:09:34.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.541" starttime="20170511 19:09:34.541"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.541" starttime="20170511 19:09:34.357"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.541" starttime="20170511 19:09:34.356"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:34.542" starttime="20170511 19:09:34.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:34.542" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 19:09:34.542" starttime="20170511 19:09:34.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:34.543" starttime="20170511 19:09:34.543"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:34.608" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 19:09:34.609" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.609" starttime="20170511 19:09:34.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:34.609" starttime="20170511 19:09:34.609"></status>
</kw>
<msg timestamp="20170511 19:09:34.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.610" starttime="20170511 19:09:34.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:34.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:34.610" starttime="20170511 19:09:34.610"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 19:09:34.611" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:09:34.611" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:09:34.611" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 19:09:34.611" starttime="20170511 19:09:34.611"></status>
</kw>
<msg timestamp="20170511 19:09:34.611" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 19:09:34.611" starttime="20170511 19:09:34.355"></status>
</kw>
<msg timestamp="20170511 19:09:34.612" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170511 19:09:34.612" starttime="20170511 19:09:34.354"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170511 19:09:34.613" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170511 19:09:34.613" starttime="20170511 19:09:34.612"></status>
</kw>
<msg timestamp="20170511 19:09:34.613" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 19:09:34.613" starttime="20170511 19:09:34.612"></status>
</kw>
<msg timestamp="20170511 19:09:34.613" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 19:09:34.613" starttime="20170511 19:09:34.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170511 19:09:34.625" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170511 19:09:34.625" starttime="20170511 19:09:34.625"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 19:09:34.638" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 19:09:37.653" level="INFO">${RC} = 0</msg>
<msg timestamp="20170511 19:09:37.653" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.35 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.791 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170511 19:09:37.653" starttime="20170511 19:09:34.626"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.657" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.35 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.791 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=1.52 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=17.9 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.791/5.661/17.983/7.135 ms</msg>
<status status="PASS" endtime="20170511 19:09:37.657" starttime="20170511 19:09:37.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:37.658" starttime="20170511 19:09:37.657"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.658" starttime="20170511 19:09:34.625"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 19:09:37.674" level="INFO">${cur_time} = 2017-05-11 19:09:37:673675</msg>
<status status="PASS" endtime="20170511 19:09:37.674" starttime="20170511 19:09:37.673"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 19:09:37.674" level="INFO">${cur_time} = 20170511190937673675</msg>
<status status="PASS" endtime="20170511 19:09:37.675" starttime="20170511 19:09:37.674"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.675" starttime="20170511 19:09:37.673"></status>
</kw>
<msg timestamp="20170511 19:09:37.680" level="INFO">${FFDC_TIME} = 20170511190937673675</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170511 19:09:37.681" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170511 19:09:37.681" starttime="20170511 19:09:37.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170511 19:09:37.682" level="INFO">${suite_name} = 20170511190937673675_TestBiosUpdate</msg>
<status status="PASS" endtime="20170511 19:09:37.682" starttime="20170511 19:09:37.681"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170511 19:09:37.682" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170511 19:09:37.682" starttime="20170511 19:09:37.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170511 19:09:37.683" level="INFO">${test_name} = 20170511190937673675_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170511 19:09:37.683" starttime="20170511 19:09:37.683"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.683" starttime="20170511 19:09:37.680"></status>
</kw>
<msg timestamp="20170511 19:09:37.684" level="INFO">${FFDC_DIR_PATH} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/</msg>
<msg timestamp="20170511 19:09:37.684" level="INFO">${FFDC_PREFIX} = 20170511190937673675_</msg>
<msg timestamp="20170511 19:09:37.703" level="INFO">${LOG_PREFIX} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170511 19:09:37.704" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.704" starttime="20170511 19:09:37.704"></status>
</kw>
<msg timestamp="20170511 19:09:37.710" level="INFO">${FFDC_FILE_PATH} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.722" starttime="20170511 19:09:37.721"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.722" starttime="20170511 19:09:37.720"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.723" starttime="20170511 19:09:37.722"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.723" starttime="20170511 19:09:37.722"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.724" starttime="20170511 19:09:37.724"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.724" starttime="20170511 19:09:37.723"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.726" starttime="20170511 19:09:37.725"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.726" starttime="20170511 19:09:37.724"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.727" starttime="20170511 19:09:37.726"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.727" starttime="20170511 19:09:37.726"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.728" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.728" starttime="20170511 19:09:37.728"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.729" starttime="20170511 19:09:37.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.730" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.730" starttime="20170511 19:09:37.729"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.730" starttime="20170511 19:09:37.729"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.731" starttime="20170511 19:09:37.731"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.731" starttime="20170511 19:09:37.730"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.732" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.732" starttime="20170511 19:09:37.732"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.732" starttime="20170511 19:09:37.731"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.734" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.734" starttime="20170511 19:09:37.734"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.734" starttime="20170511 19:09:37.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.735" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.735" starttime="20170511 19:09:37.735"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.735" starttime="20170511 19:09:37.734"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.736" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.736" starttime="20170511 19:09:37.736"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.737" starttime="20170511 19:09:37.735"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.738" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:37.738" starttime="20170511 19:09:37.737"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.738" starttime="20170511 19:09:37.737"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 19:09:37.740" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 19:09:37.740" starttime="20170511 19:09:37.740"></status>
</kw>
<msg timestamp="20170511 19:09:37.740" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 19:09:37.741" starttime="20170511 19:09:37.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:37.742" starttime="20170511 19:09:37.741"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.742" starttime="20170511 19:09:37.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:37.742" starttime="20170511 19:09:37.742"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 19:09:37.743" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 19:09:37.744" starttime="20170511 19:09:37.743"></status>
</kw>
<msg timestamp="20170511 19:09:37.744" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 19:09:37.744" starttime="20170511 19:09:37.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:37.745" starttime="20170511 19:09:37.745"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.746" starttime="20170511 19:09:37.745"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:37.746" starttime="20170511 19:09:37.744"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 19:09:37.746" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 19:09:39.585" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 19:09:39.586" starttime="20170511 19:09:37.746"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.586" starttime="20170511 19:09:37.739"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:39.587" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170511 19:09:39.741" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:39.741" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170511 19:09:39.741" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:39.741" starttime="20170511 19:09:39.586"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.742" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170511 19:09:39.742" starttime="20170511 19:09:39.742"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.742" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170511 19:09:39.742" starttime="20170511 19:09:39.742"></status>
</kw>
<msg timestamp="20170511 19:09:39.743" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170511 19:09:39.743" starttime="20170511 19:09:37.738"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.744" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.744" starttime="20170511 19:09:39.744"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.744" starttime="20170511 19:09:39.743"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.744" starttime="20170511 19:09:37.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.746" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.746" starttime="20170511 19:09:39.745"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.746" starttime="20170511 19:09:39.745"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170511 19:09:39.746" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170511 19:09:39.746" starttime="20170511 19:09:39.746"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.748" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.748" starttime="20170511 19:09:39.747"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.748" starttime="20170511 19:09:39.747"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.753" starttime="20170511 19:09:39.753"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.753" starttime="20170511 19:09:39.748"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.753" starttime="20170511 19:09:39.747"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.754" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.755" starttime="20170511 19:09:39.754"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.755" starttime="20170511 19:09:39.753"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.756" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.756" starttime="20170511 19:09:39.755"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.756" starttime="20170511 19:09:39.755"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.756" starttime="20170511 19:09:39.753"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.757" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.757" starttime="20170511 19:09:39.757"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.758" starttime="20170511 19:09:39.756"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.759" starttime="20170511 19:09:39.758"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.759" starttime="20170511 19:09:39.758"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.759" starttime="20170511 19:09:39.756"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.759" starttime="20170511 19:09:39.746"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:39.760" starttime="20170511 19:09:39.760"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.760" starttime="20170511 19:09:39.759"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.760" starttime="20170511 19:09:37.720"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170511 19:09:39.766" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170511 19:09:39.766" starttime="20170511 19:09:39.766"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170511 19:09:39.767" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170511 19:09:39.768" starttime="20170511 19:09:39.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:39.769" starttime="20170511 19:09:39.768"></status>
</kw>
<msg timestamp="20170511 19:09:39.769" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170511 19:09:39.769" starttime="20170511 19:09:39.768"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:39.771" starttime="20170511 19:09:39.770"></status>
</kw>
<msg timestamp="20170511 19:09:39.771" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:39.771" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170511 19:09:39.771" starttime="20170511 19:09:39.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:39.771" starttime="20170511 19:09:39.771"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 19:09:39.788" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 19:09:39.788" starttime="20170511 19:09:39.787"></status>
</kw>
<msg timestamp="20170511 19:09:39.788" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 19:09:39.788" starttime="20170511 19:09:39.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:39.789" starttime="20170511 19:09:39.789"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.789" starttime="20170511 19:09:39.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:39.790" starttime="20170511 19:09:39.789"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 19:09:39.791" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 19:09:39.791" starttime="20170511 19:09:39.790"></status>
</kw>
<msg timestamp="20170511 19:09:39.791" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 19:09:39.791" starttime="20170511 19:09:39.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:39.793" starttime="20170511 19:09:39.792"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.793" starttime="20170511 19:09:39.792"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:39.793" starttime="20170511 19:09:39.791"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 19:09:39.793" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 19:09:41.679" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 19:09:41.680" starttime="20170511 19:09:39.793"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:41.680" starttime="20170511 19:09:39.786"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170511 19:09:41.681" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170511 19:09:41.681" starttime="20170511 19:09:41.680"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170511 19:09:41.682" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170511 19:09:41.682" starttime="20170511 19:09:41.682"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170511 19:09:41.687" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170511 19:09:41.688" starttime="20170511 19:09:41.682"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:41.691" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:41.691" starttime="20170511 19:09:41.690"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:41.691" starttime="20170511 19:09:41.690"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:41.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:41.692" starttime="20170511 19:09:41.692"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:41.692" starttime="20170511 19:09:41.691"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:41.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:41.694" starttime="20170511 19:09:41.693"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:41.694" starttime="20170511 19:09:41.693"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:41.695" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:41.695" starttime="20170511 19:09:41.694"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:41.695" starttime="20170511 19:09:41.694"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:41.695" starttime="20170511 19:09:41.689"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:41.695" starttime="20170511 19:09:41.689"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:41.696" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170511 19:09:42.996" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:42.997" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170511 19:09:42.997" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:42.997" starttime="20170511 19:09:41.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.004" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:43.003"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:43.003"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:42.998"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:41.688"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:41.688"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:41.688"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:41.681"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.004" starttime="20170511 19:09:41.681"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170511 19:09:43.006" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170511 19:09:43.006" starttime="20170511 19:09:43.006"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.007" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170511 19:09:43.007" starttime="20170511 19:09:43.006"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.012" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.012" starttime="20170511 19:09:43.011"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.012" starttime="20170511 19:09:43.010"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.013" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.013" starttime="20170511 19:09:43.013"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.013" starttime="20170511 19:09:43.012"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.014" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.015" starttime="20170511 19:09:43.014"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.015" starttime="20170511 19:09:43.014"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.016" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.016" starttime="20170511 19:09:43.015"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.016" starttime="20170511 19:09:43.015"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.016" starttime="20170511 19:09:43.009"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.016" starttime="20170511 19:09:43.009"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:43.017" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170511 19:09:43.213" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170511 19:09:43.213" level="INFO">${stdout} = </msg>
<msg timestamp="20170511 19:09:43.213" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170511 19:09:43.213" starttime="20170511 19:09:43.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.220" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.220" starttime="20170511 19:09:43.219"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.220" starttime="20170511 19:09:43.218"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.220" starttime="20170511 19:09:43.213"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.220" starttime="20170511 19:09:43.008"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.220" starttime="20170511 19:09:43.007"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.224" starttime="20170511 19:09:43.223"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.224" starttime="20170511 19:09:43.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.225" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.225" starttime="20170511 19:09:43.225"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.225" starttime="20170511 19:09:43.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.226" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.226" starttime="20170511 19:09:43.226"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.227" starttime="20170511 19:09:43.225"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.228" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.228" starttime="20170511 19:09:43.227"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.228" starttime="20170511 19:09:43.227"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.228" starttime="20170511 19:09:43.222"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.228" starttime="20170511 19:09:43.221"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:43.229" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170511 19:09:43.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:43.391" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-31"
VERSION_ID="v1.99.5-31-g2b292b0"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170511 19:09:43.391" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:43.391" starttime="20170511 19:09:43.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.398" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.397"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.397"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.392"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.220"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.220"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.007"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.005"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.398" starttime="20170511 19:09:43.005"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170511 19:09:43.399" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170511 19:09:43.400" starttime="20170511 19:09:43.399"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.400" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170511 19:09:43.400" starttime="20170511 19:09:43.400"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.404" starttime="20170511 19:09:43.403"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.404" starttime="20170511 19:09:43.402"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.405" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.405" starttime="20170511 19:09:43.405"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.405" starttime="20170511 19:09:43.404"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.406" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.406" starttime="20170511 19:09:43.406"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.406" starttime="20170511 19:09:43.405"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.408" starttime="20170511 19:09:43.407"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.408" starttime="20170511 19:09:43.407"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.408" starttime="20170511 19:09:43.402"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.408" starttime="20170511 19:09:43.402"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:43.408" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170511 19:09:43.536" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:43.536" level="INFO">${stdout} =  17:32:16 up 3 min,  load average: 1.85, 1.60, 0.68</msg>
<msg timestamp="20170511 19:09:43.536" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:43.536" starttime="20170511 19:09:43.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.543" starttime="20170511 19:09:43.542"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.543" starttime="20170511 19:09:43.542"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.543" starttime="20170511 19:09:43.537"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.543" starttime="20170511 19:09:43.401"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.543" starttime="20170511 19:09:43.400"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.547" starttime="20170511 19:09:43.546"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.547" starttime="20170511 19:09:43.546"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.548" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.548" starttime="20170511 19:09:43.548"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.548" starttime="20170511 19:09:43.547"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.549" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.549" starttime="20170511 19:09:43.549"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.549" starttime="20170511 19:09:43.548"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.550" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.550" starttime="20170511 19:09:43.550"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.551" starttime="20170511 19:09:43.549"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.551" starttime="20170511 19:09:43.545"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.551" starttime="20170511 19:09:43.544"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:43.551" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170511 19:09:43.690" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:43.690" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170511 19:09:43.690" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:43.690" starttime="20170511 19:09:43.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.696" starttime="20170511 19:09:43.696"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.697" starttime="20170511 19:09:43.695"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.697" starttime="20170511 19:09:43.690"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.697" starttime="20170511 19:09:43.544"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.697" starttime="20170511 19:09:43.543"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.700" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.700" starttime="20170511 19:09:43.699"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.700" starttime="20170511 19:09:43.699"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.701" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.701" starttime="20170511 19:09:43.701"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.701" starttime="20170511 19:09:43.700"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.702" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.702" starttime="20170511 19:09:43.702"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.703" starttime="20170511 19:09:43.701"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.704" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.704" starttime="20170511 19:09:43.703"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.704" starttime="20170511 19:09:43.703"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.704" starttime="20170511 19:09:43.698"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.704" starttime="20170511 19:09:43.698"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:43.705" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170511 19:09:43.855" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:43.855" level="INFO">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Thu May 11 17:48:04 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170511 19:09:43.855" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:43.855" starttime="20170511 19:09:43.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.862" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:43.862" starttime="20170511 19:09:43.862"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.862" starttime="20170511 19:09:43.861"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.862" starttime="20170511 19:09:43.856"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:43.697"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:43.697"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:43.400"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:43.399"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:43.399"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:41.681"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:39.786"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:39.772"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:39.769"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.863" starttime="20170511 19:09:39.769"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:43.865" starttime="20170511 19:09:43.865"></status>
</kw>
<msg timestamp="20170511 19:09:43.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:43.866" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170511 19:09:43.866" starttime="20170511 19:09:43.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:43.866" starttime="20170511 19:09:43.866"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 19:09:43.883" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 19:09:43.883" starttime="20170511 19:09:43.882"></status>
</kw>
<msg timestamp="20170511 19:09:43.883" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 19:09:43.883" starttime="20170511 19:09:43.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:43.884" starttime="20170511 19:09:43.884"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.884" starttime="20170511 19:09:43.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:43.885" starttime="20170511 19:09:43.884"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 19:09:43.886" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 19:09:43.886" starttime="20170511 19:09:43.886"></status>
</kw>
<msg timestamp="20170511 19:09:43.886" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 19:09:43.886" starttime="20170511 19:09:43.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:43.888" starttime="20170511 19:09:43.888"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.888" starttime="20170511 19:09:43.887"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:43.888" starttime="20170511 19:09:43.886"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 19:09:43.889" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 19:09:45.648" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 19:09:45.648" starttime="20170511 19:09:43.888"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:45.648" starttime="20170511 19:09:43.881"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170511 19:09:45.649" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170511 19:09:45.649" starttime="20170511 19:09:45.649"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170511 19:09:45.651" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170511 19:09:45.651" starttime="20170511 19:09:45.650"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:45.652" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_elog.txt</msg>
<status status="PASS" endtime="20170511 19:09:45.652" starttime="20170511 19:09:45.651"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:45.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:45.656" starttime="20170511 19:09:45.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:45.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:45.656" starttime="20170511 19:09:45.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:45.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:45.657" starttime="20170511 19:09:45.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:45.658" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:45.659" starttime="20170511 19:09:45.658"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:45.886" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:45.886" starttime="20170511 19:09:45.660"></status>
</kw>
<msg timestamp="20170511 19:09:45.886" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:45.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:45.886" starttime="20170511 19:09:45.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:45.887" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:45.887" starttime="20170511 19:09:45.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:45.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:45.887" starttime="20170511 19:09:45.887"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:45.888" starttime="20170511 19:09:45.654"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:45.888" starttime="20170511 19:09:45.653"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:45.888" starttime="20170511 19:09:45.652"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:45.888" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170511 19:09:45.888" starttime="20170511 19:09:45.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:45.889" starttime="20170511 19:09:45.889"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:45.944" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None </msg>
<msg timestamp="20170511 19:09:45.944" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:45.944" starttime="20170511 19:09:45.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:45.945" starttime="20170511 19:09:45.944"></status>
</kw>
<msg timestamp="20170511 19:09:45.945" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:45.945" starttime="20170511 19:09:45.652"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:45.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170511 19:09:45.946" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170511 19:09:45.946" starttime="20170511 19:09:45.945"></status>
</kw>
<msg timestamp="20170511 19:09:45.946" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 19:09:45.946" starttime="20170511 19:09:45.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170511 19:09:45.947" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170511 19:09:45.947" starttime="20170511 19:09:45.947"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:45.947" starttime="20170511 19:09:45.946"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:45.947" starttime="20170511 19:09:45.651"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:45.948" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170511 19:09:45.948" starttime="20170511 19:09:45.948"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:45.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:45.951" starttime="20170511 19:09:45.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:45.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:45.952" starttime="20170511 19:09:45.952"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:45.952" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:45.953" starttime="20170511 19:09:45.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:45.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:45.953" starttime="20170511 19:09:45.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.184" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:46.185" starttime="20170511 19:09:45.954"></status>
</kw>
<msg timestamp="20170511 19:09:46.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:46.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.185" starttime="20170511 19:09:45.953"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.185" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.186" starttime="20170511 19:09:46.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.186" starttime="20170511 19:09:46.186"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.186" starttime="20170511 19:09:45.950"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.187" starttime="20170511 19:09:45.950"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.187" starttime="20170511 19:09:45.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:46.187" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170511 19:09:46.187" starttime="20170511 19:09:46.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:46.188" starttime="20170511 19:09:46.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:46.414" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20170511 19:09:46.414" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.414" starttime="20170511 19:09:46.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:46.415" starttime="20170511 19:09:46.415"></status>
</kw>
<msg timestamp="20170511 19:09:46.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.415" starttime="20170511 19:09:45.948"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.416" starttime="20170511 19:09:46.416"></status>
</kw>
<msg timestamp="20170511 19:09:46.417" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170511 19:09:46.417" starttime="20170511 19:09:46.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:46.417" starttime="20170511 19:09:46.417"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170511 19:09:46.418" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:09:46.418" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170511 19:09:46.418" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170511 19:09:46.418" starttime="20170511 19:09:46.417"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.420" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_sensor_list.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:46.420" starttime="20170511 19:09:46.419"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.420" starttime="20170511 19:09:46.418"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.420" starttime="20170511 19:09:45.948"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:46.421" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170511 19:09:46.421" starttime="20170511 19:09:46.420"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:46.423" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:46.424" starttime="20170511 19:09:46.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:46.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:46.425" starttime="20170511 19:09:46.424"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:46.425" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:46.426" starttime="20170511 19:09:46.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:46.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:46.426" starttime="20170511 19:09:46.426"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.662" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:46.662" starttime="20170511 19:09:46.427"></status>
</kw>
<msg timestamp="20170511 19:09:46.662" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:46.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.663" starttime="20170511 19:09:46.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.664" starttime="20170511 19:09:46.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.665" starttime="20170511 19:09:46.664"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.665" starttime="20170511 19:09:46.422"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.665" starttime="20170511 19:09:46.422"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.665" starttime="20170511 19:09:46.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:46.666" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170511 19:09:46.666" starttime="20170511 19:09:46.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:46.667" starttime="20170511 19:09:46.666"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:46.840" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None </msg>
<msg timestamp="20170511 19:09:46.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.840" starttime="20170511 19:09:46.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:46.841" starttime="20170511 19:09:46.841"></status>
</kw>
<msg timestamp="20170511 19:09:46.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.841" starttime="20170511 19:09:46.421"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:46.842" starttime="20170511 19:09:46.842"></status>
</kw>
<msg timestamp="20170511 19:09:46.842" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170511 19:09:46.842" starttime="20170511 19:09:46.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:46.843" starttime="20170511 19:09:46.843"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170511 19:09:46.844" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:09:46.844" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170511 19:09:46.844" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status status="PASS" endtime="20170511 19:09:46.844" starttime="20170511 19:09:46.843"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:46.846" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_inventory.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:46.846" starttime="20170511 19:09:46.845"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.846" starttime="20170511 19:09:46.844"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:46.846" starttime="20170511 19:09:46.420"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:46.847" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_led.txt</msg>
<status status="PASS" endtime="20170511 19:09:46.847" starttime="20170511 19:09:46.847"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:46.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:46.850" starttime="20170511 19:09:46.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:46.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:46.851" starttime="20170511 19:09:46.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:46.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:46.852" starttime="20170511 19:09:46.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:46.853" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:46.853" starttime="20170511 19:09:46.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.087" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:47.087" starttime="20170511 19:09:46.853"></status>
</kw>
<msg timestamp="20170511 19:09:47.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:47.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.088" starttime="20170511 19:09:46.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.088" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.088" starttime="20170511 19:09:47.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.089" starttime="20170511 19:09:47.089"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.089" starttime="20170511 19:09:46.849"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.089" starttime="20170511 19:09:46.849"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.089" starttime="20170511 19:09:46.848"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:47.090" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170511 19:09:47.090" starttime="20170511 19:09:47.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.091" starttime="20170511 19:09:47.090"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:47.190" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20170511 19:09:47.190" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.190" starttime="20170511 19:09:47.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.191" starttime="20170511 19:09:47.191"></status>
</kw>
<msg timestamp="20170511 19:09:47.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.191" starttime="20170511 19:09:46.848"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.192" starttime="20170511 19:09:47.192"></status>
</kw>
<msg timestamp="20170511 19:09:47.192" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170511 19:09:47.193" starttime="20170511 19:09:47.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.193" starttime="20170511 19:09:47.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170511 19:09:47.194" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:09:47.194" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170511 19:09:47.194" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 19:09:47.194" starttime="20170511 19:09:47.193"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.196" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_led.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:47.196" starttime="20170511 19:09:47.195"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.196" starttime="20170511 19:09:47.194"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.196" starttime="20170511 19:09:46.846"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:47.197" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170511 19:09:47.197" starttime="20170511 19:09:47.196"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:47.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:47.201" starttime="20170511 19:09:47.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:47.202" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:47.202" starttime="20170511 19:09:47.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:47.203" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:47.203" starttime="20170511 19:09:47.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:47.203" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:47.203" starttime="20170511 19:09:47.203"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.417" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:47.417" starttime="20170511 19:09:47.204"></status>
</kw>
<msg timestamp="20170511 19:09:47.417" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:47.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.417" starttime="20170511 19:09:47.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.418" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.418" starttime="20170511 19:09:47.417"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.419" starttime="20170511 19:09:47.418"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.419" starttime="20170511 19:09:47.199"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.419" starttime="20170511 19:09:47.198"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.419" starttime="20170511 19:09:47.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:47.419" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170511 19:09:47.419" starttime="20170511 19:09:47.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.420" starttime="20170511 19:09:47.420"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:47.473" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20170511 19:09:47.473" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.473" starttime="20170511 19:09:47.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.474" starttime="20170511 19:09:47.474"></status>
</kw>
<msg timestamp="20170511 19:09:47.474" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:47.474" starttime="20170511 19:09:47.197"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170511 19:09:47.476" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170511 19:09:47.476" starttime="20170511 19:09:47.475"></status>
</kw>
<msg timestamp="20170511 19:09:47.476" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 19:09:47.476" starttime="20170511 19:09:47.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170511 19:09:47.477" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:47.476"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:47.476"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:47.196"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:45.651"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:45.650"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:45.649"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:45.649"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:43.881"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:43.867"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.477" starttime="20170511 19:09:43.864"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.478" starttime="20170511 19:09:43.863"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.479" starttime="20170511 19:09:47.479"></status>
</kw>
<msg timestamp="20170511 19:09:47.480" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:47.480" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170511 19:09:47.480" starttime="20170511 19:09:47.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.480" starttime="20170511 19:09:47.480"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 19:09:47.497" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 19:09:47.497" starttime="20170511 19:09:47.496"></status>
</kw>
<msg timestamp="20170511 19:09:47.497" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 19:09:47.497" starttime="20170511 19:09:47.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.498" starttime="20170511 19:09:47.498"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.498" starttime="20170511 19:09:47.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.499" starttime="20170511 19:09:47.498"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 19:09:47.500" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 19:09:47.500" starttime="20170511 19:09:47.499"></status>
</kw>
<msg timestamp="20170511 19:09:47.500" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 19:09:47.500" starttime="20170511 19:09:47.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:47.502" starttime="20170511 19:09:47.502"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.502" starttime="20170511 19:09:47.501"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:47.502" starttime="20170511 19:09:47.500"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 19:09:47.503" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 19:09:49.263" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 19:09:49.264" starttime="20170511 19:09:47.502"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:49.264" starttime="20170511 19:09:47.495"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170511 19:09:49.264" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170511 19:09:49.311" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170511 19:09:49.311" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170511 19:09:49.312" starttime="20170511 19:09:49.264"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170511 19:09:49.312" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170511 19:09:49.312" starttime="20170511 19:09:49.312"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:49.314" starttime="20170511 19:09:49.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:49.983" starttime="20170511 19:09:49.315"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:49.983" starttime="20170511 19:09:49.314"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:49.983" starttime="20170511 19:09:49.312"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170511 19:09:49.984" starttime="20170511 19:09:49.983"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:49.984" starttime="20170511 19:09:47.495"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:49.984" starttime="20170511 19:09:47.480"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:49.984" starttime="20170511 19:09:47.478"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:49.984" starttime="20170511 19:09:47.478"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:49.986" starttime="20170511 19:09:49.986"></status>
</kw>
<msg timestamp="20170511 19:09:49.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:49.986" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170511 19:09:49.986" starttime="20170511 19:09:49.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:49.987" starttime="20170511 19:09:49.987"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 19:09:50.003" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 19:09:50.003" starttime="20170511 19:09:50.003"></status>
</kw>
<msg timestamp="20170511 19:09:50.003" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 19:09:50.003" starttime="20170511 19:09:50.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:50.004" starttime="20170511 19:09:50.004"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:50.004" starttime="20170511 19:09:50.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:50.005" starttime="20170511 19:09:50.005"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 19:09:50.006" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 19:09:50.006" starttime="20170511 19:09:50.006"></status>
</kw>
<msg timestamp="20170511 19:09:50.006" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 19:09:50.006" starttime="20170511 19:09:50.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:50.008" starttime="20170511 19:09:50.008"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:50.008" starttime="20170511 19:09:50.007"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:50.008" starttime="20170511 19:09:50.007"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 19:09:50.009" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 19:09:51.852" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 19:09:51.852" starttime="20170511 19:09:50.008"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:51.853" starttime="20170511 19:09:50.002"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170511 19:09:51.853" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170511 19:09:51.853" starttime="20170511 19:09:51.853"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170511 19:09:51.855" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170511 19:09:51.855" starttime="20170511 19:09:51.854"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:51.856" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170511 19:09:51.856" starttime="20170511 19:09:51.855"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:51.857" starttime="20170511 19:09:51.857"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:51.858" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170511 19:09:52.152" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:52.152" level="INFO">${stdout} = Mem: 210208K used, 222724K free, 79888K shrd, 10376K buff, 114652K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.70 1.58 0.68 1/131 999
  PID  PPID USER  ...</msg>
<msg timestamp="20170511 19:09:52.152" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:52.152" starttime="20170511 19:09:51.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:52.159" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_proc_list.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:52.159" starttime="20170511 19:09:52.159"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.159" starttime="20170511 19:09:52.158"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.159" starttime="20170511 19:09:52.153"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.159" starttime="20170511 19:09:51.856"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.160" starttime="20170511 19:09:51.855"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:52.160" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170511 19:09:52.160" starttime="20170511 19:09:52.160"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:52.162" starttime="20170511 19:09:52.161"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:52.162" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170511 19:09:52.303" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:52.303" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Thu May 11 17:48:04 UTC 2017
CPU: ARMv6-compati...</msg>
<msg timestamp="20170511 19:09:52.303" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:52.303" starttime="20170511 19:09:52.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:52.310" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_dmesg.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:52.310" starttime="20170511 19:09:52.309"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.310" starttime="20170511 19:09:52.309"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.310" starttime="20170511 19:09:52.304"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.310" starttime="20170511 19:09:52.160"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.311" starttime="20170511 19:09:52.160"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:52.311" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170511 19:09:52.311" starttime="20170511 19:09:52.311"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:52.313" starttime="20170511 19:09:52.312"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:52.313" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170511 19:09:52.455" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:52.455" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          222724 kB
MemAvailable:     263708 kB
Buffers:           10376 kB
Cached:           114656 kB
SwapCached:            0 kB
Active:            91672 kB
Inac...</msg>
<msg timestamp="20170511 19:09:52.455" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:52.455" starttime="20170511 19:09:52.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:52.462" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_meminfo.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:52.462" starttime="20170511 19:09:52.462"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.462" starttime="20170511 19:09:52.461"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.462" starttime="20170511 19:09:52.456"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.462" starttime="20170511 19:09:52.312"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.463" starttime="20170511 19:09:52.311"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:52.463" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170511 19:09:52.463" starttime="20170511 19:09:52.463"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:52.465" starttime="20170511 19:09:52.464"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:52.465" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170511 19:09:52.607" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:52.608" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170511 19:09:52.608" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:52.608" starttime="20170511 19:09:52.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:52.614" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_procinfo.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:52.614" starttime="20170511 19:09:52.614"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.614" starttime="20170511 19:09:52.613"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.615" starttime="20170511 19:09:52.608"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.615" starttime="20170511 19:09:52.464"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:52.615" starttime="20170511 19:09:52.463"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170511 19:09:52.615" level="INFO">${logpath} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170511 19:09:52.615" starttime="20170511 19:09:52.615"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:52.617" starttime="20170511 19:09:52.617"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 19:09:52.618" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170511 19:09:53.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 19:09:53.529" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:21 UTC, end at Thu 2017-04-20 17:32:23 UTC. --
Apr 20 17:29:21 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:21 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170511 19:09:53.529" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 19:09:53.529" starttime="20170511 19:09:52.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170511 19:09:53.536" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_journalctl.txt"&gt;/home/fspcibld/20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/20170511190937673675_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:53.536" starttime="20170511 19:09:53.536"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:53.535"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:53.529"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:52.616"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:52.615"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:51.855"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:51.854"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:51.854"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:51.853"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.537" starttime="20170511 19:09:50.001"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.538" starttime="20170511 19:09:49.987"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.538" starttime="20170511 19:09:49.984"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.538" starttime="20170511 19:09:49.984"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:53.540" starttime="20170511 19:09:53.539"></status>
</kw>
<msg timestamp="20170511 19:09:53.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:53.540" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170511 19:09:53.540" starttime="20170511 19:09:53.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:53.540" starttime="20170511 19:09:53.540"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:53.560" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:53.560" starttime="20170511 19:09:53.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:53.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:53.561" starttime="20170511 19:09:53.561"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:53.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:53.562" starttime="20170511 19:09:53.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:53.563" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:53.563" starttime="20170511 19:09:53.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:53.911" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:53.911" starttime="20170511 19:09:53.564"></status>
</kw>
<msg timestamp="20170511 19:09:53.912" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:53.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:53.912" starttime="20170511 19:09:53.563"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:53.912" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:53.912" starttime="20170511 19:09:53.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:53.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:53.913" starttime="20170511 19:09:53.913"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.913" starttime="20170511 19:09:53.558"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.914" starttime="20170511 19:09:53.557"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.914" starttime="20170511 19:09:53.556"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:53.914" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170511 19:09:53.914" starttime="20170511 19:09:53.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:53.915" starttime="20170511 19:09:53.915"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:53.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None </msg>
<msg timestamp="20170511 19:09:53.978" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:53.978" starttime="20170511 19:09:53.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:53.979" starttime="20170511 19:09:53.978"></status>
</kw>
<msg timestamp="20170511 19:09:53.979" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:53.979" starttime="20170511 19:09:53.556"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:53.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170511 19:09:53.980" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170511 19:09:53.980" starttime="20170511 19:09:53.980"></status>
</kw>
<msg timestamp="20170511 19:09:53.980" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 19:09:53.980" starttime="20170511 19:09:53.979"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170511 19:09:53.981" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170511 19:09:53.981" starttime="20170511 19:09:53.981"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.981" starttime="20170511 19:09:53.555"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.981" starttime="20170511 19:09:53.541"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.981" starttime="20170511 19:09:53.538"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:53.982" starttime="20170511 19:09:53.538"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:53.984" starttime="20170511 19:09:53.983"></status>
</kw>
<msg timestamp="20170511 19:09:53.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:53.984" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170511 19:09:53.984" starttime="20170511 19:09:53.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:53.985" starttime="20170511 19:09:53.984"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170511 19:09:54.001" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:54.000"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:53.999"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:53.985"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:53.982"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:53.982"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:39.769"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:39.767"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:39.766"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.001" starttime="20170511 19:09:39.766"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170511 19:09:54.338" starttime="20170511 19:09:54.002"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.338" starttime="20170511 19:09:39.765"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.338" starttime="20170511 19:09:34.615"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.338" starttime="20170511 19:09:34.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.339" starttime="20170511 19:09:54.339"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170511 19:09:54.340" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170511 19:09:54.340" starttime="20170511 19:09:54.340"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170511 19:09:54.341" level="INFO">${FFDC_DIR_PATH} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170511 19:09:54.341" starttime="20170511 19:09:54.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.342" starttime="20170511 19:09:54.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.342" starttime="20170511 19:09:54.342"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.343" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170511 19:09:54.343" starttime="20170511 19:09:54.343"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.344" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170511 19:09:54.344" starttime="20170511 19:09:54.344"></status>
</kw>
<msg timestamp="20170511 19:09:54.344" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170511 19:09:54.344" starttime="20170511 19:09:54.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.345" starttime="20170511 19:09:54.344"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.345" starttime="20170511 19:09:54.345"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 19:09:54.346" level="INFO">${cur_time} = 2017-05-11 19:09:54:346277</msg>
<status status="PASS" endtime="20170511 19:09:54.346" starttime="20170511 19:09:54.346"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 19:09:54.347" level="INFO">${cur_time} = 20170511190954346277</msg>
<status status="PASS" endtime="20170511 19:09:54.347" starttime="20170511 19:09:54.347"></status>
</kw>
<msg timestamp="20170511 19:09:54.347" level="INFO">${cur_time} = 20170511190954346277</msg>
<status status="PASS" endtime="20170511 19:09:54.347" starttime="20170511 19:09:54.346"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.348" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:54.348" starttime="20170511 19:09:54.348"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.348" starttime="20170511 19:09:54.340"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.348" starttime="20170511 19:09:34.353"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.349" starttime="20170511 19:09:34.346"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.349" starttime="20170511 19:09:34.345"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170511 19:09:54.349" critical="yes" starttime="20170511 19:08:52.072">404 != 200</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.352" starttime="20170511 19:09:54.351"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170511 19:09:54.353" starttime="20170511 19:09:54.353"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 19:09:54.366" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 19:09:54.367" starttime="20170511 19:09:54.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 19:09:54.367" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 19:09:54.367" starttime="20170511 19:09:54.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 19:09:54.368" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 19:09:54.368" starttime="20170511 19:09:54.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 19:09:54.369" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 19:09:54.369" starttime="20170511 19:09:54.368"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.703" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 19:09:54.703" starttime="20170511 19:09:54.369"></status>
</kw>
<msg timestamp="20170511 19:09:54.703" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 19:09:54.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:54.703" starttime="20170511 19:09:54.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.704" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:54.704" starttime="20170511 19:09:54.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:54.704" starttime="20170511 19:09:54.704"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.705" starttime="20170511 19:09:54.365"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.705" starttime="20170511 19:09:54.364"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.705" starttime="20170511 19:09:54.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 19:09:54.705" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 19:09:54.705" starttime="20170511 19:09:54.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.706" starttime="20170511 19:09:54.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 19:09:54.808" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 19:09:54.808" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:54.808" starttime="20170511 19:09:54.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.809" starttime="20170511 19:09:54.808"></status>
</kw>
<msg timestamp="20170511 19:09:54.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 19:09:54.809" starttime="20170511 19:09:54.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 19:09:54.810" starttime="20170511 19:09:54.809"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 19:09:54.810" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 19:09:54.810" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 19:09:54.810" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 19:09:54.810" starttime="20170511 19:09:54.810"></status>
</kw>
<msg timestamp="20170511 19:09:54.811" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 19:09:54.811" starttime="20170511 19:09:54.362"></status>
</kw>
<msg timestamp="20170511 19:09:54.811" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170511 19:09:54.811" starttime="20170511 19:09:54.362"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170511 19:09:54.812" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170511 19:09:54.812" starttime="20170511 19:09:54.812"></status>
</kw>
<msg timestamp="20170511 19:09:54.812" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 19:09:54.812" starttime="20170511 19:09:54.811"></status>
</kw>
<msg timestamp="20170511 19:09:54.813" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 19:09:54.813" starttime="20170511 19:09:54.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.813" starttime="20170511 19:09:54.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.814" starttime="20170511 19:09:54.814"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170511 19:09:54.815" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170511 19:09:54.815" starttime="20170511 19:09:54.814"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170511 19:09:54.815" level="INFO">${FFDC_DIR_PATH} = 20170511190937673675_TestBiosUpdate/20170511190937673675_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170511 19:09:54.815" starttime="20170511 19:09:54.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.816" starttime="20170511 19:09:54.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.817" starttime="20170511 19:09:54.816"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.817" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170511 19:09:54.817" starttime="20170511 19:09:54.817"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.818" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170511 19:09:54.818" starttime="20170511 19:09:54.818"></status>
</kw>
<msg timestamp="20170511 19:09:54.818" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170511 19:09:54.818" starttime="20170511 19:09:54.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.819" starttime="20170511 19:09:54.819"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170511 19:09:54.820" starttime="20170511 19:09:54.819"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 19:09:54.821" level="INFO">${cur_time} = 2017-05-11 19:09:54:820751</msg>
<status status="PASS" endtime="20170511 19:09:54.821" starttime="20170511 19:09:54.821"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 19:09:54.822" level="INFO">${cur_time} = 20170511190954820751</msg>
<status status="PASS" endtime="20170511 19:09:54.822" starttime="20170511 19:09:54.821"></status>
</kw>
<msg timestamp="20170511 19:09:54.822" level="INFO">${cur_time} = 20170511190954820751</msg>
<status status="PASS" endtime="20170511 19:09:54.822" starttime="20170511 19:09:54.820"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170511 19:09:54.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 19:09:54.823" starttime="20170511 19:09:54.822"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.823" starttime="20170511 19:09:54.814"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.823" starttime="20170511 19:09:54.361"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.823" starttime="20170511 19:09:54.353"></status>
</kw>
<status status="PASS" endtime="20170511 19:09:54.823" starttime="20170511 19:09:54.352"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170511 19:09:54.823" critical="yes" starttime="20170511 19:09:54.350"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170511 19:09:54.824" starttime="20170511 19:08:51.344"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
