<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170509 17:10:35.935" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170509 17:10:36.882" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170509 17:10:36.882" starttime="20170509 17:10:36.882"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170509 17:10:36.883" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170509 17:10:36.883" starttime="20170509 17:10:36.882"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:36.883" starttime="20170509 17:10:36.881"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170509 17:10:36.890" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 17:10:36.962" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 17:10:36.963" starttime="20170509 17:10:36.961"></status>
</kw>
<msg timestamp="20170509 17:10:36.963" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 17:10:36.963" starttime="20170509 17:10:36.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:36.965" starttime="20170509 17:10:36.965"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:36.965" starttime="20170509 17:10:36.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:36.966" starttime="20170509 17:10:36.965"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 17:10:36.967" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 17:10:36.967" starttime="20170509 17:10:36.967"></status>
</kw>
<msg timestamp="20170509 17:10:36.967" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 17:10:36.967" starttime="20170509 17:10:36.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:36.970" starttime="20170509 17:10:36.970"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:36.971" starttime="20170509 17:10:36.968"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:36.971" starttime="20170509 17:10:36.967"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 17:10:36.972" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170509 17:10:38.913" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 17:10:38.913" starttime="20170509 17:10:36.971"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:38.913" starttime="20170509 17:10:36.959"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:10:38.914" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170509 17:10:39.043" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:10:39.043" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170509 17:10:39.043" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:10:39.043" starttime="20170509 17:10:38.913"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170509 17:10:39.044" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170509 17:10:39.044" starttime="20170509 17:10:39.044"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170509 17:10:39.044" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170509 17:10:39.045" starttime="20170509 17:10:39.044"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.045" starttime="20170509 17:10:36.956"></status>
</kw>
<msg timestamp="20170509 17:10:39.045" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170509 17:10:39.325" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170509 17:10:39.342" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170509 17:10:39.342" starttime="20170509 17:10:39.340"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:39.344" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170509 17:10:39.344" starttime="20170509 17:10:39.343"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:10:39.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:10:39.349" starttime="20170509 17:10:39.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:39.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:39.350" starttime="20170509 17:10:39.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:10:39.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:10:39.351" starttime="20170509 17:10:39.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:10:39.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:10:39.352" starttime="20170509 17:10:39.351"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:10:39.650" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:10:39.650" starttime="20170509 17:10:39.353"></status>
</kw>
<msg timestamp="20170509 17:10:39.650" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:10:39.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:39.650" starttime="20170509 17:10:39.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:10:39.651" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:39.651" starttime="20170509 17:10:39.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:39.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:39.652" starttime="20170509 17:10:39.651"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.652" starttime="20170509 17:10:39.347"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.652" starttime="20170509 17:10:39.346"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.652" starttime="20170509 17:10:39.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:39.653" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170509 17:10:39.653" starttime="20170509 17:10:39.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:39.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:39.654" starttime="20170509 17:10:39.653"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:39.654" starttime="20170509 17:10:39.654"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170509 17:10:39.656" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170509 17:10:39.656" starttime="20170509 17:10:39.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170509 17:10:39.657" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170509 17:10:39.657" starttime="20170509 17:10:39.656"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.657" starttime="20170509 17:10:39.656"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.657" starttime="20170509 17:10:39.654"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:10:39.875" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170509 17:10:39.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:39.875" starttime="20170509 17:10:39.657"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170509 17:10:39.876" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170509 17:10:39.876" starttime="20170509 17:10:39.876"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170509 17:10:39.877" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170509 17:10:39.877" starttime="20170509 17:10:39.877"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.877" starttime="20170509 17:10:39.876"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.878" starttime="20170509 17:10:39.875"></status>
</kw>
<msg timestamp="20170509 17:10:39.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:39.878" starttime="20170509 17:10:39.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:39.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:39.879" starttime="20170509 17:10:39.878"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170509 17:10:39.879" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:10:39.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:10:39.879" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170509 17:10:39.879" starttime="20170509 17:10:39.879"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:39.879" starttime="20170509 17:10:39.342"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:10:39.883" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:10:39.883" starttime="20170509 17:10:39.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:39.884" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:39.884" starttime="20170509 17:10:39.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:10:39.885" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:10:39.885" starttime="20170509 17:10:39.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:10:39.885" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:10:39.886" starttime="20170509 17:10:39.885"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:10:40.075" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:10:40.075" starttime="20170509 17:10:39.886"></status>
</kw>
<msg timestamp="20170509 17:10:40.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:10:40.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:40.075" starttime="20170509 17:10:39.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:10:40.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:40.076" starttime="20170509 17:10:40.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:40.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:40.077" starttime="20170509 17:10:40.076"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:40.077" starttime="20170509 17:10:39.882"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:40.077" starttime="20170509 17:10:39.881"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:40.077" starttime="20170509 17:10:39.881"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:40.078" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170509 17:10:40.078" starttime="20170509 17:10:40.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:40.078" starttime="20170509 17:10:40.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:10:40.164" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170509 17:10:40.164" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:40.164" starttime="20170509 17:10:40.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:40.165" starttime="20170509 17:10:40.165"></status>
</kw>
<msg timestamp="20170509 17:10:40.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:40.165" starttime="20170509 17:10:39.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:40.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:40.166" starttime="20170509 17:10:40.166"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 17:10:40.167" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:10:40.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:10:40.167" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170509 17:10:40.167" starttime="20170509 17:10:40.166"></status>
</kw>
<msg timestamp="20170509 17:10:40.167" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170509 17:10:40.167" starttime="20170509 17:10:39.879"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170509 17:10:40.168" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:40.168" starttime="20170509 17:10:40.167"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:40.168" starttime="20170509 17:10:39.339"></status>
</kw>
<msg timestamp="20170509 17:10:40.201" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170509 17:10:40.217" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170509 17:10:40.222" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170509 17:10:40.222" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 17:10:40.225" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 17:10:40.225" starttime="20170509 17:10:40.224"></status>
</kw>
<msg timestamp="20170509 17:10:40.225" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 17:10:40.225" starttime="20170509 17:10:40.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:40.226" starttime="20170509 17:10:40.226"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:40.226" starttime="20170509 17:10:40.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:40.227" starttime="20170509 17:10:40.226"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 17:10:40.228" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 17:10:40.228" starttime="20170509 17:10:40.227"></status>
</kw>
<msg timestamp="20170509 17:10:40.228" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 17:10:40.228" starttime="20170509 17:10:40.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:40.230" starttime="20170509 17:10:40.229"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:40.230" starttime="20170509 17:10:40.229"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:40.230" starttime="20170509 17:10:40.228"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 17:10:40.230" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170509 17:10:41.846" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 17:10:41.846" starttime="20170509 17:10:40.230"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:41.846" starttime="20170509 17:10:40.223"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:10:41.878" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:10:41.879" starttime="20170509 17:10:41.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:41.880" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:41.880" starttime="20170509 17:10:41.880"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:10:41.881" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:10:41.881" starttime="20170509 17:10:41.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:10:41.881" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:10:41.881" starttime="20170509 17:10:41.881"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.146" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:10:42.146" starttime="20170509 17:10:41.882"></status>
</kw>
<msg timestamp="20170509 17:10:42.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:10:42.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.146" starttime="20170509 17:10:41.881"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.147" starttime="20170509 17:10:42.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.148" starttime="20170509 17:10:42.147"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.148" starttime="20170509 17:10:41.877"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.148" starttime="20170509 17:10:41.877"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.148" starttime="20170509 17:10:41.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:42.149" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170509 17:10:42.149" starttime="20170509 17:10:42.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:42.150" starttime="20170509 17:10:42.150"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:10:42.234" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170509 17:10:42.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.235" starttime="20170509 17:10:42.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:42.236" starttime="20170509 17:10:42.235"></status>
</kw>
<msg timestamp="20170509 17:10:42.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.236" starttime="20170509 17:10:41.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.236" starttime="20170509 17:10:42.236"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 17:10:42.237" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:10:42.237" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:10:42.237" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170509 17:10:42.237" starttime="20170509 17:10:42.237"></status>
</kw>
<msg timestamp="20170509 17:10:42.237" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170509 17:10:42.238" starttime="20170509 17:10:41.874"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.238" starttime="20170509 17:10:41.872"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:10:42.242" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:10:42.243" starttime="20170509 17:10:42.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:42.243" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:42.243" starttime="20170509 17:10:42.243"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:10:42.244" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:10:42.244" starttime="20170509 17:10:42.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:10:42.244" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:10:42.244" starttime="20170509 17:10:42.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:10:42.545" starttime="20170509 17:10:42.245"></status>
</kw>
<msg timestamp="20170509 17:10:42.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:10:42.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.545" starttime="20170509 17:10:42.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.546" starttime="20170509 17:10:42.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.547" starttime="20170509 17:10:42.546"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.547" starttime="20170509 17:10:42.241"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.547" starttime="20170509 17:10:42.241"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.547" starttime="20170509 17:10:42.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:42.548" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170509 17:10:42.548" starttime="20170509 17:10:42.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:42.548" starttime="20170509 17:10:42.548"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:10:42.648" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170509 17:10:42.648" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.648" starttime="20170509 17:10:42.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:42.649" starttime="20170509 17:10:42.649"></status>
</kw>
<msg timestamp="20170509 17:10:42.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.649" starttime="20170509 17:10:42.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.650" starttime="20170509 17:10:42.650"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 17:10:42.651" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:10:42.651" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:10:42.651" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170509 17:10:42.651" starttime="20170509 17:10:42.650"></status>
</kw>
<msg timestamp="20170509 17:10:42.651" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170509 17:10:42.651" starttime="20170509 17:10:42.239"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.651" starttime="20170509 17:10:42.238"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:10:42.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:10:42.656" starttime="20170509 17:10:42.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:42.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:42.656" starttime="20170509 17:10:42.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:10:42.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:10:42.657" starttime="20170509 17:10:42.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:10:42.659" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:10:42.659" starttime="20170509 17:10:42.657"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:10:42.941" starttime="20170509 17:10:42.659"></status>
</kw>
<msg timestamp="20170509 17:10:42.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:10:42.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.941" starttime="20170509 17:10:42.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.942" starttime="20170509 17:10:42.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:42.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:42.942" starttime="20170509 17:10:42.942"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.942" starttime="20170509 17:10:42.654"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.942" starttime="20170509 17:10:42.654"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:42.943" starttime="20170509 17:10:42.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:42.943" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170509 17:10:42.943" starttime="20170509 17:10:42.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:42.944" starttime="20170509 17:10:42.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:10:43.037" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170509 17:10:43.037" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.037" starttime="20170509 17:10:42.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.038" starttime="20170509 17:10:43.038"></status>
</kw>
<msg timestamp="20170509 17:10:43.038" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.038" starttime="20170509 17:10:42.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.039" starttime="20170509 17:10:43.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 17:10:43.040" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:10:43.040" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:10:43.040" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170509 17:10:43.040" starttime="20170509 17:10:43.039"></status>
</kw>
<msg timestamp="20170509 17:10:43.040" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170509 17:10:43.040" starttime="20170509 17:10:42.652"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.040" starttime="20170509 17:10:42.652"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:10:43.044" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:10:43.044" starttime="20170509 17:10:43.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:43.045" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:43.045" starttime="20170509 17:10:43.045"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:10:43.046" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:10:43.046" starttime="20170509 17:10:43.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:10:43.046" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:10:43.046" starttime="20170509 17:10:43.046"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:10:43.331" starttime="20170509 17:10:43.047"></status>
</kw>
<msg timestamp="20170509 17:10:43.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:10:43.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.332" starttime="20170509 17:10:43.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.332" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.333" starttime="20170509 17:10:43.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.333" starttime="20170509 17:10:43.333"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.333" starttime="20170509 17:10:43.043"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.333" starttime="20170509 17:10:43.043"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.334" starttime="20170509 17:10:43.042"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:43.334" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170509 17:10:43.334" starttime="20170509 17:10:43.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.335" starttime="20170509 17:10:43.335"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:10:43.400" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170509 17:10:43.401" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.401" starttime="20170509 17:10:43.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.401" starttime="20170509 17:10:43.401"></status>
</kw>
<msg timestamp="20170509 17:10:43.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.401" starttime="20170509 17:10:43.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.403" starttime="20170509 17:10:43.403"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 17:10:43.404" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:10:43.404" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:10:43.404" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170509 17:10:43.404" starttime="20170509 17:10:43.404"></status>
</kw>
<msg timestamp="20170509 17:10:43.405" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170509 17:10:43.405" starttime="20170509 17:10:43.041"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.405" starttime="20170509 17:10:43.040"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.466" starttime="20170509 17:10:36.890"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170509 17:10:43.472" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170509 17:10:43.474" starttime="20170509 17:10:43.467"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.474" starttime="20170509 17:10:36.889"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.474" starttime="20170509 17:10:36.884"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Clear BMC Record Log</arg>
</arguments>
<kw name="Clear BMC Record Log" library="utils">
<doc>Clears all the event logs on the BMC. This would be</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170509 17:10:43.483" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20170509 17:10:43.483" starttime="20170509 17:10:43.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170509 17:10:43.484" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20170509 17:10:43.484" starttime="20170509 17:10:43.484"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}records/events/</arg>
<arg>clear</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:43.485" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20170509 17:10:43.485" starttime="20170509 17:10:43.485"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:10:43.489" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:10:43.489" starttime="20170509 17:10:43.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:43.490" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:43.490" starttime="20170509 17:10:43.489"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:10:43.490" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:10:43.490" starttime="20170509 17:10:43.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:10:43.491" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:10:43.491" starttime="20170509 17:10:43.491"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.699" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:10:43.699" starttime="20170509 17:10:43.492"></status>
</kw>
<msg timestamp="20170509 17:10:43.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:10:43.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.700" starttime="20170509 17:10:43.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.701" starttime="20170509 17:10:43.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.702" starttime="20170509 17:10:43.702"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.702" starttime="20170509 17:10:43.488"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.703" starttime="20170509 17:10:43.487"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.703" starttime="20170509 17:10:43.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:10:43.703" level="INFO">${base_uri} = /org/openbmc/records/events//action/clear</msg>
<status status="PASS" endtime="20170509 17:10:43.703" starttime="20170509 17:10:43.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:10:43.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:10:43.704" starttime="20170509 17:10:43.704"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.704" starttime="20170509 17:10:43.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.705" starttime="20170509 17:10:43.705"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:10:43.922" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events//action/clear, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170509 17:10:43.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.922" starttime="20170509 17:10:43.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.923" starttime="20170509 17:10:43.923"></status>
</kw>
<msg timestamp="20170509 17:10:43.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.923" starttime="20170509 17:10:43.485"></status>
</kw>
<msg timestamp="20170509 17:10:43.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.924" starttime="20170509 17:10:43.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:10:43.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:10:43.924" starttime="20170509 17:10:43.924"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.924" starttime="20170509 17:10:43.482"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.925" starttime="20170509 17:10:43.474"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:43.925" starttime="20170509 17:10:36.883"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.942" starttime="20170509 17:10:43.934"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:43.943" starttime="20170509 17:10:43.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:10:44.663" starttime="20170509 17:10:43.944"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:44.663" starttime="20170509 17:10:43.943"></status>
</kw>
<status status="PASS" endtime="20170509 17:10:44.663" starttime="20170509 17:10:43.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170509 17:10:44.664" level="INFO">Copying /home/fspcibld/witherspoon.pnor to /tmp</msg>
<status status="PASS" endtime="20170509 17:10:44.664" starttime="20170509 17:10:44.664"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:20.945" starttime="20170509 17:10:44.664"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:20.946" starttime="20170509 17:10:43.933"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:20.946" starttime="20170509 17:10:43.925"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170509 17:11:20.947" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170509 17:11:20.947" level="INFO">${pnor_basename} = witherspoon.pnor</msg>
<status status="PASS" endtime="20170509 17:11:20.947" starttime="20170509 17:11:20.946"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170509 17:11:20.958" level="INFO">@{arglist} = [ /tmp/witherspoon.pnor ]</msg>
<status status="PASS" endtime="20170509 17:11:20.958" starttime="20170509 17:11:20.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170509 17:11:20.958" level="INFO">${args} = {u'data': [u'/tmp/witherspoon.pnor']}</msg>
<status status="PASS" endtime="20170509 17:11:20.958" starttime="20170509 17:11:20.958"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:20.960" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170509 17:11:20.960" starttime="20170509 17:11:20.959"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:20.962" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:20.963" starttime="20170509 17:11:20.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:20.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:20.963" starttime="20170509 17:11:20.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:20.964" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:20.964" starttime="20170509 17:11:20.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:20.965" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:20.965" starttime="20170509 17:11:20.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.148" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:21.148" starttime="20170509 17:11:20.965"></status>
</kw>
<msg timestamp="20170509 17:11:21.149" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:21.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.149" starttime="20170509 17:11:20.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.150" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.150" starttime="20170509 17:11:21.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.151" starttime="20170509 17:11:21.150"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:21.151" starttime="20170509 17:11:20.962"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:21.151" starttime="20170509 17:11:20.961"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:21.152" starttime="20170509 17:11:20.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:21.152" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170509 17:11:21.152" starttime="20170509 17:11:21.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:21.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:21.153" starttime="20170509 17:11:21.153"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:21.154" starttime="20170509 17:11:21.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:21.155" starttime="20170509 17:11:21.155"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:21.201" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170509 17:11:21.201" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.201" starttime="20170509 17:11:21.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:21.202" starttime="20170509 17:11:21.201"></status>
</kw>
<msg timestamp="20170509 17:11:21.202" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.202" starttime="20170509 17:11:20.960"></status>
</kw>
<msg timestamp="20170509 17:11:21.202" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.202" starttime="20170509 17:11:20.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 17:11:21.203" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 17:11:21.203" starttime="20170509 17:11:21.202"></status>
</kw>
<status status="FAIL" endtime="20170509 17:11:21.203" starttime="20170509 17:11:20.957"></status>
</kw>
<msg timestamp="20170509 17:11:21.204" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 17:11:21.204" starttime="20170509 17:11:20.947"></status>
</kw>
<status status="FAIL" endtime="20170509 17:11:21.204" starttime="20170509 17:10:43.925"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170509 17:11:21.205" starttime="20170509 17:11:21.205"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:21.220" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:21.220" starttime="20170509 17:11:21.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:21.221" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:21.221" starttime="20170509 17:11:21.221"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:21.222" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:21.222" starttime="20170509 17:11:21.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:21.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:21.222" starttime="20170509 17:11:21.222"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.399" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:21.399" starttime="20170509 17:11:21.223"></status>
</kw>
<msg timestamp="20170509 17:11:21.399" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:21.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.399" starttime="20170509 17:11:21.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.400" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.400" starttime="20170509 17:11:21.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.401" starttime="20170509 17:11:21.400"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:21.401" starttime="20170509 17:11:21.219"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:21.401" starttime="20170509 17:11:21.218"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:21.401" starttime="20170509 17:11:21.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:21.402" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170509 17:11:21.402" starttime="20170509 17:11:21.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:21.402" starttime="20170509 17:11:21.402"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:21.466" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170509 17:11:21.466" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.466" starttime="20170509 17:11:21.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:21.467" starttime="20170509 17:11:21.466"></status>
</kw>
<msg timestamp="20170509 17:11:21.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.467" starttime="20170509 17:11:21.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:21.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:21.468" starttime="20170509 17:11:21.467"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 17:11:21.468" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:11:21.468" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:11:21.468" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170509 17:11:21.468" starttime="20170509 17:11:21.468"></status>
</kw>
<msg timestamp="20170509 17:11:21.469" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170509 17:11:21.469" starttime="20170509 17:11:21.216"></status>
</kw>
<msg timestamp="20170509 17:11:21.469" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170509 17:11:21.469" starttime="20170509 17:11:21.215"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170509 17:11:21.470" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170509 17:11:21.470" starttime="20170509 17:11:21.470"></status>
</kw>
<msg timestamp="20170509 17:11:21.470" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 17:11:21.470" starttime="20170509 17:11:21.469"></status>
</kw>
<msg timestamp="20170509 17:11:21.470" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 17:11:21.470" starttime="20170509 17:11:21.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170509 17:11:21.487" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170509 17:11:21.487" starttime="20170509 17:11:21.487"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170509 17:11:21.492" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170509 17:11:24.500" level="INFO">${RC} = 0</msg>
<msg timestamp="20170509 17:11:24.500" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.748 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.640 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170509 17:11:24.500" starttime="20170509 17:11:21.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.503" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.748 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.640 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.651 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.582 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.582/0.655/0.748/0.062 ms</msg>
<status status="PASS" endtime="20170509 17:11:24.503" starttime="20170509 17:11:24.502"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:24.504" starttime="20170509 17:11:24.503"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.504" starttime="20170509 17:11:21.486"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 17:11:24.521" level="INFO">${cur_time} = 2017-05-09 17:11:24:520604</msg>
<status status="PASS" endtime="20170509 17:11:24.521" starttime="20170509 17:11:24.520"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 17:11:24.521" level="INFO">${cur_time} = 20170509171124520604</msg>
<status status="PASS" endtime="20170509 17:11:24.522" starttime="20170509 17:11:24.521"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.522" starttime="20170509 17:11:24.519"></status>
</kw>
<msg timestamp="20170509 17:11:24.526" level="INFO">${FFDC_TIME} = 20170509171124520604</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170509 17:11:24.528" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170509 17:11:24.528" starttime="20170509 17:11:24.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170509 17:11:24.529" level="INFO">${suite_name} = 20170509171124520604_TestBiosUpdate</msg>
<status status="PASS" endtime="20170509 17:11:24.529" starttime="20170509 17:11:24.529"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170509 17:11:24.529" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170509 17:11:24.529" starttime="20170509 17:11:24.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170509 17:11:24.531" level="INFO">${test_name} = 20170509171124520604_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170509 17:11:24.531" starttime="20170509 17:11:24.531"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.531" starttime="20170509 17:11:24.527"></status>
</kw>
<msg timestamp="20170509 17:11:24.531" level="INFO">${FFDC_DIR_PATH} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/</msg>
<msg timestamp="20170509 17:11:24.532" level="INFO">${FFDC_PREFIX} = 20170509171124520604_</msg>
<msg timestamp="20170509 17:11:24.554" level="INFO">${LOG_PREFIX} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170509 17:11:24.555" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.556" starttime="20170509 17:11:24.555"></status>
</kw>
<msg timestamp="20170509 17:11:24.560" level="INFO">${FFDC_FILE_PATH} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.574" starttime="20170509 17:11:24.574"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.575" starttime="20170509 17:11:24.573"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.576" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.576" starttime="20170509 17:11:24.575"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.576" starttime="20170509 17:11:24.575"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.577" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.577" starttime="20170509 17:11:24.577"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.577" starttime="20170509 17:11:24.576"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.579" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.579" starttime="20170509 17:11:24.579"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.580" starttime="20170509 17:11:24.577"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.581" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.581" starttime="20170509 17:11:24.580"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.581" starttime="20170509 17:11:24.580"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.582" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.582" starttime="20170509 17:11:24.582"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.582" starttime="20170509 17:11:24.581"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.583" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.584" starttime="20170509 17:11:24.583"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.584" starttime="20170509 17:11:24.583"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.585" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.585" starttime="20170509 17:11:24.585"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.585" starttime="20170509 17:11:24.584"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.586" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.586" starttime="20170509 17:11:24.586"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.587" starttime="20170509 17:11:24.585"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.588" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.588" starttime="20170509 17:11:24.588"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.588" starttime="20170509 17:11:24.587"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.589" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.589" starttime="20170509 17:11:24.589"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.589" starttime="20170509 17:11:24.588"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.590" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.591" starttime="20170509 17:11:24.590"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.591" starttime="20170509 17:11:24.590"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.592" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:24.592" starttime="20170509 17:11:24.591"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.592" starttime="20170509 17:11:24.591"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 17:11:24.594" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 17:11:24.594" starttime="20170509 17:11:24.594"></status>
</kw>
<msg timestamp="20170509 17:11:24.595" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 17:11:24.595" starttime="20170509 17:11:24.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:24.596" starttime="20170509 17:11:24.595"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.596" starttime="20170509 17:11:24.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:24.596" starttime="20170509 17:11:24.596"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 17:11:24.597" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 17:11:24.598" starttime="20170509 17:11:24.597"></status>
</kw>
<msg timestamp="20170509 17:11:24.598" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 17:11:24.598" starttime="20170509 17:11:24.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:24.600" starttime="20170509 17:11:24.599"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.600" starttime="20170509 17:11:24.599"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:24.600" starttime="20170509 17:11:24.598"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 17:11:24.600" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170509 17:11:26.310" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 17:11:26.310" starttime="20170509 17:11:24.600"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.310" starttime="20170509 17:11:24.593"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:26.311" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170509 17:11:26.377" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:26.377" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170509 17:11:26.378" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:26.378" starttime="20170509 17:11:26.310"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.378" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170509 17:11:26.378" starttime="20170509 17:11:26.378"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.379" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170509 17:11:26.379" starttime="20170509 17:11:26.378"></status>
</kw>
<msg timestamp="20170509 17:11:26.379" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170509 17:11:26.379" starttime="20170509 17:11:24.592"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.380" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.380" starttime="20170509 17:11:26.380"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.381" starttime="20170509 17:11:26.379"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.381" starttime="20170509 17:11:24.587"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.382" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.382" starttime="20170509 17:11:26.381"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.382" starttime="20170509 17:11:26.381"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 17:11:26.383" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170509 17:11:26.383" starttime="20170509 17:11:26.382"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.384" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.384" starttime="20170509 17:11:26.384"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.384" starttime="20170509 17:11:26.383"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.388" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.388" starttime="20170509 17:11:26.387"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.388" starttime="20170509 17:11:26.384"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.388" starttime="20170509 17:11:26.383"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.389" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.389" starttime="20170509 17:11:26.389"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.389" starttime="20170509 17:11:26.388"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.390" starttime="20170509 17:11:26.390"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.391" starttime="20170509 17:11:26.390"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.391" starttime="20170509 17:11:26.388"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.392" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.392" starttime="20170509 17:11:26.392"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.392" starttime="20170509 17:11:26.391"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.393" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.393" starttime="20170509 17:11:26.393"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.393" starttime="20170509 17:11:26.392"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.393" starttime="20170509 17:11:26.391"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.393" starttime="20170509 17:11:26.383"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.395" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:26.395" starttime="20170509 17:11:26.395"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.395" starttime="20170509 17:11:26.394"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.395" starttime="20170509 17:11:24.573"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 17:11:26.403" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170509 17:11:26.403" starttime="20170509 17:11:26.403"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170509 17:11:26.404" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170509 17:11:26.404" starttime="20170509 17:11:26.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:26.406" starttime="20170509 17:11:26.405"></status>
</kw>
<msg timestamp="20170509 17:11:26.406" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170509 17:11:26.406" starttime="20170509 17:11:26.405"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:26.408" starttime="20170509 17:11:26.407"></status>
</kw>
<msg timestamp="20170509 17:11:26.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:26.408" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 17:11:26.408" starttime="20170509 17:11:26.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:26.408" starttime="20170509 17:11:26.408"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 17:11:26.431" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 17:11:26.432" starttime="20170509 17:11:26.431"></status>
</kw>
<msg timestamp="20170509 17:11:26.432" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 17:11:26.432" starttime="20170509 17:11:26.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:26.433" starttime="20170509 17:11:26.433"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.433" starttime="20170509 17:11:26.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:26.434" starttime="20170509 17:11:26.433"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 17:11:26.435" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 17:11:26.435" starttime="20170509 17:11:26.434"></status>
</kw>
<msg timestamp="20170509 17:11:26.435" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 17:11:26.435" starttime="20170509 17:11:26.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:26.437" starttime="20170509 17:11:26.436"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.437" starttime="20170509 17:11:26.436"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:26.437" starttime="20170509 17:11:26.435"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 17:11:26.437" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170509 17:11:28.083" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 17:11:28.083" starttime="20170509 17:11:26.437"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:28.083" starttime="20170509 17:11:26.430"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 17:11:28.084" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170509 17:11:28.084" starttime="20170509 17:11:28.083"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 17:11:28.085" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170509 17:11:28.085" starttime="20170509 17:11:28.085"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170509 17:11:28.091" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170509 17:11:28.091" starttime="20170509 17:11:28.085"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:28.094" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:28.094" starttime="20170509 17:11:28.093"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:28.094" starttime="20170509 17:11:28.093"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:28.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:28.095" starttime="20170509 17:11:28.095"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:28.095" starttime="20170509 17:11:28.094"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:28.096" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:28.097" starttime="20170509 17:11:28.096"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:28.097" starttime="20170509 17:11:28.095"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:28.098" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:28.098" starttime="20170509 17:11:28.097"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:28.098" starttime="20170509 17:11:28.097"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:28.098" starttime="20170509 17:11:28.092"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:28.098" starttime="20170509 17:11:28.092"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:28.099" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170509 17:11:29.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:29.324" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170509 17:11:29.324" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:29.324" starttime="20170509 17:11:28.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.330" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.330" starttime="20170509 17:11:29.330"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.330" starttime="20170509 17:11:29.329"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.330" starttime="20170509 17:11:29.324"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.331" starttime="20170509 17:11:28.091"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.331" starttime="20170509 17:11:28.091"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.331" starttime="20170509 17:11:28.091"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.331" starttime="20170509 17:11:28.084"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.331" starttime="20170509 17:11:28.084"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 17:11:29.332" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170509 17:11:29.332" starttime="20170509 17:11:29.332"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.333" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170509 17:11:29.333" starttime="20170509 17:11:29.332"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.336" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.336" starttime="20170509 17:11:29.336"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.336" starttime="20170509 17:11:29.335"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.337" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.337" starttime="20170509 17:11:29.337"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.338" starttime="20170509 17:11:29.336"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.339" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.339" starttime="20170509 17:11:29.338"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.339" starttime="20170509 17:11:29.338"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.340" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.340" starttime="20170509 17:11:29.340"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.340" starttime="20170509 17:11:29.339"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.340" starttime="20170509 17:11:29.334"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.340" starttime="20170509 17:11:29.334"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:29.341" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170509 17:11:29.409" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170509 17:11:29.409" level="INFO">${stdout} = </msg>
<msg timestamp="20170509 17:11:29.409" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170509 17:11:29.410" starttime="20170509 17:11:29.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.416" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.416" starttime="20170509 17:11:29.415"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.416" starttime="20170509 17:11:29.415"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.416" starttime="20170509 17:11:29.410"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.416" starttime="20170509 17:11:29.333"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.416" starttime="20170509 17:11:29.333"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.419" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.419" starttime="20170509 17:11:29.419"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.419" starttime="20170509 17:11:29.418"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.420" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.421" starttime="20170509 17:11:29.420"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.421" starttime="20170509 17:11:29.419"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.422" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.422" starttime="20170509 17:11:29.421"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.422" starttime="20170509 17:11:29.421"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.423" starttime="20170509 17:11:29.423"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.424" starttime="20170509 17:11:29.422"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.424" starttime="20170509 17:11:29.418"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.424" starttime="20170509 17:11:29.417"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:29.424" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170509 17:11:29.499" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:29.499" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-21"
VERSION_ID="v1.99.5-21-g717abee"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170509 17:11:29.499" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:29.499" starttime="20170509 17:11:29.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.505" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.505" starttime="20170509 17:11:29.505"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.506" starttime="20170509 17:11:29.504"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.506" starttime="20170509 17:11:29.499"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.506" starttime="20170509 17:11:29.417"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.506" starttime="20170509 17:11:29.416"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.506" starttime="20170509 17:11:29.333"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.506" starttime="20170509 17:11:29.331"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.506" starttime="20170509 17:11:29.331"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 17:11:29.507" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170509 17:11:29.507" starttime="20170509 17:11:29.507"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.508" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170509 17:11:29.508" starttime="20170509 17:11:29.507"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.511" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.511" starttime="20170509 17:11:29.510"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.511" starttime="20170509 17:11:29.510"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.512" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.512" starttime="20170509 17:11:29.512"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.512" starttime="20170509 17:11:29.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.513" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.514" starttime="20170509 17:11:29.513"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.514" starttime="20170509 17:11:29.513"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.515" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.515" starttime="20170509 17:11:29.514"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.515" starttime="20170509 17:11:29.514"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.515" starttime="20170509 17:11:29.509"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.515" starttime="20170509 17:11:29.509"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:29.516" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170509 17:11:29.600" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:29.600" level="INFO">${stdout} =  17:31:58 up 2 min,  load average: 1.73, 1.52, 0.64</msg>
<msg timestamp="20170509 17:11:29.600" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:29.600" starttime="20170509 17:11:29.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.607" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.607" starttime="20170509 17:11:29.606"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.607" starttime="20170509 17:11:29.606"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.607" starttime="20170509 17:11:29.601"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.607" starttime="20170509 17:11:29.508"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.607" starttime="20170509 17:11:29.508"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.610" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.610" starttime="20170509 17:11:29.610"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.611" starttime="20170509 17:11:29.609"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.612" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.612" starttime="20170509 17:11:29.611"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.612" starttime="20170509 17:11:29.611"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.613" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.613" starttime="20170509 17:11:29.613"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.613" starttime="20170509 17:11:29.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.614" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.614" starttime="20170509 17:11:29.614"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.614" starttime="20170509 17:11:29.613"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.615" starttime="20170509 17:11:29.609"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.615" starttime="20170509 17:11:29.608"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:29.615" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170509 17:11:29.700" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:29.700" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170509 17:11:29.700" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:29.700" starttime="20170509 17:11:29.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.706" starttime="20170509 17:11:29.706"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.706" starttime="20170509 17:11:29.705"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.706" starttime="20170509 17:11:29.700"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.707" starttime="20170509 17:11:29.607"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.707" starttime="20170509 17:11:29.607"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.709" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.710" starttime="20170509 17:11:29.709"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.710" starttime="20170509 17:11:29.709"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.711" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.711" starttime="20170509 17:11:29.711"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.711" starttime="20170509 17:11:29.710"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.712" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.712" starttime="20170509 17:11:29.712"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.712" starttime="20170509 17:11:29.711"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.713" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.713" starttime="20170509 17:11:29.713"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.714" starttime="20170509 17:11:29.712"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.714" starttime="20170509 17:11:29.708"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.714" starttime="20170509 17:11:29.708"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:29.714" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170509 17:11:29.789" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:29.789" level="INFO">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Tue May 9 16:56:15 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170509 17:11:29.789" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:29.789" starttime="20170509 17:11:29.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.796" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.795"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.794"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.789"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.707"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.707"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.508"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.506"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:29.506"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:28.084"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:26.429"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.796" starttime="20170509 17:11:26.409"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.797" starttime="20170509 17:11:26.406"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.797" starttime="20170509 17:11:26.406"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:29.798" starttime="20170509 17:11:29.798"></status>
</kw>
<msg timestamp="20170509 17:11:29.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:29.799" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 17:11:29.799" starttime="20170509 17:11:29.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:29.799" starttime="20170509 17:11:29.799"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 17:11:29.821" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 17:11:29.821" starttime="20170509 17:11:29.821"></status>
</kw>
<msg timestamp="20170509 17:11:29.821" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 17:11:29.821" starttime="20170509 17:11:29.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:29.824" starttime="20170509 17:11:29.823"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.824" starttime="20170509 17:11:29.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:29.825" starttime="20170509 17:11:29.824"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 17:11:29.826" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 17:11:29.826" starttime="20170509 17:11:29.825"></status>
</kw>
<msg timestamp="20170509 17:11:29.826" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 17:11:29.826" starttime="20170509 17:11:29.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:29.828" starttime="20170509 17:11:29.827"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.828" starttime="20170509 17:11:29.827"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:29.828" starttime="20170509 17:11:29.826"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 17:11:29.828" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170509 17:11:31.474" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 17:11:31.474" starttime="20170509 17:11:29.828"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.474" starttime="20170509 17:11:29.819"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 17:11:31.475" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170509 17:11:31.475" starttime="20170509 17:11:31.475"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 17:11:31.476" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170509 17:11:31.476" starttime="20170509 17:11:31.476"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:31.477" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_elog.txt</msg>
<status status="PASS" endtime="20170509 17:11:31.477" starttime="20170509 17:11:31.477"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:31.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:31.481" starttime="20170509 17:11:31.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:31.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:31.482" starttime="20170509 17:11:31.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:31.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:31.483" starttime="20170509 17:11:31.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:31.484" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:31.484" starttime="20170509 17:11:31.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:31.661" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:31.661" starttime="20170509 17:11:31.485"></status>
</kw>
<msg timestamp="20170509 17:11:31.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:31.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.662" starttime="20170509 17:11:31.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:31.662" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.662" starttime="20170509 17:11:31.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:31.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.663" starttime="20170509 17:11:31.662"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.663" starttime="20170509 17:11:31.479"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.663" starttime="20170509 17:11:31.479"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.663" starttime="20170509 17:11:31.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:31.664" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170509 17:11:31.664" starttime="20170509 17:11:31.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:31.665" starttime="20170509 17:11:31.664"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:31.707" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None </msg>
<msg timestamp="20170509 17:11:31.707" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.707" starttime="20170509 17:11:31.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:31.708" starttime="20170509 17:11:31.708"></status>
</kw>
<msg timestamp="20170509 17:11:31.708" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.708" starttime="20170509 17:11:31.478"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:31.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 17:11:31.709" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 17:11:31.709" starttime="20170509 17:11:31.709"></status>
</kw>
<msg timestamp="20170509 17:11:31.709" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 17:11:31.710" starttime="20170509 17:11:31.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170509 17:11:31.710" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170509 17:11:31.711" starttime="20170509 17:11:31.710"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.711" starttime="20170509 17:11:31.710"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.711" starttime="20170509 17:11:31.477"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:31.711" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170509 17:11:31.711" starttime="20170509 17:11:31.711"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:31.714" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:31.715" starttime="20170509 17:11:31.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:31.715" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:31.715" starttime="20170509 17:11:31.715"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:31.716" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:31.716" starttime="20170509 17:11:31.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:31.716" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:31.716" starttime="20170509 17:11:31.716"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:31.891" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:31.891" starttime="20170509 17:11:31.717"></status>
</kw>
<msg timestamp="20170509 17:11:31.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:31.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.891" starttime="20170509 17:11:31.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:31.892" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.892" starttime="20170509 17:11:31.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:31.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:31.893" starttime="20170509 17:11:31.892"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.893" starttime="20170509 17:11:31.713"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.893" starttime="20170509 17:11:31.713"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:31.893" starttime="20170509 17:11:31.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:31.894" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170509 17:11:31.894" starttime="20170509 17:11:31.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:31.895" starttime="20170509 17:11:31.894"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:32.122" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20170509 17:11:32.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.122" starttime="20170509 17:11:31.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.123" starttime="20170509 17:11:32.122"></status>
</kw>
<msg timestamp="20170509 17:11:32.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.123" starttime="20170509 17:11:31.712"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.124" starttime="20170509 17:11:32.124"></status>
</kw>
<msg timestamp="20170509 17:11:32.124" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170509 17:11:32.124" starttime="20170509 17:11:32.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.125" starttime="20170509 17:11:32.124"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170509 17:11:32.126" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:11:32.126" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170509 17:11:32.126" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170509 17:11:32.126" starttime="20170509 17:11:32.125"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_sensor_list.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:32.127" starttime="20170509 17:11:32.127"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.127" starttime="20170509 17:11:32.126"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.127" starttime="20170509 17:11:31.711"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:32.128" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170509 17:11:32.128" starttime="20170509 17:11:32.128"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:32.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:32.131" starttime="20170509 17:11:32.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:32.132" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:32.132" starttime="20170509 17:11:32.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:32.133" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:32.133" starttime="20170509 17:11:32.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:32.133" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:32.133" starttime="20170509 17:11:32.133"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.309" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:32.309" starttime="20170509 17:11:32.134"></status>
</kw>
<msg timestamp="20170509 17:11:32.309" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:32.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.309" starttime="20170509 17:11:32.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.310" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.310" starttime="20170509 17:11:32.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.310" starttime="20170509 17:11:32.310"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.310" starttime="20170509 17:11:32.130"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.311" starttime="20170509 17:11:32.130"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.311" starttime="20170509 17:11:32.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:32.311" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170509 17:11:32.311" starttime="20170509 17:11:32.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.312" starttime="20170509 17:11:32.312"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:32.472" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None </msg>
<msg timestamp="20170509 17:11:32.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.472" starttime="20170509 17:11:32.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.472" starttime="20170509 17:11:32.472"></status>
</kw>
<msg timestamp="20170509 17:11:32.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.473" starttime="20170509 17:11:32.128"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.474" starttime="20170509 17:11:32.473"></status>
</kw>
<msg timestamp="20170509 17:11:32.474" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170509 17:11:32.474" starttime="20170509 17:11:32.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.474" starttime="20170509 17:11:32.474"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170509 17:11:32.475" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:11:32.475" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170509 17:11:32.475" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status status="PASS" endtime="20170509 17:11:32.475" starttime="20170509 17:11:32.475"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.477" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_inventory.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:32.477" starttime="20170509 17:11:32.476"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.477" starttime="20170509 17:11:32.476"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.477" starttime="20170509 17:11:32.128"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:32.478" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_led.txt</msg>
<status status="PASS" endtime="20170509 17:11:32.478" starttime="20170509 17:11:32.477"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:32.480" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:32.481" starttime="20170509 17:11:32.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:32.481" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:32.481" starttime="20170509 17:11:32.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:32.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:32.482" starttime="20170509 17:11:32.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:32.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:32.483" starttime="20170509 17:11:32.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.659" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:32.660" starttime="20170509 17:11:32.484"></status>
</kw>
<msg timestamp="20170509 17:11:32.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:32.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.660" starttime="20170509 17:11:32.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.660" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.660" starttime="20170509 17:11:32.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.661" starttime="20170509 17:11:32.661"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.661" starttime="20170509 17:11:32.480"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.661" starttime="20170509 17:11:32.479"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.661" starttime="20170509 17:11:32.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:32.662" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170509 17:11:32.662" starttime="20170509 17:11:32.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.663" starttime="20170509 17:11:32.662"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:32.745" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20170509 17:11:32.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.745" starttime="20170509 17:11:32.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.745" starttime="20170509 17:11:32.745"></status>
</kw>
<msg timestamp="20170509 17:11:32.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.746" starttime="20170509 17:11:32.478"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.747" starttime="20170509 17:11:32.747"></status>
</kw>
<msg timestamp="20170509 17:11:32.747" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170509 17:11:32.747" starttime="20170509 17:11:32.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.748" starttime="20170509 17:11:32.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170509 17:11:32.749" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:11:32.749" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170509 17:11:32.749" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170509 17:11:32.749" starttime="20170509 17:11:32.748"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.751" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_led.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:32.751" starttime="20170509 17:11:32.750"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.751" starttime="20170509 17:11:32.749"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.751" starttime="20170509 17:11:32.477"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:32.752" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170509 17:11:32.752" starttime="20170509 17:11:32.751"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:32.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:32.756" starttime="20170509 17:11:32.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:32.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:32.757" starttime="20170509 17:11:32.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:32.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:32.758" starttime="20170509 17:11:32.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:32.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:32.758" starttime="20170509 17:11:32.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.934" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:32.934" starttime="20170509 17:11:32.759"></status>
</kw>
<msg timestamp="20170509 17:11:32.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:32.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.935" starttime="20170509 17:11:32.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.935" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.936" starttime="20170509 17:11:32.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.936" starttime="20170509 17:11:32.936"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.936" starttime="20170509 17:11:32.754"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.936" starttime="20170509 17:11:32.753"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.937" starttime="20170509 17:11:32.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:32.937" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170509 17:11:32.937" starttime="20170509 17:11:32.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.938" starttime="20170509 17:11:32.937"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:32.987" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20170509 17:11:32.988" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.988" starttime="20170509 17:11:32.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.989" starttime="20170509 17:11:32.988"></status>
</kw>
<msg timestamp="20170509 17:11:32.989" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:32.989" starttime="20170509 17:11:32.752"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:32.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 17:11:32.991" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 17:11:32.991" starttime="20170509 17:11:32.990"></status>
</kw>
<msg timestamp="20170509 17:11:32.991" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 17:11:32.991" starttime="20170509 17:11:32.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170509 17:11:32.992" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170509 17:11:32.992" starttime="20170509 17:11:32.992"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:32.991"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:32.751"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:31.476"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:31.475"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:31.475"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:31.475"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:29.819"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:29.799"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.993" starttime="20170509 17:11:29.797"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:32.994" starttime="20170509 17:11:29.797"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.996" starttime="20170509 17:11:32.996"></status>
</kw>
<msg timestamp="20170509 17:11:32.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:32.996" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 17:11:32.996" starttime="20170509 17:11:32.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:32.997" starttime="20170509 17:11:32.997"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 17:11:33.020" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 17:11:33.020" starttime="20170509 17:11:33.020"></status>
</kw>
<msg timestamp="20170509 17:11:33.020" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 17:11:33.020" starttime="20170509 17:11:33.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:33.021" starttime="20170509 17:11:33.021"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:33.022" starttime="20170509 17:11:33.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:33.024" starttime="20170509 17:11:33.023"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 17:11:33.025" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 17:11:33.025" starttime="20170509 17:11:33.024"></status>
</kw>
<msg timestamp="20170509 17:11:33.025" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 17:11:33.025" starttime="20170509 17:11:33.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:33.027" starttime="20170509 17:11:33.027"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:33.027" starttime="20170509 17:11:33.026"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:33.027" starttime="20170509 17:11:33.026"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 17:11:33.028" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170509 17:11:34.674" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 17:11:34.674" starttime="20170509 17:11:33.028"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:34.675" starttime="20170509 17:11:33.019"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170509 17:11:34.675" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170509 17:11:34.723" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170509 17:11:34.723" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170509 17:11:34.723" starttime="20170509 17:11:34.675"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170509 17:11:34.724" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170509 17:11:34.724" starttime="20170509 17:11:34.724"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:34.726" starttime="20170509 17:11:34.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:34.727"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:34.726"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:34.724"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:35.363"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:33.018"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:32.998"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:32.994"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.363" starttime="20170509 17:11:32.994"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:35.366" starttime="20170509 17:11:35.365"></status>
</kw>
<msg timestamp="20170509 17:11:35.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:35.366" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 17:11:35.366" starttime="20170509 17:11:35.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:35.367" starttime="20170509 17:11:35.366"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 17:11:35.389" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 17:11:35.389" starttime="20170509 17:11:35.389"></status>
</kw>
<msg timestamp="20170509 17:11:35.389" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 17:11:35.389" starttime="20170509 17:11:35.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:35.391" starttime="20170509 17:11:35.390"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.391" starttime="20170509 17:11:35.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:35.391" starttime="20170509 17:11:35.391"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 17:11:35.392" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 17:11:35.392" starttime="20170509 17:11:35.392"></status>
</kw>
<msg timestamp="20170509 17:11:35.392" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 17:11:35.393" starttime="20170509 17:11:35.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:35.394" starttime="20170509 17:11:35.394"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.394" starttime="20170509 17:11:35.394"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:35.395" starttime="20170509 17:11:35.393"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 17:11:35.395" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170509 17:11:37.046" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 17:11:37.047" starttime="20170509 17:11:35.395"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.047" starttime="20170509 17:11:35.388"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 17:11:37.048" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170509 17:11:37.048" starttime="20170509 17:11:37.048"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 17:11:37.049" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170509 17:11:37.049" starttime="20170509 17:11:37.049"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:37.050" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170509 17:11:37.050" starttime="20170509 17:11:37.050"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:37.052" starttime="20170509 17:11:37.051"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:37.052" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170509 17:11:37.382" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:37.382" level="INFO">${stdout} = Mem: 209340K used, 223592K free, 79884K shrd, 10356K buff, 114140K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.68 1.51 0.64 1/131 991
  PID  PPID USER  ...</msg>
<msg timestamp="20170509 17:11:37.382" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:37.382" starttime="20170509 17:11:37.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:37.389" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_proc_list.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:37.389" starttime="20170509 17:11:37.388"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.389" starttime="20170509 17:11:37.387"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.389" starttime="20170509 17:11:37.382"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.389" starttime="20170509 17:11:37.051"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.389" starttime="20170509 17:11:37.050"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:37.390" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170509 17:11:37.390" starttime="20170509 17:11:37.389"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:37.391" starttime="20170509 17:11:37.391"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:37.392" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170509 17:11:37.562" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:37.562" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue May 9 16:56:15 UTC 2017
CPU: ARMv6-compatib...</msg>
<msg timestamp="20170509 17:11:37.562" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:37.562" starttime="20170509 17:11:37.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:37.571" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_dmesg.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:37.571" starttime="20170509 17:11:37.569"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.571" starttime="20170509 17:11:37.568"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.571" starttime="20170509 17:11:37.562"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.572" starttime="20170509 17:11:37.390"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.572" starttime="20170509 17:11:37.389"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:37.572" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170509 17:11:37.572" starttime="20170509 17:11:37.572"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:37.574" starttime="20170509 17:11:37.573"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:37.574" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170509 17:11:37.718" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:37.719" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          223592 kB
MemAvailable:     263992 kB
Buffers:           10356 kB
Cached:           114144 kB
SwapCached:            0 kB
Active:            90988 kB
Inac...</msg>
<msg timestamp="20170509 17:11:37.719" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:37.719" starttime="20170509 17:11:37.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:37.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_meminfo.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:37.726" starttime="20170509 17:11:37.725"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.726" starttime="20170509 17:11:37.724"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.726" starttime="20170509 17:11:37.719"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.726" starttime="20170509 17:11:37.573"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.726" starttime="20170509 17:11:37.572"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:37.727" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170509 17:11:37.727" starttime="20170509 17:11:37.727"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:37.728" starttime="20170509 17:11:37.728"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:37.729" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170509 17:11:37.856" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:37.856" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170509 17:11:37.856" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:37.856" starttime="20170509 17:11:37.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:37.863" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_procinfo.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:37.863" starttime="20170509 17:11:37.862"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.863" starttime="20170509 17:11:37.861"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.863" starttime="20170509 17:11:37.856"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.863" starttime="20170509 17:11:37.727"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:37.863" starttime="20170509 17:11:37.726"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 17:11:37.864" level="INFO">${logpath} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170509 17:11:37.864" starttime="20170509 17:11:37.863"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:37.865" starttime="20170509 17:11:37.865"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 17:11:37.866" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170509 17:11:38.846" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 17:11:38.846" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:20 UTC, end at Thu 2017-04-20 17:32:04 UTC. --
Apr 20 17:29:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:20 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170509 17:11:38.846" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 17:11:38.846" starttime="20170509 17:11:37.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 17:11:38.854" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_journalctl.txt"&gt;/home/fspcibld/20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/20170509171124520604_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:38.853"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:38.852"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:38.847"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:37.864"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:37.863"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:37.050"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:37.048"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:37.048"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:37.048"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.854" starttime="20170509 17:11:35.387"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.855" starttime="20170509 17:11:35.367"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.855" starttime="20170509 17:11:35.364"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:38.855" starttime="20170509 17:11:35.364"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:38.857" starttime="20170509 17:11:38.856"></status>
</kw>
<msg timestamp="20170509 17:11:38.857" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:38.857" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 17:11:38.857" starttime="20170509 17:11:38.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:38.857" starttime="20170509 17:11:38.857"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:38.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:38.881" starttime="20170509 17:11:38.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:38.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:38.882" starttime="20170509 17:11:38.881"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:38.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:38.883" starttime="20170509 17:11:38.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:38.883" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:38.883" starttime="20170509 17:11:38.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.060" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:39.060" starttime="20170509 17:11:38.884"></status>
</kw>
<msg timestamp="20170509 17:11:39.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:39.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.060" starttime="20170509 17:11:38.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.061" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.061" starttime="20170509 17:11:39.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.062" starttime="20170509 17:11:39.061"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.062" starttime="20170509 17:11:38.879"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.062" starttime="20170509 17:11:38.879"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.062" starttime="20170509 17:11:38.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:39.063" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170509 17:11:39.063" starttime="20170509 17:11:39.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.064" starttime="20170509 17:11:39.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:39.107" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None </msg>
<msg timestamp="20170509 17:11:39.107" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.107" starttime="20170509 17:11:39.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.108" starttime="20170509 17:11:39.107"></status>
</kw>
<msg timestamp="20170509 17:11:39.108" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.108" starttime="20170509 17:11:38.878"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 17:11:39.109" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 17:11:39.109" starttime="20170509 17:11:39.108"></status>
</kw>
<msg timestamp="20170509 17:11:39.109" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 17:11:39.109" starttime="20170509 17:11:39.108"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170509 17:11:39.110" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170509 17:11:39.110" starttime="20170509 17:11:39.109"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.110" starttime="20170509 17:11:38.877"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.110" starttime="20170509 17:11:38.858"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.110" starttime="20170509 17:11:38.855"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.110" starttime="20170509 17:11:38.855"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.112" starttime="20170509 17:11:39.112"></status>
</kw>
<msg timestamp="20170509 17:11:39.112" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:39.112" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 17:11:39.112" starttime="20170509 17:11:39.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.113" starttime="20170509 17:11:39.113"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170509 17:11:39.134" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170509 17:11:39.134" starttime="20170509 17:11:39.134"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.134" starttime="20170509 17:11:39.133"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.134" starttime="20170509 17:11:39.113"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.134" starttime="20170509 17:11:39.111"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.135" starttime="20170509 17:11:39.110"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.135" starttime="20170509 17:11:26.406"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.135" starttime="20170509 17:11:26.403"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.135" starttime="20170509 17:11:26.403"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.135" starttime="20170509 17:11:26.403"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170509 17:11:39.447" starttime="20170509 17:11:39.135"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.447" starttime="20170509 17:11:26.402"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.447" starttime="20170509 17:11:21.471"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.448" starttime="20170509 17:11:21.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.448" starttime="20170509 17:11:39.448"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170509 17:11:39.449" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170509 17:11:39.449" starttime="20170509 17:11:39.449"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170509 17:11:39.450" level="INFO">${FFDC_DIR_PATH} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170509 17:11:39.450" starttime="20170509 17:11:39.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.451" starttime="20170509 17:11:39.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.451" starttime="20170509 17:11:39.451"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.452" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170509 17:11:39.452" starttime="20170509 17:11:39.452"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.453" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170509 17:11:39.453" starttime="20170509 17:11:39.453"></status>
</kw>
<msg timestamp="20170509 17:11:39.453" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170509 17:11:39.453" starttime="20170509 17:11:39.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.454" starttime="20170509 17:11:39.454"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.455" starttime="20170509 17:11:39.454"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 17:11:39.457" level="INFO">${cur_time} = 2017-05-09 17:11:39:457113</msg>
<status status="PASS" endtime="20170509 17:11:39.457" starttime="20170509 17:11:39.457"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 17:11:39.458" level="INFO">${cur_time} = 20170509171139457113</msg>
<status status="PASS" endtime="20170509 17:11:39.458" starttime="20170509 17:11:39.458"></status>
</kw>
<msg timestamp="20170509 17:11:39.458" level="INFO">${cur_time} = 20170509171139457113</msg>
<status status="PASS" endtime="20170509 17:11:39.458" starttime="20170509 17:11:39.456"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.459" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:39.459" starttime="20170509 17:11:39.458"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.459" starttime="20170509 17:11:39.449"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.459" starttime="20170509 17:11:21.214"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.459" starttime="20170509 17:11:21.205"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.460" starttime="20170509 17:11:21.204"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170509 17:11:39.460" critical="yes" starttime="20170509 17:10:36.880">404 != 200</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.462" starttime="20170509 17:11:39.462"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170509 17:11:39.464" starttime="20170509 17:11:39.463"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 17:11:39.480" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 17:11:39.480" starttime="20170509 17:11:39.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 17:11:39.481" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 17:11:39.481" starttime="20170509 17:11:39.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 17:11:39.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 17:11:39.482" starttime="20170509 17:11:39.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 17:11:39.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 17:11:39.483" starttime="20170509 17:11:39.482"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.915" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 17:11:39.915" starttime="20170509 17:11:39.483"></status>
</kw>
<msg timestamp="20170509 17:11:39.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 17:11:39.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.915" starttime="20170509 17:11:39.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.916" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.916" starttime="20170509 17:11:39.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.917" starttime="20170509 17:11:39.916"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.917" starttime="20170509 17:11:39.479"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.917" starttime="20170509 17:11:39.478"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:39.917" starttime="20170509 17:11:39.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 17:11:39.917" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170509 17:11:39.917" starttime="20170509 17:11:39.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.918" starttime="20170509 17:11:39.918"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 17:11:39.992" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170509 17:11:39.992" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.992" starttime="20170509 17:11:39.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.993" starttime="20170509 17:11:39.992"></status>
</kw>
<msg timestamp="20170509 17:11:39.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.993" starttime="20170509 17:11:39.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 17:11:39.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 17:11:39.994" starttime="20170509 17:11:39.993"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 17:11:39.994" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 17:11:39.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 17:11:39.994" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170509 17:11:39.994" starttime="20170509 17:11:39.994"></status>
</kw>
<msg timestamp="20170509 17:11:39.995" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170509 17:11:39.995" starttime="20170509 17:11:39.476"></status>
</kw>
<msg timestamp="20170509 17:11:39.995" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170509 17:11:39.995" starttime="20170509 17:11:39.475"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170509 17:11:39.996" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170509 17:11:39.997" starttime="20170509 17:11:39.996"></status>
</kw>
<msg timestamp="20170509 17:11:39.997" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 17:11:39.997" starttime="20170509 17:11:39.995"></status>
</kw>
<msg timestamp="20170509 17:11:39.997" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 17:11:39.997" starttime="20170509 17:11:39.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.998" starttime="20170509 17:11:39.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:39.998" starttime="20170509 17:11:39.998"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170509 17:11:39.999" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170509 17:11:39.999" starttime="20170509 17:11:39.999"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170509 17:11:40.000" level="INFO">${FFDC_DIR_PATH} = 20170509171124520604_TestBiosUpdate/20170509171124520604_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170509 17:11:40.000" starttime="20170509 17:11:39.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:40.000" starttime="20170509 17:11:40.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:40.001" starttime="20170509 17:11:40.001"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170509 17:11:40.002" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170509 17:11:40.002" starttime="20170509 17:11:40.001"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170509 17:11:40.003" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170509 17:11:40.003" starttime="20170509 17:11:40.002"></status>
</kw>
<msg timestamp="20170509 17:11:40.003" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170509 17:11:40.003" starttime="20170509 17:11:40.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:40.003" starttime="20170509 17:11:40.003"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170509 17:11:40.004" starttime="20170509 17:11:40.004"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 17:11:40.006" level="INFO">${cur_time} = 2017-05-09 17:11:40:005445</msg>
<status status="PASS" endtime="20170509 17:11:40.006" starttime="20170509 17:11:40.005"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 17:11:40.006" level="INFO">${cur_time} = 20170509171140005445</msg>
<status status="PASS" endtime="20170509 17:11:40.006" starttime="20170509 17:11:40.006"></status>
</kw>
<msg timestamp="20170509 17:11:40.007" level="INFO">${cur_time} = 20170509171140005445</msg>
<status status="PASS" endtime="20170509 17:11:40.007" starttime="20170509 17:11:40.004"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170509 17:11:40.007" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 17:11:40.007" starttime="20170509 17:11:40.007"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:40.008" starttime="20170509 17:11:39.998"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:40.008" starttime="20170509 17:11:39.475"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:40.008" starttime="20170509 17:11:39.464"></status>
</kw>
<status status="PASS" endtime="20170509 17:11:40.008" starttime="20170509 17:11:39.463"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170509 17:11:40.008" critical="yes" starttime="20170509 17:11:39.461"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170509 17:11:40.010" starttime="20170509 17:10:35.937"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
