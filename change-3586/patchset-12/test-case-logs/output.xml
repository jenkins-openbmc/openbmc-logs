<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170419 16:32:55.429">
<suite id="s1" name="Tests" source="/tmp/root/29589/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170419 16:32:55.843" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170419 16:32:55.843" status="FAIL" starttime="20170419 16:32:55.842"></status>
</kw>
<msg timestamp="20170419 16:32:55.843" level="INFO">${has_host} = False</msg>
<status endtime="20170419 16:32:55.843" status="PASS" starttime="20170419 16:32:55.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170419 16:32:55.844" status="PASS" starttime="20170419 16:32:55.844"></status>
</kw>
<status endtime="20170419 16:32:55.844" status="PASS" starttime="20170419 16:32:55.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170419 16:32:55.845" level="INFO">${port_num} = 22</msg>
<status endtime="20170419 16:32:55.845" status="PASS" starttime="20170419 16:32:55.845"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170419 16:32:55.846" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170419 16:32:55.846" status="PASS" starttime="20170419 16:32:55.846"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170419 16:32:55.846" level="INFO">${https_num} = 443</msg>
<status endtime="20170419 16:32:55.846" status="PASS" starttime="20170419 16:32:55.846"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170419 16:32:55.847" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170419 16:32:55.847" status="PASS" starttime="20170419 16:32:55.847"></status>
</kw>
<status endtime="20170419 16:32:55.847" status="PASS" starttime="20170419 16:32:55.845"></status>
</kw>
<status endtime="20170419 16:32:55.847" status="PASS" starttime="20170419 16:32:55.844"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170419 16:32:55.848" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170419 16:32:55.848" status="FAIL" starttime="20170419 16:32:55.848"></status>
</kw>
<msg timestamp="20170419 16:32:55.849" level="INFO">${has_port} = False</msg>
<status endtime="20170419 16:32:55.849" status="PASS" starttime="20170419 16:32:55.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170419 16:32:55.850" status="PASS" starttime="20170419 16:32:55.850"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170419 16:32:55.851" status="PASS" starttime="20170419 16:32:55.850"></status>
</kw>
<status endtime="20170419 16:32:55.851" status="PASS" starttime="20170419 16:32:55.849"></status>
</kw>
<status endtime="20170419 16:32:55.851" status="PASS" starttime="20170419 16:32:55.849"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170419 16:32:55.851" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170419 16:32:57.728" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170419 16:32:57.729" status="PASS" starttime="20170419 16:32:55.851"></status>
</kw>
<status endtime="20170419 16:32:57.729" status="PASS" starttime="20170419 16:32:55.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:32:57.731" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170419 16:32:57.797" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:32:57.797" level="INFO">${output} = VERSION_ID="v1.99.4-41-g5843c10"</msg>
<msg timestamp="20170419 16:32:57.797" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:32:57.798" status="PASS" starttime="20170419 16:32:57.730"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170419 16:32:57.798" level="INFO">Length is 0</msg>
<status endtime="20170419 16:32:57.798" status="PASS" starttime="20170419 16:32:57.798"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170419 16:32:57.799" level="INFO">VERSION_ID="v1.99.4-41-g5843c10"</msg>
<status endtime="20170419 16:32:57.799" status="PASS" starttime="20170419 16:32:57.798"></status>
</kw>
<status endtime="20170419 16:32:57.799" status="PASS" starttime="20170419 16:32:57.730"></status>
</kw>
<status endtime="20170419 16:32:57.799" status="PASS" starttime="20170419 16:32:57.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:32:57.800" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170419 16:32:57.945" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:32:57.946" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg timestamp="20170419 16:32:57.946" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:32:57.946" status="PASS" starttime="20170419 16:32:57.800"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170419 16:32:57.946" level="INFO">Length is 0</msg>
<status endtime="20170419 16:32:57.946" status="PASS" starttime="20170419 16:32:57.946"></status>
</kw>
<msg timestamp="20170419 16:32:57.946" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status endtime="20170419 16:32:57.946" status="PASS" starttime="20170419 16:32:57.800"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170419 16:32:57.947" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status endtime="20170419 16:32:57.948" status="PASS" starttime="20170419 16:32:57.947"></status>
</kw>
<status endtime="20170419 16:32:57.948" status="PASS" starttime="20170419 16:32:57.799"></status>
</kw>
<status endtime="20170419 16:32:57.948" status="PASS" starttime="20170419 16:32:57.799"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:32:57.950" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170419 16:32:58.044" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:32:58.045" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170419 16:32:58.045" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:32:58.045" status="PASS" starttime="20170419 16:32:57.950"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170419 16:32:58.045" level="INFO">Length is 0</msg>
<status endtime="20170419 16:32:58.045" status="PASS" starttime="20170419 16:32:58.045"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170419 16:32:58.046" level="INFO">Length is 11</msg>
<status endtime="20170419 16:32:58.046" status="PASS" starttime="20170419 16:32:58.045"></status>
</kw>
<msg timestamp="20170419 16:32:58.046" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170419 16:32:58.046" status="PASS" starttime="20170419 16:32:57.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170419 16:32:58.046" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170419 16:32:58.046" status="PASS" starttime="20170419 16:32:58.046"></status>
</kw>
<status endtime="20170419 16:32:58.047" status="PASS" starttime="20170419 16:32:57.949"></status>
</kw>
<status endtime="20170419 16:32:58.047" status="PASS" starttime="20170419 16:32:57.949"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170419 16:32:58.049" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170419 16:32:58.049" status="FAIL" starttime="20170419 16:32:58.048"></status>
</kw>
<msg timestamp="20170419 16:32:58.049" level="INFO">${has_host} = False</msg>
<status endtime="20170419 16:32:58.049" status="PASS" starttime="20170419 16:32:58.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170419 16:32:58.050" status="PASS" starttime="20170419 16:32:58.050"></status>
</kw>
<status endtime="20170419 16:32:58.050" status="PASS" starttime="20170419 16:32:58.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170419 16:32:58.051" level="INFO">${port_num} = 22</msg>
<status endtime="20170419 16:32:58.052" status="PASS" starttime="20170419 16:32:58.051"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170419 16:32:58.052" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170419 16:32:58.052" status="PASS" starttime="20170419 16:32:58.052"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170419 16:32:58.053" level="INFO">${https_num} = 443</msg>
<status endtime="20170419 16:32:58.053" status="PASS" starttime="20170419 16:32:58.052"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170419 16:32:58.053" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170419 16:32:58.053" status="PASS" starttime="20170419 16:32:58.053"></status>
</kw>
<status endtime="20170419 16:32:58.053" status="PASS" starttime="20170419 16:32:58.051"></status>
</kw>
<status endtime="20170419 16:32:58.053" status="PASS" starttime="20170419 16:32:58.050"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170419 16:32:58.054" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170419 16:32:58.054" status="FAIL" starttime="20170419 16:32:58.054"></status>
</kw>
<msg timestamp="20170419 16:32:58.054" level="INFO">${has_port} = False</msg>
<status endtime="20170419 16:32:58.055" status="PASS" starttime="20170419 16:32:58.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170419 16:32:58.056" status="PASS" starttime="20170419 16:32:58.056"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170419 16:32:58.057" status="PASS" starttime="20170419 16:32:58.056"></status>
</kw>
<status endtime="20170419 16:32:58.057" status="PASS" starttime="20170419 16:32:58.055"></status>
</kw>
<status endtime="20170419 16:32:58.057" status="PASS" starttime="20170419 16:32:58.055"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170419 16:32:58.057" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170419 16:32:59.704" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170419 16:32:59.705" status="PASS" starttime="20170419 16:32:58.057"></status>
</kw>
<status endtime="20170419 16:32:59.705" status="PASS" starttime="20170419 16:32:58.047"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:32:59.706" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170419 16:32:59.783" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:32:59.783" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170419 16:32:59.783" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:32:59.783" status="PASS" starttime="20170419 16:32:59.706"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170419 16:32:59.783" level="INFO">Length is 0</msg>
<status endtime="20170419 16:32:59.783" status="PASS" starttime="20170419 16:32:59.783"></status>
</kw>
<msg timestamp="20170419 16:32:59.784" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170419 16:32:59.784" status="PASS" starttime="20170419 16:32:59.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170419 16:32:59.784" status="PASS" starttime="20170419 16:32:59.784"></status>
</kw>
<status endtime="20170419 16:32:59.784" status="PASS" starttime="20170419 16:32:58.047"></status>
</kw>
<status endtime="20170419 16:32:59.784" status="PASS" starttime="20170419 16:32:58.047"></status>
</kw>
<status endtime="20170419 16:32:59.784" status="PASS" starttime="20170419 16:32:55.841"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/root/29589/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/29589/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:32:59.860" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:32:59.861" status="PASS" starttime="20170419 16:32:59.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:32:59.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:32:59.862" status="PASS" starttime="20170419 16:32:59.861"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:32:59.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:32:59.862" status="PASS" starttime="20170419 16:32:59.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:32:59.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:32:59.863" status="PASS" starttime="20170419 16:32:59.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.073" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:00.073" status="PASS" starttime="20170419 16:32:59.864"></status>
</kw>
<msg timestamp="20170419 16:33:00.073" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:00.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:00.074" status="PASS" starttime="20170419 16:32:59.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.074" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:00.074" status="PASS" starttime="20170419 16:33:00.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:00.075" status="PASS" starttime="20170419 16:33:00.075"></status>
</kw>
<status endtime="20170419 16:33:00.075" status="PASS" starttime="20170419 16:32:59.859"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:00.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:00.081" status="PASS" starttime="20170419 16:33:00.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:00.082" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:00.082" status="PASS" starttime="20170419 16:33:00.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:00.083" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:00.083" status="PASS" starttime="20170419 16:33:00.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:00.084" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:00.084" status="PASS" starttime="20170419 16:33:00.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.269" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:00.269" status="PASS" starttime="20170419 16:33:00.085"></status>
</kw>
<msg timestamp="20170419 16:33:00.269" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:00.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:00.269" status="PASS" starttime="20170419 16:33:00.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.270" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:00.270" status="PASS" starttime="20170419 16:33:00.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.271" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:00.271" status="PASS" starttime="20170419 16:33:00.270"></status>
</kw>
<status endtime="20170419 16:33:00.271" status="PASS" starttime="20170419 16:33:00.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:00.272" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170419 16:33:00.272" status="PASS" starttime="20170419 16:33:00.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:00.274" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:00.274" status="PASS" starttime="20170419 16:33:00.273"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:00.275" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:00.275" status="PASS" starttime="20170419 16:33:00.274"></status>
</kw>
<status endtime="20170419 16:33:00.275" status="PASS" starttime="20170419 16:33:00.274"></status>
</kw>
<status endtime="20170419 16:33:00.275" status="PASS" starttime="20170419 16:33:00.272"></status>
</kw>
<status endtime="20170419 16:33:00.275" status="PASS" starttime="20170419 16:33:00.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:00.337" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170419 16:33:00.337" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:00.337" status="PASS" starttime="20170419 16:33:00.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:00.340" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:00.340" status="PASS" starttime="20170419 16:33:00.339"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:00.340" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:00.341" status="PASS" starttime="20170419 16:33:00.340"></status>
</kw>
<status endtime="20170419 16:33:00.341" status="PASS" starttime="20170419 16:33:00.340"></status>
</kw>
<status endtime="20170419 16:33:00.341" status="PASS" starttime="20170419 16:33:00.339"></status>
</kw>
<status endtime="20170419 16:33:00.341" status="PASS" starttime="20170419 16:33:00.338"></status>
</kw>
<msg timestamp="20170419 16:33:00.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:00.341" status="PASS" starttime="20170419 16:33:00.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:00.342" status="PASS" starttime="20170419 16:33:00.341"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:00.342" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:00.342" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:00.342" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:00.342" status="PASS" starttime="20170419 16:33:00.342"></status>
</kw>
<msg timestamp="20170419 16:33:00.343" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170419 16:33:00.343" status="PASS" starttime="20170419 16:33:00.077"></status>
</kw>
<msg timestamp="20170419 16:33:00.343" level="INFO">${host_state} = Off</msg>
<status endtime="20170419 16:33:00.343" status="PASS" starttime="20170419 16:33:00.076"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170419 16:33:00.344" level="FAIL">Off != Quiesced</msg>
<status endtime="20170419 16:33:00.344" status="FAIL" starttime="20170419 16:33:00.344"></status>
</kw>
<msg timestamp="20170419 16:33:00.344" level="INFO">${status} = False</msg>
<status endtime="20170419 16:33:00.344" status="PASS" starttime="20170419 16:33:00.343"></status>
</kw>
<msg timestamp="20170419 16:33:00.345" level="INFO">${status} = False</msg>
<status endtime="20170419 16:33:00.345" status="PASS" starttime="20170419 16:33:00.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170419 16:33:00.345" status="PASS" starttime="20170419 16:33:00.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170419 16:33:00.346" status="PASS" starttime="20170419 16:33:00.345"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.347" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/root/29589/obmc-robot/logs"&gt;/tmp/root/29589/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170419 16:33:00.347" status="PASS" starttime="20170419 16:33:00.346"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.348" level="FAIL">File '/tmp/root/29589/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170419 16:33:00.348" status="FAIL" starttime="20170419 16:33:00.348"></status>
</kw>
<msg timestamp="20170419 16:33:00.348" level="INFO">${exist} = False</msg>
<status endtime="20170419 16:33:00.348" status="PASS" starttime="20170419 16:33:00.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.350" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29589/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:33:00.350" status="PASS" starttime="20170419 16:33:00.349"></status>
</kw>
<status endtime="20170419 16:33:00.350" status="PASS" starttime="20170419 16:33:00.349"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170419 16:33:00.351" level="INFO">${cur_time} = 2017-04-19 16:33:00:350528</msg>
<status endtime="20170419 16:33:00.351" status="PASS" starttime="20170419 16:33:00.350"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170419 16:33:00.351" level="INFO">${cur_time} = 20170419163300350528</msg>
<status endtime="20170419 16:33:00.351" status="PASS" starttime="20170419 16:33:00.351"></status>
</kw>
<msg timestamp="20170419 16:33:00.352" level="INFO">${cur_time} = 20170419163300350528</msg>
<status endtime="20170419 16:33:00.352" status="PASS" starttime="20170419 16:33:00.350"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.352" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29589/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:33:00.352" status="PASS" starttime="20170419 16:33:00.352"></status>
</kw>
<status endtime="20170419 16:33:00.353" status="PASS" starttime="20170419 16:33:00.346"></status>
</kw>
<status endtime="20170419 16:33:00.353" status="PASS" starttime="20170419 16:33:00.076"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170419 16:33:00.353" status="PASS" starttime="20170419 16:32:59.859"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170419 16:33:00.354" level="INFO">Delete All Sessions</msg>
<status endtime="20170419 16:33:00.354" status="PASS" starttime="20170419 16:33:00.354"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170419 16:33:00.354" status="PASS" starttime="20170419 16:32:59.787"></status>
</suite>
<status endtime="20170419 16:33:00.356" status="PASS" starttime="20170419 16:32:59.785"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/root/29589/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170419 16:33:00.387" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:33:00.387" status="PASS" starttime="20170419 16:33:00.387"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170419 16:33:00.388" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:33:00.389" status="PASS" starttime="20170419 16:33:00.388"></status>
</kw>
<msg timestamp="20170419 16:33:00.389" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:33:00.389" status="PASS" starttime="20170419 16:33:00.386"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170419 16:33:00.391" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:33:00.391" status="PASS" starttime="20170419 16:33:00.390"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170419 16:33:00.391" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:33:00.392" status="PASS" starttime="20170419 16:33:00.391"></status>
</kw>
<msg timestamp="20170419 16:33:00.392" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:33:00.392" status="PASS" starttime="20170419 16:33:00.390"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.393" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170419 16:33:00.393" status="PASS" starttime="20170419 16:33:00.392"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:33:00.400" status="PASS" starttime="20170419 16:33:00.393"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:33:00.404" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:33:00.411" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:33:00.411" level="INFO">${output} = /tmp/root/29589/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170419 16:33:00.412" status="PASS" starttime="20170419 16:33:00.400"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170419 16:33:00.422" status="PASS" starttime="20170419 16:33:00.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170419 16:33:00.423" status="PASS" starttime="20170419 16:33:00.423"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.424" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170419 16:33:00.424" status="PASS" starttime="20170419 16:33:00.424"></status>
</kw>
<msg timestamp="20170419 16:33:00.424" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170419 16:33:00.424" status="PASS" starttime="20170419 16:33:00.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.425" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170419 16:33:00.425" status="PASS" starttime="20170419 16:33:00.425"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:33:00.432" status="PASS" starttime="20170419 16:33:00.425"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170419 16:33:00.436" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:33:00.448" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:33:00.449" level="INFO">${os_con_pid} = </msg>
<status endtime="20170419 16:33:00.449" status="PASS" starttime="20170419 16:33:00.433"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170419 16:33:00.469" status="PASS" starttime="20170419 16:33:00.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.470" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170419 16:33:00.470" status="PASS" starttime="20170419 16:33:00.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:33:00.472" status="PASS" starttime="20170419 16:33:00.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:33:00.474" level="INFO">${rc} = None</msg>
<msg timestamp="20170419 16:33:00.474" level="INFO">${output} = None</msg>
<status endtime="20170419 16:33:00.474" status="PASS" starttime="20170419 16:33:00.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170419 16:33:00.475" status="PASS" starttime="20170419 16:33:00.474"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.475" level="INFO">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170419 16:33:00.475" status="PASS" starttime="20170419 16:33:00.475"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:33:00.486" status="PASS" starttime="20170419 16:33:00.476"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:33:00.490" level="INFO">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:33:00.494" level="INFO">${rc} = 1</msg>
<msg timestamp="20170419 16:33:00.495" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170419 16:33:00.495" status="PASS" starttime="20170419 16:33:00.487"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170419 16:33:00.504" status="PASS" starttime="20170419 16:33:00.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170419 16:33:00.505" status="PASS" starttime="20170419 16:33:00.504"></status>
</kw>
<msg timestamp="20170419 16:33:00.505" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170419 16:33:00.505" status="PASS" starttime="20170419 16:33:00.389"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.506" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170419 16:33:00.506" status="PASS" starttime="20170419 16:33:00.505"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.507" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170419 16:33:00.507" status="PASS" starttime="20170419 16:33:00.507"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:33:00.514" status="PASS" starttime="20170419 16:33:00.507"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:33:00.517" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:33:00.521" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:33:00.521" level="INFO">${output} = /tmp/root/29589/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170419 16:33:00.521" status="PASS" starttime="20170419 16:33:00.514"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170419 16:33:00.531" status="PASS" starttime="20170419 16:33:00.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170419 16:33:00.532" status="PASS" starttime="20170419 16:33:00.531"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.533" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170419 16:33:00.533" status="PASS" starttime="20170419 16:33:00.532"></status>
</kw>
<msg timestamp="20170419 16:33:00.533" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170419 16:33:00.533" status="PASS" starttime="20170419 16:33:00.506"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:33:00.534" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170419 16:33:00.534" status="PASS" starttime="20170419 16:33:00.533"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:33:00.541" status="PASS" starttime="20170419 16:33:00.534"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:33:00.544" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170419 16:33:00.552" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:33:00.552" level="INFO">${output} = </msg>
<status endtime="20170419 16:33:00.552" status="PASS" starttime="20170419 16:33:00.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170419 16:33:00.555" status="PASS" starttime="20170419 16:33:00.554"></status>
</kw>
<status endtime="20170419 16:33:00.555" status="PASS" starttime="20170419 16:33:00.386"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170419 16:33:00.556" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170419 16:33:00.558" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170419 16:33:00.558" status="PASS" starttime="20170419 16:33:00.557"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:00.559" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170419 16:33:00.559" status="PASS" starttime="20170419 16:33:00.559"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:00.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:00.562" status="PASS" starttime="20170419 16:33:00.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:00.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:00.563" status="PASS" starttime="20170419 16:33:00.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:00.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:00.563" status="PASS" starttime="20170419 16:33:00.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:00.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:00.564" status="PASS" starttime="20170419 16:33:00.564"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.977" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:00.977" status="PASS" starttime="20170419 16:33:00.565"></status>
</kw>
<msg timestamp="20170419 16:33:00.977" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:00.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:00.978" status="PASS" starttime="20170419 16:33:00.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.978" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:00.978" status="PASS" starttime="20170419 16:33:00.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:00.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:00.979" status="PASS" starttime="20170419 16:33:00.979"></status>
</kw>
<status endtime="20170419 16:33:00.979" status="PASS" starttime="20170419 16:33:00.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:00.980" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170419 16:33:00.980" status="PASS" starttime="20170419 16:33:00.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:00.980" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:00.980" status="PASS" starttime="20170419 16:33:00.980"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170419 16:33:00.981" status="PASS" starttime="20170419 16:33:00.981"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:00.982" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170419 16:33:00.983" status="PASS" starttime="20170419 16:33:00.982"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:00.983" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170419 16:33:00.984" status="PASS" starttime="20170419 16:33:00.983"></status>
</kw>
<status endtime="20170419 16:33:00.984" status="PASS" starttime="20170419 16:33:00.983"></status>
</kw>
<status endtime="20170419 16:33:00.984" status="PASS" starttime="20170419 16:33:00.981"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:01.353" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170419 16:33:01.354" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:01.354" status="PASS" starttime="20170419 16:33:00.984"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:01.355" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:01.355" status="PASS" starttime="20170419 16:33:01.354"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:01.356" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:01.356" status="PASS" starttime="20170419 16:33:01.355"></status>
</kw>
<status endtime="20170419 16:33:01.356" status="PASS" starttime="20170419 16:33:01.355"></status>
</kw>
<status endtime="20170419 16:33:01.356" status="PASS" starttime="20170419 16:33:01.354"></status>
</kw>
<msg timestamp="20170419 16:33:01.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:01.356" status="PASS" starttime="20170419 16:33:00.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:01.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:01.357" status="PASS" starttime="20170419 16:33:01.357"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170419 16:33:01.358" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:01.358" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:01.358" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status endtime="20170419 16:33:01.358" status="PASS" starttime="20170419 16:33:01.357"></status>
</kw>
<status endtime="20170419 16:33:01.358" status="PASS" starttime="20170419 16:33:00.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170419 16:33:01.359" status="PASS" starttime="20170419 16:33:01.358"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:01.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:01.363" status="PASS" starttime="20170419 16:33:01.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:01.363" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:01.363" status="PASS" starttime="20170419 16:33:01.363"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:01.364" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:01.364" status="PASS" starttime="20170419 16:33:01.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:01.364" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:01.365" status="PASS" starttime="20170419 16:33:01.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:02.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:02.825" status="PASS" starttime="20170419 16:33:01.365"></status>
</kw>
<msg timestamp="20170419 16:33:02.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:02.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:02.826" status="PASS" starttime="20170419 16:33:01.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:02.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:02.826" status="PASS" starttime="20170419 16:33:02.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:02.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:02.827" status="PASS" starttime="20170419 16:33:02.827"></status>
</kw>
<status endtime="20170419 16:33:02.827" status="PASS" starttime="20170419 16:33:01.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:02.828" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170419 16:33:02.828" status="PASS" starttime="20170419 16:33:02.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:02.830" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:02.830" status="PASS" starttime="20170419 16:33:02.829"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:02.831" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:02.831" status="PASS" starttime="20170419 16:33:02.831"></status>
</kw>
<status endtime="20170419 16:33:02.831" status="PASS" starttime="20170419 16:33:02.830"></status>
</kw>
<status endtime="20170419 16:33:02.831" status="PASS" starttime="20170419 16:33:02.829"></status>
</kw>
<status endtime="20170419 16:33:02.831" status="PASS" starttime="20170419 16:33:02.828"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:03.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170419 16:33:03.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:03.062" status="PASS" starttime="20170419 16:33:02.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:03.064" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:03.064" status="PASS" starttime="20170419 16:33:03.063"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:03.065" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:03.065" status="PASS" starttime="20170419 16:33:03.064"></status>
</kw>
<status endtime="20170419 16:33:03.065" status="PASS" starttime="20170419 16:33:03.064"></status>
</kw>
<status endtime="20170419 16:33:03.065" status="PASS" starttime="20170419 16:33:03.063"></status>
</kw>
<status endtime="20170419 16:33:03.065" status="PASS" starttime="20170419 16:33:03.062"></status>
</kw>
<msg timestamp="20170419 16:33:03.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:03.065" status="PASS" starttime="20170419 16:33:01.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:03.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:03.066" status="PASS" starttime="20170419 16:33:03.066"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:03.066" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:03.067" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:03.067" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:03.067" status="PASS" starttime="20170419 16:33:03.066"></status>
</kw>
<msg timestamp="20170419 16:33:03.067" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170419 16:33:03.067" status="PASS" starttime="20170419 16:33:01.360"></status>
</kw>
<msg timestamp="20170419 16:33:03.067" level="INFO">${host_state} = Off</msg>
<status endtime="20170419 16:33:03.067" status="PASS" starttime="20170419 16:33:01.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170419 16:33:03.068" status="PASS" starttime="20170419 16:33:03.068"></status>
</kw>
<status endtime="20170419 16:33:03.068" status="PASS" starttime="20170419 16:33:01.359"></status>
</kw>
<status endtime="20170419 16:33:03.068" status="PASS" starttime="20170419 16:33:01.359"></status>
</kw>
<status endtime="20170419 16:33:03.068" status="PASS" starttime="20170419 16:33:00.557"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:03.072" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:03.072" status="PASS" starttime="20170419 16:33:03.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:03.073" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:03.073" status="PASS" starttime="20170419 16:33:03.072"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:03.073" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:03.073" status="PASS" starttime="20170419 16:33:03.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:03.074" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:03.074" status="PASS" starttime="20170419 16:33:03.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.002" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:04.002" status="PASS" starttime="20170419 16:33:03.075"></status>
</kw>
<msg timestamp="20170419 16:33:04.002" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:04.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:04.002" status="PASS" starttime="20170419 16:33:03.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.003" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:04.003" status="PASS" starttime="20170419 16:33:04.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:04.004" status="PASS" starttime="20170419 16:33:04.003"></status>
</kw>
<status endtime="20170419 16:33:04.004" status="PASS" starttime="20170419 16:33:03.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:04.005" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:33:04.005" status="PASS" starttime="20170419 16:33:04.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:04.007" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:04.007" status="PASS" starttime="20170419 16:33:04.006"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:04.008" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:04.008" status="PASS" starttime="20170419 16:33:04.008"></status>
</kw>
<status endtime="20170419 16:33:04.009" status="PASS" starttime="20170419 16:33:04.007"></status>
</kw>
<status endtime="20170419 16:33:04.009" status="PASS" starttime="20170419 16:33:04.005"></status>
</kw>
<status endtime="20170419 16:33:04.009" status="PASS" starttime="20170419 16:33:04.005"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:04.260" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:33:04.260" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:04.260" status="PASS" starttime="20170419 16:33:04.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:04.262" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:04.262" status="PASS" starttime="20170419 16:33:04.261"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:04.262" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:04.263" status="PASS" starttime="20170419 16:33:04.262"></status>
</kw>
<status endtime="20170419 16:33:04.263" status="PASS" starttime="20170419 16:33:04.262"></status>
</kw>
<status endtime="20170419 16:33:04.263" status="PASS" starttime="20170419 16:33:04.261"></status>
</kw>
<status endtime="20170419 16:33:04.263" status="PASS" starttime="20170419 16:33:04.260"></status>
</kw>
<msg timestamp="20170419 16:33:04.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:04.263" status="PASS" starttime="20170419 16:33:03.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:04.264" status="PASS" starttime="20170419 16:33:04.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:04.264" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:04.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:04.264" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:04.265" status="PASS" starttime="20170419 16:33:04.264"></status>
</kw>
<msg timestamp="20170419 16:33:04.265" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:33:04.265" status="PASS" starttime="20170419 16:33:03.070"></status>
</kw>
<msg timestamp="20170419 16:33:04.265" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:33:04.265" status="PASS" starttime="20170419 16:33:03.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20170419 16:33:04.266" status="PASS" starttime="20170419 16:33:04.265"></status>
</kw>
<status endtime="20170419 16:33:04.266" status="PASS" starttime="20170419 16:33:03.069"></status>
</kw>
<status endtime="20170419 16:33:04.266" status="PASS" starttime="20170419 16:33:03.068"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170419 16:33:04.267" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170419 16:33:04.267" status="PASS" starttime="20170419 16:33:04.266"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:04.268" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170419 16:33:04.268" status="PASS" starttime="20170419 16:33:04.268"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:04.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:04.270" status="PASS" starttime="20170419 16:33:04.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:04.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:04.271" status="PASS" starttime="20170419 16:33:04.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:04.271" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:04.271" status="PASS" starttime="20170419 16:33:04.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:04.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:04.272" status="PASS" starttime="20170419 16:33:04.271"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.658" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:04.658" status="PASS" starttime="20170419 16:33:04.273"></status>
</kw>
<msg timestamp="20170419 16:33:04.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:04.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:04.658" status="PASS" starttime="20170419 16:33:04.272"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:04.659" status="PASS" starttime="20170419 16:33:04.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:04.660" status="PASS" starttime="20170419 16:33:04.659"></status>
</kw>
<status endtime="20170419 16:33:04.660" status="PASS" starttime="20170419 16:33:04.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:04.660" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170419 16:33:04.660" status="PASS" starttime="20170419 16:33:04.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:04.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:04.661" status="PASS" starttime="20170419 16:33:04.660"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170419 16:33:04.661" status="PASS" starttime="20170419 16:33:04.661"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:04.663" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170419 16:33:04.663" status="PASS" starttime="20170419 16:33:04.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:04.664" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170419 16:33:04.664" status="PASS" starttime="20170419 16:33:04.664"></status>
</kw>
<status endtime="20170419 16:33:04.664" status="PASS" starttime="20170419 16:33:04.663"></status>
</kw>
<status endtime="20170419 16:33:04.664" status="PASS" starttime="20170419 16:33:04.662"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:04.903" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170419 16:33:04.904" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:04.904" status="PASS" starttime="20170419 16:33:04.664"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:04.905" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:04.905" status="PASS" starttime="20170419 16:33:04.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:04.906" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:04.906" status="PASS" starttime="20170419 16:33:04.906"></status>
</kw>
<status endtime="20170419 16:33:04.906" status="PASS" starttime="20170419 16:33:04.905"></status>
</kw>
<status endtime="20170419 16:33:04.906" status="PASS" starttime="20170419 16:33:04.904"></status>
</kw>
<msg timestamp="20170419 16:33:04.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:04.907" status="PASS" starttime="20170419 16:33:04.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:04.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:04.907" status="PASS" starttime="20170419 16:33:04.907"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170419 16:33:04.908" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:04.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:04.908" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status endtime="20170419 16:33:04.908" status="PASS" starttime="20170419 16:33:04.907"></status>
</kw>
<status endtime="20170419 16:33:04.908" status="PASS" starttime="20170419 16:33:04.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170419 16:33:04.909" status="PASS" starttime="20170419 16:33:04.908"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:04.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:04.914" status="PASS" starttime="20170419 16:33:04.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:04.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:04.914" status="PASS" starttime="20170419 16:33:04.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:04.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:04.915" status="PASS" starttime="20170419 16:33:04.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:04.916" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:04.916" status="PASS" starttime="20170419 16:33:04.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:05.141" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:05.141" status="PASS" starttime="20170419 16:33:04.916"></status>
</kw>
<msg timestamp="20170419 16:33:05.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:05.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:05.141" status="PASS" starttime="20170419 16:33:04.916"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:05.142" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:05.142" status="PASS" starttime="20170419 16:33:05.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:05.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:05.143" status="PASS" starttime="20170419 16:33:05.142"></status>
</kw>
<status endtime="20170419 16:33:05.143" status="PASS" starttime="20170419 16:33:04.912"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:05.143" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170419 16:33:05.143" status="PASS" starttime="20170419 16:33:05.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:05.145" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:05.145" status="PASS" starttime="20170419 16:33:05.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:05.146" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:05.146" status="PASS" starttime="20170419 16:33:05.146"></status>
</kw>
<status endtime="20170419 16:33:05.146" status="PASS" starttime="20170419 16:33:05.145"></status>
</kw>
<status endtime="20170419 16:33:05.146" status="PASS" starttime="20170419 16:33:05.144"></status>
</kw>
<status endtime="20170419 16:33:05.147" status="PASS" starttime="20170419 16:33:05.143"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:05.212" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170419 16:33:05.212" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:05.212" status="PASS" starttime="20170419 16:33:05.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:05.214" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:05.214" status="PASS" starttime="20170419 16:33:05.213"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:05.215" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:05.215" status="PASS" starttime="20170419 16:33:05.215"></status>
</kw>
<status endtime="20170419 16:33:05.215" status="PASS" starttime="20170419 16:33:05.214"></status>
</kw>
<status endtime="20170419 16:33:05.215" status="PASS" starttime="20170419 16:33:05.213"></status>
</kw>
<status endtime="20170419 16:33:05.215" status="PASS" starttime="20170419 16:33:05.212"></status>
</kw>
<msg timestamp="20170419 16:33:05.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:05.216" status="PASS" starttime="20170419 16:33:04.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:05.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:05.216" status="PASS" starttime="20170419 16:33:05.216"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:05.217" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:05.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:05.217" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:05.217" status="PASS" starttime="20170419 16:33:05.217"></status>
</kw>
<msg timestamp="20170419 16:33:05.217" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170419 16:33:05.217" status="PASS" starttime="20170419 16:33:04.911"></status>
</kw>
<msg timestamp="20170419 16:33:05.218" level="INFO">${host_state} = Off</msg>
<status endtime="20170419 16:33:05.218" status="PASS" starttime="20170419 16:33:04.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170419 16:33:05.218" level="FAIL">Running != Off</msg>
<status endtime="20170419 16:33:05.219" status="FAIL" starttime="20170419 16:33:05.218"></status>
</kw>
<status endtime="20170419 16:33:05.219" status="FAIL" starttime="20170419 16:33:04.909"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:15.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:15.223" status="PASS" starttime="20170419 16:33:15.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:15.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:15.223" status="PASS" starttime="20170419 16:33:15.223"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:15.224" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:15.224" status="PASS" starttime="20170419 16:33:15.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:15.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:15.224" status="PASS" starttime="20170419 16:33:15.224"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:15.693" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:15.693" status="PASS" starttime="20170419 16:33:15.225"></status>
</kw>
<msg timestamp="20170419 16:33:15.693" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:15.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:15.693" status="PASS" starttime="20170419 16:33:15.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:15.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:15.694" status="PASS" starttime="20170419 16:33:15.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:15.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:15.694" status="PASS" starttime="20170419 16:33:15.694"></status>
</kw>
<status endtime="20170419 16:33:15.694" status="PASS" starttime="20170419 16:33:15.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:15.695" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170419 16:33:15.695" status="PASS" starttime="20170419 16:33:15.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:15.697" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:15.697" status="PASS" starttime="20170419 16:33:15.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:15.698" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:15.699" status="PASS" starttime="20170419 16:33:15.698"></status>
</kw>
<status endtime="20170419 16:33:15.699" status="PASS" starttime="20170419 16:33:15.698"></status>
</kw>
<status endtime="20170419 16:33:15.699" status="PASS" starttime="20170419 16:33:15.696"></status>
</kw>
<status endtime="20170419 16:33:15.699" status="PASS" starttime="20170419 16:33:15.695"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:17.068" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170419 16:33:17.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:17.068" status="PASS" starttime="20170419 16:33:15.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:17.070" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:17.070" status="PASS" starttime="20170419 16:33:17.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:17.071" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:17.071" status="PASS" starttime="20170419 16:33:17.071"></status>
</kw>
<status endtime="20170419 16:33:17.071" status="PASS" starttime="20170419 16:33:17.070"></status>
</kw>
<status endtime="20170419 16:33:17.071" status="PASS" starttime="20170419 16:33:17.069"></status>
</kw>
<status endtime="20170419 16:33:17.071" status="PASS" starttime="20170419 16:33:17.068"></status>
</kw>
<msg timestamp="20170419 16:33:17.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:17.072" status="PASS" starttime="20170419 16:33:15.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:17.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:17.072" status="PASS" starttime="20170419 16:33:17.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:17.073" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:17.073" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:17.073" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:17.073" status="PASS" starttime="20170419 16:33:17.072"></status>
</kw>
<msg timestamp="20170419 16:33:17.073" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170419 16:33:17.073" status="PASS" starttime="20170419 16:33:15.220"></status>
</kw>
<msg timestamp="20170419 16:33:17.073" level="INFO">${host_state} = Off</msg>
<status endtime="20170419 16:33:17.073" status="PASS" starttime="20170419 16:33:15.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170419 16:33:17.074" level="FAIL">Running != Off</msg>
<status endtime="20170419 16:33:17.074" status="FAIL" starttime="20170419 16:33:17.074"></status>
</kw>
<status endtime="20170419 16:33:17.074" status="FAIL" starttime="20170419 16:33:15.219"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:27.077" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:27.078" status="PASS" starttime="20170419 16:33:27.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:27.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:27.079" status="PASS" starttime="20170419 16:33:27.078"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:27.079" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:27.079" status="PASS" starttime="20170419 16:33:27.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:27.080" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:27.080" status="PASS" starttime="20170419 16:33:27.079"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:27.291" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:27.291" status="PASS" starttime="20170419 16:33:27.081"></status>
</kw>
<msg timestamp="20170419 16:33:27.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:27.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:27.292" status="PASS" starttime="20170419 16:33:27.080"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:27.292" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:27.292" status="PASS" starttime="20170419 16:33:27.292"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:27.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:27.293" status="PASS" starttime="20170419 16:33:27.292"></status>
</kw>
<status endtime="20170419 16:33:27.293" status="PASS" starttime="20170419 16:33:27.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:27.294" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170419 16:33:27.294" status="PASS" starttime="20170419 16:33:27.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:27.296" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:27.296" status="PASS" starttime="20170419 16:33:27.295"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:27.296" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:33:27.297" status="PASS" starttime="20170419 16:33:27.296"></status>
</kw>
<status endtime="20170419 16:33:27.297" status="PASS" starttime="20170419 16:33:27.296"></status>
</kw>
<status endtime="20170419 16:33:27.297" status="PASS" starttime="20170419 16:33:27.294"></status>
</kw>
<status endtime="20170419 16:33:27.297" status="PASS" starttime="20170419 16:33:27.294"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:27.359" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170419 16:33:27.359" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:27.359" status="PASS" starttime="20170419 16:33:27.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:27.361" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:27.361" status="PASS" starttime="20170419 16:33:27.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:27.362" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:27.362" status="PASS" starttime="20170419 16:33:27.361"></status>
</kw>
<status endtime="20170419 16:33:27.362" status="PASS" starttime="20170419 16:33:27.361"></status>
</kw>
<status endtime="20170419 16:33:27.362" status="PASS" starttime="20170419 16:33:27.360"></status>
</kw>
<status endtime="20170419 16:33:27.362" status="PASS" starttime="20170419 16:33:27.359"></status>
</kw>
<msg timestamp="20170419 16:33:27.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:27.362" status="PASS" starttime="20170419 16:33:27.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:27.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:27.363" status="PASS" starttime="20170419 16:33:27.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:27.364" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:27.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:27.364" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:27.364" status="PASS" starttime="20170419 16:33:27.363"></status>
</kw>
<msg timestamp="20170419 16:33:27.364" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170419 16:33:27.364" status="PASS" starttime="20170419 16:33:27.075"></status>
</kw>
<msg timestamp="20170419 16:33:27.364" level="INFO">${host_state} = Running</msg>
<status endtime="20170419 16:33:27.365" status="PASS" starttime="20170419 16:33:27.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170419 16:33:27.365" status="PASS" starttime="20170419 16:33:27.365"></status>
</kw>
<status endtime="20170419 16:33:27.365" status="PASS" starttime="20170419 16:33:27.075"></status>
</kw>
<status endtime="20170419 16:33:27.365" status="PASS" starttime="20170419 16:33:04.909"></status>
</kw>
<status endtime="20170419 16:33:27.365" status="PASS" starttime="20170419 16:33:04.266"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:27.369" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:27.369" status="PASS" starttime="20170419 16:33:27.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:27.370" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:27.370" status="PASS" starttime="20170419 16:33:27.370"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:27.371" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:27.371" status="PASS" starttime="20170419 16:33:27.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:27.371" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:27.371" status="PASS" starttime="20170419 16:33:27.371"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:28.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:28.007" status="PASS" starttime="20170419 16:33:27.372"></status>
</kw>
<msg timestamp="20170419 16:33:28.007" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:28.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:28.007" status="PASS" starttime="20170419 16:33:27.372"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:28.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:28.007" status="PASS" starttime="20170419 16:33:28.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:28.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:28.008" status="PASS" starttime="20170419 16:33:28.008"></status>
</kw>
<status endtime="20170419 16:33:28.008" status="PASS" starttime="20170419 16:33:27.368"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:28.009" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:33:28.009" status="PASS" starttime="20170419 16:33:28.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:28.011" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:28.011" status="PASS" starttime="20170419 16:33:28.010"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:28.012" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:28.012" status="PASS" starttime="20170419 16:33:28.012"></status>
</kw>
<status endtime="20170419 16:33:28.012" status="PASS" starttime="20170419 16:33:28.011"></status>
</kw>
<status endtime="20170419 16:33:28.012" status="PASS" starttime="20170419 16:33:28.010"></status>
</kw>
<status endtime="20170419 16:33:28.012" status="PASS" starttime="20170419 16:33:28.009"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:28.099" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:33:28.100" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:28.100" status="PASS" starttime="20170419 16:33:28.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:28.101" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:28.101" status="PASS" starttime="20170419 16:33:28.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:28.102" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:28.103" status="PASS" starttime="20170419 16:33:28.102"></status>
</kw>
<status endtime="20170419 16:33:28.103" status="PASS" starttime="20170419 16:33:28.102"></status>
</kw>
<status endtime="20170419 16:33:28.103" status="PASS" starttime="20170419 16:33:28.100"></status>
</kw>
<status endtime="20170419 16:33:28.103" status="PASS" starttime="20170419 16:33:28.100"></status>
</kw>
<msg timestamp="20170419 16:33:28.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:28.103" status="PASS" starttime="20170419 16:33:27.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:28.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:28.104" status="PASS" starttime="20170419 16:33:28.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:28.104" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:28.104" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:28.104" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:28.105" status="PASS" starttime="20170419 16:33:28.104"></status>
</kw>
<msg timestamp="20170419 16:33:28.105" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:33:28.105" status="PASS" starttime="20170419 16:33:27.367"></status>
</kw>
<msg timestamp="20170419 16:33:28.105" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:33:28.105" status="PASS" starttime="20170419 16:33:27.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:33:28.106" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:33:28.106" status="FAIL" starttime="20170419 16:33:28.105"></status>
</kw>
<status endtime="20170419 16:33:28.106" status="FAIL" starttime="20170419 16:33:27.366"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:38.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:38.110" status="PASS" starttime="20170419 16:33:38.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:38.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:38.110" status="PASS" starttime="20170419 16:33:38.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:38.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:38.111" status="PASS" starttime="20170419 16:33:38.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:38.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:38.112" status="PASS" starttime="20170419 16:33:38.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:38.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:38.332" status="PASS" starttime="20170419 16:33:38.112"></status>
</kw>
<msg timestamp="20170419 16:33:38.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:38.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:38.332" status="PASS" starttime="20170419 16:33:38.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:38.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:38.333" status="PASS" starttime="20170419 16:33:38.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:38.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:38.333" status="PASS" starttime="20170419 16:33:38.333"></status>
</kw>
<status endtime="20170419 16:33:38.333" status="PASS" starttime="20170419 16:33:38.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:38.334" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:33:38.334" status="PASS" starttime="20170419 16:33:38.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:38.336" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:38.336" status="PASS" starttime="20170419 16:33:38.336"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:38.337" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:38.337" status="PASS" starttime="20170419 16:33:38.337"></status>
</kw>
<status endtime="20170419 16:33:38.337" status="PASS" starttime="20170419 16:33:38.337"></status>
</kw>
<status endtime="20170419 16:33:38.338" status="PASS" starttime="20170419 16:33:38.335"></status>
</kw>
<status endtime="20170419 16:33:38.338" status="PASS" starttime="20170419 16:33:38.334"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:38.427" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:33:38.427" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:38.427" status="PASS" starttime="20170419 16:33:38.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:38.429" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:38.429" status="PASS" starttime="20170419 16:33:38.428"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:38.429" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:38.430" status="PASS" starttime="20170419 16:33:38.429"></status>
</kw>
<status endtime="20170419 16:33:38.430" status="PASS" starttime="20170419 16:33:38.429"></status>
</kw>
<status endtime="20170419 16:33:38.430" status="PASS" starttime="20170419 16:33:38.428"></status>
</kw>
<status endtime="20170419 16:33:38.430" status="PASS" starttime="20170419 16:33:38.427"></status>
</kw>
<msg timestamp="20170419 16:33:38.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:38.430" status="PASS" starttime="20170419 16:33:38.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:38.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:38.431" status="PASS" starttime="20170419 16:33:38.431"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:38.431" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:38.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:38.432" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:38.432" status="PASS" starttime="20170419 16:33:38.431"></status>
</kw>
<msg timestamp="20170419 16:33:38.432" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:33:38.432" status="PASS" starttime="20170419 16:33:38.107"></status>
</kw>
<msg timestamp="20170419 16:33:38.432" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:33:38.432" status="PASS" starttime="20170419 16:33:38.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:33:38.433" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:33:38.433" status="FAIL" starttime="20170419 16:33:38.432"></status>
</kw>
<status endtime="20170419 16:33:38.433" status="FAIL" starttime="20170419 16:33:38.106"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:48.436" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:48.437" status="PASS" starttime="20170419 16:33:48.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:48.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:48.438" status="PASS" starttime="20170419 16:33:48.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:48.438" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:48.438" status="PASS" starttime="20170419 16:33:48.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:48.439" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:48.439" status="PASS" starttime="20170419 16:33:48.438"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:48.616" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:48.616" status="PASS" starttime="20170419 16:33:48.439"></status>
</kw>
<msg timestamp="20170419 16:33:48.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:48.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:48.616" status="PASS" starttime="20170419 16:33:48.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:48.617" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:48.617" status="PASS" starttime="20170419 16:33:48.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:48.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:48.618" status="PASS" starttime="20170419 16:33:48.617"></status>
</kw>
<status endtime="20170419 16:33:48.618" status="PASS" starttime="20170419 16:33:48.435"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:48.618" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:33:48.618" status="PASS" starttime="20170419 16:33:48.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:48.620" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:48.620" status="PASS" starttime="20170419 16:33:48.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:48.621" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:48.621" status="PASS" starttime="20170419 16:33:48.621"></status>
</kw>
<status endtime="20170419 16:33:48.621" status="PASS" starttime="20170419 16:33:48.620"></status>
</kw>
<status endtime="20170419 16:33:48.622" status="PASS" starttime="20170419 16:33:48.619"></status>
</kw>
<status endtime="20170419 16:33:48.622" status="PASS" starttime="20170419 16:33:48.619"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:48.687" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:33:48.687" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:48.687" status="PASS" starttime="20170419 16:33:48.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:48.689" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:48.689" status="PASS" starttime="20170419 16:33:48.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:48.690" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:48.690" status="PASS" starttime="20170419 16:33:48.690"></status>
</kw>
<status endtime="20170419 16:33:48.690" status="PASS" starttime="20170419 16:33:48.689"></status>
</kw>
<status endtime="20170419 16:33:48.690" status="PASS" starttime="20170419 16:33:48.688"></status>
</kw>
<status endtime="20170419 16:33:48.690" status="PASS" starttime="20170419 16:33:48.687"></status>
</kw>
<msg timestamp="20170419 16:33:48.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:48.690" status="PASS" starttime="20170419 16:33:48.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:48.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:48.691" status="PASS" starttime="20170419 16:33:48.691"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:48.692" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:48.692" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:48.692" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:48.692" status="PASS" starttime="20170419 16:33:48.691"></status>
</kw>
<msg timestamp="20170419 16:33:48.692" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:33:48.692" status="PASS" starttime="20170419 16:33:48.434"></status>
</kw>
<msg timestamp="20170419 16:33:48.692" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:33:48.692" status="PASS" starttime="20170419 16:33:48.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:33:48.693" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:33:48.693" status="FAIL" starttime="20170419 16:33:48.693"></status>
</kw>
<status endtime="20170419 16:33:48.693" status="FAIL" starttime="20170419 16:33:48.433"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:33:58.697" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:33:58.697" status="PASS" starttime="20170419 16:33:58.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:33:58.698" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:33:58.698" status="PASS" starttime="20170419 16:33:58.698"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:33:58.699" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:33:58.699" status="PASS" starttime="20170419 16:33:58.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:33:58.699" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:33:58.699" status="PASS" starttime="20170419 16:33:58.699"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:33:58.874" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:33:58.874" status="PASS" starttime="20170419 16:33:58.700"></status>
</kw>
<msg timestamp="20170419 16:33:58.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:33:58.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:58.875" status="PASS" starttime="20170419 16:33:58.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:33:58.875" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:58.875" status="PASS" starttime="20170419 16:33:58.875"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:58.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:58.876" status="PASS" starttime="20170419 16:33:58.875"></status>
</kw>
<status endtime="20170419 16:33:58.876" status="PASS" starttime="20170419 16:33:58.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:33:58.877" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:33:58.877" status="PASS" starttime="20170419 16:33:58.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:58.879" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:58.879" status="PASS" starttime="20170419 16:33:58.878"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:58.880" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:33:58.880" status="PASS" starttime="20170419 16:33:58.879"></status>
</kw>
<status endtime="20170419 16:33:58.880" status="PASS" starttime="20170419 16:33:58.879"></status>
</kw>
<status endtime="20170419 16:33:58.880" status="PASS" starttime="20170419 16:33:58.877"></status>
</kw>
<status endtime="20170419 16:33:58.880" status="PASS" starttime="20170419 16:33:58.877"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:33:58.952" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:33:58.952" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:58.952" status="PASS" starttime="20170419 16:33:58.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:33:58.954" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:58.954" status="PASS" starttime="20170419 16:33:58.953"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:33:58.955" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:33:58.955" status="PASS" starttime="20170419 16:33:58.954"></status>
</kw>
<status endtime="20170419 16:33:58.955" status="PASS" starttime="20170419 16:33:58.954"></status>
</kw>
<status endtime="20170419 16:33:58.955" status="PASS" starttime="20170419 16:33:58.953"></status>
</kw>
<status endtime="20170419 16:33:58.955" status="PASS" starttime="20170419 16:33:58.952"></status>
</kw>
<msg timestamp="20170419 16:33:58.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:33:58.955" status="PASS" starttime="20170419 16:33:58.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:33:58.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:33:58.956" status="PASS" starttime="20170419 16:33:58.956"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:33:58.956" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:33:58.957" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:33:58.957" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:33:58.957" status="PASS" starttime="20170419 16:33:58.956"></status>
</kw>
<msg timestamp="20170419 16:33:58.957" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:33:58.957" status="PASS" starttime="20170419 16:33:58.695"></status>
</kw>
<msg timestamp="20170419 16:33:58.957" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:33:58.957" status="PASS" starttime="20170419 16:33:58.694"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:33:58.958" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:33:58.958" status="FAIL" starttime="20170419 16:33:58.957"></status>
</kw>
<status endtime="20170419 16:33:58.958" status="FAIL" starttime="20170419 16:33:58.694"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:34:08.962" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:34:08.962" status="PASS" starttime="20170419 16:34:08.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:34:08.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:34:08.963" status="PASS" starttime="20170419 16:34:08.962"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:34:08.963" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:34:08.963" status="PASS" starttime="20170419 16:34:08.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:34:08.964" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:34:08.964" status="PASS" starttime="20170419 16:34:08.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:34:09.142" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:34:09.142" status="PASS" starttime="20170419 16:34:08.965"></status>
</kw>
<msg timestamp="20170419 16:34:09.142" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:34:09.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:09.142" status="PASS" starttime="20170419 16:34:08.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:34:09.143" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:09.143" status="PASS" starttime="20170419 16:34:09.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:09.144" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:09.144" status="PASS" starttime="20170419 16:34:09.143"></status>
</kw>
<status endtime="20170419 16:34:09.144" status="PASS" starttime="20170419 16:34:08.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:34:09.144" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:34:09.144" status="PASS" starttime="20170419 16:34:09.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:09.147" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:09.147" status="PASS" starttime="20170419 16:34:09.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:09.148" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:09.148" status="PASS" starttime="20170419 16:34:09.147"></status>
</kw>
<status endtime="20170419 16:34:09.148" status="PASS" starttime="20170419 16:34:09.147"></status>
</kw>
<status endtime="20170419 16:34:09.148" status="PASS" starttime="20170419 16:34:09.145"></status>
</kw>
<status endtime="20170419 16:34:09.148" status="PASS" starttime="20170419 16:34:09.145"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:34:09.212" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:34:09.212" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:09.212" status="PASS" starttime="20170419 16:34:09.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:09.214" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:09.214" status="PASS" starttime="20170419 16:34:09.214"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:09.215" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:09.215" status="PASS" starttime="20170419 16:34:09.215"></status>
</kw>
<status endtime="20170419 16:34:09.215" status="PASS" starttime="20170419 16:34:09.214"></status>
</kw>
<status endtime="20170419 16:34:09.215" status="PASS" starttime="20170419 16:34:09.213"></status>
</kw>
<status endtime="20170419 16:34:09.215" status="PASS" starttime="20170419 16:34:09.213"></status>
</kw>
<msg timestamp="20170419 16:34:09.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:09.216" status="PASS" starttime="20170419 16:34:08.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:09.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:09.216" status="PASS" starttime="20170419 16:34:09.216"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:34:09.217" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:34:09.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:34:09.217" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:34:09.217" status="PASS" starttime="20170419 16:34:09.217"></status>
</kw>
<msg timestamp="20170419 16:34:09.217" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:34:09.217" status="PASS" starttime="20170419 16:34:08.959"></status>
</kw>
<msg timestamp="20170419 16:34:09.218" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:34:09.218" status="PASS" starttime="20170419 16:34:08.959"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:34:09.218" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:34:09.218" status="FAIL" starttime="20170419 16:34:09.218"></status>
</kw>
<status endtime="20170419 16:34:09.218" status="FAIL" starttime="20170419 16:34:08.958"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:34:19.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:34:19.222" status="PASS" starttime="20170419 16:34:19.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:34:19.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:34:19.223" status="PASS" starttime="20170419 16:34:19.222"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:34:19.223" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:34:19.223" status="PASS" starttime="20170419 16:34:19.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:34:19.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:34:19.224" status="PASS" starttime="20170419 16:34:19.224"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:34:19.430" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:34:19.431" status="PASS" starttime="20170419 16:34:19.225"></status>
</kw>
<msg timestamp="20170419 16:34:19.431" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:34:19.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:19.431" status="PASS" starttime="20170419 16:34:19.224"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:34:19.431" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:19.431" status="PASS" starttime="20170419 16:34:19.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:19.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:19.432" status="PASS" starttime="20170419 16:34:19.432"></status>
</kw>
<status endtime="20170419 16:34:19.432" status="PASS" starttime="20170419 16:34:19.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:34:19.433" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:34:19.433" status="PASS" starttime="20170419 16:34:19.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:19.435" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:19.435" status="PASS" starttime="20170419 16:34:19.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:19.436" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:19.436" status="PASS" starttime="20170419 16:34:19.435"></status>
</kw>
<status endtime="20170419 16:34:19.436" status="PASS" starttime="20170419 16:34:19.435"></status>
</kw>
<status endtime="20170419 16:34:19.436" status="PASS" starttime="20170419 16:34:19.433"></status>
</kw>
<status endtime="20170419 16:34:19.436" status="PASS" starttime="20170419 16:34:19.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:34:19.509" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:34:19.509" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:19.509" status="PASS" starttime="20170419 16:34:19.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:19.511" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:19.511" status="PASS" starttime="20170419 16:34:19.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:19.512" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:19.512" status="PASS" starttime="20170419 16:34:19.512"></status>
</kw>
<status endtime="20170419 16:34:19.512" status="PASS" starttime="20170419 16:34:19.511"></status>
</kw>
<status endtime="20170419 16:34:19.512" status="PASS" starttime="20170419 16:34:19.510"></status>
</kw>
<status endtime="20170419 16:34:19.512" status="PASS" starttime="20170419 16:34:19.510"></status>
</kw>
<msg timestamp="20170419 16:34:19.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:19.513" status="PASS" starttime="20170419 16:34:19.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:19.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:19.513" status="PASS" starttime="20170419 16:34:19.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:34:19.514" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:34:19.514" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:34:19.514" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:34:19.514" status="PASS" starttime="20170419 16:34:19.513"></status>
</kw>
<msg timestamp="20170419 16:34:19.514" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:34:19.514" status="PASS" starttime="20170419 16:34:19.220"></status>
</kw>
<msg timestamp="20170419 16:34:19.514" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:34:19.514" status="PASS" starttime="20170419 16:34:19.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:34:19.515" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:34:19.515" status="FAIL" starttime="20170419 16:34:19.515"></status>
</kw>
<status endtime="20170419 16:34:19.516" status="FAIL" starttime="20170419 16:34:19.219"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:34:29.519" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:34:29.520" status="PASS" starttime="20170419 16:34:29.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:34:29.520" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:34:29.520" status="PASS" starttime="20170419 16:34:29.520"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:34:29.521" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:34:29.521" status="PASS" starttime="20170419 16:34:29.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:34:29.521" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:34:29.521" status="PASS" starttime="20170419 16:34:29.521"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:34:29.699" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:34:29.699" status="PASS" starttime="20170419 16:34:29.522"></status>
</kw>
<msg timestamp="20170419 16:34:29.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:34:29.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:29.700" status="PASS" starttime="20170419 16:34:29.522"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:34:29.700" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:29.700" status="PASS" starttime="20170419 16:34:29.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:29.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:29.701" status="PASS" starttime="20170419 16:34:29.700"></status>
</kw>
<status endtime="20170419 16:34:29.701" status="PASS" starttime="20170419 16:34:29.518"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:34:29.702" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:34:29.702" status="PASS" starttime="20170419 16:34:29.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:29.704" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:29.704" status="PASS" starttime="20170419 16:34:29.703"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:29.704" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:29.705" status="PASS" starttime="20170419 16:34:29.704"></status>
</kw>
<status endtime="20170419 16:34:29.705" status="PASS" starttime="20170419 16:34:29.704"></status>
</kw>
<status endtime="20170419 16:34:29.705" status="PASS" starttime="20170419 16:34:29.702"></status>
</kw>
<status endtime="20170419 16:34:29.705" status="PASS" starttime="20170419 16:34:29.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:34:29.808" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:34:29.808" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:29.808" status="PASS" starttime="20170419 16:34:29.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:29.811" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:29.811" status="PASS" starttime="20170419 16:34:29.810"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:29.812" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:29.812" status="PASS" starttime="20170419 16:34:29.812"></status>
</kw>
<status endtime="20170419 16:34:29.812" status="PASS" starttime="20170419 16:34:29.811"></status>
</kw>
<status endtime="20170419 16:34:29.812" status="PASS" starttime="20170419 16:34:29.809"></status>
</kw>
<status endtime="20170419 16:34:29.812" status="PASS" starttime="20170419 16:34:29.809"></status>
</kw>
<msg timestamp="20170419 16:34:29.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:29.813" status="PASS" starttime="20170419 16:34:29.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:29.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:29.813" status="PASS" starttime="20170419 16:34:29.813"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:34:29.814" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:34:29.814" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:34:29.814" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:34:29.814" status="PASS" starttime="20170419 16:34:29.813"></status>
</kw>
<msg timestamp="20170419 16:34:29.814" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:34:29.814" status="PASS" starttime="20170419 16:34:29.517"></status>
</kw>
<msg timestamp="20170419 16:34:29.815" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:34:29.815" status="PASS" starttime="20170419 16:34:29.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:34:29.815" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:34:29.815" status="FAIL" starttime="20170419 16:34:29.815"></status>
</kw>
<status endtime="20170419 16:34:29.815" status="FAIL" starttime="20170419 16:34:29.516"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:34:39.819" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:34:39.820" status="PASS" starttime="20170419 16:34:39.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:34:39.820" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:34:39.820" status="PASS" starttime="20170419 16:34:39.820"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:34:39.821" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:34:39.821" status="PASS" starttime="20170419 16:34:39.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:34:39.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:34:39.822" status="PASS" starttime="20170419 16:34:39.821"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:34:39.997" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:34:39.997" status="PASS" starttime="20170419 16:34:39.822"></status>
</kw>
<msg timestamp="20170419 16:34:39.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:34:39.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:39.997" status="PASS" starttime="20170419 16:34:39.822"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:34:39.998" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:39.998" status="PASS" starttime="20170419 16:34:39.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:39.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:39.998" status="PASS" starttime="20170419 16:34:39.998"></status>
</kw>
<status endtime="20170419 16:34:39.999" status="PASS" starttime="20170419 16:34:39.818"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:34:39.999" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:34:39.999" status="PASS" starttime="20170419 16:34:39.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:40.002" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:40.002" status="PASS" starttime="20170419 16:34:40.001"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:40.003" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:40.003" status="PASS" starttime="20170419 16:34:40.003"></status>
</kw>
<status endtime="20170419 16:34:40.003" status="PASS" starttime="20170419 16:34:40.002"></status>
</kw>
<status endtime="20170419 16:34:40.003" status="PASS" starttime="20170419 16:34:40.000"></status>
</kw>
<status endtime="20170419 16:34:40.003" status="PASS" starttime="20170419 16:34:40.000"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:34:40.070" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:34:40.070" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:40.070" status="PASS" starttime="20170419 16:34:40.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:40.072" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:40.072" status="PASS" starttime="20170419 16:34:40.072"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:40.073" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:40.073" status="PASS" starttime="20170419 16:34:40.073"></status>
</kw>
<status endtime="20170419 16:34:40.073" status="PASS" starttime="20170419 16:34:40.072"></status>
</kw>
<status endtime="20170419 16:34:40.073" status="PASS" starttime="20170419 16:34:40.071"></status>
</kw>
<status endtime="20170419 16:34:40.073" status="PASS" starttime="20170419 16:34:40.071"></status>
</kw>
<msg timestamp="20170419 16:34:40.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:40.074" status="PASS" starttime="20170419 16:34:39.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:40.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:40.074" status="PASS" starttime="20170419 16:34:40.074"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:34:40.075" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:34:40.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:34:40.075" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:34:40.075" status="PASS" starttime="20170419 16:34:40.075"></status>
</kw>
<msg timestamp="20170419 16:34:40.075" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:34:40.075" status="PASS" starttime="20170419 16:34:39.817"></status>
</kw>
<msg timestamp="20170419 16:34:40.076" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:34:40.076" status="PASS" starttime="20170419 16:34:39.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:34:40.076" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:34:40.076" status="FAIL" starttime="20170419 16:34:40.076"></status>
</kw>
<status endtime="20170419 16:34:40.076" status="FAIL" starttime="20170419 16:34:39.816"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:34:50.080" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:34:50.080" status="PASS" starttime="20170419 16:34:50.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:34:50.081" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:34:50.081" status="PASS" starttime="20170419 16:34:50.081"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:34:50.082" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:34:50.082" status="PASS" starttime="20170419 16:34:50.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:34:50.082" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:34:50.082" status="PASS" starttime="20170419 16:34:50.082"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:34:50.260" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:34:50.260" status="PASS" starttime="20170419 16:34:50.083"></status>
</kw>
<msg timestamp="20170419 16:34:50.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:34:50.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:50.260" status="PASS" starttime="20170419 16:34:50.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:34:50.261" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:50.261" status="PASS" starttime="20170419 16:34:50.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:50.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:50.262" status="PASS" starttime="20170419 16:34:50.261"></status>
</kw>
<status endtime="20170419 16:34:50.262" status="PASS" starttime="20170419 16:34:50.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:34:50.262" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:34:50.262" status="PASS" starttime="20170419 16:34:50.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:50.264" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:50.264" status="PASS" starttime="20170419 16:34:50.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:50.265" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:34:50.265" status="PASS" starttime="20170419 16:34:50.265"></status>
</kw>
<status endtime="20170419 16:34:50.265" status="PASS" starttime="20170419 16:34:50.264"></status>
</kw>
<status endtime="20170419 16:34:50.265" status="PASS" starttime="20170419 16:34:50.263"></status>
</kw>
<status endtime="20170419 16:34:50.265" status="PASS" starttime="20170419 16:34:50.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:34:50.357" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:34:50.357" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:50.358" status="PASS" starttime="20170419 16:34:50.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:34:50.359" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:50.359" status="PASS" starttime="20170419 16:34:50.359"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:34:50.360" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:34:50.360" status="PASS" starttime="20170419 16:34:50.360"></status>
</kw>
<status endtime="20170419 16:34:50.360" status="PASS" starttime="20170419 16:34:50.359"></status>
</kw>
<status endtime="20170419 16:34:50.361" status="PASS" starttime="20170419 16:34:50.358"></status>
</kw>
<status endtime="20170419 16:34:50.361" status="PASS" starttime="20170419 16:34:50.358"></status>
</kw>
<msg timestamp="20170419 16:34:50.361" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:34:50.361" status="PASS" starttime="20170419 16:34:50.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:34:50.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:34:50.361" status="PASS" starttime="20170419 16:34:50.361"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:34:50.362" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:34:50.362" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:34:50.362" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:34:50.362" status="PASS" starttime="20170419 16:34:50.362"></status>
</kw>
<msg timestamp="20170419 16:34:50.362" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:34:50.362" status="PASS" starttime="20170419 16:34:50.078"></status>
</kw>
<msg timestamp="20170419 16:34:50.363" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:34:50.363" status="PASS" starttime="20170419 16:34:50.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:34:50.363" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:34:50.363" status="FAIL" starttime="20170419 16:34:50.363"></status>
</kw>
<status endtime="20170419 16:34:50.364" status="FAIL" starttime="20170419 16:34:50.077"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:35:00.367" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:35:00.368" status="PASS" starttime="20170419 16:35:00.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:35:00.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:35:00.368" status="PASS" starttime="20170419 16:35:00.368"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:35:00.369" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:35:00.369" status="PASS" starttime="20170419 16:35:00.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:35:00.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:35:00.370" status="PASS" starttime="20170419 16:35:00.369"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:35:00.553" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:35:00.553" status="PASS" starttime="20170419 16:35:00.370"></status>
</kw>
<msg timestamp="20170419 16:35:00.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:35:00.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:00.553" status="PASS" starttime="20170419 16:35:00.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:35:00.554" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:00.554" status="PASS" starttime="20170419 16:35:00.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:00.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:00.555" status="PASS" starttime="20170419 16:35:00.554"></status>
</kw>
<status endtime="20170419 16:35:00.555" status="PASS" starttime="20170419 16:35:00.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:35:00.555" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:35:00.555" status="PASS" starttime="20170419 16:35:00.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:00.557" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:00.557" status="PASS" starttime="20170419 16:35:00.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:00.558" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:00.558" status="PASS" starttime="20170419 16:35:00.558"></status>
</kw>
<status endtime="20170419 16:35:00.559" status="PASS" starttime="20170419 16:35:00.557"></status>
</kw>
<status endtime="20170419 16:35:00.559" status="PASS" starttime="20170419 16:35:00.556"></status>
</kw>
<status endtime="20170419 16:35:00.559" status="PASS" starttime="20170419 16:35:00.556"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:35:00.623" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:35:00.623" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:00.623" status="PASS" starttime="20170419 16:35:00.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:00.625" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:00.625" status="PASS" starttime="20170419 16:35:00.624"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:00.626" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:00.626" status="PASS" starttime="20170419 16:35:00.626"></status>
</kw>
<status endtime="20170419 16:35:00.626" status="PASS" starttime="20170419 16:35:00.625"></status>
</kw>
<status endtime="20170419 16:35:00.626" status="PASS" starttime="20170419 16:35:00.624"></status>
</kw>
<status endtime="20170419 16:35:00.626" status="PASS" starttime="20170419 16:35:00.623"></status>
</kw>
<msg timestamp="20170419 16:35:00.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:00.627" status="PASS" starttime="20170419 16:35:00.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:00.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:00.627" status="PASS" starttime="20170419 16:35:00.627"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:35:00.628" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:35:00.628" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:35:00.628" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:35:00.628" status="PASS" starttime="20170419 16:35:00.627"></status>
</kw>
<msg timestamp="20170419 16:35:00.628" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:35:00.628" status="PASS" starttime="20170419 16:35:00.365"></status>
</kw>
<msg timestamp="20170419 16:35:00.628" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:35:00.628" status="PASS" starttime="20170419 16:35:00.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:35:00.629" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:35:00.629" status="FAIL" starttime="20170419 16:35:00.629"></status>
</kw>
<status endtime="20170419 16:35:00.629" status="FAIL" starttime="20170419 16:35:00.364"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:35:10.633" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:35:10.634" status="PASS" starttime="20170419 16:35:10.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:35:10.634" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:35:10.635" status="PASS" starttime="20170419 16:35:10.634"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:35:10.635" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:35:10.635" status="PASS" starttime="20170419 16:35:10.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:35:10.636" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:35:10.636" status="PASS" starttime="20170419 16:35:10.635"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:35:10.814" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:35:10.814" status="PASS" starttime="20170419 16:35:10.636"></status>
</kw>
<msg timestamp="20170419 16:35:10.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:35:10.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:10.814" status="PASS" starttime="20170419 16:35:10.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:35:10.815" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:10.815" status="PASS" starttime="20170419 16:35:10.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:10.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:10.815" status="PASS" starttime="20170419 16:35:10.815"></status>
</kw>
<status endtime="20170419 16:35:10.816" status="PASS" starttime="20170419 16:35:10.633"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:35:10.816" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:35:10.816" status="PASS" starttime="20170419 16:35:10.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:10.818" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:10.818" status="PASS" starttime="20170419 16:35:10.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:10.819" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:10.820" status="PASS" starttime="20170419 16:35:10.819"></status>
</kw>
<status endtime="20170419 16:35:10.820" status="PASS" starttime="20170419 16:35:10.819"></status>
</kw>
<status endtime="20170419 16:35:10.820" status="PASS" starttime="20170419 16:35:10.817"></status>
</kw>
<status endtime="20170419 16:35:10.820" status="PASS" starttime="20170419 16:35:10.817"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:35:10.885" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:35:10.885" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:10.885" status="PASS" starttime="20170419 16:35:10.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:10.887" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:10.887" status="PASS" starttime="20170419 16:35:10.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:10.888" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:10.888" status="PASS" starttime="20170419 16:35:10.887"></status>
</kw>
<status endtime="20170419 16:35:10.888" status="PASS" starttime="20170419 16:35:10.887"></status>
</kw>
<status endtime="20170419 16:35:10.888" status="PASS" starttime="20170419 16:35:10.886"></status>
</kw>
<status endtime="20170419 16:35:10.888" status="PASS" starttime="20170419 16:35:10.885"></status>
</kw>
<msg timestamp="20170419 16:35:10.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:10.888" status="PASS" starttime="20170419 16:35:10.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:10.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:10.889" status="PASS" starttime="20170419 16:35:10.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:35:10.889" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:35:10.889" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:35:10.890" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:35:10.890" status="PASS" starttime="20170419 16:35:10.889"></status>
</kw>
<msg timestamp="20170419 16:35:10.890" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:35:10.890" status="PASS" starttime="20170419 16:35:10.631"></status>
</kw>
<msg timestamp="20170419 16:35:10.890" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:35:10.890" status="PASS" starttime="20170419 16:35:10.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:35:10.891" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:35:10.891" status="FAIL" starttime="20170419 16:35:10.890"></status>
</kw>
<status endtime="20170419 16:35:10.891" status="FAIL" starttime="20170419 16:35:10.630"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:35:20.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:35:20.895" status="PASS" starttime="20170419 16:35:20.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:35:20.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:35:20.896" status="PASS" starttime="20170419 16:35:20.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:35:20.896" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:35:20.896" status="PASS" starttime="20170419 16:35:20.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:35:20.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:35:20.897" status="PASS" starttime="20170419 16:35:20.897"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:35:21.073" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:35:21.073" status="PASS" starttime="20170419 16:35:20.898"></status>
</kw>
<msg timestamp="20170419 16:35:21.073" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:35:21.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:21.073" status="PASS" starttime="20170419 16:35:20.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:35:21.074" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:21.074" status="PASS" starttime="20170419 16:35:21.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:21.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:21.075" status="PASS" starttime="20170419 16:35:21.074"></status>
</kw>
<status endtime="20170419 16:35:21.075" status="PASS" starttime="20170419 16:35:20.894"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:35:21.075" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:35:21.075" status="PASS" starttime="20170419 16:35:21.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:21.077" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:21.078" status="PASS" starttime="20170419 16:35:21.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:21.078" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:21.078" status="PASS" starttime="20170419 16:35:21.078"></status>
</kw>
<status endtime="20170419 16:35:21.079" status="PASS" starttime="20170419 16:35:21.078"></status>
</kw>
<status endtime="20170419 16:35:21.079" status="PASS" starttime="20170419 16:35:21.076"></status>
</kw>
<status endtime="20170419 16:35:21.079" status="PASS" starttime="20170419 16:35:21.076"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:35:21.144" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:35:21.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:21.144" status="PASS" starttime="20170419 16:35:21.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:21.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:21.146" status="PASS" starttime="20170419 16:35:21.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:21.146" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:21.147" status="PASS" starttime="20170419 16:35:21.146"></status>
</kw>
<status endtime="20170419 16:35:21.147" status="PASS" starttime="20170419 16:35:21.146"></status>
</kw>
<status endtime="20170419 16:35:21.147" status="PASS" starttime="20170419 16:35:21.145"></status>
</kw>
<status endtime="20170419 16:35:21.147" status="PASS" starttime="20170419 16:35:21.144"></status>
</kw>
<msg timestamp="20170419 16:35:21.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:21.147" status="PASS" starttime="20170419 16:35:20.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:21.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:21.148" status="PASS" starttime="20170419 16:35:21.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:35:21.148" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:35:21.148" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:35:21.148" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:35:21.149" status="PASS" starttime="20170419 16:35:21.148"></status>
</kw>
<msg timestamp="20170419 16:35:21.149" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:35:21.149" status="PASS" starttime="20170419 16:35:20.892"></status>
</kw>
<msg timestamp="20170419 16:35:21.149" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:35:21.149" status="PASS" starttime="20170419 16:35:20.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:35:21.150" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:35:21.150" status="FAIL" starttime="20170419 16:35:21.149"></status>
</kw>
<status endtime="20170419 16:35:21.150" status="FAIL" starttime="20170419 16:35:20.891"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:35:31.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:35:31.155" status="PASS" starttime="20170419 16:35:31.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:35:31.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:35:31.155" status="PASS" starttime="20170419 16:35:31.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:35:31.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:35:31.156" status="PASS" starttime="20170419 16:35:31.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:35:31.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:35:31.156" status="PASS" starttime="20170419 16:35:31.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:35:31.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:35:31.332" status="PASS" starttime="20170419 16:35:31.157"></status>
</kw>
<msg timestamp="20170419 16:35:31.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:35:31.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:31.332" status="PASS" starttime="20170419 16:35:31.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:35:31.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:31.333" status="PASS" starttime="20170419 16:35:31.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:31.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:31.333" status="PASS" starttime="20170419 16:35:31.333"></status>
</kw>
<status endtime="20170419 16:35:31.334" status="PASS" starttime="20170419 16:35:31.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:35:31.334" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:35:31.334" status="PASS" starttime="20170419 16:35:31.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:31.336" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:31.336" status="PASS" starttime="20170419 16:35:31.335"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:31.337" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:31.337" status="PASS" starttime="20170419 16:35:31.337"></status>
</kw>
<status endtime="20170419 16:35:31.337" status="PASS" starttime="20170419 16:35:31.336"></status>
</kw>
<status endtime="20170419 16:35:31.337" status="PASS" starttime="20170419 16:35:31.335"></status>
</kw>
<status endtime="20170419 16:35:31.338" status="PASS" starttime="20170419 16:35:31.334"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:35:31.403" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:35:31.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:31.403" status="PASS" starttime="20170419 16:35:31.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:31.404" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:31.405" status="PASS" starttime="20170419 16:35:31.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:31.405" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:31.406" status="PASS" starttime="20170419 16:35:31.405"></status>
</kw>
<status endtime="20170419 16:35:31.406" status="PASS" starttime="20170419 16:35:31.405"></status>
</kw>
<status endtime="20170419 16:35:31.406" status="PASS" starttime="20170419 16:35:31.403"></status>
</kw>
<status endtime="20170419 16:35:31.406" status="PASS" starttime="20170419 16:35:31.403"></status>
</kw>
<msg timestamp="20170419 16:35:31.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:31.406" status="PASS" starttime="20170419 16:35:31.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:31.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:31.407" status="PASS" starttime="20170419 16:35:31.406"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:35:31.407" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:35:31.407" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:35:31.407" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:35:31.407" status="PASS" starttime="20170419 16:35:31.407"></status>
</kw>
<msg timestamp="20170419 16:35:31.408" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:35:31.408" status="PASS" starttime="20170419 16:35:31.151"></status>
</kw>
<msg timestamp="20170419 16:35:31.408" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:35:31.408" status="PASS" starttime="20170419 16:35:31.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:35:31.409" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:35:31.409" status="FAIL" starttime="20170419 16:35:31.408"></status>
</kw>
<status endtime="20170419 16:35:31.409" status="FAIL" starttime="20170419 16:35:31.150"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:35:41.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:35:41.413" status="PASS" starttime="20170419 16:35:41.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:35:41.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:35:41.414" status="PASS" starttime="20170419 16:35:41.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:35:41.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:35:41.414" status="PASS" starttime="20170419 16:35:41.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:35:41.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:35:41.415" status="PASS" starttime="20170419 16:35:41.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:35:41.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:35:41.590" status="PASS" starttime="20170419 16:35:41.416"></status>
</kw>
<msg timestamp="20170419 16:35:41.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:35:41.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:41.591" status="PASS" starttime="20170419 16:35:41.415"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:35:41.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:41.591" status="PASS" starttime="20170419 16:35:41.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:41.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:41.592" status="PASS" starttime="20170419 16:35:41.592"></status>
</kw>
<status endtime="20170419 16:35:41.592" status="PASS" starttime="20170419 16:35:41.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:35:41.593" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:35:41.593" status="PASS" starttime="20170419 16:35:41.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:41.595" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:41.595" status="PASS" starttime="20170419 16:35:41.594"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:41.596" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:41.596" status="PASS" starttime="20170419 16:35:41.596"></status>
</kw>
<status endtime="20170419 16:35:41.596" status="PASS" starttime="20170419 16:35:41.595"></status>
</kw>
<status endtime="20170419 16:35:41.596" status="PASS" starttime="20170419 16:35:41.593"></status>
</kw>
<status endtime="20170419 16:35:41.596" status="PASS" starttime="20170419 16:35:41.593"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:35:41.661" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:35:41.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:41.661" status="PASS" starttime="20170419 16:35:41.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:41.663" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:41.663" status="PASS" starttime="20170419 16:35:41.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:41.664" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:41.664" status="PASS" starttime="20170419 16:35:41.664"></status>
</kw>
<status endtime="20170419 16:35:41.664" status="PASS" starttime="20170419 16:35:41.663"></status>
</kw>
<status endtime="20170419 16:35:41.664" status="PASS" starttime="20170419 16:35:41.662"></status>
</kw>
<status endtime="20170419 16:35:41.664" status="PASS" starttime="20170419 16:35:41.661"></status>
</kw>
<msg timestamp="20170419 16:35:41.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:41.664" status="PASS" starttime="20170419 16:35:41.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:41.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:41.665" status="PASS" starttime="20170419 16:35:41.665"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:35:41.666" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:35:41.666" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:35:41.666" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:35:41.666" status="PASS" starttime="20170419 16:35:41.665"></status>
</kw>
<msg timestamp="20170419 16:35:41.666" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:35:41.666" status="PASS" starttime="20170419 16:35:41.411"></status>
</kw>
<msg timestamp="20170419 16:35:41.666" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:35:41.666" status="PASS" starttime="20170419 16:35:41.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:35:41.667" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:35:41.667" status="FAIL" starttime="20170419 16:35:41.667"></status>
</kw>
<status endtime="20170419 16:35:41.667" status="FAIL" starttime="20170419 16:35:41.409"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:35:51.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:35:51.671" status="PASS" starttime="20170419 16:35:51.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:35:51.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:35:51.672" status="PASS" starttime="20170419 16:35:51.671"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:35:51.672" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:35:51.672" status="PASS" starttime="20170419 16:35:51.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:35:51.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:35:51.673" status="PASS" starttime="20170419 16:35:51.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:35:51.850" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:35:51.850" status="PASS" starttime="20170419 16:35:51.674"></status>
</kw>
<msg timestamp="20170419 16:35:51.850" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:35:51.850" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:51.850" status="PASS" starttime="20170419 16:35:51.673"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:35:51.851" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:51.851" status="PASS" starttime="20170419 16:35:51.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:51.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:51.852" status="PASS" starttime="20170419 16:35:51.851"></status>
</kw>
<status endtime="20170419 16:35:51.852" status="PASS" starttime="20170419 16:35:51.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:35:51.853" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:35:51.853" status="PASS" starttime="20170419 16:35:51.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:51.855" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:51.855" status="PASS" starttime="20170419 16:35:51.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:51.855" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:35:51.856" status="PASS" starttime="20170419 16:35:51.855"></status>
</kw>
<status endtime="20170419 16:35:51.856" status="PASS" starttime="20170419 16:35:51.855"></status>
</kw>
<status endtime="20170419 16:35:51.856" status="PASS" starttime="20170419 16:35:51.853"></status>
</kw>
<status endtime="20170419 16:35:51.856" status="PASS" starttime="20170419 16:35:51.853"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:35:51.921" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:35:51.921" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:51.921" status="PASS" starttime="20170419 16:35:51.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:35:51.923" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:51.923" status="PASS" starttime="20170419 16:35:51.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:35:51.924" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:35:51.924" status="PASS" starttime="20170419 16:35:51.924"></status>
</kw>
<status endtime="20170419 16:35:51.924" status="PASS" starttime="20170419 16:35:51.923"></status>
</kw>
<status endtime="20170419 16:35:51.924" status="PASS" starttime="20170419 16:35:51.922"></status>
</kw>
<status endtime="20170419 16:35:51.924" status="PASS" starttime="20170419 16:35:51.922"></status>
</kw>
<msg timestamp="20170419 16:35:51.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:35:51.925" status="PASS" starttime="20170419 16:35:51.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:35:51.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:35:51.925" status="PASS" starttime="20170419 16:35:51.925"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:35:51.926" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:35:51.926" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:35:51.926" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:35:51.926" status="PASS" starttime="20170419 16:35:51.925"></status>
</kw>
<msg timestamp="20170419 16:35:51.926" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:35:51.926" status="PASS" starttime="20170419 16:35:51.669"></status>
</kw>
<msg timestamp="20170419 16:35:51.926" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:35:51.926" status="PASS" starttime="20170419 16:35:51.668"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:35:51.927" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:35:51.927" status="FAIL" starttime="20170419 16:35:51.927"></status>
</kw>
<status endtime="20170419 16:35:51.927" status="FAIL" starttime="20170419 16:35:51.668"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:36:01.931" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:36:01.931" status="PASS" starttime="20170419 16:36:01.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:36:01.932" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:36:01.932" status="PASS" starttime="20170419 16:36:01.932"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:36:01.933" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:36:01.933" status="PASS" starttime="20170419 16:36:01.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:36:01.933" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:36:01.933" status="PASS" starttime="20170419 16:36:01.933"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:36:02.118" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:36:02.119" status="PASS" starttime="20170419 16:36:01.934"></status>
</kw>
<msg timestamp="20170419 16:36:02.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:36:02.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:02.119" status="PASS" starttime="20170419 16:36:01.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:36:02.119" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:02.119" status="PASS" starttime="20170419 16:36:02.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:02.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:02.120" status="PASS" starttime="20170419 16:36:02.120"></status>
</kw>
<status endtime="20170419 16:36:02.120" status="PASS" starttime="20170419 16:36:01.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:36:02.121" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:36:02.121" status="PASS" starttime="20170419 16:36:02.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:02.123" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:02.123" status="PASS" starttime="20170419 16:36:02.122"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:02.124" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:02.124" status="PASS" starttime="20170419 16:36:02.124"></status>
</kw>
<status endtime="20170419 16:36:02.124" status="PASS" starttime="20170419 16:36:02.123"></status>
</kw>
<status endtime="20170419 16:36:02.124" status="PASS" starttime="20170419 16:36:02.122"></status>
</kw>
<status endtime="20170419 16:36:02.124" status="PASS" starttime="20170419 16:36:02.121"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:36:02.188" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:36:02.189" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:02.189" status="PASS" starttime="20170419 16:36:02.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:02.190" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:02.190" status="PASS" starttime="20170419 16:36:02.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:02.191" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:02.191" status="PASS" starttime="20170419 16:36:02.191"></status>
</kw>
<status endtime="20170419 16:36:02.192" status="PASS" starttime="20170419 16:36:02.191"></status>
</kw>
<status endtime="20170419 16:36:02.192" status="PASS" starttime="20170419 16:36:02.189"></status>
</kw>
<status endtime="20170419 16:36:02.192" status="PASS" starttime="20170419 16:36:02.189"></status>
</kw>
<msg timestamp="20170419 16:36:02.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:02.192" status="PASS" starttime="20170419 16:36:01.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:02.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:02.193" status="PASS" starttime="20170419 16:36:02.192"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:36:02.193" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:36:02.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:36:02.193" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:36:02.193" status="PASS" starttime="20170419 16:36:02.193"></status>
</kw>
<msg timestamp="20170419 16:36:02.194" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:36:02.194" status="PASS" starttime="20170419 16:36:01.928"></status>
</kw>
<msg timestamp="20170419 16:36:02.194" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:36:02.194" status="PASS" starttime="20170419 16:36:01.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:36:02.194" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:36:02.195" status="FAIL" starttime="20170419 16:36:02.194"></status>
</kw>
<status endtime="20170419 16:36:02.195" status="FAIL" starttime="20170419 16:36:01.928"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:36:12.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:36:12.199" status="PASS" starttime="20170419 16:36:12.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:36:12.200" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:36:12.200" status="PASS" starttime="20170419 16:36:12.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:36:12.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:36:12.200" status="PASS" starttime="20170419 16:36:12.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:36:12.201" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:36:12.201" status="PASS" starttime="20170419 16:36:12.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:36:12.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:36:12.377" status="PASS" starttime="20170419 16:36:12.202"></status>
</kw>
<msg timestamp="20170419 16:36:12.377" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:36:12.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:12.377" status="PASS" starttime="20170419 16:36:12.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:36:12.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:12.378" status="PASS" starttime="20170419 16:36:12.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:12.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:12.379" status="PASS" starttime="20170419 16:36:12.378"></status>
</kw>
<status endtime="20170419 16:36:12.379" status="PASS" starttime="20170419 16:36:12.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:36:12.379" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:36:12.379" status="PASS" starttime="20170419 16:36:12.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:12.382" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:12.382" status="PASS" starttime="20170419 16:36:12.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:12.383" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:12.383" status="PASS" starttime="20170419 16:36:12.383"></status>
</kw>
<status endtime="20170419 16:36:12.383" status="PASS" starttime="20170419 16:36:12.382"></status>
</kw>
<status endtime="20170419 16:36:12.383" status="PASS" starttime="20170419 16:36:12.380"></status>
</kw>
<status endtime="20170419 16:36:12.383" status="PASS" starttime="20170419 16:36:12.380"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:36:12.448" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:36:12.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:12.448" status="PASS" starttime="20170419 16:36:12.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:12.450" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:12.451" status="PASS" starttime="20170419 16:36:12.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:12.452" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:12.452" status="PASS" starttime="20170419 16:36:12.451"></status>
</kw>
<status endtime="20170419 16:36:12.452" status="PASS" starttime="20170419 16:36:12.451"></status>
</kw>
<status endtime="20170419 16:36:12.452" status="PASS" starttime="20170419 16:36:12.449"></status>
</kw>
<status endtime="20170419 16:36:12.452" status="PASS" starttime="20170419 16:36:12.448"></status>
</kw>
<msg timestamp="20170419 16:36:12.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:12.452" status="PASS" starttime="20170419 16:36:12.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:12.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:12.453" status="PASS" starttime="20170419 16:36:12.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:36:12.454" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:36:12.454" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:36:12.454" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:36:12.454" status="PASS" starttime="20170419 16:36:12.453"></status>
</kw>
<msg timestamp="20170419 16:36:12.454" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:36:12.454" status="PASS" starttime="20170419 16:36:12.196"></status>
</kw>
<msg timestamp="20170419 16:36:12.454" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:36:12.454" status="PASS" starttime="20170419 16:36:12.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:36:12.455" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:36:12.455" status="FAIL" starttime="20170419 16:36:12.455"></status>
</kw>
<status endtime="20170419 16:36:12.455" status="FAIL" starttime="20170419 16:36:12.195"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:36:22.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:36:22.459" status="PASS" starttime="20170419 16:36:22.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:36:22.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:36:22.460" status="PASS" starttime="20170419 16:36:22.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:36:22.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:36:22.460" status="PASS" starttime="20170419 16:36:22.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:36:22.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:36:22.461" status="PASS" starttime="20170419 16:36:22.460"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:36:22.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:36:22.673" status="PASS" starttime="20170419 16:36:22.461"></status>
</kw>
<msg timestamp="20170419 16:36:22.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:36:22.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:22.674" status="PASS" starttime="20170419 16:36:22.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:36:22.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:22.674" status="PASS" starttime="20170419 16:36:22.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:22.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:22.675" status="PASS" starttime="20170419 16:36:22.674"></status>
</kw>
<status endtime="20170419 16:36:22.675" status="PASS" starttime="20170419 16:36:22.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:36:22.676" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:36:22.676" status="PASS" starttime="20170419 16:36:22.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:22.678" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:22.678" status="PASS" starttime="20170419 16:36:22.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:22.679" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:22.679" status="PASS" starttime="20170419 16:36:22.678"></status>
</kw>
<status endtime="20170419 16:36:22.679" status="PASS" starttime="20170419 16:36:22.678"></status>
</kw>
<status endtime="20170419 16:36:22.679" status="PASS" starttime="20170419 16:36:22.676"></status>
</kw>
<status endtime="20170419 16:36:22.679" status="PASS" starttime="20170419 16:36:22.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:36:22.744" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:36:22.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:22.745" status="PASS" starttime="20170419 16:36:22.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:22.746" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:22.746" status="PASS" starttime="20170419 16:36:22.746"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:22.747" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:22.747" status="PASS" starttime="20170419 16:36:22.747"></status>
</kw>
<status endtime="20170419 16:36:22.747" status="PASS" starttime="20170419 16:36:22.746"></status>
</kw>
<status endtime="20170419 16:36:22.748" status="PASS" starttime="20170419 16:36:22.745"></status>
</kw>
<status endtime="20170419 16:36:22.748" status="PASS" starttime="20170419 16:36:22.745"></status>
</kw>
<msg timestamp="20170419 16:36:22.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:22.748" status="PASS" starttime="20170419 16:36:22.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:22.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:22.748" status="PASS" starttime="20170419 16:36:22.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:36:22.749" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:36:22.749" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:36:22.749" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:36:22.749" status="PASS" starttime="20170419 16:36:22.749"></status>
</kw>
<msg timestamp="20170419 16:36:22.749" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:36:22.749" status="PASS" starttime="20170419 16:36:22.456"></status>
</kw>
<msg timestamp="20170419 16:36:22.750" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:36:22.750" status="PASS" starttime="20170419 16:36:22.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:36:22.750" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:36:22.750" status="FAIL" starttime="20170419 16:36:22.750"></status>
</kw>
<status endtime="20170419 16:36:22.751" status="FAIL" starttime="20170419 16:36:22.455"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:36:32.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:36:32.755" status="PASS" starttime="20170419 16:36:32.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:36:32.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:36:32.756" status="PASS" starttime="20170419 16:36:32.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:36:32.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:36:32.756" status="PASS" starttime="20170419 16:36:32.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:36:32.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:36:32.757" status="PASS" starttime="20170419 16:36:32.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:36:32.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:36:32.957" status="PASS" starttime="20170419 16:36:32.758"></status>
</kw>
<msg timestamp="20170419 16:36:32.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:36:32.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:32.957" status="PASS" starttime="20170419 16:36:32.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:36:32.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:32.958" status="PASS" starttime="20170419 16:36:32.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:32.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:32.959" status="PASS" starttime="20170419 16:36:32.958"></status>
</kw>
<status endtime="20170419 16:36:32.959" status="PASS" starttime="20170419 16:36:32.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:36:32.960" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:36:32.960" status="PASS" starttime="20170419 16:36:32.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:32.962" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:32.962" status="PASS" starttime="20170419 16:36:32.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:32.963" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:32.963" status="PASS" starttime="20170419 16:36:32.962"></status>
</kw>
<status endtime="20170419 16:36:32.963" status="PASS" starttime="20170419 16:36:32.962"></status>
</kw>
<status endtime="20170419 16:36:32.963" status="PASS" starttime="20170419 16:36:32.960"></status>
</kw>
<status endtime="20170419 16:36:32.963" status="PASS" starttime="20170419 16:36:32.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:36:33.038" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:36:33.039" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:33.039" status="PASS" starttime="20170419 16:36:32.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:33.040" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:33.040" status="PASS" starttime="20170419 16:36:33.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:33.041" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:33.041" status="PASS" starttime="20170419 16:36:33.041"></status>
</kw>
<status endtime="20170419 16:36:33.042" status="PASS" starttime="20170419 16:36:33.041"></status>
</kw>
<status endtime="20170419 16:36:33.042" status="PASS" starttime="20170419 16:36:33.039"></status>
</kw>
<status endtime="20170419 16:36:33.042" status="PASS" starttime="20170419 16:36:33.039"></status>
</kw>
<msg timestamp="20170419 16:36:33.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:33.042" status="PASS" starttime="20170419 16:36:32.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:33.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:33.043" status="PASS" starttime="20170419 16:36:33.042"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:36:33.043" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:36:33.043" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:36:33.043" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:36:33.043" status="PASS" starttime="20170419 16:36:33.043"></status>
</kw>
<msg timestamp="20170419 16:36:33.044" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:36:33.044" status="PASS" starttime="20170419 16:36:32.752"></status>
</kw>
<msg timestamp="20170419 16:36:33.044" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:36:33.044" status="PASS" starttime="20170419 16:36:32.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:36:33.045" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:36:33.045" status="FAIL" starttime="20170419 16:36:33.044"></status>
</kw>
<status endtime="20170419 16:36:33.045" status="FAIL" starttime="20170419 16:36:32.751"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:36:43.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:36:43.049" status="PASS" starttime="20170419 16:36:43.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:36:43.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:36:43.049" status="PASS" starttime="20170419 16:36:43.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:36:43.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:36:43.050" status="PASS" starttime="20170419 16:36:43.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:36:43.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:36:43.051" status="PASS" starttime="20170419 16:36:43.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:36:43.226" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:36:43.227" status="PASS" starttime="20170419 16:36:43.051"></status>
</kw>
<msg timestamp="20170419 16:36:43.227" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:36:43.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:43.227" status="PASS" starttime="20170419 16:36:43.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:36:43.227" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:43.227" status="PASS" starttime="20170419 16:36:43.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:43.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:43.228" status="PASS" starttime="20170419 16:36:43.228"></status>
</kw>
<status endtime="20170419 16:36:43.228" status="PASS" starttime="20170419 16:36:43.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:36:43.229" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:36:43.229" status="PASS" starttime="20170419 16:36:43.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:43.231" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:43.231" status="PASS" starttime="20170419 16:36:43.230"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:43.232" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:43.232" status="PASS" starttime="20170419 16:36:43.232"></status>
</kw>
<status endtime="20170419 16:36:43.232" status="PASS" starttime="20170419 16:36:43.231"></status>
</kw>
<status endtime="20170419 16:36:43.233" status="PASS" starttime="20170419 16:36:43.230"></status>
</kw>
<status endtime="20170419 16:36:43.233" status="PASS" starttime="20170419 16:36:43.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:36:43.330" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:36:43.330" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:43.330" status="PASS" starttime="20170419 16:36:43.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:43.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:43.332" status="PASS" starttime="20170419 16:36:43.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:43.332" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:43.333" status="PASS" starttime="20170419 16:36:43.332"></status>
</kw>
<status endtime="20170419 16:36:43.333" status="PASS" starttime="20170419 16:36:43.332"></status>
</kw>
<status endtime="20170419 16:36:43.333" status="PASS" starttime="20170419 16:36:43.331"></status>
</kw>
<status endtime="20170419 16:36:43.333" status="PASS" starttime="20170419 16:36:43.330"></status>
</kw>
<msg timestamp="20170419 16:36:43.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:43.333" status="PASS" starttime="20170419 16:36:43.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:43.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:43.334" status="PASS" starttime="20170419 16:36:43.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:36:43.334" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:36:43.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:36:43.334" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:36:43.334" status="PASS" starttime="20170419 16:36:43.334"></status>
</kw>
<msg timestamp="20170419 16:36:43.335" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:36:43.335" status="PASS" starttime="20170419 16:36:43.046"></status>
</kw>
<msg timestamp="20170419 16:36:43.335" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:36:43.335" status="PASS" starttime="20170419 16:36:43.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:36:43.336" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:36:43.336" status="FAIL" starttime="20170419 16:36:43.335"></status>
</kw>
<status endtime="20170419 16:36:43.336" status="FAIL" starttime="20170419 16:36:43.045"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:36:53.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:36:53.339" status="PASS" starttime="20170419 16:36:53.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:36:53.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:36:53.340" status="PASS" starttime="20170419 16:36:53.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:36:53.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:36:53.341" status="PASS" starttime="20170419 16:36:53.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:36:53.341" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:36:53.341" status="PASS" starttime="20170419 16:36:53.341"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:36:53.583" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:36:53.583" status="PASS" starttime="20170419 16:36:53.342"></status>
</kw>
<msg timestamp="20170419 16:36:53.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:36:53.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:53.584" status="PASS" starttime="20170419 16:36:53.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:36:53.584" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:53.584" status="PASS" starttime="20170419 16:36:53.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:53.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:53.585" status="PASS" starttime="20170419 16:36:53.585"></status>
</kw>
<status endtime="20170419 16:36:53.585" status="PASS" starttime="20170419 16:36:53.338"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:36:53.586" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:36:53.586" status="PASS" starttime="20170419 16:36:53.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:53.588" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:53.588" status="PASS" starttime="20170419 16:36:53.587"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:53.589" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:36:53.589" status="PASS" starttime="20170419 16:36:53.588"></status>
</kw>
<status endtime="20170419 16:36:53.589" status="PASS" starttime="20170419 16:36:53.588"></status>
</kw>
<status endtime="20170419 16:36:53.589" status="PASS" starttime="20170419 16:36:53.586"></status>
</kw>
<status endtime="20170419 16:36:53.589" status="PASS" starttime="20170419 16:36:53.586"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:36:53.676" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:36:53.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:53.676" status="PASS" starttime="20170419 16:36:53.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:36:53.678" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:53.678" status="PASS" starttime="20170419 16:36:53.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:36:53.679" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:36:53.679" status="PASS" starttime="20170419 16:36:53.679"></status>
</kw>
<status endtime="20170419 16:36:53.679" status="PASS" starttime="20170419 16:36:53.678"></status>
</kw>
<status endtime="20170419 16:36:53.679" status="PASS" starttime="20170419 16:36:53.677"></status>
</kw>
<status endtime="20170419 16:36:53.679" status="PASS" starttime="20170419 16:36:53.677"></status>
</kw>
<msg timestamp="20170419 16:36:53.679" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:36:53.680" status="PASS" starttime="20170419 16:36:53.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:36:53.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:36:53.680" status="PASS" starttime="20170419 16:36:53.680"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:36:53.681" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:36:53.681" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:36:53.681" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:36:53.681" status="PASS" starttime="20170419 16:36:53.680"></status>
</kw>
<msg timestamp="20170419 16:36:53.681" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:36:53.681" status="PASS" starttime="20170419 16:36:53.337"></status>
</kw>
<msg timestamp="20170419 16:36:53.681" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:36:53.681" status="PASS" starttime="20170419 16:36:53.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:36:53.682" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:36:53.682" status="FAIL" starttime="20170419 16:36:53.682"></status>
</kw>
<status endtime="20170419 16:36:53.682" status="FAIL" starttime="20170419 16:36:53.336"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:37:03.686" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:37:03.718" status="PASS" starttime="20170419 16:37:03.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:37:03.718" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:37:03.719" status="PASS" starttime="20170419 16:37:03.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:37:03.719" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:37:03.719" status="PASS" starttime="20170419 16:37:03.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:37:03.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:37:03.720" status="PASS" starttime="20170419 16:37:03.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:37:03.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:37:03.909" status="PASS" starttime="20170419 16:37:03.721"></status>
</kw>
<msg timestamp="20170419 16:37:03.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:37:03.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:03.909" status="PASS" starttime="20170419 16:37:03.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:37:03.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:03.910" status="PASS" starttime="20170419 16:37:03.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:03.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:03.911" status="PASS" starttime="20170419 16:37:03.910"></status>
</kw>
<status endtime="20170419 16:37:03.911" status="PASS" starttime="20170419 16:37:03.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:37:03.911" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:37:03.911" status="PASS" starttime="20170419 16:37:03.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:03.913" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:03.913" status="PASS" starttime="20170419 16:37:03.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:03.914" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:03.914" status="PASS" starttime="20170419 16:37:03.914"></status>
</kw>
<status endtime="20170419 16:37:03.915" status="PASS" starttime="20170419 16:37:03.914"></status>
</kw>
<status endtime="20170419 16:37:03.915" status="PASS" starttime="20170419 16:37:03.912"></status>
</kw>
<status endtime="20170419 16:37:03.915" status="PASS" starttime="20170419 16:37:03.912"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:37:04.007" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:37:04.007" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:04.007" status="PASS" starttime="20170419 16:37:03.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:04.009" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:04.009" status="PASS" starttime="20170419 16:37:04.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:04.010" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:04.010" status="PASS" starttime="20170419 16:37:04.010"></status>
</kw>
<status endtime="20170419 16:37:04.010" status="PASS" starttime="20170419 16:37:04.009"></status>
</kw>
<status endtime="20170419 16:37:04.010" status="PASS" starttime="20170419 16:37:04.008"></status>
</kw>
<status endtime="20170419 16:37:04.011" status="PASS" starttime="20170419 16:37:04.007"></status>
</kw>
<msg timestamp="20170419 16:37:04.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:04.011" status="PASS" starttime="20170419 16:37:03.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:04.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:04.011" status="PASS" starttime="20170419 16:37:04.011"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:37:04.012" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:37:04.012" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:37:04.012" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:37:04.012" status="PASS" starttime="20170419 16:37:04.012"></status>
</kw>
<msg timestamp="20170419 16:37:04.012" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:37:04.012" status="PASS" starttime="20170419 16:37:03.684"></status>
</kw>
<msg timestamp="20170419 16:37:04.013" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:37:04.013" status="PASS" starttime="20170419 16:37:03.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:37:04.013" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:37:04.013" status="FAIL" starttime="20170419 16:37:04.013"></status>
</kw>
<status endtime="20170419 16:37:04.014" status="FAIL" starttime="20170419 16:37:03.683"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:37:14.017" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:37:14.017" status="PASS" starttime="20170419 16:37:14.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:37:14.018" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:37:14.018" status="PASS" starttime="20170419 16:37:14.018"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:37:14.019" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:37:14.019" status="PASS" starttime="20170419 16:37:14.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:37:14.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:37:14.019" status="PASS" starttime="20170419 16:37:14.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:37:14.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:37:14.203" status="PASS" starttime="20170419 16:37:14.020"></status>
</kw>
<msg timestamp="20170419 16:37:14.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:37:14.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:14.203" status="PASS" starttime="20170419 16:37:14.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:37:14.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:14.204" status="PASS" starttime="20170419 16:37:14.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:14.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:14.204" status="PASS" starttime="20170419 16:37:14.204"></status>
</kw>
<status endtime="20170419 16:37:14.204" status="PASS" starttime="20170419 16:37:14.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:37:14.205" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:37:14.205" status="PASS" starttime="20170419 16:37:14.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:14.207" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:14.207" status="PASS" starttime="20170419 16:37:14.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:14.208" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:14.208" status="PASS" starttime="20170419 16:37:14.208"></status>
</kw>
<status endtime="20170419 16:37:14.209" status="PASS" starttime="20170419 16:37:14.208"></status>
</kw>
<status endtime="20170419 16:37:14.209" status="PASS" starttime="20170419 16:37:14.206"></status>
</kw>
<status endtime="20170419 16:37:14.209" status="PASS" starttime="20170419 16:37:14.205"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:37:14.274" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:37:14.274" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:14.274" status="PASS" starttime="20170419 16:37:14.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:14.276" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:14.276" status="PASS" starttime="20170419 16:37:14.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:14.276" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:14.277" status="PASS" starttime="20170419 16:37:14.276"></status>
</kw>
<status endtime="20170419 16:37:14.277" status="PASS" starttime="20170419 16:37:14.276"></status>
</kw>
<status endtime="20170419 16:37:14.277" status="PASS" starttime="20170419 16:37:14.275"></status>
</kw>
<status endtime="20170419 16:37:14.277" status="PASS" starttime="20170419 16:37:14.274"></status>
</kw>
<msg timestamp="20170419 16:37:14.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:14.277" status="PASS" starttime="20170419 16:37:14.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:14.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:14.278" status="PASS" starttime="20170419 16:37:14.277"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:37:14.278" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:37:14.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:37:14.278" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:37:14.278" status="PASS" starttime="20170419 16:37:14.278"></status>
</kw>
<msg timestamp="20170419 16:37:14.279" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:37:14.279" status="PASS" starttime="20170419 16:37:14.015"></status>
</kw>
<msg timestamp="20170419 16:37:14.279" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:37:14.279" status="PASS" starttime="20170419 16:37:14.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:37:14.279" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:37:14.280" status="FAIL" starttime="20170419 16:37:14.279"></status>
</kw>
<status endtime="20170419 16:37:14.280" status="FAIL" starttime="20170419 16:37:14.014"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:37:24.283" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:37:24.283" status="PASS" starttime="20170419 16:37:24.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:37:24.284" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:37:24.284" status="PASS" starttime="20170419 16:37:24.284"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:37:24.285" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:37:24.285" status="PASS" starttime="20170419 16:37:24.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:37:24.286" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:37:24.286" status="PASS" starttime="20170419 16:37:24.285"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:37:24.466" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:37:24.467" status="PASS" starttime="20170419 16:37:24.286"></status>
</kw>
<msg timestamp="20170419 16:37:24.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:37:24.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:24.467" status="PASS" starttime="20170419 16:37:24.286"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:37:24.467" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:24.467" status="PASS" starttime="20170419 16:37:24.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:24.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:24.468" status="PASS" starttime="20170419 16:37:24.468"></status>
</kw>
<status endtime="20170419 16:37:24.468" status="PASS" starttime="20170419 16:37:24.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:37:24.469" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:37:24.469" status="PASS" starttime="20170419 16:37:24.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:24.471" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:24.471" status="PASS" starttime="20170419 16:37:24.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:24.472" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:24.472" status="PASS" starttime="20170419 16:37:24.472"></status>
</kw>
<status endtime="20170419 16:37:24.472" status="PASS" starttime="20170419 16:37:24.471"></status>
</kw>
<status endtime="20170419 16:37:24.472" status="PASS" starttime="20170419 16:37:24.469"></status>
</kw>
<status endtime="20170419 16:37:24.472" status="PASS" starttime="20170419 16:37:24.469"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:37:24.537" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:37:24.538" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:24.538" status="PASS" starttime="20170419 16:37:24.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:24.539" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:24.539" status="PASS" starttime="20170419 16:37:24.539"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:24.540" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:24.540" status="PASS" starttime="20170419 16:37:24.540"></status>
</kw>
<status endtime="20170419 16:37:24.540" status="PASS" starttime="20170419 16:37:24.539"></status>
</kw>
<status endtime="20170419 16:37:24.540" status="PASS" starttime="20170419 16:37:24.538"></status>
</kw>
<status endtime="20170419 16:37:24.541" status="PASS" starttime="20170419 16:37:24.538"></status>
</kw>
<msg timestamp="20170419 16:37:24.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:24.541" status="PASS" starttime="20170419 16:37:24.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:24.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:24.542" status="PASS" starttime="20170419 16:37:24.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:37:24.542" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:37:24.542" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:37:24.543" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:37:24.543" status="PASS" starttime="20170419 16:37:24.542"></status>
</kw>
<msg timestamp="20170419 16:37:24.543" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:37:24.543" status="PASS" starttime="20170419 16:37:24.281"></status>
</kw>
<msg timestamp="20170419 16:37:24.543" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:37:24.543" status="PASS" starttime="20170419 16:37:24.281"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:37:24.544" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:37:24.544" status="FAIL" starttime="20170419 16:37:24.543"></status>
</kw>
<status endtime="20170419 16:37:24.544" status="FAIL" starttime="20170419 16:37:24.280"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:37:34.548" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:37:34.548" status="PASS" starttime="20170419 16:37:34.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:37:34.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:37:34.549" status="PASS" starttime="20170419 16:37:34.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:37:34.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:37:34.549" status="PASS" starttime="20170419 16:37:34.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:37:34.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:37:34.550" status="PASS" starttime="20170419 16:37:34.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:37:34.730" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:37:34.730" status="PASS" starttime="20170419 16:37:34.551"></status>
</kw>
<msg timestamp="20170419 16:37:34.730" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:37:34.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:34.731" status="PASS" starttime="20170419 16:37:34.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:37:34.731" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:34.731" status="PASS" starttime="20170419 16:37:34.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:34.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:34.732" status="PASS" starttime="20170419 16:37:34.731"></status>
</kw>
<status endtime="20170419 16:37:34.732" status="PASS" starttime="20170419 16:37:34.547"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:37:34.733" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:37:34.733" status="PASS" starttime="20170419 16:37:34.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:34.735" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:34.735" status="PASS" starttime="20170419 16:37:34.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:34.736" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:34.736" status="PASS" starttime="20170419 16:37:34.735"></status>
</kw>
<status endtime="20170419 16:37:34.736" status="PASS" starttime="20170419 16:37:34.735"></status>
</kw>
<status endtime="20170419 16:37:34.736" status="PASS" starttime="20170419 16:37:34.733"></status>
</kw>
<status endtime="20170419 16:37:34.736" status="PASS" starttime="20170419 16:37:34.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:37:34.801" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:37:34.802" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:34.802" status="PASS" starttime="20170419 16:37:34.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:34.803" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:34.803" status="PASS" starttime="20170419 16:37:34.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:34.804" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:34.804" status="PASS" starttime="20170419 16:37:34.804"></status>
</kw>
<status endtime="20170419 16:37:34.804" status="PASS" starttime="20170419 16:37:34.804"></status>
</kw>
<status endtime="20170419 16:37:34.805" status="PASS" starttime="20170419 16:37:34.802"></status>
</kw>
<status endtime="20170419 16:37:34.805" status="PASS" starttime="20170419 16:37:34.802"></status>
</kw>
<msg timestamp="20170419 16:37:34.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:34.805" status="PASS" starttime="20170419 16:37:34.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:34.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:34.806" status="PASS" starttime="20170419 16:37:34.805"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:37:34.806" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:37:34.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:37:34.806" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:37:34.806" status="PASS" starttime="20170419 16:37:34.806"></status>
</kw>
<msg timestamp="20170419 16:37:34.807" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:37:34.807" status="PASS" starttime="20170419 16:37:34.545"></status>
</kw>
<msg timestamp="20170419 16:37:34.807" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:37:34.807" status="PASS" starttime="20170419 16:37:34.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:37:34.807" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:37:34.807" status="FAIL" starttime="20170419 16:37:34.807"></status>
</kw>
<status endtime="20170419 16:37:34.808" status="FAIL" starttime="20170419 16:37:34.544"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:37:44.811" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:37:44.811" status="PASS" starttime="20170419 16:37:44.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:37:44.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:37:44.812" status="PASS" starttime="20170419 16:37:44.812"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:37:44.813" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:37:44.813" status="PASS" starttime="20170419 16:37:44.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:37:44.813" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:37:44.813" status="PASS" starttime="20170419 16:37:44.813"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:37:44.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:37:44.991" status="PASS" starttime="20170419 16:37:44.814"></status>
</kw>
<msg timestamp="20170419 16:37:44.991" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:37:44.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:44.991" status="PASS" starttime="20170419 16:37:44.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:37:44.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:44.992" status="PASS" starttime="20170419 16:37:44.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:44.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:44.992" status="PASS" starttime="20170419 16:37:44.992"></status>
</kw>
<status endtime="20170419 16:37:44.993" status="PASS" starttime="20170419 16:37:44.810"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:37:44.993" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:37:44.993" status="PASS" starttime="20170419 16:37:44.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:44.995" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:44.995" status="PASS" starttime="20170419 16:37:44.995"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:44.996" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:44.996" status="PASS" starttime="20170419 16:37:44.996"></status>
</kw>
<status endtime="20170419 16:37:44.996" status="PASS" starttime="20170419 16:37:44.995"></status>
</kw>
<status endtime="20170419 16:37:44.996" status="PASS" starttime="20170419 16:37:44.994"></status>
</kw>
<status endtime="20170419 16:37:44.996" status="PASS" starttime="20170419 16:37:44.993"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:37:45.068" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:37:45.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:45.068" status="PASS" starttime="20170419 16:37:44.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:45.070" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:45.070" status="PASS" starttime="20170419 16:37:45.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:45.071" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:45.071" status="PASS" starttime="20170419 16:37:45.070"></status>
</kw>
<status endtime="20170419 16:37:45.071" status="PASS" starttime="20170419 16:37:45.070"></status>
</kw>
<status endtime="20170419 16:37:45.071" status="PASS" starttime="20170419 16:37:45.069"></status>
</kw>
<status endtime="20170419 16:37:45.071" status="PASS" starttime="20170419 16:37:45.068"></status>
</kw>
<msg timestamp="20170419 16:37:45.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:45.071" status="PASS" starttime="20170419 16:37:44.809"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:45.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:45.072" status="PASS" starttime="20170419 16:37:45.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:37:45.072" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:37:45.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:37:45.073" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:37:45.073" status="PASS" starttime="20170419 16:37:45.072"></status>
</kw>
<msg timestamp="20170419 16:37:45.073" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:37:45.073" status="PASS" starttime="20170419 16:37:44.809"></status>
</kw>
<msg timestamp="20170419 16:37:45.073" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:37:45.073" status="PASS" starttime="20170419 16:37:44.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:37:45.074" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:37:45.074" status="FAIL" starttime="20170419 16:37:45.073"></status>
</kw>
<status endtime="20170419 16:37:45.074" status="FAIL" starttime="20170419 16:37:44.808"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:37:55.078" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:37:55.078" status="PASS" starttime="20170419 16:37:55.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:37:55.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:37:55.079" status="PASS" starttime="20170419 16:37:55.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:37:55.079" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:37:55.080" status="PASS" starttime="20170419 16:37:55.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:37:55.080" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:37:55.080" status="PASS" starttime="20170419 16:37:55.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:37:55.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:37:55.259" status="PASS" starttime="20170419 16:37:55.081"></status>
</kw>
<msg timestamp="20170419 16:37:55.259" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:37:55.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:55.259" status="PASS" starttime="20170419 16:37:55.080"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:37:55.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:55.260" status="PASS" starttime="20170419 16:37:55.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:55.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:55.261" status="PASS" starttime="20170419 16:37:55.260"></status>
</kw>
<status endtime="20170419 16:37:55.261" status="PASS" starttime="20170419 16:37:55.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:37:55.261" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:37:55.261" status="PASS" starttime="20170419 16:37:55.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:55.263" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:55.263" status="PASS" starttime="20170419 16:37:55.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:55.264" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:37:55.264" status="PASS" starttime="20170419 16:37:55.264"></status>
</kw>
<status endtime="20170419 16:37:55.264" status="PASS" starttime="20170419 16:37:55.263"></status>
</kw>
<status endtime="20170419 16:37:55.265" status="PASS" starttime="20170419 16:37:55.262"></status>
</kw>
<status endtime="20170419 16:37:55.265" status="PASS" starttime="20170419 16:37:55.261"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:37:55.330" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:37:55.330" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:55.330" status="PASS" starttime="20170419 16:37:55.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:37:55.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:55.331" status="PASS" starttime="20170419 16:37:55.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:37:55.333" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:37:55.333" status="PASS" starttime="20170419 16:37:55.332"></status>
</kw>
<status endtime="20170419 16:37:55.333" status="PASS" starttime="20170419 16:37:55.332"></status>
</kw>
<status endtime="20170419 16:37:55.333" status="PASS" starttime="20170419 16:37:55.331"></status>
</kw>
<status endtime="20170419 16:37:55.333" status="PASS" starttime="20170419 16:37:55.330"></status>
</kw>
<msg timestamp="20170419 16:37:55.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:37:55.333" status="PASS" starttime="20170419 16:37:55.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:37:55.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:37:55.334" status="PASS" starttime="20170419 16:37:55.334"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:37:55.334" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:37:55.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:37:55.335" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:37:55.335" status="PASS" starttime="20170419 16:37:55.334"></status>
</kw>
<msg timestamp="20170419 16:37:55.335" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:37:55.335" status="PASS" starttime="20170419 16:37:55.075"></status>
</kw>
<msg timestamp="20170419 16:37:55.335" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:37:55.335" status="PASS" starttime="20170419 16:37:55.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:37:55.336" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:37:55.336" status="FAIL" starttime="20170419 16:37:55.335"></status>
</kw>
<status endtime="20170419 16:37:55.336" status="FAIL" starttime="20170419 16:37:55.075"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:38:05.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:38:05.340" status="PASS" starttime="20170419 16:38:05.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:38:05.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:38:05.340" status="PASS" starttime="20170419 16:38:05.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:38:05.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:38:05.341" status="PASS" starttime="20170419 16:38:05.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:38:05.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:38:05.342" status="PASS" starttime="20170419 16:38:05.341"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:38:05.521" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:38:05.521" status="PASS" starttime="20170419 16:38:05.342"></status>
</kw>
<msg timestamp="20170419 16:38:05.521" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:38:05.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:05.521" status="PASS" starttime="20170419 16:38:05.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:38:05.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:05.522" status="PASS" starttime="20170419 16:38:05.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:05.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:05.523" status="PASS" starttime="20170419 16:38:05.522"></status>
</kw>
<status endtime="20170419 16:38:05.523" status="PASS" starttime="20170419 16:38:05.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:38:05.523" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:38:05.523" status="PASS" starttime="20170419 16:38:05.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:05.526" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:05.526" status="PASS" starttime="20170419 16:38:05.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:05.527" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:05.527" status="PASS" starttime="20170419 16:38:05.526"></status>
</kw>
<status endtime="20170419 16:38:05.527" status="PASS" starttime="20170419 16:38:05.526"></status>
</kw>
<status endtime="20170419 16:38:05.527" status="PASS" starttime="20170419 16:38:05.524"></status>
</kw>
<status endtime="20170419 16:38:05.527" status="PASS" starttime="20170419 16:38:05.524"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:38:05.668" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:38:05.668" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:05.668" status="PASS" starttime="20170419 16:38:05.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:05.670" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:05.670" status="PASS" starttime="20170419 16:38:05.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:05.670" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:05.671" status="PASS" starttime="20170419 16:38:05.670"></status>
</kw>
<status endtime="20170419 16:38:05.671" status="PASS" starttime="20170419 16:38:05.670"></status>
</kw>
<status endtime="20170419 16:38:05.671" status="PASS" starttime="20170419 16:38:05.669"></status>
</kw>
<status endtime="20170419 16:38:05.671" status="PASS" starttime="20170419 16:38:05.668"></status>
</kw>
<msg timestamp="20170419 16:38:05.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:05.671" status="PASS" starttime="20170419 16:38:05.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:05.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:05.672" status="PASS" starttime="20170419 16:38:05.671"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:38:05.672" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:38:05.672" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:38:05.672" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:38:05.672" status="PASS" starttime="20170419 16:38:05.672"></status>
</kw>
<msg timestamp="20170419 16:38:05.673" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:38:05.673" status="PASS" starttime="20170419 16:38:05.337"></status>
</kw>
<msg timestamp="20170419 16:38:05.673" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:38:05.673" status="PASS" starttime="20170419 16:38:05.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:38:05.674" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:38:05.674" status="FAIL" starttime="20170419 16:38:05.673"></status>
</kw>
<status endtime="20170419 16:38:05.674" status="FAIL" starttime="20170419 16:38:05.336"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:38:15.677" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:38:15.678" status="PASS" starttime="20170419 16:38:15.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:38:15.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:38:15.679" status="PASS" starttime="20170419 16:38:15.678"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:38:15.679" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:38:15.679" status="PASS" starttime="20170419 16:38:15.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:38:15.680" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:38:15.680" status="PASS" starttime="20170419 16:38:15.679"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:38:15.858" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:38:15.859" status="PASS" starttime="20170419 16:38:15.680"></status>
</kw>
<msg timestamp="20170419 16:38:15.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:38:15.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:15.859" status="PASS" starttime="20170419 16:38:15.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:38:15.859" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:15.859" status="PASS" starttime="20170419 16:38:15.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:15.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:15.860" status="PASS" starttime="20170419 16:38:15.860"></status>
</kw>
<status endtime="20170419 16:38:15.860" status="PASS" starttime="20170419 16:38:15.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:38:15.861" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:38:15.861" status="PASS" starttime="20170419 16:38:15.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:15.863" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:15.863" status="PASS" starttime="20170419 16:38:15.862"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:15.864" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:15.864" status="PASS" starttime="20170419 16:38:15.863"></status>
</kw>
<status endtime="20170419 16:38:15.864" status="PASS" starttime="20170419 16:38:15.863"></status>
</kw>
<status endtime="20170419 16:38:15.864" status="PASS" starttime="20170419 16:38:15.861"></status>
</kw>
<status endtime="20170419 16:38:15.864" status="PASS" starttime="20170419 16:38:15.861"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:38:15.929" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:38:15.930" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:15.930" status="PASS" starttime="20170419 16:38:15.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:15.931" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:15.931" status="PASS" starttime="20170419 16:38:15.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:15.932" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:15.932" status="PASS" starttime="20170419 16:38:15.932"></status>
</kw>
<status endtime="20170419 16:38:15.933" status="PASS" starttime="20170419 16:38:15.932"></status>
</kw>
<status endtime="20170419 16:38:15.933" status="PASS" starttime="20170419 16:38:15.930"></status>
</kw>
<status endtime="20170419 16:38:15.933" status="PASS" starttime="20170419 16:38:15.930"></status>
</kw>
<msg timestamp="20170419 16:38:15.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:15.933" status="PASS" starttime="20170419 16:38:15.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:15.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:15.934" status="PASS" starttime="20170419 16:38:15.933"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:38:15.934" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:38:15.934" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:38:15.934" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:38:15.934" status="PASS" starttime="20170419 16:38:15.934"></status>
</kw>
<msg timestamp="20170419 16:38:15.935" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:38:15.935" status="PASS" starttime="20170419 16:38:15.675"></status>
</kw>
<msg timestamp="20170419 16:38:15.935" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:38:15.935" status="PASS" starttime="20170419 16:38:15.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:38:15.935" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:38:15.936" status="FAIL" starttime="20170419 16:38:15.935"></status>
</kw>
<status endtime="20170419 16:38:15.936" status="FAIL" starttime="20170419 16:38:15.674"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:38:25.940" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:38:25.940" status="PASS" starttime="20170419 16:38:25.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:38:25.941" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:38:25.941" status="PASS" starttime="20170419 16:38:25.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:38:25.941" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:38:25.941" status="PASS" starttime="20170419 16:38:25.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:38:25.942" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:38:25.942" status="PASS" starttime="20170419 16:38:25.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:38:26.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:38:26.122" status="PASS" starttime="20170419 16:38:25.943"></status>
</kw>
<msg timestamp="20170419 16:38:26.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:38:26.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:26.122" status="PASS" starttime="20170419 16:38:25.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:38:26.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:26.123" status="PASS" starttime="20170419 16:38:26.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:26.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:26.124" status="PASS" starttime="20170419 16:38:26.123"></status>
</kw>
<status endtime="20170419 16:38:26.124" status="PASS" starttime="20170419 16:38:25.939"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:38:26.124" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:38:26.124" status="PASS" starttime="20170419 16:38:26.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:26.126" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:26.126" status="PASS" starttime="20170419 16:38:26.126"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:26.127" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:26.127" status="PASS" starttime="20170419 16:38:26.127"></status>
</kw>
<status endtime="20170419 16:38:26.128" status="PASS" starttime="20170419 16:38:26.127"></status>
</kw>
<status endtime="20170419 16:38:26.128" status="PASS" starttime="20170419 16:38:26.125"></status>
</kw>
<status endtime="20170419 16:38:26.128" status="PASS" starttime="20170419 16:38:26.125"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:38:26.192" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:38:26.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:26.193" status="PASS" starttime="20170419 16:38:26.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:26.196" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:26.196" status="PASS" starttime="20170419 16:38:26.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:26.197" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:26.197" status="PASS" starttime="20170419 16:38:26.197"></status>
</kw>
<status endtime="20170419 16:38:26.197" status="PASS" starttime="20170419 16:38:26.196"></status>
</kw>
<status endtime="20170419 16:38:26.197" status="PASS" starttime="20170419 16:38:26.193"></status>
</kw>
<status endtime="20170419 16:38:26.198" status="PASS" starttime="20170419 16:38:26.193"></status>
</kw>
<msg timestamp="20170419 16:38:26.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:26.198" status="PASS" starttime="20170419 16:38:25.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:26.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:26.198" status="PASS" starttime="20170419 16:38:26.198"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:38:26.199" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:38:26.199" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:38:26.199" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:38:26.199" status="PASS" starttime="20170419 16:38:26.199"></status>
</kw>
<msg timestamp="20170419 16:38:26.199" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:38:26.199" status="PASS" starttime="20170419 16:38:25.937"></status>
</kw>
<msg timestamp="20170419 16:38:26.200" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:38:26.200" status="PASS" starttime="20170419 16:38:25.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:38:26.200" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:38:26.200" status="FAIL" starttime="20170419 16:38:26.200"></status>
</kw>
<status endtime="20170419 16:38:26.201" status="FAIL" starttime="20170419 16:38:25.936"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:38:36.204" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:38:36.205" status="PASS" starttime="20170419 16:38:36.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:38:36.205" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:38:36.205" status="PASS" starttime="20170419 16:38:36.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:38:36.206" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:38:36.206" status="PASS" starttime="20170419 16:38:36.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:38:36.207" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:38:36.207" status="PASS" starttime="20170419 16:38:36.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:38:36.386" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:38:36.386" status="PASS" starttime="20170419 16:38:36.207"></status>
</kw>
<msg timestamp="20170419 16:38:36.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:38:36.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:36.386" status="PASS" starttime="20170419 16:38:36.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:38:36.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:36.387" status="PASS" starttime="20170419 16:38:36.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:36.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:36.387" status="PASS" starttime="20170419 16:38:36.387"></status>
</kw>
<status endtime="20170419 16:38:36.387" status="PASS" starttime="20170419 16:38:36.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:38:36.388" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:38:36.388" status="PASS" starttime="20170419 16:38:36.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:36.390" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:36.390" status="PASS" starttime="20170419 16:38:36.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:36.391" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:36.391" status="PASS" starttime="20170419 16:38:36.391"></status>
</kw>
<status endtime="20170419 16:38:36.391" status="PASS" starttime="20170419 16:38:36.391"></status>
</kw>
<status endtime="20170419 16:38:36.392" status="PASS" starttime="20170419 16:38:36.389"></status>
</kw>
<status endtime="20170419 16:38:36.392" status="PASS" starttime="20170419 16:38:36.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:38:36.456" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:38:36.456" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:36.456" status="PASS" starttime="20170419 16:38:36.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:36.458" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:36.458" status="PASS" starttime="20170419 16:38:36.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:36.459" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:36.459" status="PASS" starttime="20170419 16:38:36.459"></status>
</kw>
<status endtime="20170419 16:38:36.459" status="PASS" starttime="20170419 16:38:36.458"></status>
</kw>
<status endtime="20170419 16:38:36.459" status="PASS" starttime="20170419 16:38:36.457"></status>
</kw>
<status endtime="20170419 16:38:36.459" status="PASS" starttime="20170419 16:38:36.457"></status>
</kw>
<msg timestamp="20170419 16:38:36.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:36.460" status="PASS" starttime="20170419 16:38:36.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:36.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:36.460" status="PASS" starttime="20170419 16:38:36.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:38:36.461" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:38:36.461" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:38:36.461" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:38:36.461" status="PASS" starttime="20170419 16:38:36.460"></status>
</kw>
<msg timestamp="20170419 16:38:36.461" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:38:36.461" status="PASS" starttime="20170419 16:38:36.202"></status>
</kw>
<msg timestamp="20170419 16:38:36.461" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:38:36.461" status="PASS" starttime="20170419 16:38:36.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:38:36.462" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:38:36.462" status="FAIL" starttime="20170419 16:38:36.462"></status>
</kw>
<status endtime="20170419 16:38:36.462" status="FAIL" starttime="20170419 16:38:36.201"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:38:46.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:38:46.467" status="PASS" starttime="20170419 16:38:46.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:38:46.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:38:46.467" status="PASS" starttime="20170419 16:38:46.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:38:46.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:38:46.468" status="PASS" starttime="20170419 16:38:46.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:38:46.468" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:38:46.469" status="PASS" starttime="20170419 16:38:46.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:38:46.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:38:46.654" status="PASS" starttime="20170419 16:38:46.469"></status>
</kw>
<msg timestamp="20170419 16:38:46.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:38:46.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:46.654" status="PASS" starttime="20170419 16:38:46.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:38:46.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:46.655" status="PASS" starttime="20170419 16:38:46.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:46.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:46.655" status="PASS" starttime="20170419 16:38:46.655"></status>
</kw>
<status endtime="20170419 16:38:46.656" status="PASS" starttime="20170419 16:38:46.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:38:46.656" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:38:46.656" status="PASS" starttime="20170419 16:38:46.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:46.659" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:46.659" status="PASS" starttime="20170419 16:38:46.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:46.660" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:46.660" status="PASS" starttime="20170419 16:38:46.659"></status>
</kw>
<status endtime="20170419 16:38:46.660" status="PASS" starttime="20170419 16:38:46.659"></status>
</kw>
<status endtime="20170419 16:38:46.660" status="PASS" starttime="20170419 16:38:46.657"></status>
</kw>
<status endtime="20170419 16:38:46.660" status="PASS" starttime="20170419 16:38:46.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:38:46.726" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:38:46.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:46.726" status="PASS" starttime="20170419 16:38:46.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:46.728" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:46.728" status="PASS" starttime="20170419 16:38:46.727"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:46.729" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:46.729" status="PASS" starttime="20170419 16:38:46.728"></status>
</kw>
<status endtime="20170419 16:38:46.729" status="PASS" starttime="20170419 16:38:46.728"></status>
</kw>
<status endtime="20170419 16:38:46.729" status="PASS" starttime="20170419 16:38:46.727"></status>
</kw>
<status endtime="20170419 16:38:46.729" status="PASS" starttime="20170419 16:38:46.726"></status>
</kw>
<msg timestamp="20170419 16:38:46.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:46.729" status="PASS" starttime="20170419 16:38:46.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:46.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:46.730" status="PASS" starttime="20170419 16:38:46.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:38:46.730" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:38:46.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:38:46.731" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:38:46.731" status="PASS" starttime="20170419 16:38:46.730"></status>
</kw>
<msg timestamp="20170419 16:38:46.731" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:38:46.731" status="PASS" starttime="20170419 16:38:46.464"></status>
</kw>
<msg timestamp="20170419 16:38:46.731" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:38:46.731" status="PASS" starttime="20170419 16:38:46.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:38:46.732" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:38:46.732" status="FAIL" starttime="20170419 16:38:46.731"></status>
</kw>
<status endtime="20170419 16:38:46.732" status="FAIL" starttime="20170419 16:38:46.463"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:38:56.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:38:56.736" status="PASS" starttime="20170419 16:38:56.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:38:56.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:38:56.737" status="PASS" starttime="20170419 16:38:56.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:38:56.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:38:56.738" status="PASS" starttime="20170419 16:38:56.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:38:56.738" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:38:56.738" status="PASS" starttime="20170419 16:38:56.738"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:38:56.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:38:56.939" status="PASS" starttime="20170419 16:38:56.739"></status>
</kw>
<msg timestamp="20170419 16:38:56.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:38:56.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:56.939" status="PASS" starttime="20170419 16:38:56.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:38:56.939" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:56.940" status="PASS" starttime="20170419 16:38:56.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:56.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:56.940" status="PASS" starttime="20170419 16:38:56.940"></status>
</kw>
<status endtime="20170419 16:38:56.940" status="PASS" starttime="20170419 16:38:56.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:38:56.941" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:38:56.941" status="PASS" starttime="20170419 16:38:56.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:56.943" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:56.943" status="PASS" starttime="20170419 16:38:56.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:56.944" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:38:56.944" status="PASS" starttime="20170419 16:38:56.944"></status>
</kw>
<status endtime="20170419 16:38:56.944" status="PASS" starttime="20170419 16:38:56.943"></status>
</kw>
<status endtime="20170419 16:38:56.944" status="PASS" starttime="20170419 16:38:56.942"></status>
</kw>
<status endtime="20170419 16:38:56.945" status="PASS" starttime="20170419 16:38:56.941"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:38:57.009" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:38:57.010" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:57.010" status="PASS" starttime="20170419 16:38:56.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:38:57.012" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:57.012" status="PASS" starttime="20170419 16:38:57.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:38:57.013" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:38:57.013" status="PASS" starttime="20170419 16:38:57.012"></status>
</kw>
<status endtime="20170419 16:38:57.013" status="PASS" starttime="20170419 16:38:57.012"></status>
</kw>
<status endtime="20170419 16:38:57.013" status="PASS" starttime="20170419 16:38:57.011"></status>
</kw>
<status endtime="20170419 16:38:57.013" status="PASS" starttime="20170419 16:38:57.010"></status>
</kw>
<msg timestamp="20170419 16:38:57.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:38:57.014" status="PASS" starttime="20170419 16:38:56.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:38:57.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:38:57.014" status="PASS" starttime="20170419 16:38:57.014"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:38:57.015" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:38:57.015" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:38:57.015" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:38:57.015" status="PASS" starttime="20170419 16:38:57.015"></status>
</kw>
<msg timestamp="20170419 16:38:57.015" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:38:57.015" status="PASS" starttime="20170419 16:38:56.733"></status>
</kw>
<msg timestamp="20170419 16:38:57.016" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:38:57.016" status="PASS" starttime="20170419 16:38:56.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:38:57.016" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:38:57.016" status="FAIL" starttime="20170419 16:38:57.016"></status>
</kw>
<status endtime="20170419 16:38:57.017" status="FAIL" starttime="20170419 16:38:56.732"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:39:07.020" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:39:07.020" status="PASS" starttime="20170419 16:39:07.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:39:07.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:39:07.021" status="PASS" starttime="20170419 16:39:07.021"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:39:07.022" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:39:07.022" status="PASS" starttime="20170419 16:39:07.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:39:07.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:39:07.022" status="PASS" starttime="20170419 16:39:07.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:39:07.199" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:39:07.199" status="PASS" starttime="20170419 16:39:07.023"></status>
</kw>
<msg timestamp="20170419 16:39:07.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:39:07.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:07.199" status="PASS" starttime="20170419 16:39:07.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:39:07.200" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:07.200" status="PASS" starttime="20170419 16:39:07.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:07.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:07.200" status="PASS" starttime="20170419 16:39:07.200"></status>
</kw>
<status endtime="20170419 16:39:07.201" status="PASS" starttime="20170419 16:39:07.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:39:07.201" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:39:07.201" status="PASS" starttime="20170419 16:39:07.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:07.203" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:07.203" status="PASS" starttime="20170419 16:39:07.203"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:07.204" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:07.205" status="PASS" starttime="20170419 16:39:07.204"></status>
</kw>
<status endtime="20170419 16:39:07.205" status="PASS" starttime="20170419 16:39:07.204"></status>
</kw>
<status endtime="20170419 16:39:07.205" status="PASS" starttime="20170419 16:39:07.202"></status>
</kw>
<status endtime="20170419 16:39:07.205" status="PASS" starttime="20170419 16:39:07.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:39:07.309" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:39:07.309" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:07.309" status="PASS" starttime="20170419 16:39:07.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:07.310" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:07.310" status="PASS" starttime="20170419 16:39:07.310"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:07.311" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:07.312" status="PASS" starttime="20170419 16:39:07.311"></status>
</kw>
<status endtime="20170419 16:39:07.312" status="PASS" starttime="20170419 16:39:07.311"></status>
</kw>
<status endtime="20170419 16:39:07.312" status="PASS" starttime="20170419 16:39:07.309"></status>
</kw>
<status endtime="20170419 16:39:07.312" status="PASS" starttime="20170419 16:39:07.309"></status>
</kw>
<msg timestamp="20170419 16:39:07.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:07.312" status="PASS" starttime="20170419 16:39:07.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:07.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:07.313" status="PASS" starttime="20170419 16:39:07.312"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:39:07.313" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:39:07.313" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:39:07.313" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:39:07.314" status="PASS" starttime="20170419 16:39:07.313"></status>
</kw>
<msg timestamp="20170419 16:39:07.314" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:39:07.314" status="PASS" starttime="20170419 16:39:07.018"></status>
</kw>
<msg timestamp="20170419 16:39:07.314" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:39:07.314" status="PASS" starttime="20170419 16:39:07.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:39:07.315" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:39:07.315" status="FAIL" starttime="20170419 16:39:07.314"></status>
</kw>
<status endtime="20170419 16:39:07.315" status="FAIL" starttime="20170419 16:39:07.017"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:39:17.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:39:17.319" status="PASS" starttime="20170419 16:39:17.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:39:17.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:39:17.319" status="PASS" starttime="20170419 16:39:17.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:39:17.320" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:39:17.320" status="PASS" starttime="20170419 16:39:17.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:39:17.321" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:39:17.321" status="PASS" starttime="20170419 16:39:17.320"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:39:17.498" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:39:17.499" status="PASS" starttime="20170419 16:39:17.321"></status>
</kw>
<msg timestamp="20170419 16:39:17.499" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:39:17.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:17.499" status="PASS" starttime="20170419 16:39:17.321"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:39:17.500" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:17.500" status="PASS" starttime="20170419 16:39:17.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:17.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:17.501" status="PASS" starttime="20170419 16:39:17.500"></status>
</kw>
<status endtime="20170419 16:39:17.501" status="PASS" starttime="20170419 16:39:17.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:39:17.501" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:39:17.501" status="PASS" starttime="20170419 16:39:17.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:17.503" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:17.503" status="PASS" starttime="20170419 16:39:17.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:17.504" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:17.505" status="PASS" starttime="20170419 16:39:17.504"></status>
</kw>
<status endtime="20170419 16:39:17.505" status="PASS" starttime="20170419 16:39:17.504"></status>
</kw>
<status endtime="20170419 16:39:17.505" status="PASS" starttime="20170419 16:39:17.502"></status>
</kw>
<status endtime="20170419 16:39:17.505" status="PASS" starttime="20170419 16:39:17.501"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:39:17.570" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:39:17.570" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:17.570" status="PASS" starttime="20170419 16:39:17.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:17.572" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:17.572" status="PASS" starttime="20170419 16:39:17.571"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:17.573" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:17.573" status="PASS" starttime="20170419 16:39:17.573"></status>
</kw>
<status endtime="20170419 16:39:17.573" status="PASS" starttime="20170419 16:39:17.572"></status>
</kw>
<status endtime="20170419 16:39:17.573" status="PASS" starttime="20170419 16:39:17.571"></status>
</kw>
<status endtime="20170419 16:39:17.573" status="PASS" starttime="20170419 16:39:17.570"></status>
</kw>
<msg timestamp="20170419 16:39:17.573" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:17.573" status="PASS" starttime="20170419 16:39:17.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:17.574" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:17.574" status="PASS" starttime="20170419 16:39:17.574"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:39:17.575" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:39:17.575" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:39:17.575" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:39:17.575" status="PASS" starttime="20170419 16:39:17.574"></status>
</kw>
<msg timestamp="20170419 16:39:17.575" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:39:17.575" status="PASS" starttime="20170419 16:39:17.316"></status>
</kw>
<msg timestamp="20170419 16:39:17.575" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:39:17.575" status="PASS" starttime="20170419 16:39:17.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:39:17.576" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:39:17.576" status="FAIL" starttime="20170419 16:39:17.576"></status>
</kw>
<status endtime="20170419 16:39:17.576" status="FAIL" starttime="20170419 16:39:17.315"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:39:27.580" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:39:27.581" status="PASS" starttime="20170419 16:39:27.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:39:27.581" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:39:27.581" status="PASS" starttime="20170419 16:39:27.581"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:39:27.582" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:39:27.582" status="PASS" starttime="20170419 16:39:27.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:39:27.582" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:39:27.582" status="PASS" starttime="20170419 16:39:27.582"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:39:27.761" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:39:27.761" status="PASS" starttime="20170419 16:39:27.583"></status>
</kw>
<msg timestamp="20170419 16:39:27.761" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:39:27.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:27.761" status="PASS" starttime="20170419 16:39:27.583"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:39:27.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:27.762" status="PASS" starttime="20170419 16:39:27.761"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:27.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:27.762" status="PASS" starttime="20170419 16:39:27.762"></status>
</kw>
<status endtime="20170419 16:39:27.762" status="PASS" starttime="20170419 16:39:27.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:39:27.763" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:39:27.763" status="PASS" starttime="20170419 16:39:27.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:27.765" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:27.765" status="PASS" starttime="20170419 16:39:27.764"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:27.766" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:27.766" status="PASS" starttime="20170419 16:39:27.766"></status>
</kw>
<status endtime="20170419 16:39:27.766" status="PASS" starttime="20170419 16:39:27.765"></status>
</kw>
<status endtime="20170419 16:39:27.766" status="PASS" starttime="20170419 16:39:27.764"></status>
</kw>
<status endtime="20170419 16:39:27.766" status="PASS" starttime="20170419 16:39:27.763"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:39:27.832" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:39:27.832" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:27.832" status="PASS" starttime="20170419 16:39:27.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:27.834" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:27.834" status="PASS" starttime="20170419 16:39:27.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:27.835" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:27.835" status="PASS" starttime="20170419 16:39:27.835"></status>
</kw>
<status endtime="20170419 16:39:27.835" status="PASS" starttime="20170419 16:39:27.834"></status>
</kw>
<status endtime="20170419 16:39:27.835" status="PASS" starttime="20170419 16:39:27.833"></status>
</kw>
<status endtime="20170419 16:39:27.835" status="PASS" starttime="20170419 16:39:27.832"></status>
</kw>
<msg timestamp="20170419 16:39:27.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:27.835" status="PASS" starttime="20170419 16:39:27.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:27.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:27.836" status="PASS" starttime="20170419 16:39:27.836"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:39:27.837" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:39:27.837" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:39:27.837" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:39:27.837" status="PASS" starttime="20170419 16:39:27.836"></status>
</kw>
<msg timestamp="20170419 16:39:27.837" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:39:27.837" status="PASS" starttime="20170419 16:39:27.578"></status>
</kw>
<msg timestamp="20170419 16:39:27.837" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:39:27.837" status="PASS" starttime="20170419 16:39:27.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:39:27.838" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:39:27.838" status="FAIL" starttime="20170419 16:39:27.838"></status>
</kw>
<status endtime="20170419 16:39:27.838" status="FAIL" starttime="20170419 16:39:27.577"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:39:37.842" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:39:37.842" status="PASS" starttime="20170419 16:39:37.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:39:37.843" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:39:37.843" status="PASS" starttime="20170419 16:39:37.842"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:39:37.843" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:39:37.843" status="PASS" starttime="20170419 16:39:37.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:39:37.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:39:37.844" status="PASS" starttime="20170419 16:39:37.843"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:39:38.028" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:39:38.028" status="PASS" starttime="20170419 16:39:37.844"></status>
</kw>
<msg timestamp="20170419 16:39:38.028" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:39:38.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:38.028" status="PASS" starttime="20170419 16:39:37.844"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:39:38.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:38.029" status="PASS" starttime="20170419 16:39:38.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:38.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:38.029" status="PASS" starttime="20170419 16:39:38.029"></status>
</kw>
<status endtime="20170419 16:39:38.029" status="PASS" starttime="20170419 16:39:37.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:39:38.030" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:39:38.030" status="PASS" starttime="20170419 16:39:38.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:38.032" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:38.033" status="PASS" starttime="20170419 16:39:38.032"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:38.033" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:38.033" status="PASS" starttime="20170419 16:39:38.033"></status>
</kw>
<status endtime="20170419 16:39:38.034" status="PASS" starttime="20170419 16:39:38.033"></status>
</kw>
<status endtime="20170419 16:39:38.034" status="PASS" starttime="20170419 16:39:38.031"></status>
</kw>
<status endtime="20170419 16:39:38.034" status="PASS" starttime="20170419 16:39:38.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:39:38.099" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:39:38.099" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:38.099" status="PASS" starttime="20170419 16:39:38.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:38.101" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:38.101" status="PASS" starttime="20170419 16:39:38.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:38.102" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:38.102" status="PASS" starttime="20170419 16:39:38.101"></status>
</kw>
<status endtime="20170419 16:39:38.102" status="PASS" starttime="20170419 16:39:38.101"></status>
</kw>
<status endtime="20170419 16:39:38.102" status="PASS" starttime="20170419 16:39:38.100"></status>
</kw>
<status endtime="20170419 16:39:38.102" status="PASS" starttime="20170419 16:39:38.099"></status>
</kw>
<msg timestamp="20170419 16:39:38.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:38.102" status="PASS" starttime="20170419 16:39:37.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:38.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:38.103" status="PASS" starttime="20170419 16:39:38.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:39:38.104" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:39:38.104" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:39:38.104" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:39:38.104" status="PASS" starttime="20170419 16:39:38.103"></status>
</kw>
<msg timestamp="20170419 16:39:38.104" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:39:38.104" status="PASS" starttime="20170419 16:39:37.839"></status>
</kw>
<msg timestamp="20170419 16:39:38.104" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:39:38.104" status="PASS" starttime="20170419 16:39:37.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:39:38.105" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:39:38.105" status="FAIL" starttime="20170419 16:39:38.104"></status>
</kw>
<status endtime="20170419 16:39:38.105" status="FAIL" starttime="20170419 16:39:37.839"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:39:48.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:39:48.109" status="PASS" starttime="20170419 16:39:48.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:39:48.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:39:48.110" status="PASS" starttime="20170419 16:39:48.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:39:48.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:39:48.111" status="PASS" starttime="20170419 16:39:48.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:39:48.111" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:39:48.111" status="PASS" starttime="20170419 16:39:48.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:39:48.289" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:39:48.289" status="PASS" starttime="20170419 16:39:48.112"></status>
</kw>
<msg timestamp="20170419 16:39:48.290" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:39:48.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:48.290" status="PASS" starttime="20170419 16:39:48.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:39:48.290" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:48.290" status="PASS" starttime="20170419 16:39:48.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:48.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:48.291" status="PASS" starttime="20170419 16:39:48.291"></status>
</kw>
<status endtime="20170419 16:39:48.291" status="PASS" starttime="20170419 16:39:48.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:39:48.292" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:39:48.292" status="PASS" starttime="20170419 16:39:48.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:48.294" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:48.294" status="PASS" starttime="20170419 16:39:48.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:48.295" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:48.295" status="PASS" starttime="20170419 16:39:48.295"></status>
</kw>
<status endtime="20170419 16:39:48.295" status="PASS" starttime="20170419 16:39:48.294"></status>
</kw>
<status endtime="20170419 16:39:48.295" status="PASS" starttime="20170419 16:39:48.292"></status>
</kw>
<status endtime="20170419 16:39:48.295" status="PASS" starttime="20170419 16:39:48.292"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:39:48.360" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:39:48.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:48.360" status="PASS" starttime="20170419 16:39:48.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:48.362" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:48.362" status="PASS" starttime="20170419 16:39:48.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:48.363" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:48.363" status="PASS" starttime="20170419 16:39:48.363"></status>
</kw>
<status endtime="20170419 16:39:48.363" status="PASS" starttime="20170419 16:39:48.362"></status>
</kw>
<status endtime="20170419 16:39:48.363" status="PASS" starttime="20170419 16:39:48.361"></status>
</kw>
<status endtime="20170419 16:39:48.363" status="PASS" starttime="20170419 16:39:48.360"></status>
</kw>
<msg timestamp="20170419 16:39:48.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:48.363" status="PASS" starttime="20170419 16:39:48.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:48.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:48.364" status="PASS" starttime="20170419 16:39:48.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:39:48.365" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:39:48.365" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:39:48.365" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:39:48.365" status="PASS" starttime="20170419 16:39:48.365"></status>
</kw>
<msg timestamp="20170419 16:39:48.365" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:39:48.365" status="PASS" starttime="20170419 16:39:48.107"></status>
</kw>
<msg timestamp="20170419 16:39:48.366" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:39:48.366" status="PASS" starttime="20170419 16:39:48.106"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:39:48.366" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:39:48.366" status="FAIL" starttime="20170419 16:39:48.366"></status>
</kw>
<status endtime="20170419 16:39:48.367" status="FAIL" starttime="20170419 16:39:48.106"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:39:58.370" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:39:58.371" status="PASS" starttime="20170419 16:39:58.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:39:58.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:39:58.372" status="PASS" starttime="20170419 16:39:58.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:39:58.372" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:39:58.372" status="PASS" starttime="20170419 16:39:58.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:39:58.373" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:39:58.373" status="PASS" starttime="20170419 16:39:58.372"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:39:58.550" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:39:58.550" status="PASS" starttime="20170419 16:39:58.373"></status>
</kw>
<msg timestamp="20170419 16:39:58.550" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:39:58.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:58.550" status="PASS" starttime="20170419 16:39:58.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:39:58.551" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:58.551" status="PASS" starttime="20170419 16:39:58.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:58.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:58.552" status="PASS" starttime="20170419 16:39:58.551"></status>
</kw>
<status endtime="20170419 16:39:58.552" status="PASS" starttime="20170419 16:39:58.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:39:58.552" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:39:58.552" status="PASS" starttime="20170419 16:39:58.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:58.555" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:58.555" status="PASS" starttime="20170419 16:39:58.554"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:58.556" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:39:58.556" status="PASS" starttime="20170419 16:39:58.555"></status>
</kw>
<status endtime="20170419 16:39:58.556" status="PASS" starttime="20170419 16:39:58.555"></status>
</kw>
<status endtime="20170419 16:39:58.556" status="PASS" starttime="20170419 16:39:58.553"></status>
</kw>
<status endtime="20170419 16:39:58.556" status="PASS" starttime="20170419 16:39:58.553"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:39:58.621" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:39:58.621" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:58.621" status="PASS" starttime="20170419 16:39:58.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:39:58.625" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:58.625" status="PASS" starttime="20170419 16:39:58.624"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:39:58.626" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:39:58.626" status="PASS" starttime="20170419 16:39:58.625"></status>
</kw>
<status endtime="20170419 16:39:58.626" status="PASS" starttime="20170419 16:39:58.625"></status>
</kw>
<status endtime="20170419 16:39:58.626" status="PASS" starttime="20170419 16:39:58.622"></status>
</kw>
<status endtime="20170419 16:39:58.626" status="PASS" starttime="20170419 16:39:58.621"></status>
</kw>
<msg timestamp="20170419 16:39:58.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:39:58.626" status="PASS" starttime="20170419 16:39:58.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:39:58.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:39:58.627" status="PASS" starttime="20170419 16:39:58.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:39:58.627" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:39:58.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:39:58.628" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:39:58.628" status="PASS" starttime="20170419 16:39:58.627"></status>
</kw>
<msg timestamp="20170419 16:39:58.628" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:39:58.628" status="PASS" starttime="20170419 16:39:58.368"></status>
</kw>
<msg timestamp="20170419 16:39:58.628" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:39:58.628" status="PASS" starttime="20170419 16:39:58.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:39:58.629" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:39:58.629" status="FAIL" starttime="20170419 16:39:58.628"></status>
</kw>
<status endtime="20170419 16:39:58.629" status="FAIL" starttime="20170419 16:39:58.367"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:40:08.632" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:40:08.633" status="PASS" starttime="20170419 16:40:08.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:40:08.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:40:08.633" status="PASS" starttime="20170419 16:40:08.633"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:40:08.634" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:40:08.634" status="PASS" starttime="20170419 16:40:08.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:40:08.635" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:40:08.635" status="PASS" starttime="20170419 16:40:08.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:40:08.813" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:40:08.813" status="PASS" starttime="20170419 16:40:08.636"></status>
</kw>
<msg timestamp="20170419 16:40:08.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:40:08.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:08.814" status="PASS" starttime="20170419 16:40:08.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:40:08.814" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:08.814" status="PASS" starttime="20170419 16:40:08.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:08.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:08.815" status="PASS" starttime="20170419 16:40:08.815"></status>
</kw>
<status endtime="20170419 16:40:08.815" status="PASS" starttime="20170419 16:40:08.631"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:40:08.816" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:40:08.816" status="PASS" starttime="20170419 16:40:08.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:08.818" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:08.818" status="PASS" starttime="20170419 16:40:08.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:08.819" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:08.819" status="PASS" starttime="20170419 16:40:08.819"></status>
</kw>
<status endtime="20170419 16:40:08.819" status="PASS" starttime="20170419 16:40:08.818"></status>
</kw>
<status endtime="20170419 16:40:08.819" status="PASS" starttime="20170419 16:40:08.816"></status>
</kw>
<status endtime="20170419 16:40:08.819" status="PASS" starttime="20170419 16:40:08.816"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:40:08.884" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:40:08.884" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:08.884" status="PASS" starttime="20170419 16:40:08.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:08.886" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:08.886" status="PASS" starttime="20170419 16:40:08.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:08.887" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:08.887" status="PASS" starttime="20170419 16:40:08.886"></status>
</kw>
<status endtime="20170419 16:40:08.887" status="PASS" starttime="20170419 16:40:08.886"></status>
</kw>
<status endtime="20170419 16:40:08.887" status="PASS" starttime="20170419 16:40:08.885"></status>
</kw>
<status endtime="20170419 16:40:08.887" status="PASS" starttime="20170419 16:40:08.884"></status>
</kw>
<msg timestamp="20170419 16:40:08.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:08.887" status="PASS" starttime="20170419 16:40:08.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:08.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:08.888" status="PASS" starttime="20170419 16:40:08.887"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:40:08.888" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:40:08.888" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:40:08.889" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:40:08.889" status="PASS" starttime="20170419 16:40:08.888"></status>
</kw>
<msg timestamp="20170419 16:40:08.889" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:40:08.889" status="PASS" starttime="20170419 16:40:08.630"></status>
</kw>
<msg timestamp="20170419 16:40:08.889" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:40:08.889" status="PASS" starttime="20170419 16:40:08.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:40:08.890" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:40:08.890" status="FAIL" starttime="20170419 16:40:08.889"></status>
</kw>
<status endtime="20170419 16:40:08.890" status="FAIL" starttime="20170419 16:40:08.629"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:40:18.894" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:40:18.894" status="PASS" starttime="20170419 16:40:18.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:40:18.895" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:40:18.895" status="PASS" starttime="20170419 16:40:18.894"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:40:18.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:40:18.895" status="PASS" starttime="20170419 16:40:18.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:40:18.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:40:18.897" status="PASS" starttime="20170419 16:40:18.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:40:19.074" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:40:19.074" status="PASS" starttime="20170419 16:40:18.897"></status>
</kw>
<msg timestamp="20170419 16:40:19.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:40:19.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:19.075" status="PASS" starttime="20170419 16:40:18.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:40:19.075" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:19.075" status="PASS" starttime="20170419 16:40:19.075"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:19.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:19.076" status="PASS" starttime="20170419 16:40:19.076"></status>
</kw>
<status endtime="20170419 16:40:19.076" status="PASS" starttime="20170419 16:40:18.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:40:19.077" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:40:19.077" status="PASS" starttime="20170419 16:40:19.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:19.079" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:19.079" status="PASS" starttime="20170419 16:40:19.078"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:19.080" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:19.080" status="PASS" starttime="20170419 16:40:19.079"></status>
</kw>
<status endtime="20170419 16:40:19.080" status="PASS" starttime="20170419 16:40:19.079"></status>
</kw>
<status endtime="20170419 16:40:19.080" status="PASS" starttime="20170419 16:40:19.078"></status>
</kw>
<status endtime="20170419 16:40:19.080" status="PASS" starttime="20170419 16:40:19.077"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:40:19.146" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:40:19.146" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:19.146" status="PASS" starttime="20170419 16:40:19.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:19.148" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:19.148" status="PASS" starttime="20170419 16:40:19.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:19.149" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:19.149" status="PASS" starttime="20170419 16:40:19.149"></status>
</kw>
<status endtime="20170419 16:40:19.149" status="PASS" starttime="20170419 16:40:19.148"></status>
</kw>
<status endtime="20170419 16:40:19.149" status="PASS" starttime="20170419 16:40:19.147"></status>
</kw>
<status endtime="20170419 16:40:19.149" status="PASS" starttime="20170419 16:40:19.147"></status>
</kw>
<msg timestamp="20170419 16:40:19.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:19.150" status="PASS" starttime="20170419 16:40:18.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:19.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:19.150" status="PASS" starttime="20170419 16:40:19.150"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:40:19.151" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:40:19.151" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:40:19.151" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:40:19.151" status="PASS" starttime="20170419 16:40:19.150"></status>
</kw>
<msg timestamp="20170419 16:40:19.151" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:40:19.151" status="PASS" starttime="20170419 16:40:18.891"></status>
</kw>
<msg timestamp="20170419 16:40:19.151" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:40:19.151" status="PASS" starttime="20170419 16:40:18.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:40:19.152" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:40:19.152" status="FAIL" starttime="20170419 16:40:19.152"></status>
</kw>
<status endtime="20170419 16:40:19.152" status="FAIL" starttime="20170419 16:40:18.890"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:40:29.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:40:29.157" status="PASS" starttime="20170419 16:40:29.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:40:29.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:40:29.157" status="PASS" starttime="20170419 16:40:29.157"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:40:29.158" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:40:29.158" status="PASS" starttime="20170419 16:40:29.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:40:29.159" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:40:29.159" status="PASS" starttime="20170419 16:40:29.158"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:40:29.359" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:40:29.359" status="PASS" starttime="20170419 16:40:29.159"></status>
</kw>
<msg timestamp="20170419 16:40:29.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:40:29.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:29.359" status="PASS" starttime="20170419 16:40:29.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:40:29.360" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:29.360" status="PASS" starttime="20170419 16:40:29.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:29.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:29.360" status="PASS" starttime="20170419 16:40:29.360"></status>
</kw>
<status endtime="20170419 16:40:29.361" status="PASS" starttime="20170419 16:40:29.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:40:29.361" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:40:29.361" status="PASS" starttime="20170419 16:40:29.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:29.363" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:29.363" status="PASS" starttime="20170419 16:40:29.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:29.364" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:29.364" status="PASS" starttime="20170419 16:40:29.364"></status>
</kw>
<status endtime="20170419 16:40:29.364" status="PASS" starttime="20170419 16:40:29.363"></status>
</kw>
<status endtime="20170419 16:40:29.364" status="PASS" starttime="20170419 16:40:29.362"></status>
</kw>
<status endtime="20170419 16:40:29.364" status="PASS" starttime="20170419 16:40:29.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:40:29.437" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:40:29.437" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:29.437" status="PASS" starttime="20170419 16:40:29.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:29.438" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:29.438" status="PASS" starttime="20170419 16:40:29.438"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:29.440" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:29.440" status="PASS" starttime="20170419 16:40:29.439"></status>
</kw>
<status endtime="20170419 16:40:29.440" status="PASS" starttime="20170419 16:40:29.439"></status>
</kw>
<status endtime="20170419 16:40:29.440" status="PASS" starttime="20170419 16:40:29.437"></status>
</kw>
<status endtime="20170419 16:40:29.440" status="PASS" starttime="20170419 16:40:29.437"></status>
</kw>
<msg timestamp="20170419 16:40:29.440" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:29.440" status="PASS" starttime="20170419 16:40:29.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:29.441" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:29.441" status="PASS" starttime="20170419 16:40:29.440"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:40:29.441" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:40:29.441" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:40:29.442" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:40:29.442" status="PASS" starttime="20170419 16:40:29.441"></status>
</kw>
<msg timestamp="20170419 16:40:29.442" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:40:29.442" status="PASS" starttime="20170419 16:40:29.154"></status>
</kw>
<msg timestamp="20170419 16:40:29.442" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:40:29.442" status="PASS" starttime="20170419 16:40:29.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:40:29.443" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:40:29.443" status="FAIL" starttime="20170419 16:40:29.443"></status>
</kw>
<status endtime="20170419 16:40:29.443" status="FAIL" starttime="20170419 16:40:29.153"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:40:39.447" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:40:39.447" status="PASS" starttime="20170419 16:40:39.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:40:39.448" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:40:39.448" status="PASS" starttime="20170419 16:40:39.447"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:40:39.448" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:40:39.448" status="PASS" starttime="20170419 16:40:39.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:40:39.449" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:40:39.449" status="PASS" starttime="20170419 16:40:39.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:40:39.663" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:40:39.663" status="PASS" starttime="20170419 16:40:39.450"></status>
</kw>
<msg timestamp="20170419 16:40:39.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:40:39.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:39.664" status="PASS" starttime="20170419 16:40:39.449"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:40:39.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:39.664" status="PASS" starttime="20170419 16:40:39.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:39.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:39.665" status="PASS" starttime="20170419 16:40:39.664"></status>
</kw>
<status endtime="20170419 16:40:39.665" status="PASS" starttime="20170419 16:40:39.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:40:39.666" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:40:39.666" status="PASS" starttime="20170419 16:40:39.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:39.668" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:39.668" status="PASS" starttime="20170419 16:40:39.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:39.669" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:39.669" status="PASS" starttime="20170419 16:40:39.669"></status>
</kw>
<status endtime="20170419 16:40:39.669" status="PASS" starttime="20170419 16:40:39.668"></status>
</kw>
<status endtime="20170419 16:40:39.669" status="PASS" starttime="20170419 16:40:39.666"></status>
</kw>
<status endtime="20170419 16:40:39.669" status="PASS" starttime="20170419 16:40:39.666"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:40:39.734" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:40:39.734" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:39.734" status="PASS" starttime="20170419 16:40:39.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:39.736" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:39.736" status="PASS" starttime="20170419 16:40:39.735"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:39.737" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:39.737" status="PASS" starttime="20170419 16:40:39.736"></status>
</kw>
<status endtime="20170419 16:40:39.737" status="PASS" starttime="20170419 16:40:39.736"></status>
</kw>
<status endtime="20170419 16:40:39.737" status="PASS" starttime="20170419 16:40:39.735"></status>
</kw>
<status endtime="20170419 16:40:39.737" status="PASS" starttime="20170419 16:40:39.734"></status>
</kw>
<msg timestamp="20170419 16:40:39.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:39.737" status="PASS" starttime="20170419 16:40:39.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:39.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:39.738" status="PASS" starttime="20170419 16:40:39.738"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:40:39.738" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:40:39.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:40:39.739" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:40:39.739" status="PASS" starttime="20170419 16:40:39.738"></status>
</kw>
<msg timestamp="20170419 16:40:39.739" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:40:39.739" status="PASS" starttime="20170419 16:40:39.445"></status>
</kw>
<msg timestamp="20170419 16:40:39.739" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:40:39.739" status="PASS" starttime="20170419 16:40:39.444"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:40:39.740" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:40:39.740" status="FAIL" starttime="20170419 16:40:39.739"></status>
</kw>
<status endtime="20170419 16:40:39.740" status="FAIL" starttime="20170419 16:40:39.444"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:40:49.743" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:40:49.744" status="PASS" starttime="20170419 16:40:49.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:40:49.744" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:40:49.744" status="PASS" starttime="20170419 16:40:49.744"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:40:49.745" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:40:49.745" status="PASS" starttime="20170419 16:40:49.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:40:49.746" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:40:49.746" status="PASS" starttime="20170419 16:40:49.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:40:49.942" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:40:49.942" status="PASS" starttime="20170419 16:40:49.747"></status>
</kw>
<msg timestamp="20170419 16:40:49.942" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:40:49.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:49.942" status="PASS" starttime="20170419 16:40:49.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:40:49.943" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:49.943" status="PASS" starttime="20170419 16:40:49.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:49.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:49.944" status="PASS" starttime="20170419 16:40:49.943"></status>
</kw>
<status endtime="20170419 16:40:49.944" status="PASS" starttime="20170419 16:40:49.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:40:49.944" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:40:49.944" status="PASS" starttime="20170419 16:40:49.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:49.947" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:49.947" status="PASS" starttime="20170419 16:40:49.946"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:49.948" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:40:49.948" status="PASS" starttime="20170419 16:40:49.948"></status>
</kw>
<status endtime="20170419 16:40:49.948" status="PASS" starttime="20170419 16:40:49.947"></status>
</kw>
<status endtime="20170419 16:40:49.948" status="PASS" starttime="20170419 16:40:49.945"></status>
</kw>
<status endtime="20170419 16:40:49.948" status="PASS" starttime="20170419 16:40:49.945"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:40:50.014" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:40:50.014" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:50.014" status="PASS" starttime="20170419 16:40:49.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:40:50.016" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:50.016" status="PASS" starttime="20170419 16:40:50.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:40:50.017" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:40:50.017" status="PASS" starttime="20170419 16:40:50.016"></status>
</kw>
<status endtime="20170419 16:40:50.017" status="PASS" starttime="20170419 16:40:50.016"></status>
</kw>
<status endtime="20170419 16:40:50.017" status="PASS" starttime="20170419 16:40:50.015"></status>
</kw>
<status endtime="20170419 16:40:50.017" status="PASS" starttime="20170419 16:40:50.014"></status>
</kw>
<msg timestamp="20170419 16:40:50.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:40:50.017" status="PASS" starttime="20170419 16:40:49.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:40:50.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:40:50.018" status="PASS" starttime="20170419 16:40:50.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:40:50.019" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:40:50.019" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:40:50.019" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:40:50.019" status="PASS" starttime="20170419 16:40:50.018"></status>
</kw>
<msg timestamp="20170419 16:40:50.019" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:40:50.019" status="PASS" starttime="20170419 16:40:49.741"></status>
</kw>
<msg timestamp="20170419 16:40:50.019" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:40:50.019" status="PASS" starttime="20170419 16:40:49.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:40:50.020" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:40:50.020" status="FAIL" starttime="20170419 16:40:50.020"></status>
</kw>
<status endtime="20170419 16:40:50.020" status="FAIL" starttime="20170419 16:40:49.740"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:41:00.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:41:00.025" status="PASS" starttime="20170419 16:41:00.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:41:00.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:41:00.025" status="PASS" starttime="20170419 16:41:00.025"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:41:00.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:41:00.026" status="PASS" starttime="20170419 16:41:00.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:41:00.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:41:00.027" status="PASS" starttime="20170419 16:41:00.026"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:41:00.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:41:00.204" status="PASS" starttime="20170419 16:41:00.027"></status>
</kw>
<msg timestamp="20170419 16:41:00.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:41:00.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:00.204" status="PASS" starttime="20170419 16:41:00.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:41:00.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:00.205" status="PASS" starttime="20170419 16:41:00.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:00.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:00.205" status="PASS" starttime="20170419 16:41:00.205"></status>
</kw>
<status endtime="20170419 16:41:00.206" status="PASS" starttime="20170419 16:41:00.023"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:41:00.207" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:41:00.207" status="PASS" starttime="20170419 16:41:00.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:00.209" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:00.209" status="PASS" starttime="20170419 16:41:00.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:00.210" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:00.210" status="PASS" starttime="20170419 16:41:00.209"></status>
</kw>
<status endtime="20170419 16:41:00.210" status="PASS" starttime="20170419 16:41:00.209"></status>
</kw>
<status endtime="20170419 16:41:00.210" status="PASS" starttime="20170419 16:41:00.207"></status>
</kw>
<status endtime="20170419 16:41:00.210" status="PASS" starttime="20170419 16:41:00.207"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:41:00.301" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:41:00.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:00.302" status="PASS" starttime="20170419 16:41:00.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:00.304" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:00.304" status="PASS" starttime="20170419 16:41:00.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:00.304" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:00.305" status="PASS" starttime="20170419 16:41:00.304"></status>
</kw>
<status endtime="20170419 16:41:00.305" status="PASS" starttime="20170419 16:41:00.304"></status>
</kw>
<status endtime="20170419 16:41:00.305" status="PASS" starttime="20170419 16:41:00.302"></status>
</kw>
<status endtime="20170419 16:41:00.305" status="PASS" starttime="20170419 16:41:00.302"></status>
</kw>
<msg timestamp="20170419 16:41:00.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:00.305" status="PASS" starttime="20170419 16:41:00.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:00.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:00.306" status="PASS" starttime="20170419 16:41:00.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:41:00.307" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:41:00.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:41:00.307" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:41:00.307" status="PASS" starttime="20170419 16:41:00.306"></status>
</kw>
<msg timestamp="20170419 16:41:00.307" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:41:00.307" status="PASS" starttime="20170419 16:41:00.022"></status>
</kw>
<msg timestamp="20170419 16:41:00.307" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:41:00.307" status="PASS" starttime="20170419 16:41:00.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:41:00.308" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:41:00.308" status="FAIL" starttime="20170419 16:41:00.308"></status>
</kw>
<status endtime="20170419 16:41:00.308" status="FAIL" starttime="20170419 16:41:00.021"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:41:10.312" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:41:10.312" status="PASS" starttime="20170419 16:41:10.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:41:10.313" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:41:10.313" status="PASS" starttime="20170419 16:41:10.313"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:41:10.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:41:10.313" status="PASS" starttime="20170419 16:41:10.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:41:10.314" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:41:10.314" status="PASS" starttime="20170419 16:41:10.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:41:10.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:41:10.497" status="PASS" starttime="20170419 16:41:10.315"></status>
</kw>
<msg timestamp="20170419 16:41:10.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:41:10.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:10.497" status="PASS" starttime="20170419 16:41:10.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:41:10.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:10.498" status="PASS" starttime="20170419 16:41:10.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:10.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:10.499" status="PASS" starttime="20170419 16:41:10.498"></status>
</kw>
<status endtime="20170419 16:41:10.499" status="PASS" starttime="20170419 16:41:10.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:41:10.499" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:41:10.499" status="PASS" starttime="20170419 16:41:10.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:10.502" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:10.502" status="PASS" starttime="20170419 16:41:10.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:10.502" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:10.503" status="PASS" starttime="20170419 16:41:10.502"></status>
</kw>
<status endtime="20170419 16:41:10.503" status="PASS" starttime="20170419 16:41:10.502"></status>
</kw>
<status endtime="20170419 16:41:10.503" status="PASS" starttime="20170419 16:41:10.500"></status>
</kw>
<status endtime="20170419 16:41:10.503" status="PASS" starttime="20170419 16:41:10.499"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:41:10.568" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:41:10.568" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:10.568" status="PASS" starttime="20170419 16:41:10.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:10.571" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:10.571" status="PASS" starttime="20170419 16:41:10.571"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:10.572" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:10.572" status="PASS" starttime="20170419 16:41:10.572"></status>
</kw>
<status endtime="20170419 16:41:10.572" status="PASS" starttime="20170419 16:41:10.571"></status>
</kw>
<status endtime="20170419 16:41:10.572" status="PASS" starttime="20170419 16:41:10.569"></status>
</kw>
<status endtime="20170419 16:41:10.573" status="PASS" starttime="20170419 16:41:10.569"></status>
</kw>
<msg timestamp="20170419 16:41:10.573" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:10.573" status="PASS" starttime="20170419 16:41:10.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:10.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:10.573" status="PASS" starttime="20170419 16:41:10.573"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:41:10.574" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:41:10.574" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:41:10.574" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:41:10.574" status="PASS" starttime="20170419 16:41:10.574"></status>
</kw>
<msg timestamp="20170419 16:41:10.574" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:41:10.574" status="PASS" starttime="20170419 16:41:10.310"></status>
</kw>
<msg timestamp="20170419 16:41:10.575" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:41:10.575" status="PASS" starttime="20170419 16:41:10.309"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:41:10.575" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:41:10.575" status="FAIL" starttime="20170419 16:41:10.575"></status>
</kw>
<status endtime="20170419 16:41:10.575" status="FAIL" starttime="20170419 16:41:10.309"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:41:20.579" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:41:20.579" status="PASS" starttime="20170419 16:41:20.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:41:20.580" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:41:20.580" status="PASS" starttime="20170419 16:41:20.580"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:41:20.581" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:41:20.581" status="PASS" starttime="20170419 16:41:20.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:41:20.581" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:41:20.581" status="PASS" starttime="20170419 16:41:20.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:41:20.761" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:41:20.762" status="PASS" starttime="20170419 16:41:20.582"></status>
</kw>
<msg timestamp="20170419 16:41:20.762" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:41:20.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:20.762" status="PASS" starttime="20170419 16:41:20.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:41:20.763" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:20.763" status="PASS" starttime="20170419 16:41:20.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:20.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:20.763" status="PASS" starttime="20170419 16:41:20.763"></status>
</kw>
<status endtime="20170419 16:41:20.763" status="PASS" starttime="20170419 16:41:20.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:41:20.764" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:41:20.764" status="PASS" starttime="20170419 16:41:20.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:20.766" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:20.766" status="PASS" starttime="20170419 16:41:20.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:20.767" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:20.767" status="PASS" starttime="20170419 16:41:20.767"></status>
</kw>
<status endtime="20170419 16:41:20.768" status="PASS" starttime="20170419 16:41:20.766"></status>
</kw>
<status endtime="20170419 16:41:20.768" status="PASS" starttime="20170419 16:41:20.765"></status>
</kw>
<status endtime="20170419 16:41:20.768" status="PASS" starttime="20170419 16:41:20.764"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:41:20.840" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:41:20.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:20.840" status="PASS" starttime="20170419 16:41:20.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:20.842" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:20.842" status="PASS" starttime="20170419 16:41:20.841"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:20.843" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:20.843" status="PASS" starttime="20170419 16:41:20.842"></status>
</kw>
<status endtime="20170419 16:41:20.843" status="PASS" starttime="20170419 16:41:20.842"></status>
</kw>
<status endtime="20170419 16:41:20.843" status="PASS" starttime="20170419 16:41:20.841"></status>
</kw>
<status endtime="20170419 16:41:20.843" status="PASS" starttime="20170419 16:41:20.840"></status>
</kw>
<msg timestamp="20170419 16:41:20.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:20.843" status="PASS" starttime="20170419 16:41:20.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:20.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:20.844" status="PASS" starttime="20170419 16:41:20.843"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:41:20.844" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:41:20.844" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:41:20.844" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:41:20.845" status="PASS" starttime="20170419 16:41:20.844"></status>
</kw>
<msg timestamp="20170419 16:41:20.845" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:41:20.845" status="PASS" starttime="20170419 16:41:20.577"></status>
</kw>
<msg timestamp="20170419 16:41:20.845" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:41:20.845" status="PASS" starttime="20170419 16:41:20.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:41:20.846" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:41:20.846" status="FAIL" starttime="20170419 16:41:20.845"></status>
</kw>
<status endtime="20170419 16:41:20.846" status="FAIL" starttime="20170419 16:41:20.576"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:41:30.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:41:30.851" status="PASS" starttime="20170419 16:41:30.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:41:30.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:41:30.851" status="PASS" starttime="20170419 16:41:30.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:41:30.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:41:30.852" status="PASS" starttime="20170419 16:41:30.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:41:30.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:41:30.853" status="PASS" starttime="20170419 16:41:30.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:41:31.034" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:41:31.034" status="PASS" starttime="20170419 16:41:30.853"></status>
</kw>
<msg timestamp="20170419 16:41:31.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:41:31.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:31.034" status="PASS" starttime="20170419 16:41:30.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:41:31.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:31.035" status="PASS" starttime="20170419 16:41:31.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:31.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:31.036" status="PASS" starttime="20170419 16:41:31.035"></status>
</kw>
<status endtime="20170419 16:41:31.036" status="PASS" starttime="20170419 16:41:30.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:41:31.037" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:41:31.037" status="PASS" starttime="20170419 16:41:31.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:31.039" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:31.039" status="PASS" starttime="20170419 16:41:31.038"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:31.040" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:31.040" status="PASS" starttime="20170419 16:41:31.040"></status>
</kw>
<status endtime="20170419 16:41:31.040" status="PASS" starttime="20170419 16:41:31.039"></status>
</kw>
<status endtime="20170419 16:41:31.040" status="PASS" starttime="20170419 16:41:31.037"></status>
</kw>
<status endtime="20170419 16:41:31.040" status="PASS" starttime="20170419 16:41:31.037"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:41:31.105" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:41:31.105" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:31.105" status="PASS" starttime="20170419 16:41:31.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:31.109" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:31.109" status="PASS" starttime="20170419 16:41:31.106"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:31.110" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:31.110" status="PASS" starttime="20170419 16:41:31.110"></status>
</kw>
<status endtime="20170419 16:41:31.110" status="PASS" starttime="20170419 16:41:31.109"></status>
</kw>
<status endtime="20170419 16:41:31.110" status="PASS" starttime="20170419 16:41:31.106"></status>
</kw>
<status endtime="20170419 16:41:31.111" status="PASS" starttime="20170419 16:41:31.105"></status>
</kw>
<msg timestamp="20170419 16:41:31.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:31.111" status="PASS" starttime="20170419 16:41:30.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:31.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:31.111" status="PASS" starttime="20170419 16:41:31.111"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:41:31.112" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:41:31.112" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:41:31.112" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:41:31.112" status="PASS" starttime="20170419 16:41:31.112"></status>
</kw>
<msg timestamp="20170419 16:41:31.112" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:41:31.112" status="PASS" starttime="20170419 16:41:30.848"></status>
</kw>
<msg timestamp="20170419 16:41:31.113" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:41:31.113" status="PASS" starttime="20170419 16:41:30.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:41:31.113" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:41:31.114" status="FAIL" starttime="20170419 16:41:31.113"></status>
</kw>
<status endtime="20170419 16:41:31.114" status="FAIL" starttime="20170419 16:41:30.846"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:41:41.118" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:41:41.118" status="PASS" starttime="20170419 16:41:41.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:41:41.119" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:41:41.119" status="PASS" starttime="20170419 16:41:41.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:41:41.120" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:41:41.120" status="PASS" starttime="20170419 16:41:41.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:41:41.120" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:41:41.120" status="PASS" starttime="20170419 16:41:41.120"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:41:41.296" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:41:41.296" status="PASS" starttime="20170419 16:41:41.121"></status>
</kw>
<msg timestamp="20170419 16:41:41.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:41:41.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:41.297" status="PASS" starttime="20170419 16:41:41.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:41:41.297" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:41.298" status="PASS" starttime="20170419 16:41:41.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:41.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:41.299" status="PASS" starttime="20170419 16:41:41.298"></status>
</kw>
<status endtime="20170419 16:41:41.299" status="PASS" starttime="20170419 16:41:41.117"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:41:41.299" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:41:41.299" status="PASS" starttime="20170419 16:41:41.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:41.302" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:41.302" status="PASS" starttime="20170419 16:41:41.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:41.303" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:41.303" status="PASS" starttime="20170419 16:41:41.303"></status>
</kw>
<status endtime="20170419 16:41:41.303" status="PASS" starttime="20170419 16:41:41.302"></status>
</kw>
<status endtime="20170419 16:41:41.303" status="PASS" starttime="20170419 16:41:41.300"></status>
</kw>
<status endtime="20170419 16:41:41.303" status="PASS" starttime="20170419 16:41:41.300"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:41:41.368" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:41:41.368" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:41.368" status="PASS" starttime="20170419 16:41:41.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:41.369" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:41.370" status="PASS" starttime="20170419 16:41:41.369"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:41.370" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:41.370" status="PASS" starttime="20170419 16:41:41.370"></status>
</kw>
<status endtime="20170419 16:41:41.371" status="PASS" starttime="20170419 16:41:41.370"></status>
</kw>
<status endtime="20170419 16:41:41.371" status="PASS" starttime="20170419 16:41:41.369"></status>
</kw>
<status endtime="20170419 16:41:41.371" status="PASS" starttime="20170419 16:41:41.368"></status>
</kw>
<msg timestamp="20170419 16:41:41.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:41.371" status="PASS" starttime="20170419 16:41:41.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:41.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:41.372" status="PASS" starttime="20170419 16:41:41.371"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:41:41.372" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:41:41.372" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:41:41.372" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:41:41.372" status="PASS" starttime="20170419 16:41:41.372"></status>
</kw>
<msg timestamp="20170419 16:41:41.373" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:41:41.373" status="PASS" starttime="20170419 16:41:41.116"></status>
</kw>
<msg timestamp="20170419 16:41:41.373" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:41:41.373" status="PASS" starttime="20170419 16:41:41.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:41:41.374" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:41:41.374" status="FAIL" starttime="20170419 16:41:41.373"></status>
</kw>
<status endtime="20170419 16:41:41.374" status="FAIL" starttime="20170419 16:41:41.114"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:41:51.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:41:51.378" status="PASS" starttime="20170419 16:41:51.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:41:51.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:41:51.378" status="PASS" starttime="20170419 16:41:51.378"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:41:51.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:41:51.379" status="PASS" starttime="20170419 16:41:51.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:41:51.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:41:51.380" status="PASS" starttime="20170419 16:41:51.379"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:41:51.556" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:41:51.557" status="PASS" starttime="20170419 16:41:51.380"></status>
</kw>
<msg timestamp="20170419 16:41:51.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:41:51.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:51.557" status="PASS" starttime="20170419 16:41:51.380"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:41:51.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:51.558" status="PASS" starttime="20170419 16:41:51.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:51.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:51.558" status="PASS" starttime="20170419 16:41:51.558"></status>
</kw>
<status endtime="20170419 16:41:51.558" status="PASS" starttime="20170419 16:41:51.376"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:41:51.559" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:41:51.559" status="PASS" starttime="20170419 16:41:51.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:51.561" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:51.561" status="PASS" starttime="20170419 16:41:51.560"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:51.562" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:41:51.562" status="PASS" starttime="20170419 16:41:51.562"></status>
</kw>
<status endtime="20170419 16:41:51.562" status="PASS" starttime="20170419 16:41:51.561"></status>
</kw>
<status endtime="20170419 16:41:51.562" status="PASS" starttime="20170419 16:41:51.560"></status>
</kw>
<status endtime="20170419 16:41:51.562" status="PASS" starttime="20170419 16:41:51.559"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:41:51.629" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:41:51.629" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:51.629" status="PASS" starttime="20170419 16:41:51.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:41:51.630" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:51.631" status="PASS" starttime="20170419 16:41:51.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:41:51.631" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:41:51.631" status="PASS" starttime="20170419 16:41:51.631"></status>
</kw>
<status endtime="20170419 16:41:51.632" status="PASS" starttime="20170419 16:41:51.631"></status>
</kw>
<status endtime="20170419 16:41:51.632" status="PASS" starttime="20170419 16:41:51.630"></status>
</kw>
<status endtime="20170419 16:41:51.632" status="PASS" starttime="20170419 16:41:51.629"></status>
</kw>
<msg timestamp="20170419 16:41:51.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:41:51.632" status="PASS" starttime="20170419 16:41:51.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:41:51.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:41:51.633" status="PASS" starttime="20170419 16:41:51.632"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:41:51.633" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:41:51.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:41:51.634" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:41:51.634" status="PASS" starttime="20170419 16:41:51.633"></status>
</kw>
<msg timestamp="20170419 16:41:51.634" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:41:51.634" status="PASS" starttime="20170419 16:41:51.375"></status>
</kw>
<msg timestamp="20170419 16:41:51.634" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:41:51.634" status="PASS" starttime="20170419 16:41:51.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:41:51.635" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:41:51.635" status="FAIL" starttime="20170419 16:41:51.634"></status>
</kw>
<status endtime="20170419 16:41:51.635" status="FAIL" starttime="20170419 16:41:51.374"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:42:01.639" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:42:01.639" status="PASS" starttime="20170419 16:42:01.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:42:01.640" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:42:01.640" status="PASS" starttime="20170419 16:42:01.640"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:42:01.641" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:42:01.641" status="PASS" starttime="20170419 16:42:01.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:42:01.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:42:01.641" status="PASS" starttime="20170419 16:42:01.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:42:01.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:42:01.817" status="PASS" starttime="20170419 16:42:01.642"></status>
</kw>
<msg timestamp="20170419 16:42:01.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:42:01.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:01.817" status="PASS" starttime="20170419 16:42:01.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:42:01.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:01.817" status="PASS" starttime="20170419 16:42:01.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:01.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:01.818" status="PASS" starttime="20170419 16:42:01.818"></status>
</kw>
<status endtime="20170419 16:42:01.818" status="PASS" starttime="20170419 16:42:01.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:42:01.819" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:42:01.819" status="PASS" starttime="20170419 16:42:01.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:01.821" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:01.821" status="PASS" starttime="20170419 16:42:01.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:01.822" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:01.822" status="PASS" starttime="20170419 16:42:01.822"></status>
</kw>
<status endtime="20170419 16:42:01.822" status="PASS" starttime="20170419 16:42:01.821"></status>
</kw>
<status endtime="20170419 16:42:01.822" status="PASS" starttime="20170419 16:42:01.820"></status>
</kw>
<status endtime="20170419 16:42:01.822" status="PASS" starttime="20170419 16:42:01.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:42:01.887" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:42:01.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:01.888" status="PASS" starttime="20170419 16:42:01.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:01.889" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:01.889" status="PASS" starttime="20170419 16:42:01.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:01.890" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:01.890" status="PASS" starttime="20170419 16:42:01.890"></status>
</kw>
<status endtime="20170419 16:42:01.891" status="PASS" starttime="20170419 16:42:01.889"></status>
</kw>
<status endtime="20170419 16:42:01.891" status="PASS" starttime="20170419 16:42:01.888"></status>
</kw>
<status endtime="20170419 16:42:01.891" status="PASS" starttime="20170419 16:42:01.888"></status>
</kw>
<msg timestamp="20170419 16:42:01.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:01.891" status="PASS" starttime="20170419 16:42:01.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:01.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:01.892" status="PASS" starttime="20170419 16:42:01.891"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:42:01.892" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:42:01.892" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:42:01.892" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:42:01.892" status="PASS" starttime="20170419 16:42:01.892"></status>
</kw>
<msg timestamp="20170419 16:42:01.893" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:42:01.893" status="PASS" starttime="20170419 16:42:01.636"></status>
</kw>
<msg timestamp="20170419 16:42:01.893" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:42:01.893" status="PASS" starttime="20170419 16:42:01.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:42:01.893" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:42:01.894" status="FAIL" starttime="20170419 16:42:01.893"></status>
</kw>
<status endtime="20170419 16:42:01.894" status="FAIL" starttime="20170419 16:42:01.635"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:42:11.898" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:42:11.898" status="PASS" starttime="20170419 16:42:11.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:42:11.899" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:42:11.899" status="PASS" starttime="20170419 16:42:11.898"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:42:11.899" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:42:11.899" status="PASS" starttime="20170419 16:42:11.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:42:11.900" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:42:11.900" status="PASS" starttime="20170419 16:42:11.899"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:42:12.077" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:42:12.077" status="PASS" starttime="20170419 16:42:11.901"></status>
</kw>
<msg timestamp="20170419 16:42:12.077" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:42:12.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:12.077" status="PASS" starttime="20170419 16:42:11.900"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:42:12.078" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:12.078" status="PASS" starttime="20170419 16:42:12.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:12.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:12.079" status="PASS" starttime="20170419 16:42:12.078"></status>
</kw>
<status endtime="20170419 16:42:12.079" status="PASS" starttime="20170419 16:42:11.897"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:42:12.079" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:42:12.079" status="PASS" starttime="20170419 16:42:12.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:12.081" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:12.081" status="PASS" starttime="20170419 16:42:12.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:12.083" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:12.083" status="PASS" starttime="20170419 16:42:12.082"></status>
</kw>
<status endtime="20170419 16:42:12.083" status="PASS" starttime="20170419 16:42:12.082"></status>
</kw>
<status endtime="20170419 16:42:12.083" status="PASS" starttime="20170419 16:42:12.080"></status>
</kw>
<status endtime="20170419 16:42:12.083" status="PASS" starttime="20170419 16:42:12.080"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:42:12.148" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:42:12.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:12.148" status="PASS" starttime="20170419 16:42:12.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:12.150" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:12.150" status="PASS" starttime="20170419 16:42:12.149"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:12.151" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:12.151" status="PASS" starttime="20170419 16:42:12.150"></status>
</kw>
<status endtime="20170419 16:42:12.151" status="PASS" starttime="20170419 16:42:12.150"></status>
</kw>
<status endtime="20170419 16:42:12.151" status="PASS" starttime="20170419 16:42:12.149"></status>
</kw>
<status endtime="20170419 16:42:12.151" status="PASS" starttime="20170419 16:42:12.148"></status>
</kw>
<msg timestamp="20170419 16:42:12.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:12.151" status="PASS" starttime="20170419 16:42:11.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:12.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:12.152" status="PASS" starttime="20170419 16:42:12.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:42:12.152" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:42:12.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:42:12.153" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:42:12.153" status="PASS" starttime="20170419 16:42:12.152"></status>
</kw>
<msg timestamp="20170419 16:42:12.153" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:42:12.153" status="PASS" starttime="20170419 16:42:11.895"></status>
</kw>
<msg timestamp="20170419 16:42:12.153" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:42:12.153" status="PASS" starttime="20170419 16:42:11.895"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:42:12.154" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:42:12.154" status="FAIL" starttime="20170419 16:42:12.154"></status>
</kw>
<status endtime="20170419 16:42:12.154" status="FAIL" starttime="20170419 16:42:11.894"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:42:22.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:42:22.158" status="PASS" starttime="20170419 16:42:22.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:42:22.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:42:22.159" status="PASS" starttime="20170419 16:42:22.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:42:22.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:42:22.159" status="PASS" starttime="20170419 16:42:22.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:42:22.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:42:22.160" status="PASS" starttime="20170419 16:42:22.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:42:22.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:42:22.342" status="PASS" starttime="20170419 16:42:22.161"></status>
</kw>
<msg timestamp="20170419 16:42:22.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:42:22.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:22.342" status="PASS" starttime="20170419 16:42:22.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:42:22.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:22.343" status="PASS" starttime="20170419 16:42:22.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:22.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:22.344" status="PASS" starttime="20170419 16:42:22.343"></status>
</kw>
<status endtime="20170419 16:42:22.344" status="PASS" starttime="20170419 16:42:22.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:42:22.344" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:42:22.345" status="PASS" starttime="20170419 16:42:22.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:22.347" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:22.347" status="PASS" starttime="20170419 16:42:22.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:22.348" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:22.348" status="PASS" starttime="20170419 16:42:22.347"></status>
</kw>
<status endtime="20170419 16:42:22.348" status="PASS" starttime="20170419 16:42:22.347"></status>
</kw>
<status endtime="20170419 16:42:22.348" status="PASS" starttime="20170419 16:42:22.345"></status>
</kw>
<status endtime="20170419 16:42:22.348" status="PASS" starttime="20170419 16:42:22.345"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:42:22.413" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:42:22.413" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:22.413" status="PASS" starttime="20170419 16:42:22.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:22.415" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:22.415" status="PASS" starttime="20170419 16:42:22.415"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:22.416" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:22.416" status="PASS" starttime="20170419 16:42:22.416"></status>
</kw>
<status endtime="20170419 16:42:22.416" status="PASS" starttime="20170419 16:42:22.415"></status>
</kw>
<status endtime="20170419 16:42:22.417" status="PASS" starttime="20170419 16:42:22.414"></status>
</kw>
<status endtime="20170419 16:42:22.417" status="PASS" starttime="20170419 16:42:22.414"></status>
</kw>
<msg timestamp="20170419 16:42:22.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:22.417" status="PASS" starttime="20170419 16:42:22.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:22.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:22.418" status="PASS" starttime="20170419 16:42:22.417"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:42:22.418" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:42:22.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:42:22.418" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:42:22.418" status="PASS" starttime="20170419 16:42:22.418"></status>
</kw>
<msg timestamp="20170419 16:42:22.419" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:42:22.419" status="PASS" starttime="20170419 16:42:22.156"></status>
</kw>
<msg timestamp="20170419 16:42:22.419" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:42:22.419" status="PASS" starttime="20170419 16:42:22.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:42:22.419" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:42:22.419" status="FAIL" starttime="20170419 16:42:22.419"></status>
</kw>
<status endtime="20170419 16:42:22.420" status="FAIL" starttime="20170419 16:42:22.155"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:42:32.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:42:32.424" status="PASS" starttime="20170419 16:42:32.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:42:32.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:42:32.425" status="PASS" starttime="20170419 16:42:32.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:42:32.426" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:42:32.426" status="PASS" starttime="20170419 16:42:32.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:42:32.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:42:32.426" status="PASS" starttime="20170419 16:42:32.426"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:42:32.610" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:42:32.610" status="PASS" starttime="20170419 16:42:32.427"></status>
</kw>
<msg timestamp="20170419 16:42:32.610" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:42:32.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:32.610" status="PASS" starttime="20170419 16:42:32.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:42:32.611" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:32.611" status="PASS" starttime="20170419 16:42:32.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:32.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:32.612" status="PASS" starttime="20170419 16:42:32.611"></status>
</kw>
<status endtime="20170419 16:42:32.612" status="PASS" starttime="20170419 16:42:32.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:42:32.613" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:42:32.613" status="PASS" starttime="20170419 16:42:32.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:32.615" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:32.615" status="PASS" starttime="20170419 16:42:32.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:32.616" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:32.616" status="PASS" starttime="20170419 16:42:32.615"></status>
</kw>
<status endtime="20170419 16:42:32.616" status="PASS" starttime="20170419 16:42:32.615"></status>
</kw>
<status endtime="20170419 16:42:32.616" status="PASS" starttime="20170419 16:42:32.613"></status>
</kw>
<status endtime="20170419 16:42:32.616" status="PASS" starttime="20170419 16:42:32.613"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:42:32.681" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:42:32.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:32.681" status="PASS" starttime="20170419 16:42:32.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:32.683" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:32.683" status="PASS" starttime="20170419 16:42:32.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:32.684" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:32.684" status="PASS" starttime="20170419 16:42:32.684"></status>
</kw>
<status endtime="20170419 16:42:32.685" status="PASS" starttime="20170419 16:42:32.683"></status>
</kw>
<status endtime="20170419 16:42:32.685" status="PASS" starttime="20170419 16:42:32.682"></status>
</kw>
<status endtime="20170419 16:42:32.685" status="PASS" starttime="20170419 16:42:32.682"></status>
</kw>
<msg timestamp="20170419 16:42:32.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:32.685" status="PASS" starttime="20170419 16:42:32.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:32.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:32.686" status="PASS" starttime="20170419 16:42:32.685"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:42:32.686" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:42:32.686" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:42:32.686" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:42:32.686" status="PASS" starttime="20170419 16:42:32.686"></status>
</kw>
<msg timestamp="20170419 16:42:32.687" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:42:32.687" status="PASS" starttime="20170419 16:42:32.421"></status>
</kw>
<msg timestamp="20170419 16:42:32.687" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:42:32.687" status="PASS" starttime="20170419 16:42:32.421"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:42:32.687" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:42:32.687" status="FAIL" starttime="20170419 16:42:32.687"></status>
</kw>
<status endtime="20170419 16:42:32.688" status="FAIL" starttime="20170419 16:42:32.420"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:42:42.691" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:42:42.692" status="PASS" starttime="20170419 16:42:42.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:42:42.692" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:42:42.692" status="PASS" starttime="20170419 16:42:42.692"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:42:42.693" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:42:42.693" status="PASS" starttime="20170419 16:42:42.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:42:42.693" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:42:42.693" status="PASS" starttime="20170419 16:42:42.693"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:42:42.869" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:42:42.869" status="PASS" starttime="20170419 16:42:42.694"></status>
</kw>
<msg timestamp="20170419 16:42:42.869" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:42:42.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:42.869" status="PASS" starttime="20170419 16:42:42.694"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:42:42.870" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:42.870" status="PASS" starttime="20170419 16:42:42.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:42.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:42.871" status="PASS" starttime="20170419 16:42:42.870"></status>
</kw>
<status endtime="20170419 16:42:42.871" status="PASS" starttime="20170419 16:42:42.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:42:42.871" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:42:42.871" status="PASS" starttime="20170419 16:42:42.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:42.874" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:42.874" status="PASS" starttime="20170419 16:42:42.873"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:42.875" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:42.875" status="PASS" starttime="20170419 16:42:42.874"></status>
</kw>
<status endtime="20170419 16:42:42.875" status="PASS" starttime="20170419 16:42:42.874"></status>
</kw>
<status endtime="20170419 16:42:42.875" status="PASS" starttime="20170419 16:42:42.872"></status>
</kw>
<status endtime="20170419 16:42:42.875" status="PASS" starttime="20170419 16:42:42.872"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:42:42.941" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:42:42.941" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:42.941" status="PASS" starttime="20170419 16:42:42.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:42.943" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:42.943" status="PASS" starttime="20170419 16:42:42.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:42.944" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:42.944" status="PASS" starttime="20170419 16:42:42.944"></status>
</kw>
<status endtime="20170419 16:42:42.944" status="PASS" starttime="20170419 16:42:42.943"></status>
</kw>
<status endtime="20170419 16:42:42.944" status="PASS" starttime="20170419 16:42:42.942"></status>
</kw>
<status endtime="20170419 16:42:42.944" status="PASS" starttime="20170419 16:42:42.941"></status>
</kw>
<msg timestamp="20170419 16:42:42.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:42.944" status="PASS" starttime="20170419 16:42:42.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:42.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:42.945" status="PASS" starttime="20170419 16:42:42.945"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:42:42.946" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:42:42.946" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:42:42.946" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:42:42.946" status="PASS" starttime="20170419 16:42:42.945"></status>
</kw>
<msg timestamp="20170419 16:42:42.946" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:42:42.946" status="PASS" starttime="20170419 16:42:42.689"></status>
</kw>
<msg timestamp="20170419 16:42:42.946" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:42:42.946" status="PASS" starttime="20170419 16:42:42.689"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:42:42.947" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:42:42.947" status="FAIL" starttime="20170419 16:42:42.947"></status>
</kw>
<status endtime="20170419 16:42:42.947" status="FAIL" starttime="20170419 16:42:42.688"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:42:52.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:42:52.952" status="PASS" starttime="20170419 16:42:52.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:42:52.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:42:52.952" status="PASS" starttime="20170419 16:42:52.952"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:42:52.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:42:52.953" status="PASS" starttime="20170419 16:42:52.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:42:52.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:42:52.953" status="PASS" starttime="20170419 16:42:52.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:42:53.132" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:42:53.132" status="PASS" starttime="20170419 16:42:52.954"></status>
</kw>
<msg timestamp="20170419 16:42:53.132" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:42:53.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:53.132" status="PASS" starttime="20170419 16:42:52.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:42:53.133" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:53.133" status="PASS" starttime="20170419 16:42:53.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:53.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:53.133" status="PASS" starttime="20170419 16:42:53.133"></status>
</kw>
<status endtime="20170419 16:42:53.134" status="PASS" starttime="20170419 16:42:52.950"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:42:53.134" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:42:53.134" status="PASS" starttime="20170419 16:42:53.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:53.136" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:53.136" status="PASS" starttime="20170419 16:42:53.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:53.137" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:42:53.137" status="PASS" starttime="20170419 16:42:53.137"></status>
</kw>
<status endtime="20170419 16:42:53.138" status="PASS" starttime="20170419 16:42:53.137"></status>
</kw>
<status endtime="20170419 16:42:53.138" status="PASS" starttime="20170419 16:42:53.135"></status>
</kw>
<status endtime="20170419 16:42:53.138" status="PASS" starttime="20170419 16:42:53.135"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:42:53.202" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:42:53.202" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:53.202" status="PASS" starttime="20170419 16:42:53.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:42:53.204" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:53.204" status="PASS" starttime="20170419 16:42:53.203"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:42:53.205" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:42:53.205" status="PASS" starttime="20170419 16:42:53.204"></status>
</kw>
<status endtime="20170419 16:42:53.205" status="PASS" starttime="20170419 16:42:53.204"></status>
</kw>
<status endtime="20170419 16:42:53.205" status="PASS" starttime="20170419 16:42:53.203"></status>
</kw>
<status endtime="20170419 16:42:53.205" status="PASS" starttime="20170419 16:42:53.202"></status>
</kw>
<msg timestamp="20170419 16:42:53.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:42:53.205" status="PASS" starttime="20170419 16:42:52.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:42:53.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:42:53.206" status="PASS" starttime="20170419 16:42:53.206"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:42:53.206" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:42:53.207" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:42:53.207" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:42:53.207" status="PASS" starttime="20170419 16:42:53.206"></status>
</kw>
<msg timestamp="20170419 16:42:53.207" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:42:53.207" status="PASS" starttime="20170419 16:42:52.949"></status>
</kw>
<msg timestamp="20170419 16:42:53.207" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:42:53.207" status="PASS" starttime="20170419 16:42:52.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:42:53.208" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:42:53.208" status="FAIL" starttime="20170419 16:42:53.207"></status>
</kw>
<status endtime="20170419 16:42:53.208" status="FAIL" starttime="20170419 16:42:52.948"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:03.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:03.213" status="PASS" starttime="20170419 16:43:03.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:03.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:03.214" status="PASS" starttime="20170419 16:43:03.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:03.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:03.214" status="PASS" starttime="20170419 16:43:03.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:03.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:03.215" status="PASS" starttime="20170419 16:43:03.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:03.391" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:03.391" status="PASS" starttime="20170419 16:43:03.215"></status>
</kw>
<msg timestamp="20170419 16:43:03.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:03.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:03.391" status="PASS" starttime="20170419 16:43:03.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:03.392" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:03.392" status="PASS" starttime="20170419 16:43:03.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:03.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:03.393" status="PASS" starttime="20170419 16:43:03.392"></status>
</kw>
<status endtime="20170419 16:43:03.393" status="PASS" starttime="20170419 16:43:03.211"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:03.394" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:43:03.394" status="PASS" starttime="20170419 16:43:03.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:03.396" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:03.396" status="PASS" starttime="20170419 16:43:03.395"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:03.396" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:03.397" status="PASS" starttime="20170419 16:43:03.396"></status>
</kw>
<status endtime="20170419 16:43:03.397" status="PASS" starttime="20170419 16:43:03.396"></status>
</kw>
<status endtime="20170419 16:43:03.397" status="PASS" starttime="20170419 16:43:03.394"></status>
</kw>
<status endtime="20170419 16:43:03.397" status="PASS" starttime="20170419 16:43:03.394"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:03.463" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:43:03.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:03.463" status="PASS" starttime="20170419 16:43:03.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:03.467" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:03.467" status="PASS" starttime="20170419 16:43:03.464"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:03.468" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:03.468" status="PASS" starttime="20170419 16:43:03.467"></status>
</kw>
<status endtime="20170419 16:43:03.468" status="PASS" starttime="20170419 16:43:03.467"></status>
</kw>
<status endtime="20170419 16:43:03.468" status="PASS" starttime="20170419 16:43:03.464"></status>
</kw>
<status endtime="20170419 16:43:03.468" status="PASS" starttime="20170419 16:43:03.463"></status>
</kw>
<msg timestamp="20170419 16:43:03.468" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:03.468" status="PASS" starttime="20170419 16:43:03.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:03.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:03.469" status="PASS" starttime="20170419 16:43:03.469"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:43:03.470" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:03.470" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:43:03.470" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:43:03.470" status="PASS" starttime="20170419 16:43:03.469"></status>
</kw>
<msg timestamp="20170419 16:43:03.470" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:43:03.470" status="PASS" starttime="20170419 16:43:03.210"></status>
</kw>
<msg timestamp="20170419 16:43:03.470" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:43:03.470" status="PASS" starttime="20170419 16:43:03.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:43:03.471" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:43:03.471" status="FAIL" starttime="20170419 16:43:03.471"></status>
</kw>
<status endtime="20170419 16:43:03.471" status="FAIL" starttime="20170419 16:43:03.209"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:13.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:13.476" status="PASS" starttime="20170419 16:43:13.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:13.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:13.476" status="PASS" starttime="20170419 16:43:13.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:13.477" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:13.477" status="PASS" starttime="20170419 16:43:13.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:13.477" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:13.477" status="PASS" starttime="20170419 16:43:13.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:13.661" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:13.661" status="PASS" starttime="20170419 16:43:13.478"></status>
</kw>
<msg timestamp="20170419 16:43:13.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:13.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:13.661" status="PASS" starttime="20170419 16:43:13.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:13.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:13.662" status="PASS" starttime="20170419 16:43:13.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:13.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:13.662" status="PASS" starttime="20170419 16:43:13.662"></status>
</kw>
<status endtime="20170419 16:43:13.662" status="PASS" starttime="20170419 16:43:13.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:13.663" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:43:13.663" status="PASS" starttime="20170419 16:43:13.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:13.665" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:13.665" status="PASS" starttime="20170419 16:43:13.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:13.666" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:13.666" status="PASS" starttime="20170419 16:43:13.666"></status>
</kw>
<status endtime="20170419 16:43:13.667" status="PASS" starttime="20170419 16:43:13.666"></status>
</kw>
<status endtime="20170419 16:43:13.667" status="PASS" starttime="20170419 16:43:13.664"></status>
</kw>
<status endtime="20170419 16:43:13.667" status="PASS" starttime="20170419 16:43:13.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:13.733" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:43:13.733" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:13.734" status="PASS" starttime="20170419 16:43:13.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:13.735" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:13.735" status="PASS" starttime="20170419 16:43:13.735"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:13.736" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:13.736" status="PASS" starttime="20170419 16:43:13.736"></status>
</kw>
<status endtime="20170419 16:43:13.736" status="PASS" starttime="20170419 16:43:13.735"></status>
</kw>
<status endtime="20170419 16:43:13.736" status="PASS" starttime="20170419 16:43:13.734"></status>
</kw>
<status endtime="20170419 16:43:13.737" status="PASS" starttime="20170419 16:43:13.734"></status>
</kw>
<msg timestamp="20170419 16:43:13.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:13.737" status="PASS" starttime="20170419 16:43:13.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:13.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:13.737" status="PASS" starttime="20170419 16:43:13.737"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:43:13.738" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:13.738" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:43:13.738" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:43:13.738" status="PASS" starttime="20170419 16:43:13.738"></status>
</kw>
<msg timestamp="20170419 16:43:13.738" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:43:13.738" status="PASS" starttime="20170419 16:43:13.473"></status>
</kw>
<msg timestamp="20170419 16:43:13.739" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:43:13.739" status="PASS" starttime="20170419 16:43:13.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:43:13.739" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:43:13.739" status="FAIL" starttime="20170419 16:43:13.739"></status>
</kw>
<status endtime="20170419 16:43:13.740" status="FAIL" starttime="20170419 16:43:13.472"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:23.743" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:23.744" status="PASS" starttime="20170419 16:43:23.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:23.744" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:23.744" status="PASS" starttime="20170419 16:43:23.744"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:23.745" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:23.745" status="PASS" starttime="20170419 16:43:23.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:23.746" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:23.746" status="PASS" starttime="20170419 16:43:23.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:23.943" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:23.943" status="PASS" starttime="20170419 16:43:23.746"></status>
</kw>
<msg timestamp="20170419 16:43:23.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:23.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:23.943" status="PASS" starttime="20170419 16:43:23.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:23.944" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:23.944" status="PASS" starttime="20170419 16:43:23.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:23.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:23.945" status="PASS" starttime="20170419 16:43:23.945"></status>
</kw>
<status endtime="20170419 16:43:23.945" status="PASS" starttime="20170419 16:43:23.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:23.946" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:43:23.946" status="PASS" starttime="20170419 16:43:23.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:23.948" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:23.948" status="PASS" starttime="20170419 16:43:23.947"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:23.949" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:23.949" status="PASS" starttime="20170419 16:43:23.949"></status>
</kw>
<status endtime="20170419 16:43:23.949" status="PASS" starttime="20170419 16:43:23.948"></status>
</kw>
<status endtime="20170419 16:43:23.949" status="PASS" starttime="20170419 16:43:23.946"></status>
</kw>
<status endtime="20170419 16:43:23.949" status="PASS" starttime="20170419 16:43:23.946"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:24.015" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:43:24.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:24.015" status="PASS" starttime="20170419 16:43:23.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:24.017" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:24.017" status="PASS" starttime="20170419 16:43:24.016"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:24.017" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:24.018" status="PASS" starttime="20170419 16:43:24.017"></status>
</kw>
<status endtime="20170419 16:43:24.018" status="PASS" starttime="20170419 16:43:24.017"></status>
</kw>
<status endtime="20170419 16:43:24.018" status="PASS" starttime="20170419 16:43:24.016"></status>
</kw>
<status endtime="20170419 16:43:24.018" status="PASS" starttime="20170419 16:43:24.015"></status>
</kw>
<msg timestamp="20170419 16:43:24.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:24.018" status="PASS" starttime="20170419 16:43:23.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:24.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:24.019" status="PASS" starttime="20170419 16:43:24.018"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:43:24.019" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:24.019" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:43:24.019" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:43:24.019" status="PASS" starttime="20170419 16:43:24.019"></status>
</kw>
<msg timestamp="20170419 16:43:24.020" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:43:24.020" status="PASS" starttime="20170419 16:43:23.741"></status>
</kw>
<msg timestamp="20170419 16:43:24.020" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:43:24.020" status="PASS" starttime="20170419 16:43:23.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:43:24.021" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:43:24.021" status="FAIL" starttime="20170419 16:43:24.020"></status>
</kw>
<status endtime="20170419 16:43:24.021" status="FAIL" starttime="20170419 16:43:23.740"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:34.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:34.025" status="PASS" starttime="20170419 16:43:34.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:34.026" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:34.026" status="PASS" starttime="20170419 16:43:34.025"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:34.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:34.026" status="PASS" starttime="20170419 16:43:34.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:34.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:34.027" status="PASS" starttime="20170419 16:43:34.027"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.237" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:34.237" status="PASS" starttime="20170419 16:43:34.028"></status>
</kw>
<msg timestamp="20170419 16:43:34.237" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:34.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:34.237" status="PASS" starttime="20170419 16:43:34.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.238" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:34.238" status="PASS" starttime="20170419 16:43:34.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:34.239" status="PASS" starttime="20170419 16:43:34.238"></status>
</kw>
<status endtime="20170419 16:43:34.239" status="PASS" starttime="20170419 16:43:34.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:34.240" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170419 16:43:34.240" status="PASS" starttime="20170419 16:43:34.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:34.242" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:34.242" status="PASS" starttime="20170419 16:43:34.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:34.243" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170419 16:43:34.243" status="PASS" starttime="20170419 16:43:34.242"></status>
</kw>
<status endtime="20170419 16:43:34.243" status="PASS" starttime="20170419 16:43:34.242"></status>
</kw>
<status endtime="20170419 16:43:34.243" status="PASS" starttime="20170419 16:43:34.240"></status>
</kw>
<status endtime="20170419 16:43:34.243" status="PASS" starttime="20170419 16:43:34.240"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:34.307" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170419 16:43:34.308" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:34.308" status="PASS" starttime="20170419 16:43:34.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:34.309" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:34.309" status="PASS" starttime="20170419 16:43:34.309"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:34.310" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:34.310" status="PASS" starttime="20170419 16:43:34.310"></status>
</kw>
<status endtime="20170419 16:43:34.311" status="PASS" starttime="20170419 16:43:34.310"></status>
</kw>
<status endtime="20170419 16:43:34.311" status="PASS" starttime="20170419 16:43:34.308"></status>
</kw>
<status endtime="20170419 16:43:34.311" status="PASS" starttime="20170419 16:43:34.308"></status>
</kw>
<msg timestamp="20170419 16:43:34.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:34.311" status="PASS" starttime="20170419 16:43:34.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:34.312" status="PASS" starttime="20170419 16:43:34.311"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:43:34.312" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:34.312" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:43:34.312" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170419 16:43:34.312" status="PASS" starttime="20170419 16:43:34.312"></status>
</kw>
<msg timestamp="20170419 16:43:34.313" level="INFO">${state} = Off</msg>
<status endtime="20170419 16:43:34.313" status="PASS" starttime="20170419 16:43:34.022"></status>
</kw>
<msg timestamp="20170419 16:43:34.313" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170419 16:43:34.313" status="PASS" starttime="20170419 16:43:34.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170419 16:43:34.314" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:43:34.314" status="FAIL" starttime="20170419 16:43:34.313"></status>
</kw>
<status endtime="20170419 16:43:34.314" status="FAIL" starttime="20170419 16:43:34.021"></status>
</kw>
<msg timestamp="20170419 16:43:34.314" level="FAIL">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status endtime="20170419 16:43:34.314" status="FAIL" starttime="20170419 16:33:27.366"></status>
</kw>
<status endtime="20170419 16:43:34.314" status="FAIL" starttime="20170419 16:33:00.556"></status>
</kw>
<status endtime="20170419 16:43:34.314" status="FAIL" starttime="20170419 16:33:00.556"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:34.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:34.319" status="PASS" starttime="20170419 16:43:34.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:34.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:34.319" status="PASS" starttime="20170419 16:43:34.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:34.320" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:34.320" status="PASS" starttime="20170419 16:43:34.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:34.321" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:34.321" status="PASS" starttime="20170419 16:43:34.320"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.495" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:34.495" status="PASS" starttime="20170419 16:43:34.321"></status>
</kw>
<msg timestamp="20170419 16:43:34.495" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:34.495" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:34.495" status="PASS" starttime="20170419 16:43:34.321"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.496" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:34.496" status="PASS" starttime="20170419 16:43:34.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:34.497" status="PASS" starttime="20170419 16:43:34.496"></status>
</kw>
<status endtime="20170419 16:43:34.497" status="PASS" starttime="20170419 16:43:34.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:34.497" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170419 16:43:34.497" status="PASS" starttime="20170419 16:43:34.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:34.499" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:43:34.499" status="PASS" starttime="20170419 16:43:34.499"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:34.501" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170419 16:43:34.501" status="PASS" starttime="20170419 16:43:34.500"></status>
</kw>
<status endtime="20170419 16:43:34.501" status="PASS" starttime="20170419 16:43:34.500"></status>
</kw>
<status endtime="20170419 16:43:34.501" status="PASS" starttime="20170419 16:43:34.498"></status>
</kw>
<status endtime="20170419 16:43:34.501" status="PASS" starttime="20170419 16:43:34.498"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:34.563" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170419 16:43:34.563" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:34.563" status="PASS" starttime="20170419 16:43:34.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170419 16:43:34.565" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:34.565" status="PASS" starttime="20170419 16:43:34.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170419 16:43:34.566" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170419 16:43:34.566" status="PASS" starttime="20170419 16:43:34.566"></status>
</kw>
<status endtime="20170419 16:43:34.566" status="PASS" starttime="20170419 16:43:34.565"></status>
</kw>
<status endtime="20170419 16:43:34.566" status="PASS" starttime="20170419 16:43:34.564"></status>
</kw>
<status endtime="20170419 16:43:34.566" status="PASS" starttime="20170419 16:43:34.564"></status>
</kw>
<msg timestamp="20170419 16:43:34.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:34.567" status="PASS" starttime="20170419 16:43:34.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:34.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:34.567" status="PASS" starttime="20170419 16:43:34.567"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170419 16:43:34.568" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:34.568" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170419 16:43:34.568" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170419 16:43:34.568" status="PASS" starttime="20170419 16:43:34.568"></status>
</kw>
<msg timestamp="20170419 16:43:34.568" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170419 16:43:34.568" status="PASS" starttime="20170419 16:43:34.316"></status>
</kw>
<msg timestamp="20170419 16:43:34.569" level="INFO">${host_state} = Running</msg>
<status endtime="20170419 16:43:34.569" status="PASS" starttime="20170419 16:43:34.316"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170419 16:43:34.570" level="FAIL">Running != Quiesced</msg>
<status endtime="20170419 16:43:34.570" status="FAIL" starttime="20170419 16:43:34.570"></status>
</kw>
<msg timestamp="20170419 16:43:34.570" level="INFO">${status} = False</msg>
<status endtime="20170419 16:43:34.570" status="PASS" starttime="20170419 16:43:34.569"></status>
</kw>
<msg timestamp="20170419 16:43:34.570" level="INFO">${status} = False</msg>
<status endtime="20170419 16:43:34.570" status="PASS" starttime="20170419 16:43:34.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170419 16:43:34.572" level="INFO">Length is 10</msg>
<status endtime="20170419 16:43:34.572" status="PASS" starttime="20170419 16:43:34.572"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:43:34.579" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:43:37.590" level="INFO">${RC} = 0</msg>
<msg timestamp="20170419 16:43:37.590" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.750 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.53 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status endtime="20170419 16:43:37.590" status="PASS" starttime="20170419 16:43:34.573"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170419 16:43:37.593" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.750 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.53 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.590 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.583 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.583/0.865/1.538/0.394 ms</msg>
<status endtime="20170419 16:43:37.593" status="PASS" starttime="20170419 16:43:37.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170419 16:43:37.594" status="PASS" starttime="20170419 16:43:37.594"></status>
</kw>
<status endtime="20170419 16:43:37.595" status="PASS" starttime="20170419 16:43:34.572"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170419 16:43:37.756" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170419 16:43:37.756" status="FAIL" starttime="20170419 16:43:37.756"></status>
</kw>
<msg timestamp="20170419 16:43:37.756" level="INFO">${has_host} = False</msg>
<status endtime="20170419 16:43:37.756" status="PASS" starttime="20170419 16:43:37.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170419 16:43:37.758" status="PASS" starttime="20170419 16:43:37.757"></status>
</kw>
<status endtime="20170419 16:43:37.758" status="PASS" starttime="20170419 16:43:37.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170419 16:43:37.759" level="INFO">${port_num} = 22</msg>
<status endtime="20170419 16:43:37.759" status="PASS" starttime="20170419 16:43:37.759"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170419 16:43:37.760" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170419 16:43:37.760" status="PASS" starttime="20170419 16:43:37.760"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170419 16:43:37.760" level="INFO">${https_num} = 443</msg>
<status endtime="20170419 16:43:37.760" status="PASS" starttime="20170419 16:43:37.760"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170419 16:43:37.761" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170419 16:43:37.761" status="PASS" starttime="20170419 16:43:37.761"></status>
</kw>
<status endtime="20170419 16:43:37.761" status="PASS" starttime="20170419 16:43:37.758"></status>
</kw>
<status endtime="20170419 16:43:37.761" status="PASS" starttime="20170419 16:43:37.758"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170419 16:43:37.762" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170419 16:43:37.763" status="FAIL" starttime="20170419 16:43:37.762"></status>
</kw>
<msg timestamp="20170419 16:43:37.763" level="INFO">${has_port} = False</msg>
<status endtime="20170419 16:43:37.763" status="PASS" starttime="20170419 16:43:37.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170419 16:43:37.764" status="PASS" starttime="20170419 16:43:37.764"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170419 16:43:37.765" status="PASS" starttime="20170419 16:43:37.765"></status>
</kw>
<status endtime="20170419 16:43:37.765" status="PASS" starttime="20170419 16:43:37.764"></status>
</kw>
<status endtime="20170419 16:43:37.765" status="PASS" starttime="20170419 16:43:37.763"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170419 16:43:37.766" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170419 16:43:39.412" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170419 16:43:39.412" status="PASS" starttime="20170419 16:43:37.766"></status>
</kw>
<status endtime="20170419 16:43:39.412" status="PASS" starttime="20170419 16:43:37.754"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170419 16:43:39.430" level="INFO">${cur_time} = 2017-04-19 16:43:39:429844</msg>
<status endtime="20170419 16:43:39.430" status="PASS" starttime="20170419 16:43:39.430"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170419 16:43:39.431" level="INFO">${cur_time} = 20170419164339429844</msg>
<status endtime="20170419 16:43:39.431" status="PASS" starttime="20170419 16:43:39.430"></status>
</kw>
<status endtime="20170419 16:43:39.431" status="PASS" starttime="20170419 16:43:39.429"></status>
</kw>
<msg timestamp="20170419 16:43:39.437" level="INFO">${FFDC_TIME} = 20170419164339429844</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170419 16:43:39.449" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170419 16:43:39.449" status="PASS" starttime="20170419 16:43:39.449"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170419 16:43:39.450" level="INFO">${suite_name} = 20170419164339429844_TestsTestBasicPoweron</msg>
<status endtime="20170419 16:43:39.450" status="PASS" starttime="20170419 16:43:39.449"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170419 16:43:39.451" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170419 16:43:39.451" status="PASS" starttime="20170419 16:43:39.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170419 16:43:39.451" level="INFO">${test_name} = 20170419164339429844_PowerOnTest</msg>
<status endtime="20170419 16:43:39.451" status="PASS" starttime="20170419 16:43:39.451"></status>
</kw>
<status endtime="20170419 16:43:39.452" status="PASS" starttime="20170419 16:43:39.448"></status>
</kw>
<msg timestamp="20170419 16:43:39.471" level="INFO">${LOG_PREFIX} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170419 16:43:39.473" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.473" status="PASS" starttime="20170419 16:43:39.472"></status>
</kw>
<msg timestamp="20170419 16:43:39.476" level="INFO">${FFDC_FILE_PATH} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.478" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.478" status="PASS" starttime="20170419 16:43:39.478"></status>
</kw>
<status endtime="20170419 16:43:39.479" status="PASS" starttime="20170419 16:43:39.477"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.480" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.480" status="PASS" starttime="20170419 16:43:39.480"></status>
</kw>
<status endtime="20170419 16:43:39.480" status="PASS" starttime="20170419 16:43:39.479"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.481" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.481" status="PASS" starttime="20170419 16:43:39.481"></status>
</kw>
<status endtime="20170419 16:43:39.481" status="PASS" starttime="20170419 16:43:39.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.483" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.483" status="PASS" starttime="20170419 16:43:39.482"></status>
</kw>
<status endtime="20170419 16:43:39.483" status="PASS" starttime="20170419 16:43:39.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.484" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.484" status="PASS" starttime="20170419 16:43:39.484"></status>
</kw>
<status endtime="20170419 16:43:39.484" status="PASS" starttime="20170419 16:43:39.483"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.485" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.486" status="PASS" starttime="20170419 16:43:39.485"></status>
</kw>
<status endtime="20170419 16:43:39.486" status="PASS" starttime="20170419 16:43:39.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.487" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.487" status="PASS" starttime="20170419 16:43:39.486"></status>
</kw>
<status endtime="20170419 16:43:39.487" status="PASS" starttime="20170419 16:43:39.486"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.488" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.488" status="PASS" starttime="20170419 16:43:39.488"></status>
</kw>
<status endtime="20170419 16:43:39.488" status="PASS" starttime="20170419 16:43:39.487"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.489" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.489" status="PASS" starttime="20170419 16:43:39.489"></status>
</kw>
<status endtime="20170419 16:43:39.490" status="PASS" starttime="20170419 16:43:39.488"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.491" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.491" status="PASS" starttime="20170419 16:43:39.491"></status>
</kw>
<status endtime="20170419 16:43:39.491" status="PASS" starttime="20170419 16:43:39.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.492" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.492" status="PASS" starttime="20170419 16:43:39.492"></status>
</kw>
<status endtime="20170419 16:43:39.492" status="PASS" starttime="20170419 16:43:39.491"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.493" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.494" status="PASS" starttime="20170419 16:43:39.493"></status>
</kw>
<status endtime="20170419 16:43:39.494" status="PASS" starttime="20170419 16:43:39.493"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.495" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.495" status="PASS" starttime="20170419 16:43:39.494"></status>
</kw>
<status endtime="20170419 16:43:39.495" status="PASS" starttime="20170419 16:43:39.494"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:39.496" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170419 16:43:39.583" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:39.584" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170419 16:43:39.584" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:39.584" status="PASS" starttime="20170419 16:43:39.496"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.584" level="INFO">Length is 0</msg>
<status endtime="20170419 16:43:39.584" status="PASS" starttime="20170419 16:43:39.584"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.585" level="INFO">Length is 11</msg>
<status endtime="20170419 16:43:39.585" status="PASS" starttime="20170419 16:43:39.584"></status>
</kw>
<msg timestamp="20170419 16:43:39.585" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170419 16:43:39.585" status="PASS" starttime="20170419 16:43:39.495"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.586" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.586" status="PASS" starttime="20170419 16:43:39.586"></status>
</kw>
<status endtime="20170419 16:43:39.586" status="PASS" starttime="20170419 16:43:39.585"></status>
</kw>
<status endtime="20170419 16:43:39.586" status="PASS" starttime="20170419 16:43:39.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.588" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.588" status="PASS" starttime="20170419 16:43:39.587"></status>
</kw>
<status endtime="20170419 16:43:39.588" status="PASS" starttime="20170419 16:43:39.587"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170419 16:43:39.589" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170419 16:43:39.589" status="PASS" starttime="20170419 16:43:39.588"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.590" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.590" status="PASS" starttime="20170419 16:43:39.590"></status>
</kw>
<status endtime="20170419 16:43:39.590" status="PASS" starttime="20170419 16:43:39.589"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.591" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.591" status="PASS" starttime="20170419 16:43:39.591"></status>
</kw>
<status endtime="20170419 16:43:39.592" status="PASS" starttime="20170419 16:43:39.590"></status>
</kw>
<status endtime="20170419 16:43:39.592" status="PASS" starttime="20170419 16:43:39.589"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.593" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.593" status="PASS" starttime="20170419 16:43:39.592"></status>
</kw>
<status endtime="20170419 16:43:39.593" status="PASS" starttime="20170419 16:43:39.592"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.594" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.594" status="PASS" starttime="20170419 16:43:39.594"></status>
</kw>
<status endtime="20170419 16:43:39.594" status="PASS" starttime="20170419 16:43:39.593"></status>
</kw>
<status endtime="20170419 16:43:39.594" status="PASS" starttime="20170419 16:43:39.592"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.595" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.596" status="PASS" starttime="20170419 16:43:39.595"></status>
</kw>
<status endtime="20170419 16:43:39.596" status="PASS" starttime="20170419 16:43:39.594"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.597" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.597" status="PASS" starttime="20170419 16:43:39.596"></status>
</kw>
<status endtime="20170419 16:43:39.597" status="PASS" starttime="20170419 16:43:39.596"></status>
</kw>
<status endtime="20170419 16:43:39.597" status="PASS" starttime="20170419 16:43:39.594"></status>
</kw>
<status endtime="20170419 16:43:39.597" status="PASS" starttime="20170419 16:43:39.589"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.598" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:39.598" status="PASS" starttime="20170419 16:43:39.598"></status>
</kw>
<status endtime="20170419 16:43:39.598" status="PASS" starttime="20170419 16:43:39.597"></status>
</kw>
<status endtime="20170419 16:43:39.598" status="PASS" starttime="20170419 16:43:39.477"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170419 16:43:39.599" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170419 16:43:39.599" status="PASS" starttime="20170419 16:43:39.599"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170419 16:43:39.600" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('Ge...</msg>
<status endtime="20170419 16:43:39.601" status="PASS" starttime="20170419 16:43:39.600"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170419 16:43:39.604" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170419 16:43:39.604" status="FAIL" starttime="20170419 16:43:39.603"></status>
</kw>
<msg timestamp="20170419 16:43:39.604" level="INFO">${has_host} = False</msg>
<status endtime="20170419 16:43:39.604" status="PASS" starttime="20170419 16:43:39.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170419 16:43:39.605" status="PASS" starttime="20170419 16:43:39.605"></status>
</kw>
<status endtime="20170419 16:43:39.605" status="PASS" starttime="20170419 16:43:39.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170419 16:43:39.607" level="INFO">${port_num} = 22</msg>
<status endtime="20170419 16:43:39.607" status="PASS" starttime="20170419 16:43:39.606"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170419 16:43:39.607" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170419 16:43:39.607" status="PASS" starttime="20170419 16:43:39.607"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170419 16:43:39.608" level="INFO">${https_num} = 443</msg>
<status endtime="20170419 16:43:39.608" status="PASS" starttime="20170419 16:43:39.607"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.609" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170419 16:43:39.609" status="PASS" starttime="20170419 16:43:39.608"></status>
</kw>
<status endtime="20170419 16:43:39.609" status="PASS" starttime="20170419 16:43:39.606"></status>
</kw>
<status endtime="20170419 16:43:39.609" status="PASS" starttime="20170419 16:43:39.605"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170419 16:43:39.610" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170419 16:43:39.610" status="FAIL" starttime="20170419 16:43:39.610"></status>
</kw>
<msg timestamp="20170419 16:43:39.610" level="INFO">${has_port} = False</msg>
<status endtime="20170419 16:43:39.610" status="PASS" starttime="20170419 16:43:39.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170419 16:43:39.612" status="PASS" starttime="20170419 16:43:39.612"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170419 16:43:39.612" status="PASS" starttime="20170419 16:43:39.612"></status>
</kw>
<status endtime="20170419 16:43:39.613" status="PASS" starttime="20170419 16:43:39.611"></status>
</kw>
<status endtime="20170419 16:43:39.613" status="PASS" starttime="20170419 16:43:39.610"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170419 16:43:39.613" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170419 16:43:41.302" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170419 16:43:41.302" status="PASS" starttime="20170419 16:43:39.613"></status>
</kw>
<status endtime="20170419 16:43:41.302" status="PASS" starttime="20170419 16:43:39.602"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170419 16:43:41.303" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170419 16:43:41.303" status="PASS" starttime="20170419 16:43:41.302"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170419 16:43:41.304" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status endtime="20170419 16:43:41.304" status="PASS" starttime="20170419 16:43:41.304"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.308" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170419 16:43:41.309" status="PASS" starttime="20170419 16:43:41.304"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.312" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.312" status="PASS" starttime="20170419 16:43:41.311"></status>
</kw>
<status endtime="20170419 16:43:41.312" status="PASS" starttime="20170419 16:43:41.311"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.313" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.313" status="PASS" starttime="20170419 16:43:41.313"></status>
</kw>
<status endtime="20170419 16:43:41.313" status="PASS" starttime="20170419 16:43:41.312"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.314" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.314" status="PASS" starttime="20170419 16:43:41.314"></status>
</kw>
<status endtime="20170419 16:43:41.315" status="PASS" starttime="20170419 16:43:41.314"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.316" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.316" status="PASS" starttime="20170419 16:43:41.315"></status>
</kw>
<status endtime="20170419 16:43:41.316" status="PASS" starttime="20170419 16:43:41.315"></status>
</kw>
<status endtime="20170419 16:43:41.316" status="PASS" starttime="20170419 16:43:41.310"></status>
</kw>
<status endtime="20170419 16:43:41.316" status="PASS" starttime="20170419 16:43:41.310"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:41.316" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170419 16:43:41.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:41.363" level="INFO">${stdout} = Linux witherspoon 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 #1 Wed Apr 19 15:07:46 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170419 16:43:41.363" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:41.363" status="PASS" starttime="20170419 16:43:41.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.369" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.369" status="PASS" starttime="20170419 16:43:41.368"></status>
</kw>
<status endtime="20170419 16:43:41.369" status="PASS" starttime="20170419 16:43:41.368"></status>
</kw>
<status endtime="20170419 16:43:41.369" status="PASS" starttime="20170419 16:43:41.363"></status>
</kw>
<status endtime="20170419 16:43:41.370" status="PASS" starttime="20170419 16:43:41.309"></status>
</kw>
<status endtime="20170419 16:43:41.370" status="PASS" starttime="20170419 16:43:41.309"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.372" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.373" status="PASS" starttime="20170419 16:43:41.372"></status>
</kw>
<status endtime="20170419 16:43:41.373" status="PASS" starttime="20170419 16:43:41.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.374" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.374" status="PASS" starttime="20170419 16:43:41.373"></status>
</kw>
<status endtime="20170419 16:43:41.374" status="PASS" starttime="20170419 16:43:41.373"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.375" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.375" status="PASS" starttime="20170419 16:43:41.375"></status>
</kw>
<status endtime="20170419 16:43:41.375" status="PASS" starttime="20170419 16:43:41.374"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.376" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.376" status="PASS" starttime="20170419 16:43:41.376"></status>
</kw>
<status endtime="20170419 16:43:41.376" status="PASS" starttime="20170419 16:43:41.375"></status>
</kw>
<status endtime="20170419 16:43:41.377" status="PASS" starttime="20170419 16:43:41.371"></status>
</kw>
<status endtime="20170419 16:43:41.377" status="PASS" starttime="20170419 16:43:41.371"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:41.377" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170419 16:43:41.452" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:41.452" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170419 16:43:41.452" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:41.452" status="PASS" starttime="20170419 16:43:41.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.459" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.460" status="PASS" starttime="20170419 16:43:41.459"></status>
</kw>
<status endtime="20170419 16:43:41.460" status="PASS" starttime="20170419 16:43:41.458"></status>
</kw>
<status endtime="20170419 16:43:41.460" status="PASS" starttime="20170419 16:43:41.452"></status>
</kw>
<status endtime="20170419 16:43:41.460" status="PASS" starttime="20170419 16:43:41.370"></status>
</kw>
<status endtime="20170419 16:43:41.460" status="PASS" starttime="20170419 16:43:41.370"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.463" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.463" status="PASS" starttime="20170419 16:43:41.462"></status>
</kw>
<status endtime="20170419 16:43:41.463" status="PASS" starttime="20170419 16:43:41.462"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.464" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.465" status="PASS" starttime="20170419 16:43:41.464"></status>
</kw>
<status endtime="20170419 16:43:41.465" status="PASS" starttime="20170419 16:43:41.463"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.466" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.466" status="PASS" starttime="20170419 16:43:41.465"></status>
</kw>
<status endtime="20170419 16:43:41.466" status="PASS" starttime="20170419 16:43:41.465"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.467" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.467" status="PASS" starttime="20170419 16:43:41.467"></status>
</kw>
<status endtime="20170419 16:43:41.467" status="PASS" starttime="20170419 16:43:41.466"></status>
</kw>
<status endtime="20170419 16:43:41.467" status="PASS" starttime="20170419 16:43:41.461"></status>
</kw>
<status endtime="20170419 16:43:41.467" status="PASS" starttime="20170419 16:43:41.461"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:41.468" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170419 16:43:41.543" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:41.543" level="INFO">${stdout} =  16:43:44 up 20 min,  load average: 1.16, 1.14, 0.98</msg>
<msg timestamp="20170419 16:43:41.543" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:41.543" status="PASS" starttime="20170419 16:43:41.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.551" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.551" status="PASS" starttime="20170419 16:43:41.551"></status>
</kw>
<status endtime="20170419 16:43:41.551" status="PASS" starttime="20170419 16:43:41.550"></status>
</kw>
<status endtime="20170419 16:43:41.552" status="PASS" starttime="20170419 16:43:41.543"></status>
</kw>
<status endtime="20170419 16:43:41.552" status="PASS" starttime="20170419 16:43:41.460"></status>
</kw>
<status endtime="20170419 16:43:41.552" status="PASS" starttime="20170419 16:43:41.460"></status>
</kw>
<status endtime="20170419 16:43:41.552" status="PASS" starttime="20170419 16:43:41.309"></status>
</kw>
<status endtime="20170419 16:43:41.552" status="PASS" starttime="20170419 16:43:41.303"></status>
</kw>
<status endtime="20170419 16:43:41.552" status="PASS" starttime="20170419 16:43:41.303"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170419 16:43:41.553" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status endtime="20170419 16:43:41.553" status="PASS" starttime="20170419 16:43:41.553"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.554" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170419 16:43:41.554" status="PASS" starttime="20170419 16:43:41.553"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.557" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.557" status="PASS" starttime="20170419 16:43:41.556"></status>
</kw>
<status endtime="20170419 16:43:41.557" status="PASS" starttime="20170419 16:43:41.556"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.558" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.558" status="PASS" starttime="20170419 16:43:41.558"></status>
</kw>
<status endtime="20170419 16:43:41.558" status="PASS" starttime="20170419 16:43:41.557"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.559" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.560" status="PASS" starttime="20170419 16:43:41.559"></status>
</kw>
<status endtime="20170419 16:43:41.560" status="PASS" starttime="20170419 16:43:41.558"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.561" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.561" status="PASS" starttime="20170419 16:43:41.561"></status>
</kw>
<status endtime="20170419 16:43:41.561" status="PASS" starttime="20170419 16:43:41.560"></status>
</kw>
<status endtime="20170419 16:43:41.561" status="PASS" starttime="20170419 16:43:41.555"></status>
</kw>
<status endtime="20170419 16:43:41.561" status="PASS" starttime="20170419 16:43:41.555"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:41.562" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170419 16:43:41.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:41.660" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-41"
VERSION_ID="v1.99.4-41-g5843c10"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170419 16:43:41.660" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:41.660" status="PASS" starttime="20170419 16:43:41.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.668" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.668" status="PASS" starttime="20170419 16:43:41.667"></status>
</kw>
<status endtime="20170419 16:43:41.668" status="PASS" starttime="20170419 16:43:41.666"></status>
</kw>
<status endtime="20170419 16:43:41.669" status="PASS" starttime="20170419 16:43:41.660"></status>
</kw>
<status endtime="20170419 16:43:41.669" status="PASS" starttime="20170419 16:43:41.554"></status>
</kw>
<status endtime="20170419 16:43:41.669" status="PASS" starttime="20170419 16:43:41.554"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.672" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.672" status="PASS" starttime="20170419 16:43:41.671"></status>
</kw>
<status endtime="20170419 16:43:41.672" status="PASS" starttime="20170419 16:43:41.671"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.673" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.673" status="PASS" starttime="20170419 16:43:41.673"></status>
</kw>
<status endtime="20170419 16:43:41.673" status="PASS" starttime="20170419 16:43:41.672"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.674" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.674" status="PASS" starttime="20170419 16:43:41.674"></status>
</kw>
<status endtime="20170419 16:43:41.674" status="PASS" starttime="20170419 16:43:41.673"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.675" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.676" status="PASS" starttime="20170419 16:43:41.675"></status>
</kw>
<status endtime="20170419 16:43:41.676" status="PASS" starttime="20170419 16:43:41.675"></status>
</kw>
<status endtime="20170419 16:43:41.676" status="PASS" starttime="20170419 16:43:41.670"></status>
</kw>
<status endtime="20170419 16:43:41.676" status="PASS" starttime="20170419 16:43:41.670"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:41.676" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170419 16:43:41.735" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170419 16:43:41.735" level="INFO">${stdout} = </msg>
<msg timestamp="20170419 16:43:41.735" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170419 16:43:41.735" status="PASS" starttime="20170419 16:43:41.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.741" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.741" status="PASS" starttime="20170419 16:43:41.740"></status>
</kw>
<status endtime="20170419 16:43:41.741" status="PASS" starttime="20170419 16:43:41.740"></status>
</kw>
<status endtime="20170419 16:43:41.741" status="PASS" starttime="20170419 16:43:41.735"></status>
</kw>
<status endtime="20170419 16:43:41.741" status="PASS" starttime="20170419 16:43:41.669"></status>
</kw>
<status endtime="20170419 16:43:41.741" status="PASS" starttime="20170419 16:43:41.669"></status>
</kw>
<status endtime="20170419 16:43:41.741" status="PASS" starttime="20170419 16:43:41.554"></status>
</kw>
<status endtime="20170419 16:43:41.741" status="PASS" starttime="20170419 16:43:41.552"></status>
</kw>
<status endtime="20170419 16:43:41.742" status="PASS" starttime="20170419 16:43:41.552"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170419 16:43:41.743" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170419 16:43:41.743" status="PASS" starttime="20170419 16:43:41.742"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.743" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170419 16:43:41.743" status="PASS" starttime="20170419 16:43:41.743"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.747" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.747" status="PASS" starttime="20170419 16:43:41.746"></status>
</kw>
<status endtime="20170419 16:43:41.747" status="PASS" starttime="20170419 16:43:41.745"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.748" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.748" status="PASS" starttime="20170419 16:43:41.748"></status>
</kw>
<status endtime="20170419 16:43:41.748" status="PASS" starttime="20170419 16:43:41.747"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.749" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.750" status="PASS" starttime="20170419 16:43:41.749"></status>
</kw>
<status endtime="20170419 16:43:41.750" status="PASS" starttime="20170419 16:43:41.748"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:41.751" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:41.751" status="PASS" starttime="20170419 16:43:41.750"></status>
</kw>
<status endtime="20170419 16:43:41.751" status="PASS" starttime="20170419 16:43:41.750"></status>
</kw>
<status endtime="20170419 16:43:41.751" status="PASS" starttime="20170419 16:43:41.745"></status>
</kw>
<status endtime="20170419 16:43:41.751" status="PASS" starttime="20170419 16:43:41.745"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:41.752" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170419 16:43:43.045" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:43.046" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170419 16:43:43.046" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:43.046" status="PASS" starttime="20170419 16:43:41.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:43.052" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:43.051"></status>
</kw>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:43.051"></status>
</kw>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:43.046"></status>
</kw>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:41.744"></status>
</kw>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:41.744"></status>
</kw>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:41.743"></status>
</kw>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:41.742"></status>
</kw>
<status endtime="20170419 16:43:43.052" status="PASS" starttime="20170419 16:43:41.742"></status>
</kw>
<status endtime="20170419 16:43:43.053" status="PASS" starttime="20170419 16:43:41.303"></status>
</kw>
<status endtime="20170419 16:43:43.053" status="PASS" starttime="20170419 16:43:39.602"></status>
</kw>
<status endtime="20170419 16:43:43.053" status="PASS" starttime="20170419 16:43:39.602"></status>
</kw>
<status endtime="20170419 16:43:43.053" status="PASS" starttime="20170419 16:43:39.601"></status>
</kw>
<status endtime="20170419 16:43:43.053" status="PASS" starttime="20170419 16:43:39.601"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170419 16:43:43.056" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170419 16:43:43.056" status="FAIL" starttime="20170419 16:43:43.055"></status>
</kw>
<msg timestamp="20170419 16:43:43.056" level="INFO">${has_host} = False</msg>
<status endtime="20170419 16:43:43.056" status="PASS" starttime="20170419 16:43:43.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170419 16:43:43.057" status="PASS" starttime="20170419 16:43:43.057"></status>
</kw>
<status endtime="20170419 16:43:43.057" status="PASS" starttime="20170419 16:43:43.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170419 16:43:43.059" level="INFO">${port_num} = 22</msg>
<status endtime="20170419 16:43:43.059" status="PASS" starttime="20170419 16:43:43.058"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170419 16:43:43.059" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170419 16:43:43.059" status="PASS" starttime="20170419 16:43:43.059"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170419 16:43:43.060" level="INFO">${https_num} = 443</msg>
<status endtime="20170419 16:43:43.060" status="PASS" starttime="20170419 16:43:43.059"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170419 16:43:43.061" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170419 16:43:43.061" status="PASS" starttime="20170419 16:43:43.060"></status>
</kw>
<status endtime="20170419 16:43:43.061" status="PASS" starttime="20170419 16:43:43.058"></status>
</kw>
<status endtime="20170419 16:43:43.061" status="PASS" starttime="20170419 16:43:43.057"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170419 16:43:43.062" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170419 16:43:43.062" status="FAIL" starttime="20170419 16:43:43.061"></status>
</kw>
<msg timestamp="20170419 16:43:43.062" level="INFO">${has_port} = False</msg>
<status endtime="20170419 16:43:43.062" status="PASS" starttime="20170419 16:43:43.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170419 16:43:43.065" status="PASS" starttime="20170419 16:43:43.064"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170419 16:43:43.066" status="PASS" starttime="20170419 16:43:43.065"></status>
</kw>
<status endtime="20170419 16:43:43.066" status="PASS" starttime="20170419 16:43:43.064"></status>
</kw>
<status endtime="20170419 16:43:43.066" status="PASS" starttime="20170419 16:43:43.063"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170419 16:43:43.067" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170419 16:43:44.713" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170419 16:43:44.713" status="PASS" starttime="20170419 16:43:43.066"></status>
</kw>
<status endtime="20170419 16:43:44.714" status="PASS" starttime="20170419 16:43:43.054"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170419 16:43:44.714" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170419 16:43:44.714" status="PASS" starttime="20170419 16:43:44.714"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg timestamp="20170419 16:43:44.729" level="INFO">Running command 'echo 9.3.86.161 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:43:44.749" level="INFO">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status endtime="20170419 16:43:44.749" status="PASS" starttime="20170419 16:43:44.715"></status>
</kw>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170419 16:43:44.752" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') ]</msg>
<status endtime="20170419 16:43:44.753" status="PASS" starttime="20170419 16:43:44.751"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:44.754" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_procinfo.txt</msg>
<status endtime="20170419 16:43:44.754" status="PASS" starttime="20170419 16:43:44.753"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170419 16:43:44.756" status="PASS" starttime="20170419 16:43:44.755"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:44.756" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170419 16:43:44.855" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:44.855" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170419 16:43:44.855" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:44.855" status="PASS" starttime="20170419 16:43:44.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:44.862" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_procinfo.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:44.862" status="PASS" starttime="20170419 16:43:44.861"></status>
</kw>
<status endtime="20170419 16:43:44.862" status="PASS" starttime="20170419 16:43:44.860"></status>
</kw>
<status endtime="20170419 16:43:44.862" status="PASS" starttime="20170419 16:43:44.856"></status>
</kw>
<status endtime="20170419 16:43:44.862" status="PASS" starttime="20170419 16:43:44.754"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170419 16:43:44.866" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status endtime="20170419 16:43:44.869" status="PASS" starttime="20170419 16:43:44.862"></status>
</kw>
<status endtime="20170419 16:43:44.869" status="PASS" starttime="20170419 16:43:44.753"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:44.873" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_meminfo.txt</msg>
<status endtime="20170419 16:43:44.873" status="PASS" starttime="20170419 16:43:44.872"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170419 16:43:44.876" status="PASS" starttime="20170419 16:43:44.875"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:44.877" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170419 16:43:44.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:44.943" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          287708 kB
MemAvailable:     327896 kB
Buffers:           10368 kB
Cached:            48488 kB
SwapCached:            0 kB
Active:            96704 kB
Inac...</msg>
<msg timestamp="20170419 16:43:44.943" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:44.943" status="PASS" starttime="20170419 16:43:44.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:44.949" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_meminfo.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:44.949" status="PASS" starttime="20170419 16:43:44.948"></status>
</kw>
<status endtime="20170419 16:43:44.949" status="PASS" starttime="20170419 16:43:44.947"></status>
</kw>
<status endtime="20170419 16:43:44.949" status="PASS" starttime="20170419 16:43:44.943"></status>
</kw>
<status endtime="20170419 16:43:44.949" status="PASS" starttime="20170419 16:43:44.873"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170419 16:43:44.954" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status endtime="20170419 16:43:44.957" status="PASS" starttime="20170419 16:43:44.950"></status>
</kw>
<status endtime="20170419 16:43:44.957" status="PASS" starttime="20170419 16:43:44.870"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:44.961" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_proc_list.txt</msg>
<status endtime="20170419 16:43:44.961" status="PASS" starttime="20170419 16:43:44.960"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170419 16:43:44.963" status="PASS" starttime="20170419 16:43:44.963"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:44.964" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170419 16:43:45.217" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:45.218" level="INFO">${stdout} = Mem: 145224K used, 287708K free, 14364K shrd, 10368K buff, 48492K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.23 1.16 1.00 1/125 1177
  PID  PPID USER  ...</msg>
<msg timestamp="20170419 16:43:45.218" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:45.218" status="PASS" starttime="20170419 16:43:44.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:45.224" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_proc_list.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:45.224" status="PASS" starttime="20170419 16:43:45.223"></status>
</kw>
<status endtime="20170419 16:43:45.224" status="PASS" starttime="20170419 16:43:45.223"></status>
</kw>
<status endtime="20170419 16:43:45.224" status="PASS" starttime="20170419 16:43:45.218"></status>
</kw>
<status endtime="20170419 16:43:45.224" status="PASS" starttime="20170419 16:43:44.961"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170419 16:43:45.228" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status endtime="20170419 16:43:45.231" status="PASS" starttime="20170419 16:43:45.225"></status>
</kw>
<status endtime="20170419 16:43:45.232" status="PASS" starttime="20170419 16:43:44.958"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:45.235" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_journalctl.txt</msg>
<status endtime="20170419 16:43:45.235" status="PASS" starttime="20170419 16:43:45.234"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170419 16:43:45.238" status="PASS" starttime="20170419 16:43:45.237"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:45.238" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170419 16:43:46.381" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:46.381" level="INFO">${stdout} = -- Logs begin at Wed 2017-04-19 16:23:03 UTC, end at Wed 2017-04-19 16:43:46 UTC. --
Apr 19 16:23:03 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 19 16:23:03 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170419 16:43:46.382" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:46.382" status="PASS" starttime="20170419 16:43:45.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.389" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_journalctl.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:46.389" status="PASS" starttime="20170419 16:43:46.388"></status>
</kw>
<status endtime="20170419 16:43:46.389" status="PASS" starttime="20170419 16:43:46.386"></status>
</kw>
<status endtime="20170419 16:43:46.389" status="PASS" starttime="20170419 16:43:46.382"></status>
</kw>
<status endtime="20170419 16:43:46.389" status="PASS" starttime="20170419 16:43:45.236"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.394" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status endtime="20170419 16:43:46.397" status="PASS" starttime="20170419 16:43:46.389"></status>
</kw>
<status endtime="20170419 16:43:46.397" status="PASS" starttime="20170419 16:43:45.233"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:46.400" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_dmesg.txt</msg>
<status endtime="20170419 16:43:46.400" status="PASS" starttime="20170419 16:43:46.399"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170419 16:43:46.403" status="PASS" starttime="20170419 16:43:46.402"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170419 16:43:46.403" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170419 16:43:46.466" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170419 16:43:46.466" level="INFO">${stdout} = Machine model: Witherspoon BMC
Memory policy: Data cache writeback
SOC Rev: 04030303
On node 0 totalpages: 110592
free_area_init_node: node 0, pgdat 8071d2c4, node_mem_map 9ec19000
  Normal zone: 992 ...</msg>
<msg timestamp="20170419 16:43:46.466" level="INFO">${stderr} = </msg>
<status endtime="20170419 16:43:46.466" status="PASS" starttime="20170419 16:43:46.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.473" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_dmesg.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:46.473" status="PASS" starttime="20170419 16:43:46.472"></status>
</kw>
<status endtime="20170419 16:43:46.473" status="PASS" starttime="20170419 16:43:46.471"></status>
</kw>
<status endtime="20170419 16:43:46.473" status="PASS" starttime="20170419 16:43:46.466"></status>
</kw>
<status endtime="20170419 16:43:46.474" status="PASS" starttime="20170419 16:43:46.401"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.478" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status endtime="20170419 16:43:46.481" status="PASS" starttime="20170419 16:43:46.474"></status>
</kw>
<status endtime="20170419 16:43:46.481" status="PASS" starttime="20170419 16:43:46.398"></status>
</kw>
<status endtime="20170419 16:43:46.481" status="PASS" starttime="20170419 16:43:44.753"></status>
</kw>
<status endtime="20170419 16:43:46.482" status="PASS" starttime="20170419 16:43:44.715"></status>
</kw>
<status endtime="20170419 16:43:46.482" status="PASS" starttime="20170419 16:43:44.714"></status>
</kw>
<status endtime="20170419 16:43:46.482" status="PASS" starttime="20170419 16:43:44.714"></status>
</kw>
<status endtime="20170419 16:43:46.483" status="PASS" starttime="20170419 16:43:43.054"></status>
</kw>
<status endtime="20170419 16:43:46.483" status="PASS" starttime="20170419 16:43:43.054"></status>
</kw>
<status endtime="20170419 16:43:46.483" status="PASS" starttime="20170419 16:43:43.053"></status>
</kw>
<status endtime="20170419 16:43:46.483" status="PASS" starttime="20170419 16:43:43.053"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170419 16:43:46.488" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170419 16:43:46.489" status="PASS" starttime="20170419 16:43:46.488"></status>
</kw>
<status endtime="20170419 16:43:46.489" status="PASS" starttime="20170419 16:43:46.487"></status>
</kw>
<status endtime="20170419 16:43:46.489" status="PASS" starttime="20170419 16:43:46.486"></status>
</kw>
<status endtime="20170419 16:43:46.489" status="PASS" starttime="20170419 16:43:46.484"></status>
</kw>
<status endtime="20170419 16:43:46.489" status="PASS" starttime="20170419 16:43:46.484"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:46.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:46.494" status="PASS" starttime="20170419 16:43:46.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:46.495" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:46.495" status="PASS" starttime="20170419 16:43:46.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:46.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:46.496" status="PASS" starttime="20170419 16:43:46.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:46.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:46.496" status="PASS" starttime="20170419 16:43:46.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.674" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:46.674" status="PASS" starttime="20170419 16:43:46.497"></status>
</kw>
<msg timestamp="20170419 16:43:46.675" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:46.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:46.675" status="PASS" starttime="20170419 16:43:46.497"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:46.675" status="PASS" starttime="20170419 16:43:46.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:46.676" status="PASS" starttime="20170419 16:43:46.676"></status>
</kw>
<status endtime="20170419 16:43:46.676" status="PASS" starttime="20170419 16:43:46.491"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:46.677" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170419 16:43:46.677" status="PASS" starttime="20170419 16:43:46.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170419 16:43:46.678" status="PASS" starttime="20170419 16:43:46.677"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:46.722" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170419 16:43:46.723" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170419 16:43:46.723" status="PASS" starttime="20170419 16:43:46.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170419 16:43:46.723" status="PASS" starttime="20170419 16:43:46.723"></status>
</kw>
<msg timestamp="20170419 16:43:46.724" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170419 16:43:46.724" status="PASS" starttime="20170419 16:43:46.491"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.725" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170419 16:43:46.725" level="FAIL">404 != 200</msg>
<status endtime="20170419 16:43:46.725" status="FAIL" starttime="20170419 16:43:46.724"></status>
</kw>
<msg timestamp="20170419 16:43:46.725" level="INFO">${status} = False</msg>
<status endtime="20170419 16:43:46.725" status="PASS" starttime="20170419 16:43:46.724"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170419 16:43:46.726" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170419 16:43:46.726" status="PASS" starttime="20170419 16:43:46.725"></status>
</kw>
<status endtime="20170419 16:43:46.726" status="PASS" starttime="20170419 16:43:46.490"></status>
</kw>
<status endtime="20170419 16:43:46.726" status="PASS" starttime="20170419 16:43:46.490"></status>
</kw>
<status endtime="20170419 16:43:46.726" status="PASS" starttime="20170419 16:43:46.489"></status>
</kw>
<status endtime="20170419 16:43:46.726" status="PASS" starttime="20170419 16:43:46.489"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170419 16:43:46.729" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170419 16:43:46.729" status="FAIL" starttime="20170419 16:43:46.729"></status>
</kw>
<msg timestamp="20170419 16:43:46.729" level="INFO">${has_host} = False</msg>
<status endtime="20170419 16:43:46.729" status="PASS" starttime="20170419 16:43:46.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170419 16:43:46.730" status="PASS" starttime="20170419 16:43:46.730"></status>
</kw>
<status endtime="20170419 16:43:46.730" status="PASS" starttime="20170419 16:43:46.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170419 16:43:46.732" level="INFO">${port_num} = 22</msg>
<status endtime="20170419 16:43:46.732" status="PASS" starttime="20170419 16:43:46.732"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170419 16:43:46.732" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170419 16:43:46.732" status="PASS" starttime="20170419 16:43:46.732"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170419 16:43:46.733" level="INFO">${https_num} = 443</msg>
<status endtime="20170419 16:43:46.733" status="PASS" starttime="20170419 16:43:46.733"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.734" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170419 16:43:46.734" status="PASS" starttime="20170419 16:43:46.733"></status>
</kw>
<status endtime="20170419 16:43:46.734" status="PASS" starttime="20170419 16:43:46.731"></status>
</kw>
<status endtime="20170419 16:43:46.734" status="PASS" starttime="20170419 16:43:46.731"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170419 16:43:46.735" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170419 16:43:46.735" status="FAIL" starttime="20170419 16:43:46.735"></status>
</kw>
<msg timestamp="20170419 16:43:46.735" level="INFO">${has_port} = False</msg>
<status endtime="20170419 16:43:46.735" status="PASS" starttime="20170419 16:43:46.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170419 16:43:46.737" status="PASS" starttime="20170419 16:43:46.737"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170419 16:43:46.738" status="PASS" starttime="20170419 16:43:46.737"></status>
</kw>
<status endtime="20170419 16:43:46.738" status="PASS" starttime="20170419 16:43:46.736"></status>
</kw>
<status endtime="20170419 16:43:46.738" status="PASS" starttime="20170419 16:43:46.736"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170419 16:43:46.738" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170419 16:43:48.384" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170419 16:43:48.385" status="PASS" starttime="20170419 16:43:46.738"></status>
</kw>
<status endtime="20170419 16:43:48.385" status="PASS" starttime="20170419 16:43:46.728"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170419 16:43:48.385" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170419 16:43:48.431" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170419 16:43:48.432" level="INFO">${core_files} = </msg>
<status endtime="20170419 16:43:48.432" status="PASS" starttime="20170419 16:43:48.385"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170419 16:43:48.432" level="INFO">@{core_list} = [ ]</msg>
<status endtime="20170419 16:43:48.432" status="PASS" starttime="20170419 16:43:48.432"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170419 16:43:48.441" status="PASS" starttime="20170419 16:43:48.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170419 16:43:49.077" status="PASS" starttime="20170419 16:43:48.442"></status>
</kw>
<status endtime="20170419 16:43:49.077" status="PASS" starttime="20170419 16:43:48.441"></status>
</kw>
<status endtime="20170419 16:43:49.078" status="PASS" starttime="20170419 16:43:48.441"></status>
</kw>
<status endtime="20170419 16:43:49.078" status="PASS" starttime="20170419 16:43:48.432"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170419 16:43:49.078" status="PASS" starttime="20170419 16:43:49.078"></status>
</kw>
<status endtime="20170419 16:43:49.078" status="PASS" starttime="20170419 16:43:46.727"></status>
</kw>
<status endtime="20170419 16:43:49.078" status="PASS" starttime="20170419 16:43:46.727"></status>
</kw>
<status endtime="20170419 16:43:49.078" status="PASS" starttime="20170419 16:43:46.726"></status>
</kw>
<status endtime="20170419 16:43:49.078" status="PASS" starttime="20170419 16:43:46.726"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170419 16:43:49.081" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170419 16:43:49.082" status="FAIL" starttime="20170419 16:43:49.081"></status>
</kw>
<msg timestamp="20170419 16:43:49.082" level="INFO">${has_host} = False</msg>
<status endtime="20170419 16:43:49.082" status="PASS" starttime="20170419 16:43:49.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170419 16:43:49.083" status="PASS" starttime="20170419 16:43:49.082"></status>
</kw>
<status endtime="20170419 16:43:49.083" status="PASS" starttime="20170419 16:43:49.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170419 16:43:49.084" level="INFO">${port_num} = 22</msg>
<status endtime="20170419 16:43:49.084" status="PASS" starttime="20170419 16:43:49.084"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170419 16:43:49.085" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170419 16:43:49.085" status="PASS" starttime="20170419 16:43:49.085"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170419 16:43:49.085" level="INFO">${https_num} = 443</msg>
<status endtime="20170419 16:43:49.085" status="PASS" starttime="20170419 16:43:49.085"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170419 16:43:49.086" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170419 16:43:49.086" status="PASS" starttime="20170419 16:43:49.086"></status>
</kw>
<status endtime="20170419 16:43:49.086" status="PASS" starttime="20170419 16:43:49.084"></status>
</kw>
<status endtime="20170419 16:43:49.087" status="PASS" starttime="20170419 16:43:49.083"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170419 16:43:49.088" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170419 16:43:49.088" status="FAIL" starttime="20170419 16:43:49.087"></status>
</kw>
<msg timestamp="20170419 16:43:49.088" level="INFO">${has_port} = False</msg>
<status endtime="20170419 16:43:49.088" status="PASS" starttime="20170419 16:43:49.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170419 16:43:49.089" status="PASS" starttime="20170419 16:43:49.089"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170419 16:43:49.090" status="PASS" starttime="20170419 16:43:49.090"></status>
</kw>
<status endtime="20170419 16:43:49.090" status="PASS" starttime="20170419 16:43:49.089"></status>
</kw>
<status endtime="20170419 16:43:49.090" status="PASS" starttime="20170419 16:43:49.088"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170419 16:43:49.091" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170419 16:43:50.736" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170419 16:43:50.736" status="PASS" starttime="20170419 16:43:49.090"></status>
</kw>
<status endtime="20170419 16:43:50.736" status="PASS" starttime="20170419 16:43:49.080"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170419 16:43:50.737" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170419 16:43:50.737" status="PASS" starttime="20170419 16:43:50.737"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170419 16:43:50.738" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_elog', '/xyz/open...</msg>
<status endtime="20170419 16:43:50.738" status="PASS" starttime="20170419 16:43:50.738"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:50.739" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_sensor_list.txt</msg>
<status endtime="20170419 16:43:50.739" status="PASS" starttime="20170419 16:43:50.739"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:50.741" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:50.741" status="PASS" starttime="20170419 16:43:50.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:50.742" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:50.742" status="PASS" starttime="20170419 16:43:50.742"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:50.743" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:50.743" status="PASS" starttime="20170419 16:43:50.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:50.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:50.743" status="PASS" starttime="20170419 16:43:50.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:50.925" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:50.925" status="PASS" starttime="20170419 16:43:50.744"></status>
</kw>
<msg timestamp="20170419 16:43:50.925" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:50.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:50.925" status="PASS" starttime="20170419 16:43:50.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:50.926" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:50.926" status="PASS" starttime="20170419 16:43:50.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:50.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:50.928" status="PASS" starttime="20170419 16:43:50.926"></status>
</kw>
<status endtime="20170419 16:43:50.928" status="PASS" starttime="20170419 16:43:50.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:50.929" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170419 16:43:50.929" status="PASS" starttime="20170419 16:43:50.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170419 16:43:50.930" status="PASS" starttime="20170419 16:43:50.929"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:51.179" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170419 16:43:51.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.180" status="PASS" starttime="20170419 16:43:50.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170419 16:43:51.180" status="PASS" starttime="20170419 16:43:51.180"></status>
</kw>
<msg timestamp="20170419 16:43:51.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.181" status="PASS" starttime="20170419 16:43:50.740"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.182" status="PASS" starttime="20170419 16:43:51.181"></status>
</kw>
<msg timestamp="20170419 16:43:51.182" level="INFO">${status} = True</msg>
<status endtime="20170419 16:43:51.182" status="PASS" starttime="20170419 16:43:51.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170419 16:43:51.182" status="PASS" starttime="20170419 16:43:51.182"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170419 16:43:51.183" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:51.183" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170419 16:43:51.183" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170419 16:43:51.184" status="PASS" starttime="20170419 16:43:51.183"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.185" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_sensor_list.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:51.185" status="PASS" starttime="20170419 16:43:51.184"></status>
</kw>
<status endtime="20170419 16:43:51.185" status="PASS" starttime="20170419 16:43:51.184"></status>
</kw>
<status endtime="20170419 16:43:51.185" status="PASS" starttime="20170419 16:43:50.739"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:51.186" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_led.txt</msg>
<status endtime="20170419 16:43:51.186" status="PASS" starttime="20170419 16:43:51.186"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:51.188" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:51.188" status="PASS" starttime="20170419 16:43:51.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:51.189" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:51.189" status="PASS" starttime="20170419 16:43:51.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:51.189" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:51.189" status="PASS" starttime="20170419 16:43:51.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:51.190" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:51.190" status="PASS" starttime="20170419 16:43:51.190"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:51.366" status="PASS" starttime="20170419 16:43:51.191"></status>
</kw>
<msg timestamp="20170419 16:43:51.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:51.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.366" status="PASS" starttime="20170419 16:43:51.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.367" status="PASS" starttime="20170419 16:43:51.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.368" status="PASS" starttime="20170419 16:43:51.367"></status>
</kw>
<status endtime="20170419 16:43:51.368" status="PASS" starttime="20170419 16:43:51.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:51.369" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170419 16:43:51.369" status="PASS" starttime="20170419 16:43:51.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170419 16:43:51.370" status="PASS" starttime="20170419 16:43:51.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:51.452" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170419 16:43:51.453" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.453" status="PASS" starttime="20170419 16:43:51.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170419 16:43:51.453" status="PASS" starttime="20170419 16:43:51.453"></status>
</kw>
<msg timestamp="20170419 16:43:51.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.453" status="PASS" starttime="20170419 16:43:51.186"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.454" status="PASS" starttime="20170419 16:43:51.454"></status>
</kw>
<msg timestamp="20170419 16:43:51.455" level="INFO">${status} = True</msg>
<status endtime="20170419 16:43:51.455" status="PASS" starttime="20170419 16:43:51.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170419 16:43:51.455" status="PASS" starttime="20170419 16:43:51.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170419 16:43:51.456" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:51.456" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170419 16:43:51.456" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status endtime="20170419 16:43:51.456" status="PASS" starttime="20170419 16:43:51.455"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.457" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_led.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:51.458" status="PASS" starttime="20170419 16:43:51.457"></status>
</kw>
<status endtime="20170419 16:43:51.458" status="PASS" starttime="20170419 16:43:51.456"></status>
</kw>
<status endtime="20170419 16:43:51.458" status="PASS" starttime="20170419 16:43:51.185"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:51.458" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_inventory.txt</msg>
<status endtime="20170419 16:43:51.459" status="PASS" starttime="20170419 16:43:51.458"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:51.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:51.461" status="PASS" starttime="20170419 16:43:51.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:51.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:51.461" status="PASS" starttime="20170419 16:43:51.461"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:51.462" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:51.462" status="PASS" starttime="20170419 16:43:51.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:51.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:51.462" status="PASS" starttime="20170419 16:43:51.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.640" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:51.640" status="PASS" starttime="20170419 16:43:51.463"></status>
</kw>
<msg timestamp="20170419 16:43:51.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:51.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.640" status="PASS" starttime="20170419 16:43:51.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.641" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.641" status="PASS" starttime="20170419 16:43:51.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.641" status="PASS" starttime="20170419 16:43:51.641"></status>
</kw>
<status endtime="20170419 16:43:51.642" status="PASS" starttime="20170419 16:43:51.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:51.642" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170419 16:43:51.642" status="PASS" starttime="20170419 16:43:51.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170419 16:43:51.643" status="PASS" starttime="20170419 16:43:51.642"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:51.791" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170419 16:43:51.791" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.791" status="PASS" starttime="20170419 16:43:51.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170419 16:43:51.792" status="PASS" starttime="20170419 16:43:51.791"></status>
</kw>
<msg timestamp="20170419 16:43:51.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.792" status="PASS" starttime="20170419 16:43:51.459"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.793" status="PASS" starttime="20170419 16:43:51.793"></status>
</kw>
<msg timestamp="20170419 16:43:51.793" level="INFO">${status} = True</msg>
<status endtime="20170419 16:43:51.793" status="PASS" starttime="20170419 16:43:51.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170419 16:43:51.794" status="PASS" starttime="20170419 16:43:51.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170419 16:43:51.794" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170419 16:43:51.794" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170419 16:43:51.795" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status endtime="20170419 16:43:51.795" status="PASS" starttime="20170419 16:43:51.794"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.797" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_inventory.txt"&gt;/tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:51.797" status="PASS" starttime="20170419 16:43:51.796"></status>
</kw>
<status endtime="20170419 16:43:51.797" status="PASS" starttime="20170419 16:43:51.795"></status>
</kw>
<status endtime="20170419 16:43:51.797" status="PASS" starttime="20170419 16:43:51.458"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:51.798" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_elog.txt</msg>
<status endtime="20170419 16:43:51.798" status="PASS" starttime="20170419 16:43:51.797"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:51.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:51.800" status="PASS" starttime="20170419 16:43:51.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:51.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:51.800" status="PASS" starttime="20170419 16:43:51.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:51.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:51.801" status="PASS" starttime="20170419 16:43:51.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:51.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:51.802" status="PASS" starttime="20170419 16:43:51.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.976" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:51.976" status="PASS" starttime="20170419 16:43:51.802"></status>
</kw>
<msg timestamp="20170419 16:43:51.976" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:51.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:51.976" status="PASS" starttime="20170419 16:43:51.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.977" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.977" status="PASS" starttime="20170419 16:43:51.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:51.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:51.978" status="PASS" starttime="20170419 16:43:51.978"></status>
</kw>
<status endtime="20170419 16:43:51.978" status="PASS" starttime="20170419 16:43:51.798"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:51.979" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170419 16:43:51.979" status="PASS" starttime="20170419 16:43:51.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170419 16:43:51.980" status="PASS" starttime="20170419 16:43:51.980"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:52.023" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170419 16:43:52.023" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170419 16:43:52.023" status="PASS" starttime="20170419 16:43:51.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170419 16:43:52.024" status="PASS" starttime="20170419 16:43:52.024"></status>
</kw>
<msg timestamp="20170419 16:43:52.024" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170419 16:43:52.024" status="PASS" starttime="20170419 16:43:51.798"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170419 16:43:52.025" level="FAIL">404 != 200</msg>
<status endtime="20170419 16:43:52.026" status="FAIL" starttime="20170419 16:43:52.025"></status>
</kw>
<msg timestamp="20170419 16:43:52.026" level="INFO">${status} = False</msg>
<status endtime="20170419 16:43:52.026" status="PASS" starttime="20170419 16:43:52.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170419 16:43:52.027" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170419 16:43:52.027" status="PASS" starttime="20170419 16:43:52.026"></status>
</kw>
<status endtime="20170419 16:43:52.027" status="PASS" starttime="20170419 16:43:52.026"></status>
</kw>
<status endtime="20170419 16:43:52.027" status="PASS" starttime="20170419 16:43:51.797"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170419 16:43:52.027" level="INFO">${logpath} = /tmp/root/29589/obmc-robot/logs/20170419164339429844_TestsTestBasicPoweron/20170419164339429844_PowerOnTest/20170419164339429844_BMC_record_log.txt</msg>
<status endtime="20170419 16:43:52.028" status="PASS" starttime="20170419 16:43:52.027"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170419 16:43:52.029" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170419 16:43:52.030" status="PASS" starttime="20170419 16:43:52.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170419 16:43:52.030" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170419 16:43:52.030" status="PASS" starttime="20170419 16:43:52.030"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170419 16:43:52.031" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170419 16:43:52.031" status="PASS" starttime="20170419 16:43:52.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170419 16:43:52.031" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170419 16:43:52.031" status="PASS" starttime="20170419 16:43:52.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.227" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170419 16:43:52.227" status="PASS" starttime="20170419 16:43:52.032"></status>
</kw>
<msg timestamp="20170419 16:43:52.227" level="INFO">${status} = PASS</msg>
<msg timestamp="20170419 16:43:52.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170419 16:43:52.227" status="PASS" starttime="20170419 16:43:52.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.228" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:52.228" status="PASS" starttime="20170419 16:43:52.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170419 16:43:52.228" status="PASS" starttime="20170419 16:43:52.228"></status>
</kw>
<status endtime="20170419 16:43:52.228" status="PASS" starttime="20170419 16:43:52.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170419 16:43:52.229" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170419 16:43:52.229" status="PASS" starttime="20170419 16:43:52.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170419 16:43:52.230" status="PASS" starttime="20170419 16:43:52.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170419 16:43:52.272" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170419 16:43:52.272" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170419 16:43:52.272" status="PASS" starttime="20170419 16:43:52.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170419 16:43:52.273" status="PASS" starttime="20170419 16:43:52.272"></status>
</kw>
<msg timestamp="20170419 16:43:52.273" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170419 16:43:52.273" status="PASS" starttime="20170419 16:43:52.028"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170419 16:43:52.274" level="FAIL">404 != 200</msg>
<status endtime="20170419 16:43:52.274" status="FAIL" starttime="20170419 16:43:52.274"></status>
</kw>
<msg timestamp="20170419 16:43:52.274" level="INFO">${status} = False</msg>
<status endtime="20170419 16:43:52.274" status="PASS" starttime="20170419 16:43:52.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170419 16:43:52.275" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170419 16:43:52.275" status="PASS" starttime="20170419 16:43:52.275"></status>
</kw>
<status endtime="20170419 16:43:52.275" status="PASS" starttime="20170419 16:43:52.275"></status>
</kw>
<status endtime="20170419 16:43:52.275" status="PASS" starttime="20170419 16:43:52.027"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:50.738"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:50.738"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:50.737"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:50.737"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:49.080"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:49.079"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:49.079"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:49.078"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:39.601"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:39.600"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:39.599"></status>
</kw>
<status endtime="20170419 16:43:52.276" status="PASS" starttime="20170419 16:43:39.599"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170419 16:43:52.461" status="PASS" starttime="20170419 16:43:52.277"></status>
</kw>
<status endtime="20170419 16:43:52.461" status="PASS" starttime="20170419 16:43:39.599"></status>
</kw>
<status endtime="20170419 16:43:52.461" status="PASS" starttime="20170419 16:43:34.571"></status>
</kw>
<status endtime="20170419 16:43:52.461" status="PASS" starttime="20170419 16:43:34.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170419 16:43:52.462" status="PASS" starttime="20170419 16:43:52.462"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.463" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/root/29589/obmc-robot/logs"&gt;/tmp/root/29589/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170419 16:43:52.463" status="PASS" starttime="20170419 16:43:52.463"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.464" level="INFO" html="yes">File '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29589/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170419 16:43:52.464" status="PASS" starttime="20170419 16:43:52.464"></status>
</kw>
<msg timestamp="20170419 16:43:52.464" level="INFO">${exist} = True</msg>
<status endtime="20170419 16:43:52.464" status="PASS" starttime="20170419 16:43:52.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170419 16:43:52.465" status="PASS" starttime="20170419 16:43:52.464"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170419 16:43:52.466" level="INFO">${cur_time} = 2017-04-19 16:43:52:465452</msg>
<status endtime="20170419 16:43:52.466" status="PASS" starttime="20170419 16:43:52.465"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170419 16:43:52.466" level="INFO">${cur_time} = 20170419164352465452</msg>
<status endtime="20170419 16:43:52.466" status="PASS" starttime="20170419 16:43:52.466"></status>
</kw>
<msg timestamp="20170419 16:43:52.466" level="INFO">${cur_time} = 20170419164352465452</msg>
<status endtime="20170419 16:43:52.466" status="PASS" starttime="20170419 16:43:52.465"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.467" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/29589/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29589/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170419 16:43:52.467" status="PASS" starttime="20170419 16:43:52.467"></status>
</kw>
<status endtime="20170419 16:43:52.467" status="PASS" starttime="20170419 16:43:52.462"></status>
</kw>
<status endtime="20170419 16:43:52.468" status="PASS" starttime="20170419 16:43:34.315"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170419 16:43:52.469" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:43:52.469" status="PASS" starttime="20170419 16:43:52.469"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170419 16:43:52.470" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:43:52.470" status="PASS" starttime="20170419 16:43:52.470"></status>
</kw>
<msg timestamp="20170419 16:43:52.470" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170419 16:43:52.470" status="PASS" starttime="20170419 16:43:52.468"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:43:52.471" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170419 16:43:52.471" status="PASS" starttime="20170419 16:43:52.471"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:43:52.478" status="PASS" starttime="20170419 16:43:52.471"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:43:52.482" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:43:52.486" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:43:52.486" level="INFO">${output} = /tmp/root/29589/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170419 16:43:52.486" status="PASS" starttime="20170419 16:43:52.478"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170419 16:43:52.498" status="PASS" starttime="20170419 16:43:52.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170419 16:43:52.499" status="PASS" starttime="20170419 16:43:52.498"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:43:52.500" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170419 16:43:52.500" status="PASS" starttime="20170419 16:43:52.499"></status>
</kw>
<msg timestamp="20170419 16:43:52.500" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170419 16:43:52.500" status="PASS" starttime="20170419 16:43:52.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:43:52.501" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170419 16:43:52.501" status="PASS" starttime="20170419 16:43:52.501"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:43:52.512" status="PASS" starttime="20170419 16:43:52.502"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170419 16:43:52.515" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:43:52.524" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:43:52.524" level="INFO">${os_con_pid} = 172</msg>
<status endtime="20170419 16:43:52.524" status="PASS" starttime="20170419 16:43:52.512"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170419 16:43:52.536" status="PASS" starttime="20170419 16:43:52.526"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:43:52.537" level="INFO">${cmd_buf} = kill -9 172</msg>
<status endtime="20170419 16:43:52.537" status="PASS" starttime="20170419 16:43:52.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:43:52.545" status="PASS" starttime="20170419 16:43:52.538"></status>
</kw>
<status endtime="20170419 16:43:52.545" status="PASS" starttime="20170419 16:43:52.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.549" level="INFO">Running command 'kill -9 172 2&gt;&amp;1'.</msg>
<status endtime="20170419 16:43:52.554" status="PASS" starttime="20170419 16:43:52.546"></status>
</kw>
<msg timestamp="20170419 16:43:52.555" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:43:52.555" level="INFO">${output} = </msg>
<status endtime="20170419 16:43:52.555" status="PASS" starttime="20170419 16:43:52.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170419 16:43:52.567" status="PASS" starttime="20170419 16:43:52.559"></status>
</kw>
<status endtime="20170419 16:43:52.567" status="PASS" starttime="20170419 16:43:52.558"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170419 16:43:52.568" level="INFO">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170419 16:43:52.568" status="PASS" starttime="20170419 16:43:52.568"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170419 16:43:52.575" status="PASS" starttime="20170419 16:43:52.568"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170419 16:43:52.580" level="INFO">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170419 16:43:52.584" level="INFO">${rc} = 0</msg>
<msg timestamp="20170419 16:43:52.584" level="INFO">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status endtime="20170419 16:43:52.585" status="PASS" starttime="20170419 16:43:52.576"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170419 16:43:52.602" status="PASS" starttime="20170419 16:43:52.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170419 16:43:52.603" status="PASS" starttime="20170419 16:43:52.602"></status>
</kw>
<msg timestamp="20170419 16:43:52.603" level="INFO">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status endtime="20170419 16:43:52.603" status="PASS" starttime="20170419 16:43:52.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170419 16:43:52.604" level="INFO">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: </msg>
<status endtime="20170419 16:43:52.604" status="PASS" starttime="20170419 16:43:52.604"></status>
</kw>
<status endtime="20170419 16:43:52.604" status="PASS" starttime="20170419 16:43:34.315"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170419 16:43:52.604" status="FAIL" starttime="20170419 16:33:00.385">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170419 16:43:52.606" status="FAIL" starttime="20170419 16:33:00.357"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170419 16:43:52.609" status="FAIL" starttime="20170419 16:32:55.431"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="1" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
